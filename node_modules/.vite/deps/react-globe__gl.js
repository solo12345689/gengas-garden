import {
  Delaunator,
  Delaunay,
  array_default,
  bounds_default,
  centroid_default,
  color,
  contains_default,
  distance_default,
  extent,
  graticule10,
  interpolate_default,
  linear,
  max,
  mean,
  mercatorRaw,
  merge,
  number_default,
  orient2d,
  pointer_default,
  quantize,
  rotation_default,
  select_default,
  stereographic_default,
  sum,
  turbo_default
} from "./chunk-XVHD5FMM.js";
import {
  require_react
} from "./chunk-WQMOH32Y.js";
import {
  ACESFilmicToneMapping,
  AddEquation,
  AddOperation,
  AdditiveBlending,
  AgXToneMapping,
  AlphaFormat,
  AlwaysCompare,
  AlwaysDepth,
  AlwaysStencilFunc,
  AmbientLight,
  ArrayCamera,
  BackSide,
  BasicShadowMap,
  Box3,
  BoxGeometry,
  BufferAttribute,
  BufferGeometry,
  ByteType,
  Camera,
  CineonToneMapping,
  CircleGeometry,
  ClampToEdgeWrapping,
  Clock,
  Color,
  ColorManagement,
  Controls,
  CubeCamera,
  CubeReflectionMapping,
  CubeRefractionMapping,
  CubeTexture,
  CubeUVReflectionMapping,
  CubicBezierCurve3,
  CullFaceBack,
  CullFaceFront,
  CullFaceNone,
  Curve,
  CustomBlending,
  CylinderGeometry,
  DataArrayTexture,
  DataTexture,
  DecrementStencilOp,
  DecrementWrapStencilOp,
  DepthFormat,
  DepthStencilFormat,
  DepthTexture,
  DirectionalLight,
  DoubleSide,
  DstAlphaFactor,
  DstColorFactor,
  DynamicDrawUsage,
  EqualCompare,
  EqualDepth,
  EqualStencilFunc,
  EquirectangularReflectionMapping,
  EquirectangularRefractionMapping,
  Euler,
  EventDispatcher,
  ExtrudeGeometry,
  Float16BufferAttribute,
  Float32BufferAttribute,
  FloatType,
  FramebufferTexture,
  FrontSide,
  Frustum,
  FrustumArray,
  GreaterCompare,
  GreaterDepth,
  GreaterEqualCompare,
  GreaterEqualDepth,
  GreaterEqualStencilFunc,
  GreaterStencilFunc,
  Group,
  HalfFloatType,
  HemisphereLight,
  IncrementStencilOp,
  IncrementWrapStencilOp,
  InstancedBufferAttribute,
  InstancedBufferGeometry,
  InstancedInterleavedBuffer,
  IntType,
  InterleavedBuffer,
  InterleavedBufferAttribute,
  InvertStencilOp,
  KeepStencilOp,
  LessCompare,
  LessDepth,
  LessEqualCompare,
  LessEqualDepth,
  LessEqualStencilFunc,
  LessStencilFunc,
  LightProbe,
  Line,
  Line3,
  LineBasicMaterial,
  LineDashedMaterial,
  LineSegments,
  LinearFilter,
  LinearMipMapLinearFilter,
  LinearMipmapLinearFilter,
  LinearMipmapNearestFilter,
  LinearSRGBColorSpace,
  LinearToneMapping,
  LinearTransfer,
  MOUSE,
  Material,
  MathUtils,
  Matrix2,
  Matrix3,
  Matrix4,
  MaxEquation,
  Mesh,
  MeshBasicMaterial,
  MeshLambertMaterial,
  MeshMatcapMaterial,
  MeshNormalMaterial,
  MeshPhongMaterial,
  MeshPhysicalMaterial,
  MeshStandardMaterial,
  MeshToonMaterial,
  MinEquation,
  MirroredRepeatWrapping,
  MixOperation,
  MultiplyBlending,
  MultiplyOperation,
  NearestFilter,
  NearestMipmapLinearFilter,
  NearestMipmapNearestFilter,
  NeutralToneMapping,
  NeverCompare,
  NeverDepth,
  NeverStencilFunc,
  NoBlending,
  NoColorSpace,
  NoToneMapping,
  NormalBlending,
  NotEqualCompare,
  NotEqualDepth,
  NotEqualStencilFunc,
  Object3D,
  ObjectSpaceNormalMap,
  OneFactor,
  OneMinusDstAlphaFactor,
  OneMinusDstColorFactor,
  OneMinusSrcAlphaFactor,
  OneMinusSrcColorFactor,
  OrthographicCamera,
  PCFShadowMap,
  PerspectiveCamera,
  Plane,
  PlaneGeometry,
  PointLight,
  Points,
  PointsMaterial,
  Quaternion,
  RAD2DEG,
  RED_GREEN_RGTC2_Format,
  RED_RGTC1_Format,
  REVISION,
  RGBAFormat,
  RGBAIntegerFormat,
  RGBA_ASTC_10x10_Format,
  RGBA_ASTC_10x5_Format,
  RGBA_ASTC_10x6_Format,
  RGBA_ASTC_10x8_Format,
  RGBA_ASTC_12x10_Format,
  RGBA_ASTC_12x12_Format,
  RGBA_ASTC_4x4_Format,
  RGBA_ASTC_5x4_Format,
  RGBA_ASTC_5x5_Format,
  RGBA_ASTC_6x5_Format,
  RGBA_ASTC_6x6_Format,
  RGBA_ASTC_8x5_Format,
  RGBA_ASTC_8x6_Format,
  RGBA_ASTC_8x8_Format,
  RGBA_BPTC_Format,
  RGBA_ETC2_EAC_Format,
  RGBA_PVRTC_2BPPV1_Format,
  RGBA_PVRTC_4BPPV1_Format,
  RGBA_S3TC_DXT1_Format,
  RGBA_S3TC_DXT3_Format,
  RGBA_S3TC_DXT5_Format,
  RGBFormat,
  RGBIntegerFormat,
  RGB_ETC1_Format,
  RGB_ETC2_Format,
  RGB_PVRTC_2BPPV1_Format,
  RGB_PVRTC_4BPPV1_Format,
  RGB_S3TC_DXT1_Format,
  RGFormat,
  RGIntegerFormat,
  Ray,
  Raycaster,
  RectAreaLight,
  RedFormat,
  RedIntegerFormat,
  ReinhardToneMapping,
  RenderTarget,
  RepeatWrapping,
  ReplaceStencilOp,
  ReverseSubtractEquation,
  SIGNED_RED_GREEN_RGTC2_Format,
  SIGNED_RED_RGTC1_Format,
  SRGBColorSpace,
  SRGBTransfer,
  Scene,
  ShaderChunk,
  ShaderLib,
  ShaderMaterial,
  ShadowMaterial,
  ShapePath,
  ShortType,
  Sphere,
  SphereGeometry,
  Spherical,
  SpotLight,
  SpriteMaterial,
  SrcAlphaFactor,
  SrcAlphaSaturateFactor,
  SrcColorFactor,
  StaticDrawUsage,
  SubtractEquation,
  SubtractiveBlending,
  TOUCH,
  TangentSpaceNormalMap,
  Texture,
  TextureLoader,
  TimestampQuery,
  TriangleFanDrawMode,
  TriangleStripDrawMode,
  TrianglesDrawMode,
  TubeGeometry,
  UVMapping,
  Uint16BufferAttribute,
  Uint32BufferAttribute,
  UniformsLib,
  UniformsUtils,
  UnsignedByteType,
  UnsignedInt101111Type,
  UnsignedInt248Type,
  UnsignedInt5999Type,
  UnsignedIntType,
  UnsignedShort4444Type,
  UnsignedShort5551Type,
  UnsignedShortType,
  VSMShadowMap,
  Vector2,
  Vector3,
  Vector4,
  WebGLCoordinateSystem,
  WebGLCubeRenderTarget,
  WebGLRenderTarget,
  WebGLRenderer,
  WebGPUCoordinateSystem,
  WebXRController,
  WireframeGeometry,
  ZeroFactor,
  ZeroStencilOp,
  arrayNeedsUint32,
  createCanvasElement,
  getByteLength,
  warnOnce
} from "./chunk-UHNL4O3G.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/frame-ticker/dist/FrameTicker.js
var require_FrameTicker = __commonJS({
  "node_modules/frame-ticker/dist/FrameTicker.js"(exports, module) {
    !function(e2, t2) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define("FrameTicker", [], t2) : "object" == typeof exports ? exports.FrameTicker = t2() : e2.FrameTicker = t2();
    }(exports, function() {
      return function(e2) {
        function t2(n2) {
          if (i2[n2])
            return i2[n2].exports;
          var r2 = i2[n2] = { exports: {}, id: n2, loaded: false };
          return e2[n2].call(r2.exports, r2, r2.exports, t2), r2.loaded = true, r2.exports;
        }
        var i2 = {};
        return t2.m = e2, t2.c = i2, t2.p = "", t2(0);
      }([function(e2, t2, i2) {
        "use strict";
        var n2 = i2(1), r2 = function() {
          function e3(e4, t3, i3) {
            void 0 === e4 && (e4 = NaN), void 0 === t3 && (t3 = NaN), void 0 === i3 && (i3 = false), this._minFPS = t3, this._maxFPS = e4, this._timeScale = 1, this._currentTick = 0, this._currentTime = 0, this._tickDeltaTime = 0, this._isRunning = false, this._maxInterval = isNaN(this._minFPS) ? NaN : 1e3 / this._minFPS, this._minInterval = isNaN(this._maxFPS) ? NaN : 1e3 / this._maxFPS, this._onResume = new n2.default(), this._onPause = new n2.default(), this._onTick = new n2.default(), this._onTickOncePerFrame = new n2.default(), i3 || this.resume();
          }
          return e3.prototype.updateOnce = function(e4) {
            e4(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e3.prototype.resume = function() {
            this._isRunning || (this._isRunning = true, this._lastTimeUpdated = this.getTimer(), this._onResume.dispatch(), this.animateOnce());
          }, e3.prototype.pause = function() {
            this._isRunning && (this._isRunning = false, this._onPause.dispatch(), window.cancelAnimationFrame(this._animationFrameHandle));
          }, e3.prototype.dispose = function() {
            this.pause(), this._onResume.removeAll(), this._onPause.removeAll(), this._onTick.removeAll();
          }, Object.defineProperty(e3.prototype, "currentTick", { get: function() {
            return this._currentTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "currentTimeSeconds", { get: function() {
            return this._currentTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "tickDeltaTimeSeconds", { get: function() {
            return this._tickDeltaTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "timeScale", { get: function() {
            return this._timeScale;
          }, set: function(e4) {
            this._timeScale !== e4 && (this._timeScale = e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onResume", { get: function() {
            return this._onResume;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onPause", { get: function() {
            return this._onPause;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onTick", { get: function() {
            return this._onTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onTickOncePerFrame", { get: function() {
            return this._onTickOncePerFrame;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "isRunning", { get: function() {
            return this._isRunning;
          }, enumerable: true, configurable: true }), e3.prototype.animateOnce = function() {
            var e4 = this;
            this._animationFrameHandle = window.requestAnimationFrame(function() {
              return e4.onFrame();
            });
          }, e3.prototype.onFrame = function() {
            if (this._now = this.getTimer(), this._frameDeltaTime = this._now - this._lastTimeUpdated, isNaN(this._minInterval) || this._frameDeltaTime >= this._minInterval)
              if (isNaN(this._maxInterval))
                this.update(this._frameDeltaTime * this._timeScale, true), this._lastTimeUpdated = this._now;
              else
                for (this._interval = Math.min(this._frameDeltaTime, this._maxInterval); this._now >= this._lastTimeUpdated + this._interval; )
                  this.update(this._interval * this._timeScale, this._now <= this._lastTimeUpdated + 2 * this._maxInterval), this._lastTimeUpdated += this._interval;
            this._isRunning && this.animateOnce();
          }, e3.prototype.update = function(e4, t3) {
            void 0 === t3 && (t3 = true), this._currentTick++, this._currentTime += e4, this._tickDeltaTime = e4, this._onTick.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick), t3 && this._onTickOncePerFrame.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e3.prototype.getTimer = function() {
            return Date.now();
          }, e3;
        }();
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = r2;
      }, function(e2, t2, i2) {
        !function(t3, i3) {
          e2.exports = i3();
        }(this, function() {
          return function(e3) {
            function t3(n2) {
              if (i3[n2])
                return i3[n2].exports;
              var r2 = i3[n2] = { exports: {}, id: n2, loaded: false };
              return e3[n2].call(r2.exports, r2, r2.exports, t3), r2.loaded = true, r2.exports;
            }
            var i3 = {};
            return t3.m = e3, t3.c = i3, t3.p = "", t3(0);
          }([function(e3, t3) {
            "use strict";
            var i3 = function() {
              function e4() {
                this.functions = [];
              }
              return e4.prototype.add = function(e5) {
                return this.functions.indexOf(e5) === -1 && (this.functions.push(e5), true);
              }, e4.prototype.remove = function(e5) {
                var t4 = this.functions.indexOf(e5);
                return t4 > -1 && (this.functions.splice(t4, 1), true);
              }, e4.prototype.removeAll = function() {
                return this.functions.length > 0 && (this.functions.length = 0, true);
              }, e4.prototype.dispatch = function() {
                for (var e5 = [], t4 = 0; t4 < arguments.length; t4++)
                  e5[t4] = arguments[t4];
                var i4 = this.functions.concat();
                i4.forEach(function(t5) {
                  t5.apply(void 0, e5);
                });
              }, Object.defineProperty(e4.prototype, "numItems", { get: function() {
                return this.functions.length;
              }, enumerable: true, configurable: true }), e4;
            }();
            Object.defineProperty(t3, "__esModule", { value: true }), t3.default = i3;
          }]);
        });
      }]);
    });
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty2.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack3 = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack3 != null ? stack3 : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign3 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker3 = arrayOfTypeCheckers[i2];
          if (typeof checker3 !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker3) + " at index " + i2 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker4 = arrayOfTypeCheckers[i3];
            var checkerResult = checker4(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker3 = shapeTypes[key];
            if (typeof checker3 !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker3));
            }
            var error = checker3(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign3({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker3 = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker3 !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker3));
            }
            if (!checker3) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker3(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step3;
              if (iteratorFn !== propValue.entries) {
                while (!(step3 = iterator.next()).done) {
                  if (!isNode(step3.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step3 = iterator.next()).done) {
                  var entry = step3.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol2(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol2(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-kapsule/dist/react-kapsule.mjs
var import_react = __toESM(require_react(), 1);

// node_modules/jerrypick/dist/jerrypick.mjs
function _iterableToArrayLimit(arr, i2) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i2) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i2); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var omit = function omit2(obj, keys) {
  var keySet = new Set(keys);
  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(obj).filter(function(_ref2) {
    var _ref3 = _slicedToArray(_ref2, 1), key = _ref3[0];
    return !keySet.has(key);
  }).map(function(_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2), key = _ref5[0], val = _ref5[1];
    return _defineProperty({}, key, val);
  }))));
};

// node_modules/react-kapsule/dist/react-kapsule.mjs
function _arrayLikeToArray2(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles2(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles2(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray2(r2);
}
function _iterableToArray2(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit2(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray2(r2, e2) {
  return _arrayWithHoles2(r2) || _iterableToArrayLimit2(r2, e2) || _unsupportedIterableToArray2(r2, e2) || _nonIterableRest2();
}
function _toConsumableArray2(r2) {
  return _arrayWithoutHoles2(r2) || _iterableToArray2(r2) || _unsupportedIterableToArray2(r2) || _nonIterableSpread2();
}
function _unsupportedIterableToArray2(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray2(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray2(r2, a2) : void 0;
  }
}
function index(kapsuleComponent) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$wrapperElementTy = _ref.wrapperElementType, wrapperElementType = _ref$wrapperElementTy === void 0 ? "div" : _ref$wrapperElementTy, _ref$nodeMapper = _ref.nodeMapper, nodeMapper = _ref$nodeMapper === void 0 ? function(node) {
    return node;
  } : _ref$nodeMapper, _ref$methodNames = _ref.methodNames, methodNames = _ref$methodNames === void 0 ? [] : _ref$methodNames, _ref$initPropNames = _ref.initPropNames, initPropNames = _ref$initPropNames === void 0 ? [] : _ref$initPropNames;
  return (0, import_react.forwardRef)(function(props, ref) {
    var domEl = (0, import_react.useRef)();
    var comp = (0, import_react.useMemo)(function() {
      var configOptions = Object.fromEntries(initPropNames.filter(function(p2) {
        return props.hasOwnProperty(p2);
      }).map(function(prop) {
        return [prop, props[prop]];
      }));
      return kapsuleComponent(configOptions);
    }, []);
    useEffectOnce(function() {
      comp(nodeMapper(domEl.current));
    }, import_react.useLayoutEffect);
    useEffectOnce(function() {
      return comp._destructor instanceof Function ? comp._destructor : void 0;
    });
    var _call = (0, import_react.useCallback)(
      function(method) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return comp[method] instanceof Function ? comp[method].apply(comp, args) : void 0;
      },
      [comp]
    );
    var prevPropsRef = (0, import_react.useRef)({});
    Object.keys(omit(props, [].concat(_toConsumableArray2(methodNames), _toConsumableArray2(initPropNames)))).filter(function(p2) {
      return prevPropsRef.current[p2] !== props[p2];
    }).forEach(function(p2) {
      return _call(p2, props[p2]);
    });
    prevPropsRef.current = props;
    (0, import_react.useImperativeHandle)(ref, function() {
      return Object.fromEntries(methodNames.map(function(method) {
        return [method, function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _call.apply(void 0, [method].concat(args));
        }];
      }));
    }, [_call]);
    return import_react.default.createElement(wrapperElementType, {
      ref: domEl
    });
  });
}
function useEffectOnce(effect) {
  var useEffectFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : import_react.useEffect;
  var destroyFunc = (0, import_react.useRef)();
  var effectCalled = (0, import_react.useRef)(false);
  var renderAfterCalled = (0, import_react.useRef)(false);
  var _useState = (0, import_react.useState)(0), _useState2 = _slicedToArray2(_useState, 2);
  _useState2[0];
  var setVal = _useState2[1];
  if (effectCalled.current) {
    renderAfterCalled.current = true;
  }
  useEffectFn(function() {
    if (!effectCalled.current) {
      destroyFunc.current = effect();
      effectCalled.current = true;
    }
    setVal(function(val) {
      return val + 1;
    });
    return function() {
      if (!renderAfterCalled.current)
        return;
      if (destroyFunc.current)
        destroyFunc.current();
    };
  }, []);
}

// node_modules/three/examples/jsm/renderers/CSS2DRenderer.js
var CSS2DObject = class extends Object3D {
  /**
   * Constructs a new CSS2D object.
   *
   * @param {DOMElement} [element] - The DOM element.
   */
  constructor(element3 = document.createElement("div")) {
    super();
    this.isCSS2DObject = true;
    this.element = element3;
    this.element.style.position = "absolute";
    this.element.style.userSelect = "none";
    this.element.setAttribute("draggable", false);
    this.center = new Vector2(0.5, 0.5);
    this.addEventListener("removed", function() {
      this.traverse(function(object) {
        if (object.element instanceof object.element.ownerDocument.defaultView.Element && object.element.parentNode !== null) {
          object.element.remove();
        }
      });
    });
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.element = source.element.cloneNode(true);
    this.center = source.center;
    return this;
  }
};
var _vector = new Vector3();
var _viewMatrix = new Matrix4();
var _viewProjectionMatrix = new Matrix4();
var _a = new Vector3();
var _b = new Vector3();
var CSS2DRenderer = class {
  /**
   * Constructs a new CSS2D renderer.
   *
   * @param {CSS2DRenderer~Parameters} [parameters] - The parameters.
   */
  constructor(parameters = {}) {
    const _this = this;
    let _width, _height;
    let _widthHalf, _heightHalf;
    const cache3 = {
      objects: /* @__PURE__ */ new WeakMap()
    };
    const domElement = parameters.element !== void 0 ? parameters.element : document.createElement("div");
    domElement.style.overflow = "hidden";
    this.domElement = domElement;
    this.getSize = function() {
      return {
        width: _width,
        height: _height
      };
    };
    this.render = function(scene3, camera3) {
      if (scene3.matrixWorldAutoUpdate === true)
        scene3.updateMatrixWorld();
      if (camera3.parent === null && camera3.matrixWorldAutoUpdate === true)
        camera3.updateMatrixWorld();
      _viewMatrix.copy(camera3.matrixWorldInverse);
      _viewProjectionMatrix.multiplyMatrices(camera3.projectionMatrix, _viewMatrix);
      renderObject(scene3, scene3, camera3);
      zOrder2(scene3);
    };
    this.setSize = function(width, height) {
      _width = width;
      _height = height;
      _widthHalf = _width / 2;
      _heightHalf = _height / 2;
      domElement.style.width = width + "px";
      domElement.style.height = height + "px";
    };
    function hideObject(object) {
      if (object.isCSS2DObject)
        object.element.style.display = "none";
      for (let i2 = 0, l2 = object.children.length; i2 < l2; i2++) {
        hideObject(object.children[i2]);
      }
    }
    function renderObject(object, scene3, camera3) {
      if (object.visible === false) {
        hideObject(object);
        return;
      }
      if (object.isCSS2DObject) {
        _vector.setFromMatrixPosition(object.matrixWorld);
        _vector.applyMatrix4(_viewProjectionMatrix);
        const visible = _vector.z >= -1 && _vector.z <= 1 && object.layers.test(camera3.layers) === true;
        const element3 = object.element;
        element3.style.display = visible === true ? "" : "none";
        if (visible === true) {
          object.onBeforeRender(_this, scene3, camera3);
          element3.style.transform = "translate(" + -100 * object.center.x + "%," + -100 * object.center.y + "%)translate(" + (_vector.x * _widthHalf + _widthHalf) + "px," + (-_vector.y * _heightHalf + _heightHalf) + "px)";
          if (element3.parentNode !== domElement) {
            domElement.appendChild(element3);
          }
          object.onAfterRender(_this, scene3, camera3);
        }
        const objectData = {
          distanceToCameraSquared: getDistanceToSquared(camera3, object)
        };
        cache3.objects.set(object, objectData);
      }
      for (let i2 = 0, l2 = object.children.length; i2 < l2; i2++) {
        renderObject(object.children[i2], scene3, camera3);
      }
    }
    function getDistanceToSquared(object1, object2) {
      _a.setFromMatrixPosition(object1.matrixWorld);
      _b.setFromMatrixPosition(object2.matrixWorld);
      return _a.distanceToSquared(_b);
    }
    function filterAndFlatten(scene3) {
      const result = [];
      scene3.traverseVisible(function(object) {
        if (object.isCSS2DObject)
          result.push(object);
      });
      return result;
    }
    function zOrder2(scene3) {
      const sorted = filterAndFlatten(scene3).sort(function(a2, b) {
        if (a2.renderOrder !== b.renderOrder) {
          return b.renderOrder - a2.renderOrder;
        }
        const distanceA = cache3.objects.get(a2).distanceToCameraSquared;
        const distanceB = cache3.objects.get(b).distanceToCameraSquared;
        return distanceA - distanceB;
      });
      const zMax = sorted.length;
      for (let i2 = 0, l2 = sorted.length; i2 < l2; i2++) {
        sorted[i2].element.style.zIndex = zMax - i2;
      }
    }
  }
};

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/now.js
var now = function() {
  return root_default.Date.now();
};
var now_default = now;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string3) {
  var index6 = string3.length;
  while (index6-- && reWhitespace.test(string3.charAt(index6))) {
  }
  return index6;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string3) {
  return string3 ? string3.slice(0, trimmedEndIndex_default(string3) + 1).replace(reTrimStart, "") : string3;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/debounce.js
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax = Math.max;
var nativeMin = Math.min;
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber_default(wait) || 0;
  if (isObject_default(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber_default(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time3) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time3;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time3) {
    lastInvokeTime = time3;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time3) : result;
  }
  function remainingWait(time3) {
    var timeSinceLastCall = time3 - lastCallTime, timeSinceLastInvoke = time3 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time3) {
    var timeSinceLastCall = time3 - lastCallTime, timeSinceLastInvoke = time3 - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time3 = now_default();
    if (shouldInvoke(time3)) {
      return trailingEdge(time3);
    }
    timerId = setTimeout(timerExpired, remainingWait(time3));
  }
  function trailingEdge(time3) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time3);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now_default());
  }
  function debounced() {
    var time3 = now_default(), isInvoking = shouldInvoke(time3);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time3;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_default = debounce;

// node_modules/kapsule/dist/kapsule.mjs
function _arrayLikeToArray3(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles3(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _classCallCheck(a2, n2) {
  if (!(a2 instanceof n2))
    throw new TypeError("Cannot call a class as a function");
}
function _createClass(e2, r2, t2) {
  return Object.defineProperty(e2, "prototype", {
    writable: false
  }), e2;
}
function _iterableToArrayLimit3(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray3(r2, e2) {
  return _arrayWithHoles3(r2) || _iterableToArrayLimit3(r2, e2) || _unsupportedIterableToArray3(r2, e2) || _nonIterableRest3();
}
function _unsupportedIterableToArray3(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray3(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray3(r2, a2) : void 0;
  }
}
var Prop = _createClass(function Prop2(name, _ref) {
  var _ref$default = _ref["default"], defaultVal = _ref$default === void 0 ? null : _ref$default, _ref$triggerUpdate = _ref.triggerUpdate, triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate, _ref$onChange = _ref.onChange, onChange15 = _ref$onChange === void 0 ? function(newVal, state) {
  } : _ref$onChange;
  _classCallCheck(this, Prop2);
  this.name = name;
  this.defaultVal = defaultVal;
  this.triggerUpdate = triggerUpdate;
  this.onChange = onChange15;
});
function index2(_ref2) {
  var _ref2$stateInit = _ref2.stateInit, stateInit7 = _ref2$stateInit === void 0 ? function() {
    return {};
  } : _ref2$stateInit, _ref2$props = _ref2.props, rawProps = _ref2$props === void 0 ? {} : _ref2$props, _ref2$methods = _ref2.methods, methods = _ref2$methods === void 0 ? {} : _ref2$methods, _ref2$aliases = _ref2.aliases, aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases, _ref2$init = _ref2.init, initFn = _ref2$init === void 0 ? function() {
  } : _ref2$init, _ref2$update = _ref2.update, updateFn = _ref2$update === void 0 ? function() {
  } : _ref2$update;
  var props = Object.keys(rawProps).map(function(propName) {
    return new Prop(propName, rawProps[propName]);
  });
  return function KapsuleComp() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var classMode = !!(this instanceof KapsuleComp ? this.constructor : void 0);
    var nodeElement = classMode ? args.shift() : void 0;
    var _args$ = args[0], options = _args$ === void 0 ? {} : _args$;
    var state = Object.assign(
      {},
      stateInit7 instanceof Function ? stateInit7(options) : stateInit7,
      // Support plain objects for backwards compatibility
      {
        initialised: false
      }
    );
    var changedProps = {};
    function comp(nodeElement2) {
      initStatic(nodeElement2, options);
      digest();
      return comp;
    }
    var initStatic = function initStatic2(nodeElement2, options2) {
      initFn.call(comp, nodeElement2, state, options2);
      state.initialised = true;
    };
    var digest = debounce_default(function() {
      if (!state.initialised) {
        return;
      }
      updateFn.call(comp, state, changedProps);
      changedProps = {};
    }, 1);
    props.forEach(function(prop) {
      comp[prop.name] = getSetProp(prop);
      function getSetProp(_ref3) {
        var prop2 = _ref3.name, _ref3$triggerUpdate = _ref3.triggerUpdate, redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate, _ref3$onChange = _ref3.onChange, onChange15 = _ref3$onChange === void 0 ? function(newVal, state2) {
        } : _ref3$onChange, _ref3$defaultVal = _ref3.defaultVal, defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;
        return function(_2) {
          var curVal = state[prop2];
          if (!arguments.length) {
            return curVal;
          }
          var val = _2 === void 0 ? defaultVal : _2;
          state[prop2] = val;
          onChange15.call(comp, val, state, curVal);
          !changedProps.hasOwnProperty(prop2) && (changedProps[prop2] = curVal);
          if (redigest) {
            digest();
          }
          return comp;
        };
      }
    });
    Object.keys(methods).forEach(function(methodName) {
      comp[methodName] = function() {
        var _methods$methodName;
        for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args2[_key2] = arguments[_key2];
        }
        return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [comp, state].concat(args2));
      };
    });
    Object.entries(aliases).forEach(function(_ref4) {
      var _ref5 = _slicedToArray3(_ref4, 2), alias = _ref5[0], target = _ref5[1];
      return comp[alias] = comp[target];
    });
    comp.resetProps = function() {
      props.forEach(function(prop) {
        comp[prop.name](prop.defaultVal);
      });
      return comp;
    };
    comp.resetProps();
    state._rerender = digest;
    classMode && nodeElement && comp(nodeElement);
    return comp;
  };
}

// node_modules/@tweenjs/tween.js/dist/tween.esm.js
var Easing = Object.freeze({
  Linear: Object.freeze({
    None: function(amount) {
      return amount;
    },
    In: function(amount) {
      return amount;
    },
    Out: function(amount) {
      return amount;
    },
    InOut: function(amount) {
      return amount;
    }
  }),
  Quadratic: Object.freeze({
    In: function(amount) {
      return amount * amount;
    },
    Out: function(amount) {
      return amount * (2 - amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount;
      }
      return -0.5 * (--amount * (amount - 2) - 1);
    }
  }),
  Cubic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount + 2);
    }
  }),
  Quartic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount;
    },
    Out: function(amount) {
      return 1 - --amount * amount * amount * amount;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount;
      }
      return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
    }
  }),
  Quintic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
    }
  }),
  Sinusoidal: Object.freeze({
    In: function(amount) {
      return 1 - Math.sin((1 - amount) * Math.PI / 2);
    },
    Out: function(amount) {
      return Math.sin(amount * Math.PI / 2);
    },
    InOut: function(amount) {
      return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));
    }
  }),
  Exponential: Object.freeze({
    In: function(amount) {
      return amount === 0 ? 0 : Math.pow(1024, amount - 1);
    },
    Out: function(amount) {
      return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      if ((amount *= 2) < 1) {
        return 0.5 * Math.pow(1024, amount - 1);
      }
      return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
    }
  }),
  Circular: Object.freeze({
    In: function(amount) {
      return 1 - Math.sqrt(1 - amount * amount);
    },
    Out: function(amount) {
      return Math.sqrt(1 - --amount * amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
      }
      return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
    }
  }),
  Elastic: Object.freeze({
    In: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
    },
    Out: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      amount *= 2;
      if (amount < 1) {
        return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
      }
      return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
    }
  }),
  Back: Object.freeze({
    In: function(amount) {
      var s2 = 1.70158;
      return amount === 1 ? 1 : amount * amount * ((s2 + 1) * amount - s2);
    },
    Out: function(amount) {
      var s2 = 1.70158;
      return amount === 0 ? 0 : --amount * amount * ((s2 + 1) * amount + s2) + 1;
    },
    InOut: function(amount) {
      var s2 = 1.70158 * 1.525;
      if ((amount *= 2) < 1) {
        return 0.5 * (amount * amount * ((s2 + 1) * amount - s2));
      }
      return 0.5 * ((amount -= 2) * amount * ((s2 + 1) * amount + s2) + 2);
    }
  }),
  Bounce: Object.freeze({
    In: function(amount) {
      return 1 - Easing.Bounce.Out(1 - amount);
    },
    Out: function(amount) {
      if (amount < 1 / 2.75) {
        return 7.5625 * amount * amount;
      } else if (amount < 2 / 2.75) {
        return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
      } else if (amount < 2.5 / 2.75) {
        return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
      } else {
        return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
      }
    },
    InOut: function(amount) {
      if (amount < 0.5) {
        return Easing.Bounce.In(amount * 2) * 0.5;
      }
      return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
    }
  }),
  generatePow: function(power) {
    if (power === void 0) {
      power = 4;
    }
    power = power < Number.EPSILON ? Number.EPSILON : power;
    power = power > 1e4 ? 1e4 : power;
    return {
      In: function(amount) {
        return Math.pow(amount, power);
      },
      Out: function(amount) {
        return 1 - Math.pow(1 - amount, power);
      },
      InOut: function(amount) {
        if (amount < 0.5) {
          return Math.pow(amount * 2, power) / 2;
        }
        return (1 - Math.pow(2 - amount * 2, power)) / 2 + 0.5;
      }
    };
  }
});
var now2 = function() {
  return performance.now();
};
var Group2 = (
  /** @class */
  function() {
    function Group3() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      this._tweens = {};
      this._tweensAddedDuringUpdate = {};
      this.add.apply(this, tweens);
    }
    Group3.prototype.getAll = function() {
      var _this = this;
      return Object.keys(this._tweens).map(function(tweenId) {
        return _this._tweens[tweenId];
      });
    };
    Group3.prototype.removeAll = function() {
      this._tweens = {};
    };
    Group3.prototype.add = function() {
      var _a2;
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      for (var _b2 = 0, tweens_1 = tweens; _b2 < tweens_1.length; _b2++) {
        var tween = tweens_1[_b2];
        (_a2 = tween._group) === null || _a2 === void 0 ? void 0 : _a2.remove(tween);
        tween._group = this;
        this._tweens[tween.getId()] = tween;
        this._tweensAddedDuringUpdate[tween.getId()] = tween;
      }
    };
    Group3.prototype.remove = function() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      for (var _a2 = 0, tweens_2 = tweens; _a2 < tweens_2.length; _a2++) {
        var tween = tweens_2[_a2];
        tween._group = void 0;
        delete this._tweens[tween.getId()];
        delete this._tweensAddedDuringUpdate[tween.getId()];
      }
    };
    Group3.prototype.allStopped = function() {
      return this.getAll().every(function(tween) {
        return !tween.isPlaying();
      });
    };
    Group3.prototype.update = function(time3, preserve) {
      if (time3 === void 0) {
        time3 = now2();
      }
      if (preserve === void 0) {
        preserve = true;
      }
      var tweenIds = Object.keys(this._tweens);
      if (tweenIds.length === 0)
        return;
      while (tweenIds.length > 0) {
        this._tweensAddedDuringUpdate = {};
        for (var i2 = 0; i2 < tweenIds.length; i2++) {
          var tween = this._tweens[tweenIds[i2]];
          var autoStart = !preserve;
          if (tween && tween.update(time3, autoStart) === false && !preserve)
            this.remove(tween);
        }
        tweenIds = Object.keys(this._tweensAddedDuringUpdate);
      }
    };
    return Group3;
  }()
);
var Interpolation = {
  Linear: function(v2, k2) {
    var m2 = v2.length - 1;
    var f2 = m2 * k2;
    var i2 = Math.floor(f2);
    var fn = Interpolation.Utils.Linear;
    if (k2 < 0) {
      return fn(v2[0], v2[1], f2);
    }
    if (k2 > 1) {
      return fn(v2[m2], v2[m2 - 1], m2 - f2);
    }
    return fn(v2[i2], v2[i2 + 1 > m2 ? m2 : i2 + 1], f2 - i2);
  },
  Bezier: function(v2, k2) {
    var b = 0;
    var n2 = v2.length - 1;
    var pw = Math.pow;
    var bn = Interpolation.Utils.Bernstein;
    for (var i2 = 0; i2 <= n2; i2++) {
      b += pw(1 - k2, n2 - i2) * pw(k2, i2) * v2[i2] * bn(n2, i2);
    }
    return b;
  },
  CatmullRom: function(v2, k2) {
    var m2 = v2.length - 1;
    var f2 = m2 * k2;
    var i2 = Math.floor(f2);
    var fn = Interpolation.Utils.CatmullRom;
    if (v2[0] === v2[m2]) {
      if (k2 < 0) {
        i2 = Math.floor(f2 = m2 * (1 + k2));
      }
      return fn(v2[(i2 - 1 + m2) % m2], v2[i2], v2[(i2 + 1) % m2], v2[(i2 + 2) % m2], f2 - i2);
    } else {
      if (k2 < 0) {
        return v2[0] - (fn(v2[0], v2[0], v2[1], v2[1], -f2) - v2[0]);
      }
      if (k2 > 1) {
        return v2[m2] - (fn(v2[m2], v2[m2], v2[m2 - 1], v2[m2 - 1], f2 - m2) - v2[m2]);
      }
      return fn(v2[i2 ? i2 - 1 : 0], v2[i2], v2[m2 < i2 + 1 ? m2 : i2 + 1], v2[m2 < i2 + 2 ? m2 : i2 + 2], f2 - i2);
    }
  },
  Utils: {
    Linear: function(p0, p1, t2) {
      return (p1 - p0) * t2 + p0;
    },
    Bernstein: function(n2, i2) {
      var fc = Interpolation.Utils.Factorial;
      return fc(n2) / fc(i2) / fc(n2 - i2);
    },
    Factorial: function() {
      var a2 = [1];
      return function(n2) {
        var s2 = 1;
        if (a2[n2]) {
          return a2[n2];
        }
        for (var i2 = n2; i2 > 1; i2--) {
          s2 *= i2;
        }
        a2[n2] = s2;
        return s2;
      };
    }(),
    CatmullRom: function(p0, p1, p2, p3, t2) {
      var v0 = (p2 - p0) * 0.5;
      var v1 = (p3 - p1) * 0.5;
      var t22 = t2 * t2;
      var t3 = t2 * t22;
      return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t22 + v0 * t2 + p1;
    }
  }
};
var Sequence = (
  /** @class */
  function() {
    function Sequence2() {
    }
    Sequence2.nextId = function() {
      return Sequence2._nextId++;
    };
    Sequence2._nextId = 0;
    return Sequence2;
  }()
);
var mainGroup = new Group2();
var Tween = (
  /** @class */
  function() {
    function Tween2(object, group) {
      this._isPaused = false;
      this._pauseStart = 0;
      this._valuesStart = {};
      this._valuesEnd = {};
      this._valuesStartRepeat = {};
      this._duration = 1e3;
      this._isDynamic = false;
      this._initialRepeat = 0;
      this._repeat = 0;
      this._yoyo = false;
      this._isPlaying = false;
      this._reversed = false;
      this._delayTime = 0;
      this._startTime = 0;
      this._easingFunction = Easing.Linear.None;
      this._interpolationFunction = Interpolation.Linear;
      this._chainedTweens = [];
      this._onStartCallbackFired = false;
      this._onEveryStartCallbackFired = false;
      this._id = Sequence.nextId();
      this._isChainStopped = false;
      this._propertiesAreSetUp = false;
      this._goToEnd = false;
      this._object = object;
      if (typeof group === "object") {
        this._group = group;
        group.add(this);
      } else if (group === true) {
        this._group = mainGroup;
        mainGroup.add(this);
      }
    }
    Tween2.prototype.getId = function() {
      return this._id;
    };
    Tween2.prototype.isPlaying = function() {
      return this._isPlaying;
    };
    Tween2.prototype.isPaused = function() {
      return this._isPaused;
    };
    Tween2.prototype.getDuration = function() {
      return this._duration;
    };
    Tween2.prototype.to = function(target, duration) {
      if (duration === void 0) {
        duration = 1e3;
      }
      if (this._isPlaying)
        throw new Error("Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.");
      this._valuesEnd = target;
      this._propertiesAreSetUp = false;
      this._duration = duration < 0 ? 0 : duration;
      return this;
    };
    Tween2.prototype.duration = function(duration) {
      if (duration === void 0) {
        duration = 1e3;
      }
      this._duration = duration < 0 ? 0 : duration;
      return this;
    };
    Tween2.prototype.dynamic = function(dynamic) {
      if (dynamic === void 0) {
        dynamic = false;
      }
      this._isDynamic = dynamic;
      return this;
    };
    Tween2.prototype.start = function(time3, overrideStartingValues) {
      if (time3 === void 0) {
        time3 = now2();
      }
      if (overrideStartingValues === void 0) {
        overrideStartingValues = false;
      }
      if (this._isPlaying) {
        return this;
      }
      this._repeat = this._initialRepeat;
      if (this._reversed) {
        this._reversed = false;
        for (var property3 in this._valuesStartRepeat) {
          this._swapEndStartRepeatValues(property3);
          this._valuesStart[property3] = this._valuesStartRepeat[property3];
        }
      }
      this._isPlaying = true;
      this._isPaused = false;
      this._onStartCallbackFired = false;
      this._onEveryStartCallbackFired = false;
      this._isChainStopped = false;
      this._startTime = time3;
      this._startTime += this._delayTime;
      if (!this._propertiesAreSetUp || overrideStartingValues) {
        this._propertiesAreSetUp = true;
        if (!this._isDynamic) {
          var tmp = {};
          for (var prop in this._valuesEnd)
            tmp[prop] = this._valuesEnd[prop];
          this._valuesEnd = tmp;
        }
        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);
      }
      return this;
    };
    Tween2.prototype.startFromCurrentValues = function(time3) {
      return this.start(time3, true);
    };
    Tween2.prototype._setupProperties = function(_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {
      for (var property3 in _valuesEnd) {
        var startValue = _object[property3];
        var startValueIsArray = Array.isArray(startValue);
        var propType = startValueIsArray ? "array" : typeof startValue;
        var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property3]);
        if (propType === "undefined" || propType === "function") {
          continue;
        }
        if (isInterpolationList) {
          var endValues = _valuesEnd[property3];
          if (endValues.length === 0) {
            continue;
          }
          var temp = [startValue];
          for (var i2 = 0, l2 = endValues.length; i2 < l2; i2 += 1) {
            var value = this._handleRelativeValue(startValue, endValues[i2]);
            if (isNaN(value)) {
              isInterpolationList = false;
              console.warn("Found invalid interpolation list. Skipping.");
              break;
            }
            temp.push(value);
          }
          if (isInterpolationList) {
            _valuesEnd[property3] = temp;
          }
        }
        if ((propType === "object" || startValueIsArray) && startValue && !isInterpolationList) {
          _valuesStart[property3] = startValueIsArray ? [] : {};
          var nestedObject = startValue;
          for (var prop in nestedObject) {
            _valuesStart[property3][prop] = nestedObject[prop];
          }
          _valuesStartRepeat[property3] = startValueIsArray ? [] : {};
          var endValues = _valuesEnd[property3];
          if (!this._isDynamic) {
            var tmp = {};
            for (var prop in endValues)
              tmp[prop] = endValues[prop];
            _valuesEnd[property3] = endValues = tmp;
          }
          this._setupProperties(nestedObject, _valuesStart[property3], endValues, _valuesStartRepeat[property3], overrideStartingValues);
        } else {
          if (typeof _valuesStart[property3] === "undefined" || overrideStartingValues) {
            _valuesStart[property3] = startValue;
          }
          if (!startValueIsArray) {
            _valuesStart[property3] *= 1;
          }
          if (isInterpolationList) {
            _valuesStartRepeat[property3] = _valuesEnd[property3].slice().reverse();
          } else {
            _valuesStartRepeat[property3] = _valuesStart[property3] || 0;
          }
        }
      }
    };
    Tween2.prototype.stop = function() {
      if (!this._isChainStopped) {
        this._isChainStopped = true;
        this.stopChainedTweens();
      }
      if (!this._isPlaying) {
        return this;
      }
      this._isPlaying = false;
      this._isPaused = false;
      if (this._onStopCallback) {
        this._onStopCallback(this._object);
      }
      return this;
    };
    Tween2.prototype.end = function() {
      this._goToEnd = true;
      this.update(this._startTime + this._duration);
      return this;
    };
    Tween2.prototype.pause = function(time3) {
      if (time3 === void 0) {
        time3 = now2();
      }
      if (this._isPaused || !this._isPlaying) {
        return this;
      }
      this._isPaused = true;
      this._pauseStart = time3;
      return this;
    };
    Tween2.prototype.resume = function(time3) {
      if (time3 === void 0) {
        time3 = now2();
      }
      if (!this._isPaused || !this._isPlaying) {
        return this;
      }
      this._isPaused = false;
      this._startTime += time3 - this._pauseStart;
      this._pauseStart = 0;
      return this;
    };
    Tween2.prototype.stopChainedTweens = function() {
      for (var i2 = 0, numChainedTweens = this._chainedTweens.length; i2 < numChainedTweens; i2++) {
        this._chainedTweens[i2].stop();
      }
      return this;
    };
    Tween2.prototype.group = function(group) {
      if (!group) {
        console.warn("tween.group() without args has been removed, use group.add(tween) instead.");
        return this;
      }
      group.add(this);
      return this;
    };
    Tween2.prototype.remove = function() {
      var _a2;
      (_a2 = this._group) === null || _a2 === void 0 ? void 0 : _a2.remove(this);
      return this;
    };
    Tween2.prototype.delay = function(amount) {
      if (amount === void 0) {
        amount = 0;
      }
      this._delayTime = amount;
      return this;
    };
    Tween2.prototype.repeat = function(times) {
      if (times === void 0) {
        times = 0;
      }
      this._initialRepeat = times;
      this._repeat = times;
      return this;
    };
    Tween2.prototype.repeatDelay = function(amount) {
      this._repeatDelayTime = amount;
      return this;
    };
    Tween2.prototype.yoyo = function(yoyo) {
      if (yoyo === void 0) {
        yoyo = false;
      }
      this._yoyo = yoyo;
      return this;
    };
    Tween2.prototype.easing = function(easingFunction) {
      if (easingFunction === void 0) {
        easingFunction = Easing.Linear.None;
      }
      this._easingFunction = easingFunction;
      return this;
    };
    Tween2.prototype.interpolation = function(interpolationFunction) {
      if (interpolationFunction === void 0) {
        interpolationFunction = Interpolation.Linear;
      }
      this._interpolationFunction = interpolationFunction;
      return this;
    };
    Tween2.prototype.chain = function() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      this._chainedTweens = tweens;
      return this;
    };
    Tween2.prototype.onStart = function(callback) {
      this._onStartCallback = callback;
      return this;
    };
    Tween2.prototype.onEveryStart = function(callback) {
      this._onEveryStartCallback = callback;
      return this;
    };
    Tween2.prototype.onUpdate = function(callback) {
      this._onUpdateCallback = callback;
      return this;
    };
    Tween2.prototype.onRepeat = function(callback) {
      this._onRepeatCallback = callback;
      return this;
    };
    Tween2.prototype.onComplete = function(callback) {
      this._onCompleteCallback = callback;
      return this;
    };
    Tween2.prototype.onStop = function(callback) {
      this._onStopCallback = callback;
      return this;
    };
    Tween2.prototype.update = function(time3, autoStart) {
      var _this = this;
      var _a2;
      if (time3 === void 0) {
        time3 = now2();
      }
      if (autoStart === void 0) {
        autoStart = Tween2.autoStartOnUpdate;
      }
      if (this._isPaused)
        return true;
      var property3;
      if (!this._goToEnd && !this._isPlaying) {
        if (autoStart)
          this.start(time3, true);
        else
          return false;
      }
      this._goToEnd = false;
      if (time3 < this._startTime) {
        return true;
      }
      if (this._onStartCallbackFired === false) {
        if (this._onStartCallback) {
          this._onStartCallback(this._object);
        }
        this._onStartCallbackFired = true;
      }
      if (this._onEveryStartCallbackFired === false) {
        if (this._onEveryStartCallback) {
          this._onEveryStartCallback(this._object);
        }
        this._onEveryStartCallbackFired = true;
      }
      var elapsedTime = time3 - this._startTime;
      var durationAndDelay = this._duration + ((_a2 = this._repeatDelayTime) !== null && _a2 !== void 0 ? _a2 : this._delayTime);
      var totalTime = this._duration + this._repeat * durationAndDelay;
      var calculateElapsedPortion = function() {
        if (_this._duration === 0)
          return 1;
        if (elapsedTime > totalTime) {
          return 1;
        }
        var timesRepeated = Math.trunc(elapsedTime / durationAndDelay);
        var timeIntoCurrentRepeat = elapsedTime - timesRepeated * durationAndDelay;
        var portion = Math.min(timeIntoCurrentRepeat / _this._duration, 1);
        if (portion === 0 && elapsedTime === _this._duration) {
          return 1;
        }
        return portion;
      };
      var elapsed = calculateElapsedPortion();
      var value = this._easingFunction(elapsed);
      this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
      if (this._onUpdateCallback) {
        this._onUpdateCallback(this._object, elapsed);
      }
      if (this._duration === 0 || elapsedTime >= this._duration) {
        if (this._repeat > 0) {
          var completeCount = Math.min(Math.trunc((elapsedTime - this._duration) / durationAndDelay) + 1, this._repeat);
          if (isFinite(this._repeat)) {
            this._repeat -= completeCount;
          }
          for (property3 in this._valuesStartRepeat) {
            if (!this._yoyo && typeof this._valuesEnd[property3] === "string") {
              this._valuesStartRepeat[property3] = // eslint-disable-next-line
              // @ts-ignore FIXME?
              this._valuesStartRepeat[property3] + parseFloat(this._valuesEnd[property3]);
            }
            if (this._yoyo) {
              this._swapEndStartRepeatValues(property3);
            }
            this._valuesStart[property3] = this._valuesStartRepeat[property3];
          }
          if (this._yoyo) {
            this._reversed = !this._reversed;
          }
          this._startTime += durationAndDelay * completeCount;
          if (this._onRepeatCallback) {
            this._onRepeatCallback(this._object);
          }
          this._onEveryStartCallbackFired = false;
          return true;
        } else {
          if (this._onCompleteCallback) {
            this._onCompleteCallback(this._object);
          }
          for (var i2 = 0, numChainedTweens = this._chainedTweens.length; i2 < numChainedTweens; i2++) {
            this._chainedTweens[i2].start(this._startTime + this._duration, false);
          }
          this._isPlaying = false;
          return false;
        }
      }
      return true;
    };
    Tween2.prototype._updateProperties = function(_object, _valuesStart, _valuesEnd, value) {
      for (var property3 in _valuesEnd) {
        if (_valuesStart[property3] === void 0) {
          continue;
        }
        var start = _valuesStart[property3] || 0;
        var end = _valuesEnd[property3];
        var startIsArray = Array.isArray(_object[property3]);
        var endIsArray = Array.isArray(end);
        var isInterpolationList = !startIsArray && endIsArray;
        if (isInterpolationList) {
          _object[property3] = this._interpolationFunction(end, value);
        } else if (typeof end === "object" && end) {
          this._updateProperties(_object[property3], start, end, value);
        } else {
          end = this._handleRelativeValue(start, end);
          if (typeof end === "number") {
            _object[property3] = start + (end - start) * value;
          }
        }
      }
    };
    Tween2.prototype._handleRelativeValue = function(start, end) {
      if (typeof end !== "string") {
        return end;
      }
      if (end.charAt(0) === "+" || end.charAt(0) === "-") {
        return start + parseFloat(end);
      }
      return parseFloat(end);
    };
    Tween2.prototype._swapEndStartRepeatValues = function(property3) {
      var tmp = this._valuesStartRepeat[property3];
      var endValue = this._valuesEnd[property3];
      if (typeof endValue === "string") {
        this._valuesStartRepeat[property3] = this._valuesStartRepeat[property3] + parseFloat(endValue);
      } else {
        this._valuesStartRepeat[property3] = this._valuesEnd[property3];
      }
      this._valuesEnd[property3] = tmp;
    };
    Tween2.autoStartOnUpdate = false;
    return Tween2;
  }()
);
var nextId = Sequence.nextId;
var TWEEN = mainGroup;
var getAll = TWEEN.getAll.bind(TWEEN);
var removeAll = TWEEN.removeAll.bind(TWEEN);
var add = TWEEN.add.bind(TWEEN);
var remove = TWEEN.remove.bind(TWEEN);
var update = TWEEN.update.bind(TWEEN);

// node_modules/d3-octree/src/add.js
function add_default(d2) {
  const x2 = +this._x.call(null, d2), y2 = +this._y.call(null, d2), z2 = +this._z.call(null, d2);
  return add2(this.cover(x2, y2, z2), x2, y2, z2, d2);
}
function add2(tree, x2, y2, z2, d2) {
  if (isNaN(x2) || isNaN(y2) || isNaN(z2))
    return tree;
  var parent, node = tree._root, leaf = { data: d2 }, x0 = tree._x0, y0 = tree._y0, z0 = tree._z0, x1 = tree._x1, y1 = tree._y1, z1 = tree._z1, xm, ym, zm, xp, yp, zp, right, bottom, deep, i2, j2;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right = x2 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y2 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (deep = z2 >= (zm = (z0 + z1) / 2))
      z0 = zm;
    else
      z1 = zm;
    if (parent = node, !(node = node[i2 = deep << 2 | bottom << 1 | right]))
      return parent[i2] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  zp = +tree._z.call(null, node.data);
  if (x2 === xp && y2 === yp && z2 === zp)
    return leaf.next = node, parent ? parent[i2] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i2] = new Array(8) : tree._root = new Array(8);
    if (right = x2 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y2 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (deep = z2 >= (zm = (z0 + z1) / 2))
      z0 = zm;
    else
      z1 = zm;
  } while ((i2 = deep << 2 | bottom << 1 | right) === (j2 = (zp >= zm) << 2 | (yp >= ym) << 1 | xp >= xm));
  return parent[j2] = node, parent[i2] = leaf, tree;
}
function addAll(data) {
  if (!Array.isArray(data))
    data = Array.from(data);
  const n2 = data.length;
  const xz = new Float64Array(n2);
  const yz = new Float64Array(n2);
  const zz = new Float64Array(n2);
  let x0 = Infinity, y0 = Infinity, z0 = Infinity, x1 = -Infinity, y1 = -Infinity, z1 = -Infinity;
  for (let i2 = 0, d2, x2, y2, z2; i2 < n2; ++i2) {
    if (isNaN(x2 = +this._x.call(null, d2 = data[i2])) || isNaN(y2 = +this._y.call(null, d2)) || isNaN(z2 = +this._z.call(null, d2)))
      continue;
    xz[i2] = x2;
    yz[i2] = y2;
    zz[i2] = z2;
    if (x2 < x0)
      x0 = x2;
    if (x2 > x1)
      x1 = x2;
    if (y2 < y0)
      y0 = y2;
    if (y2 > y1)
      y1 = y2;
    if (z2 < z0)
      z0 = z2;
    if (z2 > z1)
      z1 = z2;
  }
  if (x0 > x1 || y0 > y1 || z0 > z1)
    return this;
  this.cover(x0, y0, z0).cover(x1, y1, z1);
  for (let i2 = 0; i2 < n2; ++i2) {
    add2(this, xz[i2], yz[i2], zz[i2], data[i2]);
  }
  return this;
}

// node_modules/d3-octree/src/cover.js
function cover_default(x2, y2, z2) {
  if (isNaN(x2 = +x2) || isNaN(y2 = +y2) || isNaN(z2 = +z2))
    return this;
  var x0 = this._x0, y0 = this._y0, z0 = this._z0, x1 = this._x1, y1 = this._y1, z1 = this._z1;
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x2)) + 1;
    y1 = (y0 = Math.floor(y2)) + 1;
    z1 = (z0 = Math.floor(z2)) + 1;
  } else {
    var t2 = x1 - x0 || 1, node = this._root, parent, i2;
    while (x0 > x2 || x2 >= x1 || y0 > y2 || y2 >= y1 || z0 > z2 || z2 >= z1) {
      i2 = (z2 < z0) << 2 | (y2 < y0) << 1 | x2 < x0;
      parent = new Array(8), parent[i2] = node, node = parent, t2 *= 2;
      switch (i2) {
        case 0:
          x1 = x0 + t2, y1 = y0 + t2, z1 = z0 + t2;
          break;
        case 1:
          x0 = x1 - t2, y1 = y0 + t2, z1 = z0 + t2;
          break;
        case 2:
          x1 = x0 + t2, y0 = y1 - t2, z1 = z0 + t2;
          break;
        case 3:
          x0 = x1 - t2, y0 = y1 - t2, z1 = z0 + t2;
          break;
        case 4:
          x1 = x0 + t2, y1 = y0 + t2, z0 = z1 - t2;
          break;
        case 5:
          x0 = x1 - t2, y1 = y0 + t2, z0 = z1 - t2;
          break;
        case 6:
          x1 = x0 + t2, y0 = y1 - t2, z0 = z1 - t2;
          break;
        case 7:
          x0 = x1 - t2, y0 = y1 - t2, z0 = z1 - t2;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x0;
  this._y0 = y0;
  this._z0 = z0;
  this._x1 = x1;
  this._y1 = y1;
  this._z1 = z1;
  return this;
}

// node_modules/d3-octree/src/data.js
function data_default() {
  var data = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data.push(node.data);
      while (node = node.next);
  });
  return data;
}

// node_modules/d3-octree/src/extent.js
function extent_default(_2) {
  return arguments.length ? this.cover(+_2[0][0], +_2[0][1], +_2[0][2]).cover(+_2[1][0], +_2[1][1], +_2[1][2]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]];
}

// node_modules/d3-octree/src/octant.js
function octant_default(node, x0, y0, z0, x1, y1, z1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.z0 = z0;
  this.x1 = x1;
  this.y1 = y1;
  this.z1 = z1;
}

// node_modules/d3-octree/src/find.js
function find_default(x2, y2, z2, radius) {
  var data, x0 = this._x0, y0 = this._y0, z0 = this._z0, x1, y1, z1, x22, y22, z22, x3 = this._x1, y3 = this._y1, z3 = this._z1, octs = [], node = this._root, q2, i2;
  if (node)
    octs.push(new octant_default(node, x0, y0, z0, x3, y3, z3));
  if (radius == null)
    radius = Infinity;
  else {
    x0 = x2 - radius, y0 = y2 - radius, z0 = z2 - radius;
    x3 = x2 + radius, y3 = y2 + radius, z3 = z2 + radius;
    radius *= radius;
  }
  while (q2 = octs.pop()) {
    if (!(node = q2.node) || (x1 = q2.x0) > x3 || (y1 = q2.y0) > y3 || (z1 = q2.z0) > z3 || (x22 = q2.x1) < x0 || (y22 = q2.y1) < y0 || (z22 = q2.z1) < z0)
      continue;
    if (node.length) {
      var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2, zm = (z1 + z22) / 2;
      octs.push(
        new octant_default(node[7], xm, ym, zm, x22, y22, z22),
        new octant_default(node[6], x1, ym, zm, xm, y22, z22),
        new octant_default(node[5], xm, y1, zm, x22, ym, z22),
        new octant_default(node[4], x1, y1, zm, xm, ym, z22),
        new octant_default(node[3], xm, ym, z1, x22, y22, zm),
        new octant_default(node[2], x1, ym, z1, xm, y22, zm),
        new octant_default(node[1], xm, y1, z1, x22, ym, zm),
        new octant_default(node[0], x1, y1, z1, xm, ym, zm)
      );
      if (i2 = (z2 >= zm) << 2 | (y2 >= ym) << 1 | x2 >= xm) {
        q2 = octs[octs.length - 1];
        octs[octs.length - 1] = octs[octs.length - 1 - i2];
        octs[octs.length - 1 - i2] = q2;
      }
    } else {
      var dx = x2 - +this._x.call(null, node.data), dy = y2 - +this._y.call(null, node.data), dz = z2 - +this._z.call(null, node.data), d2 = dx * dx + dy * dy + dz * dz;
      if (d2 < radius) {
        var d3 = Math.sqrt(radius = d2);
        x0 = x2 - d3, y0 = y2 - d3, z0 = z2 - d3;
        x3 = x2 + d3, y3 = y2 + d3, z3 = z2 + d3;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/d3-octree/src/findAll.js
var distance = (x1, y1, z1, x2, y2, z2) => Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2 + (z1 - z2) ** 2);
function findAllWithinRadius(x2, y2, z2, radius) {
  const result = [];
  const xMin = x2 - radius;
  const yMin = y2 - radius;
  const zMin = z2 - radius;
  const xMax = x2 + radius;
  const yMax = y2 + radius;
  const zMax = z2 + radius;
  this.visit((node, x1, y1, z1, x22, y22, z22) => {
    if (!node.length) {
      do {
        const d2 = node.data;
        if (distance(x2, y2, z2, this._x(d2), this._y(d2), this._z(d2)) <= radius) {
          result.push(d2);
        }
      } while (node = node.next);
    }
    return x1 > xMax || y1 > yMax || z1 > zMax || x22 < xMin || y22 < yMin || z22 < zMin;
  });
  return result;
}

// node_modules/d3-octree/src/remove.js
function remove_default(d2) {
  if (isNaN(x2 = +this._x.call(null, d2)) || isNaN(y2 = +this._y.call(null, d2)) || isNaN(z2 = +this._z.call(null, d2)))
    return this;
  var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, z0 = this._z0, x1 = this._x1, y1 = this._y1, z1 = this._z1, x2, y2, z2, xm, ym, zm, right, bottom, deep, i2, j2;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right = x2 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y2 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (deep = z2 >= (zm = (z0 + z1) / 2))
        z0 = zm;
      else
        z1 = zm;
      if (!(parent = node, node = node[i2 = deep << 2 | bottom << 1 | right]))
        return this;
      if (!node.length)
        break;
      if (parent[i2 + 1 & 7] || parent[i2 + 2 & 7] || parent[i2 + 3 & 7] || parent[i2 + 4 & 7] || parent[i2 + 5 & 7] || parent[i2 + 6 & 7] || parent[i2 + 7 & 7])
        retainer = parent, j2 = i2;
    }
  while (node.data !== d2)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i2] = next : delete parent[i2];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7]) && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j2] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll2(data) {
  for (var i2 = 0, n2 = data.length; i2 < n2; ++i2)
    this.remove(data[i2]);
  return this;
}

// node_modules/d3-octree/src/root.js
function root_default2() {
  return this._root;
}

// node_modules/d3-octree/src/size.js
function size_default() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/d3-octree/src/visit.js
function visit_default(callback) {
  var octs = [], q2, node = this._root, child, x0, y0, z0, x1, y1, z1;
  if (node)
    octs.push(new octant_default(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
  while (q2 = octs.pop()) {
    if (!callback(node = q2.node, x0 = q2.x0, y0 = q2.y0, z0 = q2.z0, x1 = q2.x1, y1 = q2.y1, z1 = q2.z1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;
      if (child = node[7])
        octs.push(new octant_default(child, xm, ym, zm, x1, y1, z1));
      if (child = node[6])
        octs.push(new octant_default(child, x0, ym, zm, xm, y1, z1));
      if (child = node[5])
        octs.push(new octant_default(child, xm, y0, zm, x1, ym, z1));
      if (child = node[4])
        octs.push(new octant_default(child, x0, y0, zm, xm, ym, z1));
      if (child = node[3])
        octs.push(new octant_default(child, xm, ym, z0, x1, y1, zm));
      if (child = node[2])
        octs.push(new octant_default(child, x0, ym, z0, xm, y1, zm));
      if (child = node[1])
        octs.push(new octant_default(child, xm, y0, z0, x1, ym, zm));
      if (child = node[0])
        octs.push(new octant_default(child, x0, y0, z0, xm, ym, zm));
    }
  }
  return this;
}

// node_modules/d3-octree/src/visitAfter.js
function visitAfter_default(callback) {
  var octs = [], next = [], q2;
  if (this._root)
    octs.push(new octant_default(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
  while (q2 = octs.pop()) {
    var node = q2.node;
    if (node.length) {
      var child, x0 = q2.x0, y0 = q2.y0, z0 = q2.z0, x1 = q2.x1, y1 = q2.y1, z1 = q2.z1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;
      if (child = node[0])
        octs.push(new octant_default(child, x0, y0, z0, xm, ym, zm));
      if (child = node[1])
        octs.push(new octant_default(child, xm, y0, z0, x1, ym, zm));
      if (child = node[2])
        octs.push(new octant_default(child, x0, ym, z0, xm, y1, zm));
      if (child = node[3])
        octs.push(new octant_default(child, xm, ym, z0, x1, y1, zm));
      if (child = node[4])
        octs.push(new octant_default(child, x0, y0, zm, xm, ym, z1));
      if (child = node[5])
        octs.push(new octant_default(child, xm, y0, zm, x1, ym, z1));
      if (child = node[6])
        octs.push(new octant_default(child, x0, ym, zm, xm, y1, z1));
      if (child = node[7])
        octs.push(new octant_default(child, xm, ym, zm, x1, y1, z1));
    }
    next.push(q2);
  }
  while (q2 = next.pop()) {
    callback(q2.node, q2.x0, q2.y0, q2.z0, q2.x1, q2.y1, q2.z1);
  }
  return this;
}

// node_modules/d3-octree/src/x.js
function defaultX(d2) {
  return d2[0];
}
function x_default(_2) {
  return arguments.length ? (this._x = _2, this) : this._x;
}

// node_modules/d3-octree/src/y.js
function defaultY(d2) {
  return d2[1];
}
function y_default(_2) {
  return arguments.length ? (this._y = _2, this) : this._y;
}

// node_modules/d3-octree/src/z.js
function defaultZ(d2) {
  return d2[2];
}
function z_default(_2) {
  return arguments.length ? (this._z = _2, this) : this._z;
}

// node_modules/d3-octree/src/octree.js
function octree(nodes, x2, y2, z2) {
  var tree = new Octree(x2 == null ? defaultX : x2, y2 == null ? defaultY : y2, z2 == null ? defaultZ : z2, NaN, NaN, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Octree(x2, y2, z2, x0, y0, z0, x1, y1, z1) {
  this._x = x2;
  this._y = y2;
  this._z = z2;
  this._x0 = x0;
  this._y0 = y0;
  this._z0 = z0;
  this._x1 = x1;
  this._y1 = y1;
  this._z1 = z1;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy = { data: leaf.data }, next = copy;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy;
}
var treeProto = octree.prototype = Octree.prototype;
treeProto.copy = function() {
  var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1), node = this._root, nodes, child;
  if (!node)
    return copy;
  if (!node.length)
    return copy._root = leaf_copy(node), copy;
  nodes = [{ source: node, target: copy._root = new Array(8) }];
  while (node = nodes.pop()) {
    for (var i2 = 0; i2 < 8; ++i2) {
      if (child = node.source[i2]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i2] = new Array(8) });
        else
          node.target[i2] = leaf_copy(child);
      }
    }
  }
  return copy;
};
treeProto.add = add_default;
treeProto.addAll = addAll;
treeProto.cover = cover_default;
treeProto.data = data_default;
treeProto.extent = extent_default;
treeProto.find = find_default;
treeProto.findAllWithinRadius = findAllWithinRadius;
treeProto.remove = remove_default;
treeProto.removeAll = removeAll2;
treeProto.root = root_default2;
treeProto.size = size_default;
treeProto.visit = visit_default;
treeProto.visitAfter = visitAfter_default;
treeProto.x = x_default;
treeProto.y = y_default;
treeProto.z = z_default;

// node_modules/three-slippy-map-globe/dist/three-slippy-map-globe.mjs
function _arrayLikeToArray4(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles4(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles3(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray4(r2);
}
function _assertClassBrand(e2, t2, n2) {
  if ("function" == typeof e2 ? e2 === t2 : e2.has(t2))
    return arguments.length < 3 ? t2 : n2;
  throw new TypeError("Private element is not present on this object");
}
function _assertThisInitialized(e2) {
  if (void 0 === e2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}
function _callSuper(t2, o2, e2) {
  return o2 = _getPrototypeOf(o2), _possibleConstructorReturn(t2, _isNativeReflectConstruct() ? Reflect.construct(o2, [], _getPrototypeOf(t2).constructor) : o2.apply(t2, e2));
}
function _checkPrivateRedeclaration(e2, t2) {
  if (t2.has(e2))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classCallCheck2(a2, n2) {
  if (!(a2 instanceof n2))
    throw new TypeError("Cannot call a class as a function");
}
function _classPrivateFieldGet2(s2, a2) {
  return s2.get(_assertClassBrand(s2, a2));
}
function _classPrivateFieldInitSpec(e2, t2, a2) {
  _checkPrivateRedeclaration(e2, t2), t2.set(e2, a2);
}
function _classPrivateFieldSet2(s2, a2, r2) {
  return s2.set(_assertClassBrand(s2, a2), r2), r2;
}
function _classPrivateMethodInitSpec(e2, a2) {
  _checkPrivateRedeclaration(e2, a2), a2.add(e2);
}
function _defineProperties(e2, r2) {
  for (var t2 = 0; t2 < r2.length; t2++) {
    var o2 = r2[t2];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, _toPropertyKey2(o2.key), o2);
  }
}
function _createClass2(e2, r2, t2) {
  return _defineProperties(e2.prototype, r2), Object.defineProperty(e2, "prototype", {
    writable: false
  }), e2;
}
function _defineProperty2(e2, r2, t2) {
  return (r2 = _toPropertyKey2(r2)) in e2 ? Object.defineProperty(e2, r2, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r2] = t2, e2;
}
function _getPrototypeOf(t2) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf(t2);
}
function _inherits(t2, e2) {
  if ("function" != typeof e2 && null !== e2)
    throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e2 && e2.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e2 && _setPrototypeOf(t2, e2);
}
function _isNativeReflectConstruct() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct = function() {
    return !!t2;
  })();
}
function _iterableToArray3(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit4(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(t2, e2) {
  if (e2 && ("object" == typeof e2 || "function" == typeof e2))
    return e2;
  if (void 0 !== e2)
    throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t2);
}
function _setPrototypeOf(t2, e2) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, _setPrototypeOf(t2, e2);
}
function _slicedToArray4(r2, e2) {
  return _arrayWithHoles4(r2) || _iterableToArrayLimit4(r2, e2) || _unsupportedIterableToArray4(r2, e2) || _nonIterableRest4();
}
function _toConsumableArray3(r2) {
  return _arrayWithoutHoles3(r2) || _iterableToArray3(r2) || _unsupportedIterableToArray4(r2) || _nonIterableSpread3();
}
function _toPrimitive2(t2, r2) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2);
    if ("object" != typeof i2)
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t2);
}
function _toPropertyKey2(t2) {
  var i2 = _toPrimitive2(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray4(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray4(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray4(r2, a2) : void 0;
  }
}
var _materialDispose = function materialDispose(material) {
  if (material instanceof Array) {
    material.forEach(_materialDispose);
  } else {
    if (material.map) {
      material.map.dispose();
    }
    material.dispose();
  }
};
var _deallocate = function deallocate(obj) {
  if (obj.geometry) {
    obj.geometry.dispose();
  }
  if (obj.material) {
    _materialDispose(obj.material);
  }
  if (obj.texture) {
    obj.texture.dispose();
  }
  if (obj.children) {
    obj.children.forEach(_deallocate);
  }
};
var emptyObject = function emptyObject2(obj) {
  if (obj && obj.children)
    while (obj.children.length) {
      var childObj = obj.children[0];
      obj.remove(childObj);
      _deallocate(childObj);
    }
};
function polar2Cartesian(lat, lng, r2) {
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return {
    x: r2 * Math.sin(phi) * Math.cos(theta),
    y: r2 * Math.cos(phi),
    z: r2 * Math.sin(phi) * Math.sin(theta)
  };
}
function cartesian2Polar(_ref) {
  var x2 = _ref.x, y2 = _ref.y, z2 = _ref.z;
  var r2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
  var phi = Math.acos(y2 / r2);
  var theta = Math.atan2(z2, x2);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    // keep within [-180, 180] boundaries
    r: r2
  };
}
function deg2Rad(deg) {
  return deg * Math.PI / 180;
}
var yMercatorScale = function yMercatorScale2(y2) {
  return 1 - (mercatorRaw(0, (0.5 - y2) * Math.PI)[1] / Math.PI + 1) / 2;
};
var yMercatorScaleClamped = function yMercatorScaleClamped2(y2) {
  return Math.max(0, Math.min(1, yMercatorScale(y2)));
};
var yMercatorScaleInvert = function yMercatorScaleInvert2(y2) {
  return 0.5 - mercatorRaw.invert(0, (2 * (1 - y2) - 1) * Math.PI)[1] / Math.PI;
};
var convertMercatorUV = function convertMercatorUV2(uvs) {
  var y0 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var y1 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  var offsetScale = linear().domain([1, 0]).range([y0, y1]).clamp(true);
  var revOffsetScale = linear().domain([yMercatorScaleClamped(y0), yMercatorScaleClamped(y1)]).range([1, 0]).clamp(true);
  var scale2 = function scale3(v2) {
    return revOffsetScale(yMercatorScaleClamped(offsetScale(v2)));
  };
  var arr = uvs.array;
  for (var i2 = 0, len = arr.length; i2 < len; i2 += 2) {
    arr[i2 + 1] = scale2(arr[i2 + 1]);
  }
  uvs.needsUpdate = true;
};
var findTileXY = function findTileXY2(level, isMercator, lng, lat) {
  var gridSize = Math.pow(2, level);
  var x2 = Math.max(0, Math.min(gridSize - 1, Math.floor((lng + 180) * gridSize / 360)));
  var relY = (90 - lat) / 180;
  isMercator && (relY = Math.max(0, Math.min(1, yMercatorScale(relY))));
  var y2 = Math.floor(relY * gridSize);
  return [x2, y2];
};
var genTilesCoords = function genTilesCoords2(level, isMercator) {
  var x0 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var y0 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
  var _x1 = arguments.length > 4 ? arguments[4] : void 0;
  var _y1 = arguments.length > 5 ? arguments[5] : void 0;
  var tiles = [];
  var gridSize = Math.pow(2, level);
  var tileLngLen = 360 / gridSize;
  var regTileLatLen = 180 / gridSize;
  var x1 = _x1 === void 0 ? gridSize - 1 : _x1;
  var y1 = _y1 === void 0 ? gridSize - 1 : _y1;
  for (var x2 = x0, maxX = Math.min(gridSize - 1, x1); x2 <= maxX; x2++) {
    for (var y2 = y0, maxY = Math.min(gridSize - 1, y1); y2 <= maxY; y2++) {
      var reproY = y2, tileLatLen = regTileLatLen;
      if (isMercator) {
        reproY = y2 === 0 ? y2 : yMercatorScaleInvert(y2 / gridSize) * gridSize;
        var reproYEnd = y2 + 1 === gridSize ? y2 + 1 : yMercatorScaleInvert((y2 + 1) / gridSize) * gridSize;
        tileLatLen = (reproYEnd - reproY) * 180 / gridSize;
      }
      var lng = -180 + (x2 + 0.5) * tileLngLen;
      var lat = 90 - (reproY * 180 / gridSize + tileLatLen / 2);
      var latLen = tileLatLen;
      tiles.push({
        x: x2,
        y: y2,
        lng,
        lat,
        latLen
      });
    }
  }
  return tiles;
};
var MAX_LEVEL_TO_RENDER_ALL_TILES = 6;
var MAX_LEVEL_TO_BUILD_LOOKUP_OCTREE = 7;
var TILE_SEARCH_RADIUS_CAMERA_DISTANCE = 3;
var TILE_SEARCH_RADIUS_SURFACE_DISTANCE = 90;
var _radius = /* @__PURE__ */ new WeakMap();
var _isMercator = /* @__PURE__ */ new WeakMap();
var _tileUrl = /* @__PURE__ */ new WeakMap();
var _level = /* @__PURE__ */ new WeakMap();
var _tilesMeta = /* @__PURE__ */ new WeakMap();
var _isInView = /* @__PURE__ */ new WeakMap();
var _camera = /* @__PURE__ */ new WeakMap();
var _innerBackLayer = /* @__PURE__ */ new WeakMap();
var _ThreeSlippyMapGlobe_brand = /* @__PURE__ */ new WeakSet();
var ThreeSlippyMapGlobe = function(_Group) {
  function ThreeSlippyMapGlobe2(radius) {
    var _this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, tileUrl = _ref.tileUrl, _ref$minLevel = _ref.minLevel, minLevel = _ref$minLevel === void 0 ? 0 : _ref$minLevel, _ref$maxLevel = _ref.maxLevel, maxLevel = _ref$maxLevel === void 0 ? 17 : _ref$maxLevel, _ref$mercatorProjecti = _ref.mercatorProjection, mercatorProjection = _ref$mercatorProjecti === void 0 ? true : _ref$mercatorProjecti;
    _classCallCheck2(this, ThreeSlippyMapGlobe2);
    _this = _callSuper(this, ThreeSlippyMapGlobe2);
    _classPrivateMethodInitSpec(_this, _ThreeSlippyMapGlobe_brand);
    _classPrivateFieldInitSpec(_this, _radius, void 0);
    _classPrivateFieldInitSpec(_this, _isMercator, void 0);
    _classPrivateFieldInitSpec(_this, _tileUrl, void 0);
    _classPrivateFieldInitSpec(_this, _level, void 0);
    _classPrivateFieldInitSpec(_this, _tilesMeta, {});
    _classPrivateFieldInitSpec(_this, _isInView, void 0);
    _classPrivateFieldInitSpec(_this, _camera, void 0);
    _classPrivateFieldInitSpec(_this, _innerBackLayer, void 0);
    _defineProperty2(_this, "minLevel", void 0);
    _defineProperty2(_this, "maxLevel", void 0);
    _defineProperty2(_this, "thresholds", _toConsumableArray3(new Array(30)).map(function(_2, idx) {
      return 8 / Math.pow(2, idx);
    }));
    _defineProperty2(_this, "curvatureResolution", 5);
    _defineProperty2(_this, "tileMargin", 0);
    _defineProperty2(_this, "clearTiles", function() {
      Object.values(_classPrivateFieldGet2(_tilesMeta, _this)).forEach(function(l2) {
        l2.forEach(function(d2) {
          if (d2.obj) {
            _this.remove(d2.obj);
            emptyObject(d2.obj);
            delete d2.obj;
          }
        });
      });
      _classPrivateFieldSet2(_tilesMeta, _this, {});
    });
    _classPrivateFieldSet2(_radius, _this, radius);
    _this.tileUrl = tileUrl;
    _classPrivateFieldSet2(_isMercator, _this, mercatorProjection);
    _this.minLevel = minLevel;
    _this.maxLevel = maxLevel;
    _this.level = 0;
    _this.add(_classPrivateFieldSet2(_innerBackLayer, _this, new Mesh(new SphereGeometry(_classPrivateFieldGet2(_radius, _this) * 0.99, 180, 90), new MeshBasicMaterial({
      color: 0
    }))));
    _classPrivateFieldGet2(_innerBackLayer, _this).visible = false;
    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffset = true;
    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffsetUnits = 3;
    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffsetFactor = 1;
    return _this;
  }
  _inherits(ThreeSlippyMapGlobe2, _Group);
  return _createClass2(ThreeSlippyMapGlobe2, [{
    key: "tileUrl",
    get: (
      // Public attributes
      function get() {
        return _classPrivateFieldGet2(_tileUrl, this);
      }
    ),
    set: function set(tileUrl) {
      _classPrivateFieldSet2(_tileUrl, this, tileUrl);
      this.updatePov(_classPrivateFieldGet2(_camera, this));
    }
  }, {
    key: "level",
    get: function get() {
      return _classPrivateFieldGet2(_level, this);
    },
    set: function set(level) {
      var _this2 = this;
      if (!_classPrivateFieldGet2(_tilesMeta, this)[level])
        _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _buildMetaLevel).call(this, level);
      var prevLevel = _classPrivateFieldGet2(_level, this);
      _classPrivateFieldSet2(_level, this, level);
      if (level === prevLevel || prevLevel === void 0)
        return;
      _classPrivateFieldGet2(_innerBackLayer, this).visible = level > 0;
      _classPrivateFieldGet2(_tilesMeta, this)[level].forEach(function(d2) {
        return d2.obj && (d2.obj.material.depthWrite = true);
      });
      prevLevel < level && _classPrivateFieldGet2(_tilesMeta, this)[prevLevel].forEach(function(d2) {
        return d2.obj && (d2.obj.material.depthWrite = false);
      });
      if (prevLevel > level) {
        for (var l2 = level + 1; l2 <= prevLevel; l2++) {
          _classPrivateFieldGet2(_tilesMeta, this)[l2] && _classPrivateFieldGet2(_tilesMeta, this)[l2].forEach(function(d2) {
            if (d2.obj) {
              _this2.remove(d2.obj);
              emptyObject(d2.obj);
              delete d2.obj;
            }
          });
        }
      }
      _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _fetchNeededTiles).call(this);
    }
    // Public methods
  }, {
    key: "updatePov",
    value: function updatePov(camera3) {
      var _this3 = this;
      if (!camera3 || !(camera3 instanceof Camera))
        return;
      _classPrivateFieldSet2(_camera, this, camera3);
      var frustum;
      _classPrivateFieldSet2(_isInView, this, function(d2) {
        if (!d2.hullPnts) {
          var lngLen = 360 / Math.pow(2, _this3.level);
          var lng = d2.lng, lat = d2.lat, latLen = d2.latLen;
          var lng0 = lng - lngLen / 2;
          var lng1 = lng + lngLen / 2;
          var lat0 = lat - latLen / 2;
          var lat1 = lat + latLen / 2;
          d2.hullPnts = [[lat, lng], [lat0, lng0], [lat1, lng0], [lat0, lng1], [lat1, lng1]].map(function(_ref2) {
            var _ref3 = _slicedToArray4(_ref2, 2), lat2 = _ref3[0], lng2 = _ref3[1];
            return polar2Cartesian(lat2, lng2, _classPrivateFieldGet2(_radius, _this3));
          }).map(function(_ref4) {
            var x2 = _ref4.x, y2 = _ref4.y, z2 = _ref4.z;
            return new Vector3(x2, y2, z2);
          });
        }
        if (!frustum) {
          frustum = new Frustum();
          camera3.updateMatrix();
          camera3.updateMatrixWorld();
          frustum.setFromProjectionMatrix(new Matrix4().multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse));
        }
        return d2.hullPnts.some(function(pos) {
          return frustum.containsPoint(pos.clone().applyMatrix4(_this3.matrixWorld));
        });
      });
      if (this.tileUrl) {
        var pov = camera3.position.clone();
        var distToGlobeCenter = pov.distanceTo(this.getWorldPosition(new Vector3()));
        var cameraDistance = (distToGlobeCenter - _classPrivateFieldGet2(_radius, this)) / _classPrivateFieldGet2(_radius, this);
        var idx = this.thresholds.findIndex(function(t2) {
          return t2 && t2 <= cameraDistance;
        });
        this.level = Math.min(this.maxLevel, Math.max(this.minLevel, idx < 0 ? this.thresholds.length : idx));
        _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _fetchNeededTiles).call(this);
      }
    }
  }]);
}(Group);
function _buildMetaLevel(level) {
  var _this4 = this;
  if (level > MAX_LEVEL_TO_BUILD_LOOKUP_OCTREE) {
    _classPrivateFieldGet2(_tilesMeta, this)[level] = [];
    return;
  }
  var levelMeta = _classPrivateFieldGet2(_tilesMeta, this)[level] = genTilesCoords(level, _classPrivateFieldGet2(_isMercator, this));
  levelMeta.forEach(function(d2) {
    return d2.centroid = polar2Cartesian(d2.lat, d2.lng, _classPrivateFieldGet2(_radius, _this4));
  });
  levelMeta.octree = octree().x(function(d2) {
    return d2.centroid.x;
  }).y(function(d2) {
    return d2.centroid.y;
  }).z(function(d2) {
    return d2.centroid.z;
  }).addAll(levelMeta);
}
function _fetchNeededTiles() {
  var _this5 = this;
  if (!this.tileUrl || this.level === void 0 || !_classPrivateFieldGet2(_tilesMeta, this).hasOwnProperty(this.level))
    return;
  if (!_classPrivateFieldGet2(_isInView, this) && this.level > MAX_LEVEL_TO_RENDER_ALL_TILES)
    return;
  var tiles = _classPrivateFieldGet2(_tilesMeta, this)[this.level];
  if (_classPrivateFieldGet2(_camera, this)) {
    var povPos = this.worldToLocal(_classPrivateFieldGet2(_camera, this).position.clone());
    if (tiles.octree) {
      var _tiles$octree;
      var _povPos = this.worldToLocal(_classPrivateFieldGet2(_camera, this).position.clone());
      var searchRadius = (_povPos.length() - _classPrivateFieldGet2(_radius, this)) * TILE_SEARCH_RADIUS_CAMERA_DISTANCE;
      tiles = (_tiles$octree = tiles.octree).findAllWithinRadius.apply(_tiles$octree, _toConsumableArray3(_povPos).concat([searchRadius]));
    } else {
      var povCoords = cartesian2Polar(povPos);
      var searchRadiusLat = (povCoords.r / _classPrivateFieldGet2(_radius, this) - 1) * TILE_SEARCH_RADIUS_SURFACE_DISTANCE;
      var searchRadiusLng = searchRadiusLat / Math.cos(deg2Rad(povCoords.lat));
      var lngRange = [povCoords.lng - searchRadiusLng, povCoords.lng + searchRadiusLng];
      var latRange = [povCoords.lat + searchRadiusLat, povCoords.lat - searchRadiusLat];
      var _findTileXY = findTileXY(this.level, _classPrivateFieldGet2(_isMercator, this), lngRange[0], latRange[0]), _findTileXY2 = _slicedToArray4(_findTileXY, 2), x0 = _findTileXY2[0], y0 = _findTileXY2[1];
      var _findTileXY3 = findTileXY(this.level, _classPrivateFieldGet2(_isMercator, this), lngRange[1], latRange[1]), _findTileXY4 = _slicedToArray4(_findTileXY3, 2), x1 = _findTileXY4[0], y1 = _findTileXY4[1];
      !tiles.record && (tiles.record = {});
      var r2 = tiles.record;
      if (!r2.hasOwnProperty("".concat(Math.round((x0 + x1) / 2), "_").concat(Math.round((y0 + y1) / 2)))) {
        tiles = genTilesCoords(this.level, _classPrivateFieldGet2(_isMercator, this), x0, y0, x1, y1).map(function(d2) {
          var k3 = "".concat(d2.x, "_").concat(d2.y);
          if (r2.hasOwnProperty(k3))
            return r2[k3];
          r2[k3] = d2;
          tiles.push(d2);
          return d2;
        });
      } else {
        var selTiles = [];
        for (var x2 = x0; x2 <= x1; x2++) {
          for (var y2 = y0; y2 <= y1; y2++) {
            var k2 = "".concat(x2, "_").concat(y2);
            if (!r2.hasOwnProperty(k2)) {
              r2[k2] = genTilesCoords(this.level, _classPrivateFieldGet2(_isMercator, this), x2, y2, x2, y2)[0];
              tiles.push(r2[k2]);
            }
            selTiles.push(r2[k2]);
          }
        }
        tiles = selTiles;
      }
    }
  }
  tiles.filter(function(d2) {
    return !d2.obj;
  }).filter(_classPrivateFieldGet2(_isInView, this) || function() {
    return true;
  }).forEach(function(d2) {
    var x3 = d2.x, y3 = d2.y, lng = d2.lng, lat = d2.lat, latLen = d2.latLen;
    var lngLen = 360 / Math.pow(2, _this5.level);
    if (!d2.obj) {
      var width = lngLen * (1 - _this5.tileMargin);
      var height = latLen * (1 - _this5.tileMargin);
      var rotLng = deg2Rad(lng);
      var rotLat = deg2Rad(-lat);
      var tile = new Mesh(new SphereGeometry(_classPrivateFieldGet2(_radius, _this5), Math.ceil(width / _this5.curvatureResolution), Math.ceil(height / _this5.curvatureResolution), deg2Rad(90 - width / 2) + rotLng, deg2Rad(width), deg2Rad(90 - height / 2) + rotLat, deg2Rad(height)), new MeshLambertMaterial());
      if (_classPrivateFieldGet2(_isMercator, _this5)) {
        var _map = [lat + latLen / 2, lat - latLen / 2].map(function(lat2) {
          return 0.5 - lat2 / 180;
        }), _map2 = _slicedToArray4(_map, 2), _y = _map2[0], _y2 = _map2[1];
        convertMercatorUV(tile.geometry.attributes.uv, _y, _y2);
      }
      d2.obj = tile;
    }
    if (!d2.loading) {
      d2.loading = true;
      new TextureLoader().load(_this5.tileUrl(x3, y3, _this5.level), function(texture3) {
        var tile2 = d2.obj;
        if (tile2) {
          texture3.colorSpace = SRGBColorSpace;
          tile2.material.map = texture3;
          tile2.material.color = null;
          tile2.material.needsUpdate = true;
          _this5.add(tile2);
        }
        d2.loading = false;
      });
    }
  });
}

// node_modules/earcut/src/earcut.js
function earcut(data, holeIndices, dim = 2) {
  const hasHoles = holeIndices && holeIndices.length;
  const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
  let outerNode = linkedList(data, 0, outerLen, dim, true);
  const triangles = [];
  if (!outerNode || outerNode.next === outerNode.prev)
    return triangles;
  let minX, minY, invSize;
  if (hasHoles)
    outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
  if (data.length > 80 * dim) {
    minX = data[0];
    minY = data[1];
    let maxX = minX;
    let maxY = minY;
    for (let i2 = dim; i2 < outerLen; i2 += dim) {
      const x2 = data[i2];
      const y2 = data[i2 + 1];
      if (x2 < minX)
        minX = x2;
      if (y2 < minY)
        minY = y2;
      if (x2 > maxX)
        maxX = x2;
      if (y2 > maxY)
        maxY = y2;
    }
    invSize = Math.max(maxX - minX, maxY - minY);
    invSize = invSize !== 0 ? 32767 / invSize : 0;
  }
  earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
  return triangles;
}
function linkedList(data, start, end, dim, clockwise) {
  let last;
  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (let i2 = start; i2 < end; i2 += dim)
      last = insertNode(i2 / dim | 0, data[i2], data[i2 + 1], last);
  } else {
    for (let i2 = end - dim; i2 >= start; i2 -= dim)
      last = insertNode(i2 / dim | 0, data[i2], data[i2 + 1], last);
  }
  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }
  return last;
}
function filterPoints(start, end) {
  if (!start)
    return start;
  if (!end)
    end = start;
  let p2 = start, again;
  do {
    again = false;
    if (!p2.steiner && (equals(p2, p2.next) || area(p2.prev, p2, p2.next) === 0)) {
      removeNode(p2);
      p2 = end = p2.prev;
      if (p2 === p2.next)
        break;
      again = true;
    } else {
      p2 = p2.next;
    }
  } while (again || p2 !== end);
  return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass3) {
  if (!ear)
    return;
  if (!pass3 && invSize)
    indexCurve(ear, minX, minY, invSize);
  let stop = ear;
  while (ear.prev !== ear.next) {
    const prev = ear.prev;
    const next = ear.next;
    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      triangles.push(prev.i, ear.i, next.i);
      removeNode(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass3) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass3 === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass3 === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar(ear) {
  const a2 = ear.prev, b = ear, c2 = ear.next;
  if (area(a2, b, c2) >= 0)
    return false;
  const ax = a2.x, bx = b.x, cx = c2.x, ay = a2.y, by = b.y, cy = c2.y;
  const x0 = Math.min(ax, bx, cx), y0 = Math.min(ay, by, cy), x1 = Math.max(ax, bx, cx), y1 = Math.max(ay, by, cy);
  let p2 = c2.next;
  while (p2 !== a2) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0)
      return false;
    p2 = p2.next;
  }
  return true;
}
function isEarHashed(ear, minX, minY, invSize) {
  const a2 = ear.prev, b = ear, c2 = ear.next;
  if (area(a2, b, c2) >= 0)
    return false;
  const ax = a2.x, bx = b.x, cx = c2.x, ay = a2.y, by = b.y, cy = c2.y;
  const x0 = Math.min(ax, bx, cx), y0 = Math.min(ay, by, cy), x1 = Math.max(ax, bx, cx), y1 = Math.max(ay, by, cy);
  const minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
  let p2 = ear.prevZ, n2 = ear.nextZ;
  while (p2 && p2.z >= minZ && n2 && n2.z <= maxZ) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a2 && p2 !== c2 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0)
      return false;
    p2 = p2.prevZ;
    if (n2.x >= x0 && n2.x <= x1 && n2.y >= y0 && n2.y <= y1 && n2 !== a2 && n2 !== c2 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0)
      return false;
    n2 = n2.nextZ;
  }
  while (p2 && p2.z >= minZ) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a2 && p2 !== c2 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0)
      return false;
    p2 = p2.prevZ;
  }
  while (n2 && n2.z <= maxZ) {
    if (n2.x >= x0 && n2.x <= x1 && n2.y >= y0 && n2.y <= y1 && n2 !== a2 && n2 !== c2 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0)
      return false;
    n2 = n2.nextZ;
  }
  return true;
}
function cureLocalIntersections(start, triangles) {
  let p2 = start;
  do {
    const a2 = p2.prev, b = p2.next.next;
    if (!equals(a2, b) && intersects(a2, p2, p2.next, b) && locallyInside(a2, b) && locallyInside(b, a2)) {
      triangles.push(a2.i, p2.i, b.i);
      removeNode(p2);
      removeNode(p2.next);
      p2 = start = b;
    }
    p2 = p2.next;
  } while (p2 !== start);
  return filterPoints(p2);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  let a2 = start;
  do {
    let b = a2.next.next;
    while (b !== a2.prev) {
      if (a2.i !== b.i && isValidDiagonal(a2, b)) {
        let c2 = splitPolygon(a2, b);
        a2 = filterPoints(a2, a2.next);
        c2 = filterPoints(c2, c2.next);
        earcutLinked(a2, triangles, dim, minX, minY, invSize, 0);
        earcutLinked(c2, triangles, dim, minX, minY, invSize, 0);
        return;
      }
      b = b.next;
    }
    a2 = a2.next;
  } while (a2 !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
  const queue = [];
  for (let i2 = 0, len = holeIndices.length; i2 < len; i2++) {
    const start = holeIndices[i2] * dim;
    const end = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
    const list = linkedList(data, start, end, dim, false);
    if (list === list.next)
      list.steiner = true;
    queue.push(getLeftmost(list));
  }
  queue.sort(compareXYSlope);
  for (let i2 = 0; i2 < queue.length; i2++) {
    outerNode = eliminateHole(queue[i2], outerNode);
  }
  return outerNode;
}
function compareXYSlope(a2, b) {
  let result = a2.x - b.x;
  if (result === 0) {
    result = a2.y - b.y;
    if (result === 0) {
      const aSlope = (a2.next.y - a2.y) / (a2.next.x - a2.x);
      const bSlope = (b.next.y - b.y) / (b.next.x - b.x);
      result = aSlope - bSlope;
    }
  }
  return result;
}
function eliminateHole(hole, outerNode) {
  const bridge = findHoleBridge(hole, outerNode);
  if (!bridge) {
    return outerNode;
  }
  const bridgeReverse = splitPolygon(bridge, hole);
  filterPoints(bridgeReverse, bridgeReverse.next);
  return filterPoints(bridge, bridge.next);
}
function findHoleBridge(hole, outerNode) {
  let p2 = outerNode;
  const hx = hole.x;
  const hy = hole.y;
  let qx = -Infinity;
  let m2;
  if (equals(hole, p2))
    return p2;
  do {
    if (equals(hole, p2.next))
      return p2.next;
    else if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
      const x2 = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
      if (x2 <= hx && x2 > qx) {
        qx = x2;
        m2 = p2.x < p2.next.x ? p2 : p2.next;
        if (x2 === hx)
          return m2;
      }
    }
    p2 = p2.next;
  } while (p2 !== outerNode);
  if (!m2)
    return null;
  const stop = m2;
  const mx = m2.x;
  const my = m2.y;
  let tanMin = Infinity;
  p2 = m2;
  do {
    if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
      const tan3 = Math.abs(hy - p2.y) / (hx - p2.x);
      if (locallyInside(p2, hole) && (tan3 < tanMin || tan3 === tanMin && (p2.x > m2.x || p2.x === m2.x && sectorContainsSector(m2, p2)))) {
        m2 = p2;
        tanMin = tan3;
      }
    }
    p2 = p2.next;
  } while (p2 !== stop);
  return m2;
}
function sectorContainsSector(m2, p2) {
  return area(m2.prev, m2, p2.prev) < 0 && area(p2.next, m2, m2.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
  let p2 = start;
  do {
    if (p2.z === 0)
      p2.z = zOrder(p2.x, p2.y, minX, minY, invSize);
    p2.prevZ = p2.prev;
    p2.nextZ = p2.next;
    p2 = p2.next;
  } while (p2 !== start);
  p2.prevZ.nextZ = null;
  p2.prevZ = null;
  sortLinked(p2);
}
function sortLinked(list) {
  let numMerges;
  let inSize = 1;
  do {
    let p2 = list;
    let e2;
    list = null;
    let tail = null;
    numMerges = 0;
    while (p2) {
      numMerges++;
      let q2 = p2;
      let pSize = 0;
      for (let i2 = 0; i2 < inSize; i2++) {
        pSize++;
        q2 = q2.nextZ;
        if (!q2)
          break;
      }
      let qSize = inSize;
      while (pSize > 0 || qSize > 0 && q2) {
        if (pSize !== 0 && (qSize === 0 || !q2 || p2.z <= q2.z)) {
          e2 = p2;
          p2 = p2.nextZ;
          pSize--;
        } else {
          e2 = q2;
          q2 = q2.nextZ;
          qSize--;
        }
        if (tail)
          tail.nextZ = e2;
        else
          list = e2;
        e2.prevZ = tail;
        tail = e2;
      }
      p2 = q2;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder(x2, y2, minX, minY, invSize) {
  x2 = (x2 - minX) * invSize | 0;
  y2 = (y2 - minY) * invSize | 0;
  x2 = (x2 | x2 << 8) & 16711935;
  x2 = (x2 | x2 << 4) & 252645135;
  x2 = (x2 | x2 << 2) & 858993459;
  x2 = (x2 | x2 << 1) & 1431655765;
  y2 = (y2 | y2 << 8) & 16711935;
  y2 = (y2 | y2 << 4) & 252645135;
  y2 = (y2 | y2 << 2) & 858993459;
  y2 = (y2 | y2 << 1) & 1431655765;
  return x2 | y2 << 1;
}
function getLeftmost(start) {
  let p2 = start, leftmost = start;
  do {
    if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y)
      leftmost = p2;
    p2 = p2.next;
  } while (p2 !== start);
  return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
  return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
}
function pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, px, py) {
  return !(ax === px && ay === py) && pointInTriangle(ax, ay, bx, by, cx, cy, px, py);
}
function isValidDiagonal(a2, b) {
  return a2.next.i !== b.i && a2.prev.i !== b.i && !intersectsPolygon(a2, b) && // doesn't intersect other edges
  (locallyInside(a2, b) && locallyInside(b, a2) && middleInside(a2, b) && // locally visible
  (area(a2.prev, a2, b.prev) || area(a2, b.prev, b)) || // does not create opposite-facing sectors
  equals(a2, b) && area(a2.prev, a2, a2.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p2, q2, r2) {
  return (q2.y - p2.y) * (r2.x - q2.x) - (q2.x - p2.x) * (r2.y - q2.y);
}
function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q12, p2, q2) {
  const o1 = sign(area(p1, q12, p2));
  const o2 = sign(area(p1, q12, q2));
  const o3 = sign(area(p2, q2, p1));
  const o4 = sign(area(p2, q2, q12));
  if (o1 !== o2 && o3 !== o4)
    return true;
  if (o1 === 0 && onSegment(p1, p2, q12))
    return true;
  if (o2 === 0 && onSegment(p1, q2, q12))
    return true;
  if (o3 === 0 && onSegment(p2, p1, q2))
    return true;
  if (o4 === 0 && onSegment(p2, q12, q2))
    return true;
  return false;
}
function onSegment(p2, q2, r2) {
  return q2.x <= Math.max(p2.x, r2.x) && q2.x >= Math.min(p2.x, r2.x) && q2.y <= Math.max(p2.y, r2.y) && q2.y >= Math.min(p2.y, r2.y);
}
function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a2, b) {
  let p2 = a2;
  do {
    if (p2.i !== a2.i && p2.next.i !== a2.i && p2.i !== b.i && p2.next.i !== b.i && intersects(p2, p2.next, a2, b))
      return true;
    p2 = p2.next;
  } while (p2 !== a2);
  return false;
}
function locallyInside(a2, b) {
  return area(a2.prev, a2, a2.next) < 0 ? area(a2, b, a2.next) >= 0 && area(a2, a2.prev, b) >= 0 : area(a2, b, a2.prev) < 0 || area(a2, a2.next, b) < 0;
}
function middleInside(a2, b) {
  let p2 = a2;
  let inside = false;
  const px = (a2.x + b.x) / 2;
  const py = (a2.y + b.y) / 2;
  do {
    if (p2.y > py !== p2.next.y > py && p2.next.y !== p2.y && px < (p2.next.x - p2.x) * (py - p2.y) / (p2.next.y - p2.y) + p2.x)
      inside = !inside;
    p2 = p2.next;
  } while (p2 !== a2);
  return inside;
}
function splitPolygon(a2, b) {
  const a22 = createNode(a2.i, a2.x, a2.y), b2 = createNode(b.i, b.x, b.y), an = a2.next, bp = b.prev;
  a2.next = b;
  b.prev = a2;
  a22.next = an;
  an.prev = a22;
  b2.next = a22;
  a22.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
}
function insertNode(i2, x2, y2, last) {
  const p2 = createNode(i2, x2, y2);
  if (!last) {
    p2.prev = p2;
    p2.next = p2;
  } else {
    p2.next = last.next;
    p2.prev = last;
    last.next.prev = p2;
    last.next = p2;
  }
  return p2;
}
function removeNode(p2) {
  p2.next.prev = p2.prev;
  p2.prev.next = p2.next;
  if (p2.prevZ)
    p2.prevZ.nextZ = p2.nextZ;
  if (p2.nextZ)
    p2.nextZ.prevZ = p2.prevZ;
}
function createNode(i2, x2, y2) {
  return {
    i: i2,
    // vertex index in coordinates array
    x: x2,
    y: y2,
    // vertex coordinates
    prev: null,
    // previous and next vertex nodes in a polygon ring
    next: null,
    z: 0,
    // z-order curve value
    prevZ: null,
    // previous and next nodes in z-order
    nextZ: null,
    steiner: false
    // indicates whether this is a steiner point
  };
}
function signedArea(data, start, end, dim) {
  let sum2 = 0;
  for (let i2 = start, j2 = end - dim; i2 < end; i2 += dim) {
    sum2 += (data[j2] - data[i2]) * (data[i2 + 1] + data[j2 + 1]);
    j2 = i2;
  }
  return sum2;
}
function flatten(data) {
  const vertices = [];
  const holes = [];
  const dimensions = data[0][0].length;
  let holeIndex = 0;
  let prevLen = 0;
  for (const ring of data) {
    for (const p2 of ring) {
      for (let d2 = 0; d2 < dimensions; d2++)
        vertices.push(p2[d2]);
    }
    if (prevLen) {
      holeIndex += prevLen;
      holes.push(holeIndex);
    }
    prevLen = ring.length;
  }
  return { vertices, holes, dimensions };
}

// node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs
function _arrayLikeToArray5(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles5(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles4(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray5(r2);
}
function _assertThisInitialized2(e2) {
  if (void 0 === e2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}
function _callSuper2(t2, o2, e2) {
  return o2 = _getPrototypeOf2(o2), _possibleConstructorReturn2(t2, _isNativeReflectConstruct2() ? Reflect.construct(o2, [], _getPrototypeOf2(t2).constructor) : o2.apply(t2, e2));
}
function _classCallCheck3(a2, n2) {
  if (!(a2 instanceof n2))
    throw new TypeError("Cannot call a class as a function");
}
function _createClass3(e2, r2, t2) {
  return Object.defineProperty(e2, "prototype", {
    writable: false
  }), e2;
}
function _createForOfIteratorHelper(r2, e2) {
  var t2 = "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (!t2) {
    if (Array.isArray(r2) || (t2 = _unsupportedIterableToArray5(r2)) || e2) {
      t2 && (r2 = t2);
      var n2 = 0, F2 = function() {
      };
      return {
        s: F2,
        n: function() {
          return n2 >= r2.length ? {
            done: true
          } : {
            done: false,
            value: r2[n2++]
          };
        },
        e: function(r3) {
          throw r3;
        },
        f: F2
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o2, a2 = true, u2 = false;
  return {
    s: function() {
      t2 = t2.call(r2);
    },
    n: function() {
      var r3 = t2.next();
      return a2 = r3.done, r3;
    },
    e: function(r3) {
      u2 = true, o2 = r3;
    },
    f: function() {
      try {
        a2 || null == t2.return || t2.return();
      } finally {
        if (u2)
          throw o2;
      }
    }
  };
}
function _getPrototypeOf2(t2) {
  return _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf2(t2);
}
function _inherits2(t2, e2) {
  if ("function" != typeof e2 && null !== e2)
    throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e2 && e2.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e2 && _setPrototypeOf2(t2, e2);
}
function _isNativeReflectConstruct2() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct2 = function() {
    return !!t2;
  })();
}
function _iterableToArray4(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit5(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn2(t2, e2) {
  if (e2 && ("object" == typeof e2 || "function" == typeof e2))
    return e2;
  if (void 0 !== e2)
    throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized2(t2);
}
function _setPrototypeOf2(t2, e2) {
  return _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, _setPrototypeOf2(t2, e2);
}
function _slicedToArray5(r2, e2) {
  return _arrayWithHoles5(r2) || _iterableToArrayLimit5(r2, e2) || _unsupportedIterableToArray5(r2, e2) || _nonIterableRest5();
}
function _toConsumableArray4(r2) {
  return _arrayWithoutHoles4(r2) || _iterableToArray4(r2) || _unsupportedIterableToArray5(r2) || _nonIterableSpread4();
}
function _unsupportedIterableToArray5(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray5(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray5(r2, a2) : void 0;
  }
}
var interpolateLine = function interpolateLine2() {
  var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var result = [];
  var prevPnt = null;
  lineCoords.forEach(function(pnt) {
    if (prevPnt) {
      var dist = distance_default(pnt, prevPnt) * 180 / Math.PI;
      if (dist > maxDegDistance) {
        var geoInterpol = interpolate_default(prevPnt, pnt);
        var altInterpol = prevPnt.length > 2 || pnt.length > 2 ? number_default(prevPnt[2] || 0, pnt[2] || 0) : null;
        var interpol = altInterpol ? function(t3) {
          return [].concat(_toConsumableArray4(geoInterpol(t3)), [altInterpol(t3)]);
        } : geoInterpol;
        var tStep = 1 / Math.ceil(dist / maxDegDistance);
        var t2 = tStep;
        while (t2 < 1) {
          result.push(interpol(t2));
          t2 += tStep;
        }
      }
    }
    result.push(prevPnt = pnt);
  });
  return result;
};
var THREE = typeof window !== "undefined" && window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn = new THREE.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var GeoJsonGeometry = function(_THREE$BufferGeometry) {
  function GeoJsonGeometry2(geoJson) {
    var _this;
    var radius = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var resolution2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;
    _classCallCheck3(this, GeoJsonGeometry2);
    _this = _callSuper2(this, GeoJsonGeometry2);
    _this.type = "GeoJsonGeometry";
    _this.parameters = {
      geoJson,
      radius,
      resolution: resolution2
    };
    var groups = ({
      Point: genPoint,
      MultiPoint: genMultiPoint,
      LineString: genLineString,
      MultiLineString: genMultiLineString,
      Polygon: genPolygon,
      MultiPolygon: genMultiPolygon
    }[geoJson.type] || function() {
      return [];
    })(geoJson.coordinates, radius);
    var indices = [], vertices = [];
    var groupCnt = 0;
    groups.forEach(function(newG) {
      var prevIndCnt = indices.length;
      concatGroup({
        indices,
        vertices
      }, newG);
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    });
    indices.length && _this.setIndex(indices);
    vertices.length && _this[setAttributeFn]("position", new THREE.Float32BufferAttribute(vertices, 3));
    function genPoint(coords, r2) {
      var vertices2 = polar2Cartesian2(coords[1], coords[0], r2 + (coords[2] || 0));
      var indices2 = [];
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiPoint(coords, r2) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c2) {
        return genPoint(c2, r2);
      }).forEach(function(_ref) {
        var _ref2 = _slicedToArray5(_ref, 1), newPnt = _ref2[0];
        concatGroup(result, newPnt);
      });
      return [result];
    }
    function genLineString(coords, r2) {
      var coords3d = interpolateLine(coords, resolution2).map(function(_ref3) {
        var _ref4 = _slicedToArray5(_ref3, 3), lng = _ref4[0], lat = _ref4[1], _ref4$ = _ref4[2], alt = _ref4$ === void 0 ? 0 : _ref4$;
        return polar2Cartesian2(lat, lng, r2 + alt);
      });
      var _earcutFlatten = flatten([coords3d]), vertices2 = _earcutFlatten.vertices;
      var numPoints = Math.round(vertices2.length / 3);
      var indices2 = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        indices2.push(vIdx - 1, vIdx);
      }
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiLineString(coords, r2) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c2) {
        return genLineString(c2, r2);
      }).forEach(function(_ref5) {
        var _ref6 = _slicedToArray5(_ref5, 1), newLine = _ref6[0];
        concatGroup(result, newLine);
      });
      return [result];
    }
    function genPolygon(coords, r2) {
      var coords3d = coords.map(function(coordsSegment) {
        return interpolateLine(coordsSegment, resolution2).map(function(_ref7) {
          var _ref8 = _slicedToArray5(_ref7, 3), lng = _ref8[0], lat = _ref8[1], _ref8$ = _ref8[2], alt = _ref8$ === void 0 ? 0 : _ref8$;
          return polar2Cartesian2(lat, lng, r2 + alt);
        });
      });
      var _earcutFlatten2 = flatten(coords3d), vertices2 = _earcutFlatten2.vertices, holes = _earcutFlatten2.holes;
      var firstHoleIdx = holes[0] || Infinity;
      var outerVertices = vertices2.slice(0, firstHoleIdx * 3);
      var holeVertices = vertices2.slice(firstHoleIdx * 3);
      var holesIdx = new Set(holes);
      var numPoints = Math.round(vertices2.length / 3);
      var outerIndices = [], holeIndices = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        if (!holesIdx.has(vIdx)) {
          if (vIdx < firstHoleIdx) {
            outerIndices.push(vIdx - 1, vIdx);
          } else {
            holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);
          }
        }
      }
      var groups2 = [{
        indices: outerIndices,
        vertices: outerVertices
      }];
      if (holes.length) {
        groups2.push({
          indices: holeIndices,
          vertices: holeVertices
        });
      }
      return groups2;
    }
    function genMultiPolygon(coords, r2) {
      var outer = {
        vertices: [],
        indices: []
      };
      var holes = {
        vertices: [],
        indices: []
      };
      coords.map(function(c2) {
        return genPolygon(c2, r2);
      }).forEach(function(_ref9) {
        var _ref10 = _slicedToArray5(_ref9, 2), newOuter = _ref10[0], newHoles = _ref10[1];
        concatGroup(outer, newOuter);
        newHoles && concatGroup(holes, newHoles);
      });
      var groups2 = [outer];
      holes.vertices.length && groups2.push(holes);
      return groups2;
    }
    return _this;
  }
  _inherits2(GeoJsonGeometry2, _THREE$BufferGeometry);
  return _createClass3(GeoJsonGeometry2);
}(THREE.BufferGeometry);
function concatGroup(main, extra) {
  var prevVertCnt = Math.round(main.vertices.length / 3);
  concatArr(main.vertices, extra.vertices);
  concatArr(main.indices, extra.indices.map(function(ind) {
    return ind + prevVertCnt;
  }));
}
function concatArr(target, src) {
  var _iterator = _createForOfIteratorHelper(src), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var e2 = _step.value;
      target.push(e2);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function polar2Cartesian2(lat, lng) {
  var r2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r2 * Math.sin(phi) * Math.cos(theta),
    // x
    r2 * Math.cos(phi),
    // y
    r2 * Math.sin(phi) * Math.sin(theta)
    // z
  ];
}

// node_modules/three/examples/jsm/utils/BufferGeometryUtils.js
var BufferGeometryUtils_exports = {};
__export(BufferGeometryUtils_exports, {
  computeMikkTSpaceTangents: () => computeMikkTSpaceTangents,
  computeMorphedAttributes: () => computeMorphedAttributes,
  deepCloneAttribute: () => deepCloneAttribute,
  deinterleaveAttribute: () => deinterleaveAttribute,
  deinterleaveGeometry: () => deinterleaveGeometry,
  estimateBytesUsed: () => estimateBytesUsed,
  interleaveAttributes: () => interleaveAttributes,
  mergeAttributes: () => mergeAttributes,
  mergeGeometries: () => mergeGeometries,
  mergeGroups: () => mergeGroups,
  mergeVertices: () => mergeVertices,
  toCreasedNormals: () => toCreasedNormals,
  toTrianglesDrawMode: () => toTrianglesDrawMode
});
function computeMikkTSpaceTangents(geometry, MikkTSpace, negateSign = true) {
  if (!MikkTSpace || !MikkTSpace.isReady) {
    throw new Error("BufferGeometryUtils: Initialized MikkTSpace library required.");
  }
  if (!geometry.hasAttribute("position") || !geometry.hasAttribute("normal") || !geometry.hasAttribute("uv")) {
    throw new Error('BufferGeometryUtils: Tangents require "position", "normal", and "uv" attributes.');
  }
  function getAttributeArray(attribute3) {
    if (attribute3.normalized || attribute3.isInterleavedBufferAttribute) {
      const dstArray = new Float32Array(attribute3.count * attribute3.itemSize);
      for (let i2 = 0, j2 = 0; i2 < attribute3.count; i2++) {
        dstArray[j2++] = attribute3.getX(i2);
        dstArray[j2++] = attribute3.getY(i2);
        if (attribute3.itemSize > 2) {
          dstArray[j2++] = attribute3.getZ(i2);
        }
      }
      return dstArray;
    }
    if (attribute3.array instanceof Float32Array) {
      return attribute3.array;
    }
    return new Float32Array(attribute3.array);
  }
  const _geometry3 = geometry.index ? geometry.toNonIndexed() : geometry;
  const tangents = MikkTSpace.generateTangents(
    getAttributeArray(_geometry3.attributes.position),
    getAttributeArray(_geometry3.attributes.normal),
    getAttributeArray(_geometry3.attributes.uv)
  );
  if (negateSign) {
    for (let i2 = 3; i2 < tangents.length; i2 += 4) {
      tangents[i2] *= -1;
    }
  }
  _geometry3.setAttribute("tangent", new BufferAttribute(tangents, 4));
  if (geometry !== _geometry3) {
    geometry.copy(_geometry3);
  }
  return geometry;
}
function mergeGeometries(geometries, useGroups = false) {
  const isIndexed = geometries[0].index !== null;
  const attributesUsed = new Set(Object.keys(geometries[0].attributes));
  const morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));
  const attributes = {};
  const morphAttributes = {};
  const morphTargetsRelative = geometries[0].morphTargetsRelative;
  const mergedGeometry = new BufferGeometry();
  let offset = 0;
  for (let i2 = 0; i2 < geometries.length; ++i2) {
    const geometry = geometries[i2];
    let attributesCount = 0;
    if (isIndexed !== (geometry.index !== null)) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.");
      return null;
    }
    for (const name in geometry.attributes) {
      if (!attributesUsed.has(name)) {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + '. All geometries must have compatible attributes; make sure "' + name + '" attribute exists among all geometries, or in none of them.');
        return null;
      }
      if (attributes[name] === void 0)
        attributes[name] = [];
      attributes[name].push(geometry.attributes[name]);
      attributesCount++;
    }
    if (attributesCount !== attributesUsed.size) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". Make sure all geometries have the same number of attributes.");
      return null;
    }
    if (morphTargetsRelative !== geometry.morphTargetsRelative) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". .morphTargetsRelative must be consistent throughout all geometries.");
      return null;
    }
    for (const name in geometry.morphAttributes) {
      if (!morphAttributesUsed.has(name)) {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ".  .morphAttributes must be consistent throughout all geometries.");
        return null;
      }
      if (morphAttributes[name] === void 0)
        morphAttributes[name] = [];
      morphAttributes[name].push(geometry.morphAttributes[name]);
    }
    if (useGroups) {
      let count;
      if (isIndexed) {
        count = geometry.index.count;
      } else if (geometry.attributes.position !== void 0) {
        count = geometry.attributes.position.count;
      } else {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". The geometry must have either an index or a position attribute");
        return null;
      }
      mergedGeometry.addGroup(offset, count, i2);
      offset += count;
    }
  }
  if (isIndexed) {
    let indexOffset = 0;
    const mergedIndex = [];
    for (let i2 = 0; i2 < geometries.length; ++i2) {
      const index6 = geometries[i2].index;
      for (let j2 = 0; j2 < index6.count; ++j2) {
        mergedIndex.push(index6.getX(j2) + indexOffset);
      }
      indexOffset += geometries[i2].attributes.position.count;
    }
    mergedGeometry.setIndex(mergedIndex);
  }
  for (const name in attributes) {
    const mergedAttribute = mergeAttributes(attributes[name]);
    if (!mergedAttribute) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the " + name + " attribute.");
      return null;
    }
    mergedGeometry.setAttribute(name, mergedAttribute);
  }
  for (const name in morphAttributes) {
    const numMorphTargets = morphAttributes[name][0].length;
    if (numMorphTargets === 0)
      break;
    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};
    mergedGeometry.morphAttributes[name] = [];
    for (let i2 = 0; i2 < numMorphTargets; ++i2) {
      const morphAttributesToMerge = [];
      for (let j2 = 0; j2 < morphAttributes[name].length; ++j2) {
        morphAttributesToMerge.push(morphAttributes[name][j2][i2]);
      }
      const mergedMorphAttribute = mergeAttributes(morphAttributesToMerge);
      if (!mergedMorphAttribute) {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the " + name + " morphAttribute.");
        return null;
      }
      mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);
    }
  }
  return mergedGeometry;
}
function mergeAttributes(attributes) {
  let TypedArray;
  let itemSize;
  let normalized;
  let gpuType = -1;
  let arrayLength = 0;
  for (let i2 = 0; i2 < attributes.length; ++i2) {
    const attribute3 = attributes[i2];
    if (TypedArray === void 0)
      TypedArray = attribute3.array.constructor;
    if (TypedArray !== attribute3.array.constructor) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.");
      return null;
    }
    if (itemSize === void 0)
      itemSize = attribute3.itemSize;
    if (itemSize !== attribute3.itemSize) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.");
      return null;
    }
    if (normalized === void 0)
      normalized = attribute3.normalized;
    if (normalized !== attribute3.normalized) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.");
      return null;
    }
    if (gpuType === -1)
      gpuType = attribute3.gpuType;
    if (gpuType !== attribute3.gpuType) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.");
      return null;
    }
    arrayLength += attribute3.count * itemSize;
  }
  const array3 = new TypedArray(arrayLength);
  const result = new BufferAttribute(array3, itemSize, normalized);
  let offset = 0;
  for (let i2 = 0; i2 < attributes.length; ++i2) {
    const attribute3 = attributes[i2];
    if (attribute3.isInterleavedBufferAttribute) {
      const tupleOffset = offset / itemSize;
      for (let j2 = 0, l2 = attribute3.count; j2 < l2; j2++) {
        for (let c2 = 0; c2 < itemSize; c2++) {
          const value = attribute3.getComponent(j2, c2);
          result.setComponent(j2 + tupleOffset, c2, value);
        }
      }
    } else {
      array3.set(attribute3.array, offset);
    }
    offset += attribute3.count * itemSize;
  }
  if (gpuType !== void 0) {
    result.gpuType = gpuType;
  }
  return result;
}
function deepCloneAttribute(attribute3) {
  if (attribute3.isInstancedInterleavedBufferAttribute || attribute3.isInterleavedBufferAttribute) {
    return deinterleaveAttribute(attribute3);
  }
  if (attribute3.isInstancedBufferAttribute) {
    return new InstancedBufferAttribute().copy(attribute3);
  }
  return new BufferAttribute().copy(attribute3);
}
function interleaveAttributes(attributes) {
  let TypedArray;
  let arrayLength = 0;
  let stride = 0;
  for (let i2 = 0, l2 = attributes.length; i2 < l2; ++i2) {
    const attribute3 = attributes[i2];
    if (TypedArray === void 0)
      TypedArray = attribute3.array.constructor;
    if (TypedArray !== attribute3.array.constructor) {
      console.error("AttributeBuffers of different types cannot be interleaved");
      return null;
    }
    arrayLength += attribute3.array.length;
    stride += attribute3.itemSize;
  }
  const interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);
  let offset = 0;
  const res = [];
  const getters = ["getX", "getY", "getZ", "getW"];
  const setters = ["setX", "setY", "setZ", "setW"];
  for (let j2 = 0, l2 = attributes.length; j2 < l2; j2++) {
    const attribute3 = attributes[j2];
    const itemSize = attribute3.itemSize;
    const count = attribute3.count;
    const iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute3.normalized);
    res.push(iba);
    offset += itemSize;
    for (let c2 = 0; c2 < count; c2++) {
      for (let k2 = 0; k2 < itemSize; k2++) {
        iba[setters[k2]](c2, attribute3[getters[k2]](c2));
      }
    }
  }
  return res;
}
function deinterleaveAttribute(attribute3) {
  const cons = attribute3.data.array.constructor;
  const count = attribute3.count;
  const itemSize = attribute3.itemSize;
  const normalized = attribute3.normalized;
  const array3 = new cons(count * itemSize);
  let newAttribute;
  if (attribute3.isInstancedInterleavedBufferAttribute) {
    newAttribute = new InstancedBufferAttribute(array3, itemSize, normalized, attribute3.meshPerAttribute);
  } else {
    newAttribute = new BufferAttribute(array3, itemSize, normalized);
  }
  for (let i2 = 0; i2 < count; i2++) {
    newAttribute.setX(i2, attribute3.getX(i2));
    if (itemSize >= 2) {
      newAttribute.setY(i2, attribute3.getY(i2));
    }
    if (itemSize >= 3) {
      newAttribute.setZ(i2, attribute3.getZ(i2));
    }
    if (itemSize >= 4) {
      newAttribute.setW(i2, attribute3.getW(i2));
    }
  }
  return newAttribute;
}
function deinterleaveGeometry(geometry) {
  const attributes = geometry.attributes;
  const morphTargets = geometry.morphTargets;
  const attrMap = /* @__PURE__ */ new Map();
  for (const key in attributes) {
    const attr = attributes[key];
    if (attr.isInterleavedBufferAttribute) {
      if (!attrMap.has(attr)) {
        attrMap.set(attr, deinterleaveAttribute(attr));
      }
      attributes[key] = attrMap.get(attr);
    }
  }
  for (const key in morphTargets) {
    const attr = morphTargets[key];
    if (attr.isInterleavedBufferAttribute) {
      if (!attrMap.has(attr)) {
        attrMap.set(attr, deinterleaveAttribute(attr));
      }
      morphTargets[key] = attrMap.get(attr);
    }
  }
}
function estimateBytesUsed(geometry) {
  let mem = 0;
  for (const name in geometry.attributes) {
    const attr = geometry.getAttribute(name);
    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;
  }
  const indices = geometry.getIndex();
  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;
  return mem;
}
function mergeVertices(geometry, tolerance = 1e-4) {
  tolerance = Math.max(tolerance, Number.EPSILON);
  const hashToIndex = {};
  const indices = geometry.getIndex();
  const positions = geometry.getAttribute("position");
  const vertexCount = indices ? indices.count : positions.count;
  let nextIndex = 0;
  const attributeNames = Object.keys(geometry.attributes);
  const tmpAttributes = {};
  const tmpMorphAttributes = {};
  const newIndices = [];
  const getters = ["getX", "getY", "getZ", "getW"];
  const setters = ["setX", "setY", "setZ", "setW"];
  for (let i2 = 0, l2 = attributeNames.length; i2 < l2; i2++) {
    const name = attributeNames[i2];
    const attr = geometry.attributes[name];
    tmpAttributes[name] = new attr.constructor(
      new attr.array.constructor(attr.count * attr.itemSize),
      attr.itemSize,
      attr.normalized
    );
    const morphAttributes = geometry.morphAttributes[name];
    if (morphAttributes) {
      if (!tmpMorphAttributes[name])
        tmpMorphAttributes[name] = [];
      morphAttributes.forEach((morphAttr, i3) => {
        const array3 = new morphAttr.array.constructor(morphAttr.count * morphAttr.itemSize);
        tmpMorphAttributes[name][i3] = new morphAttr.constructor(array3, morphAttr.itemSize, morphAttr.normalized);
      });
    }
  }
  const halfTolerance = tolerance * 0.5;
  const exponent = Math.log10(1 / tolerance);
  const hashMultiplier = Math.pow(10, exponent);
  const hashAdditive = halfTolerance * hashMultiplier;
  for (let i2 = 0; i2 < vertexCount; i2++) {
    const index6 = indices ? indices.getX(i2) : i2;
    let hash3 = "";
    for (let j2 = 0, l2 = attributeNames.length; j2 < l2; j2++) {
      const name = attributeNames[j2];
      const attribute3 = geometry.getAttribute(name);
      const itemSize = attribute3.itemSize;
      for (let k2 = 0; k2 < itemSize; k2++) {
        hash3 += `${~~(attribute3[getters[k2]](index6) * hashMultiplier + hashAdditive)},`;
      }
    }
    if (hash3 in hashToIndex) {
      newIndices.push(hashToIndex[hash3]);
    } else {
      for (let j2 = 0, l2 = attributeNames.length; j2 < l2; j2++) {
        const name = attributeNames[j2];
        const attribute3 = geometry.getAttribute(name);
        const morphAttributes = geometry.morphAttributes[name];
        const itemSize = attribute3.itemSize;
        const newArray = tmpAttributes[name];
        const newMorphArrays = tmpMorphAttributes[name];
        for (let k2 = 0; k2 < itemSize; k2++) {
          const getterFunc = getters[k2];
          const setterFunc = setters[k2];
          newArray[setterFunc](nextIndex, attribute3[getterFunc](index6));
          if (morphAttributes) {
            for (let m2 = 0, ml = morphAttributes.length; m2 < ml; m2++) {
              newMorphArrays[m2][setterFunc](nextIndex, morphAttributes[m2][getterFunc](index6));
            }
          }
        }
      }
      hashToIndex[hash3] = nextIndex;
      newIndices.push(nextIndex);
      nextIndex++;
    }
  }
  const result = geometry.clone();
  for (const name in geometry.attributes) {
    const tmpAttribute = tmpAttributes[name];
    result.setAttribute(name, new tmpAttribute.constructor(
      tmpAttribute.array.slice(0, nextIndex * tmpAttribute.itemSize),
      tmpAttribute.itemSize,
      tmpAttribute.normalized
    ));
    if (!(name in tmpMorphAttributes))
      continue;
    for (let j2 = 0; j2 < tmpMorphAttributes[name].length; j2++) {
      const tmpMorphAttribute = tmpMorphAttributes[name][j2];
      result.morphAttributes[name][j2] = new tmpMorphAttribute.constructor(
        tmpMorphAttribute.array.slice(0, nextIndex * tmpMorphAttribute.itemSize),
        tmpMorphAttribute.itemSize,
        tmpMorphAttribute.normalized
      );
    }
  }
  result.setIndex(newIndices);
  return result;
}
function toTrianglesDrawMode(geometry, drawMode) {
  if (drawMode === TrianglesDrawMode) {
    console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.");
    return geometry;
  }
  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {
    let index6 = geometry.getIndex();
    if (index6 === null) {
      const indices = [];
      const position = geometry.getAttribute("position");
      if (position !== void 0) {
        for (let i2 = 0; i2 < position.count; i2++) {
          indices.push(i2);
        }
        geometry.setIndex(indices);
        index6 = geometry.getIndex();
      } else {
        console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.");
        return geometry;
      }
    }
    const numberOfTriangles = index6.count - 2;
    const newIndices = [];
    if (drawMode === TriangleFanDrawMode) {
      for (let i2 = 1; i2 <= numberOfTriangles; i2++) {
        newIndices.push(index6.getX(0));
        newIndices.push(index6.getX(i2));
        newIndices.push(index6.getX(i2 + 1));
      }
    } else {
      for (let i2 = 0; i2 < numberOfTriangles; i2++) {
        if (i2 % 2 === 0) {
          newIndices.push(index6.getX(i2));
          newIndices.push(index6.getX(i2 + 1));
          newIndices.push(index6.getX(i2 + 2));
        } else {
          newIndices.push(index6.getX(i2 + 2));
          newIndices.push(index6.getX(i2 + 1));
          newIndices.push(index6.getX(i2));
        }
      }
    }
    if (newIndices.length / 3 !== numberOfTriangles) {
      console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
    }
    const newGeometry = geometry.clone();
    newGeometry.setIndex(newIndices);
    newGeometry.clearGroups();
    return newGeometry;
  } else {
    console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:", drawMode);
    return geometry;
  }
}
function computeMorphedAttributes(object) {
  const _vA = new Vector3();
  const _vB = new Vector3();
  const _vC = new Vector3();
  const _tempA = new Vector3();
  const _tempB = new Vector3();
  const _tempC = new Vector3();
  const _morphA = new Vector3();
  const _morphB = new Vector3();
  const _morphC = new Vector3();
  function _calculateMorphedAttributeData(object2, attribute3, morphAttribute, morphTargetsRelative2, a3, b2, c3, modifiedAttributeArray) {
    _vA.fromBufferAttribute(attribute3, a3);
    _vB.fromBufferAttribute(attribute3, b2);
    _vC.fromBufferAttribute(attribute3, c3);
    const morphInfluences = object2.morphTargetInfluences;
    if (morphAttribute && morphInfluences) {
      _morphA.set(0, 0, 0);
      _morphB.set(0, 0, 0);
      _morphC.set(0, 0, 0);
      for (let i3 = 0, il2 = morphAttribute.length; i3 < il2; i3++) {
        const influence = morphInfluences[i3];
        const morph = morphAttribute[i3];
        if (influence === 0)
          continue;
        _tempA.fromBufferAttribute(morph, a3);
        _tempB.fromBufferAttribute(morph, b2);
        _tempC.fromBufferAttribute(morph, c3);
        if (morphTargetsRelative2) {
          _morphA.addScaledVector(_tempA, influence);
          _morphB.addScaledVector(_tempB, influence);
          _morphC.addScaledVector(_tempC, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(_vA), influence);
          _morphB.addScaledVector(_tempB.sub(_vB), influence);
          _morphC.addScaledVector(_tempC.sub(_vC), influence);
        }
      }
      _vA.add(_morphA);
      _vB.add(_morphB);
      _vC.add(_morphC);
    }
    if (object2.isSkinnedMesh) {
      object2.applyBoneTransform(a3, _vA);
      object2.applyBoneTransform(b2, _vB);
      object2.applyBoneTransform(c3, _vC);
    }
    modifiedAttributeArray[a3 * 3 + 0] = _vA.x;
    modifiedAttributeArray[a3 * 3 + 1] = _vA.y;
    modifiedAttributeArray[a3 * 3 + 2] = _vA.z;
    modifiedAttributeArray[b2 * 3 + 0] = _vB.x;
    modifiedAttributeArray[b2 * 3 + 1] = _vB.y;
    modifiedAttributeArray[b2 * 3 + 2] = _vB.z;
    modifiedAttributeArray[c3 * 3 + 0] = _vC.x;
    modifiedAttributeArray[c3 * 3 + 1] = _vC.y;
    modifiedAttributeArray[c3 * 3 + 2] = _vC.z;
  }
  const geometry = object.geometry;
  const material = object.material;
  let a2, b, c2;
  const index6 = geometry.index;
  const positionAttribute = geometry.attributes.position;
  const morphPosition = geometry.morphAttributes.position;
  const morphTargetsRelative = geometry.morphTargetsRelative;
  const normalAttribute = geometry.attributes.normal;
  const morphNormal = geometry.morphAttributes.position;
  const groups = geometry.groups;
  const drawRange = geometry.drawRange;
  let i2, j2, il, jl;
  let group;
  let start, end;
  const modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);
  const modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);
  if (index6 !== null) {
    if (Array.isArray(material)) {
      for (i2 = 0, il = groups.length; i2 < il; i2++) {
        group = groups[i2];
        start = Math.max(group.start, drawRange.start);
        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
        for (j2 = start, jl = end; j2 < jl; j2 += 3) {
          a2 = index6.getX(j2);
          b = index6.getX(j2 + 1);
          c2 = index6.getX(j2 + 2);
          _calculateMorphedAttributeData(
            object,
            positionAttribute,
            morphPosition,
            morphTargetsRelative,
            a2,
            b,
            c2,
            modifiedPosition
          );
          _calculateMorphedAttributeData(
            object,
            normalAttribute,
            morphNormal,
            morphTargetsRelative,
            a2,
            b,
            c2,
            modifiedNormal
          );
        }
      }
    } else {
      start = Math.max(0, drawRange.start);
      end = Math.min(index6.count, drawRange.start + drawRange.count);
      for (i2 = start, il = end; i2 < il; i2 += 3) {
        a2 = index6.getX(i2);
        b = index6.getX(i2 + 1);
        c2 = index6.getX(i2 + 2);
        _calculateMorphedAttributeData(
          object,
          positionAttribute,
          morphPosition,
          morphTargetsRelative,
          a2,
          b,
          c2,
          modifiedPosition
        );
        _calculateMorphedAttributeData(
          object,
          normalAttribute,
          morphNormal,
          morphTargetsRelative,
          a2,
          b,
          c2,
          modifiedNormal
        );
      }
    }
  } else {
    if (Array.isArray(material)) {
      for (i2 = 0, il = groups.length; i2 < il; i2++) {
        group = groups[i2];
        start = Math.max(group.start, drawRange.start);
        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
        for (j2 = start, jl = end; j2 < jl; j2 += 3) {
          a2 = j2;
          b = j2 + 1;
          c2 = j2 + 2;
          _calculateMorphedAttributeData(
            object,
            positionAttribute,
            morphPosition,
            morphTargetsRelative,
            a2,
            b,
            c2,
            modifiedPosition
          );
          _calculateMorphedAttributeData(
            object,
            normalAttribute,
            morphNormal,
            morphTargetsRelative,
            a2,
            b,
            c2,
            modifiedNormal
          );
        }
      }
    } else {
      start = Math.max(0, drawRange.start);
      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
      for (i2 = start, il = end; i2 < il; i2 += 3) {
        a2 = i2;
        b = i2 + 1;
        c2 = i2 + 2;
        _calculateMorphedAttributeData(
          object,
          positionAttribute,
          morphPosition,
          morphTargetsRelative,
          a2,
          b,
          c2,
          modifiedPosition
        );
        _calculateMorphedAttributeData(
          object,
          normalAttribute,
          morphNormal,
          morphTargetsRelative,
          a2,
          b,
          c2,
          modifiedNormal
        );
      }
    }
  }
  const morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);
  const morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);
  return {
    positionAttribute,
    normalAttribute,
    morphedPositionAttribute,
    morphedNormalAttribute
  };
}
function mergeGroups(geometry) {
  if (geometry.groups.length === 0) {
    console.warn("THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.");
    return geometry;
  }
  let groups = geometry.groups;
  groups = groups.sort((a2, b) => {
    if (a2.materialIndex !== b.materialIndex)
      return a2.materialIndex - b.materialIndex;
    return a2.start - b.start;
  });
  if (geometry.getIndex() === null) {
    const positionAttribute = geometry.getAttribute("position");
    const indices = [];
    for (let i2 = 0; i2 < positionAttribute.count; i2 += 3) {
      indices.push(i2, i2 + 1, i2 + 2);
    }
    geometry.setIndex(indices);
  }
  const index6 = geometry.getIndex();
  const newIndices = [];
  for (let i2 = 0; i2 < groups.length; i2++) {
    const group = groups[i2];
    const groupStart = group.start;
    const groupLength = groupStart + group.count;
    for (let j2 = groupStart; j2 < groupLength; j2++) {
      newIndices.push(index6.getX(j2));
    }
  }
  geometry.dispose();
  geometry.setIndex(newIndices);
  let start = 0;
  for (let i2 = 0; i2 < groups.length; i2++) {
    const group = groups[i2];
    group.start = start;
    start += group.count;
  }
  let currentGroup = groups[0];
  geometry.groups = [currentGroup];
  for (let i2 = 1; i2 < groups.length; i2++) {
    const group = groups[i2];
    if (currentGroup.materialIndex === group.materialIndex) {
      currentGroup.count += group.count;
    } else {
      currentGroup = group;
      geometry.groups.push(currentGroup);
    }
  }
  return geometry;
}
function toCreasedNormals(geometry, creaseAngle = Math.PI / 3) {
  const creaseDot = Math.cos(creaseAngle);
  const hashMultiplier = (1 + 1e-10) * 100;
  const verts = [new Vector3(), new Vector3(), new Vector3()];
  const tempVec1 = new Vector3();
  const tempVec2 = new Vector3();
  const tempNorm = new Vector3();
  const tempNorm2 = new Vector3();
  function hashVertex(v2) {
    const x2 = ~~(v2.x * hashMultiplier);
    const y2 = ~~(v2.y * hashMultiplier);
    const z2 = ~~(v2.z * hashMultiplier);
    return `${x2},${y2},${z2}`;
  }
  const resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;
  const posAttr = resultGeometry.attributes.position;
  const vertexMap = {};
  for (let i2 = 0, l2 = posAttr.count / 3; i2 < l2; i2++) {
    const i3 = 3 * i2;
    const a2 = verts[0].fromBufferAttribute(posAttr, i3 + 0);
    const b = verts[1].fromBufferAttribute(posAttr, i3 + 1);
    const c2 = verts[2].fromBufferAttribute(posAttr, i3 + 2);
    tempVec1.subVectors(c2, b);
    tempVec2.subVectors(a2, b);
    const normal2 = new Vector3().crossVectors(tempVec1, tempVec2).normalize();
    for (let n2 = 0; n2 < 3; n2++) {
      const vert = verts[n2];
      const hash3 = hashVertex(vert);
      if (!(hash3 in vertexMap)) {
        vertexMap[hash3] = [];
      }
      vertexMap[hash3].push(normal2);
    }
  }
  const normalArray = new Float32Array(posAttr.count * 3);
  const normAttr = new BufferAttribute(normalArray, 3, false);
  for (let i2 = 0, l2 = posAttr.count / 3; i2 < l2; i2++) {
    const i3 = 3 * i2;
    const a2 = verts[0].fromBufferAttribute(posAttr, i3 + 0);
    const b = verts[1].fromBufferAttribute(posAttr, i3 + 1);
    const c2 = verts[2].fromBufferAttribute(posAttr, i3 + 2);
    tempVec1.subVectors(c2, b);
    tempVec2.subVectors(a2, b);
    tempNorm.crossVectors(tempVec1, tempVec2).normalize();
    for (let n2 = 0; n2 < 3; n2++) {
      const vert = verts[n2];
      const hash3 = hashVertex(vert);
      const otherNormals = vertexMap[hash3];
      tempNorm2.set(0, 0, 0);
      for (let k2 = 0, lk = otherNormals.length; k2 < lk; k2++) {
        const otherNorm = otherNormals[k2];
        if (tempNorm.dot(otherNorm) > creaseDot) {
          tempNorm2.add(otherNorm);
        }
      }
      tempNorm2.normalize();
      normAttr.setXYZ(i3 + n2, tempNorm2.x, tempNorm2.y, tempNorm2.z);
    }
  }
  resultGeometry.setAttribute("normal", normAttr);
  return resultGeometry;
}

// node_modules/accessor-fn/dist/accessor-fn.mjs
var index3 = function(p2) {
  return typeof p2 === "function" ? p2 : typeof p2 === "string" ? function(obj) {
    return obj[p2];
  } : function(obj) {
    return p2;
  };
};

// node_modules/tinycolor2/esm/tinycolor.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var trimLeft = /^\s+/;
var trimRight = /\s+$/;
function tinycolor(color4, opts) {
  color4 = color4 ? color4 : "";
  opts = opts || {};
  if (color4 instanceof tinycolor) {
    return color4;
  }
  if (!(this instanceof tinycolor)) {
    return new tinycolor(color4, opts);
  }
  var rgb2 = inputToRGB(color4);
  this._originalInput = color4, this._r = rgb2.r, this._g = rgb2.g, this._b = rgb2.b, this._a = rgb2.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb2.format;
  this._gradientType = opts.gradientType;
  if (this._r < 1)
    this._r = Math.round(this._r);
  if (this._g < 1)
    this._g = Math.round(this._g);
  if (this._b < 1)
    this._b = Math.round(this._b);
  this._ok = rgb2.ok;
}
tinycolor.prototype = {
  isDark: function isDark() {
    return this.getBrightness() < 128;
  },
  isLight: function isLight() {
    return !this.isDark();
  },
  isValid: function isValid() {
    return this._ok;
  },
  getOriginalInput: function getOriginalInput() {
    return this._originalInput;
  },
  getFormat: function getFormat() {
    return this._format;
  },
  getAlpha: function getAlpha() {
    return this._a;
  },
  getBrightness: function getBrightness() {
    var rgb2 = this.toRgb();
    return (rgb2.r * 299 + rgb2.g * 587 + rgb2.b * 114) / 1e3;
  },
  getLuminance: function getLuminance() {
    var rgb2 = this.toRgb();
    var RsRGB, GsRGB, BsRGB, R, G2, B3;
    RsRGB = rgb2.r / 255;
    GsRGB = rgb2.g / 255;
    BsRGB = rgb2.b / 255;
    if (RsRGB <= 0.03928)
      R = RsRGB / 12.92;
    else
      R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    if (GsRGB <= 0.03928)
      G2 = GsRGB / 12.92;
    else
      G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    if (BsRGB <= 0.03928)
      B3 = BsRGB / 12.92;
    else
      B3 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    return 0.2126 * R + 0.7152 * G2 + 0.0722 * B3;
  },
  setAlpha: function setAlpha(value) {
    this._a = boundAlpha(value);
    this._roundA = Math.round(100 * this._a) / 100;
    return this;
  },
  toHsv: function toHsv() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
      a: this._a
    };
  },
  toHsvString: function toHsvString() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    var h2 = Math.round(hsv.h * 360), s2 = Math.round(hsv.s * 100), v2 = Math.round(hsv.v * 100);
    return this._a == 1 ? "hsv(" + h2 + ", " + s2 + "%, " + v2 + "%)" : "hsva(" + h2 + ", " + s2 + "%, " + v2 + "%, " + this._roundA + ")";
  },
  toHsl: function toHsl() {
    var hsl2 = rgbToHsl(this._r, this._g, this._b);
    return {
      h: hsl2.h * 360,
      s: hsl2.s,
      l: hsl2.l,
      a: this._a
    };
  },
  toHslString: function toHslString() {
    var hsl2 = rgbToHsl(this._r, this._g, this._b);
    var h2 = Math.round(hsl2.h * 360), s2 = Math.round(hsl2.s * 100), l2 = Math.round(hsl2.l * 100);
    return this._a == 1 ? "hsl(" + h2 + ", " + s2 + "%, " + l2 + "%)" : "hsla(" + h2 + ", " + s2 + "%, " + l2 + "%, " + this._roundA + ")";
  },
  toHex: function toHex(allow3Char) {
    return rgbToHex(this._r, this._g, this._b, allow3Char);
  },
  toHexString: function toHexString(allow3Char) {
    return "#" + this.toHex(allow3Char);
  },
  toHex8: function toHex8(allow4Char) {
    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
  },
  toHex8String: function toHex8String(allow4Char) {
    return "#" + this.toHex8(allow4Char);
  },
  toRgb: function toRgb() {
    return {
      r: Math.round(this._r),
      g: Math.round(this._g),
      b: Math.round(this._b),
      a: this._a
    };
  },
  toRgbString: function toRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
  },
  toPercentageRgb: function toPercentageRgb() {
    return {
      r: Math.round(bound01(this._r, 255) * 100) + "%",
      g: Math.round(bound01(this._g, 255) * 100) + "%",
      b: Math.round(bound01(this._b, 255) * 100) + "%",
      a: this._a
    };
  },
  toPercentageRgbString: function toPercentageRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
  },
  toName: function toName() {
    if (this._a === 0) {
      return "transparent";
    }
    if (this._a < 1) {
      return false;
    }
    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
  },
  toFilter: function toFilter(secondColor) {
    var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
    var secondHex8String = hex8String;
    var gradientType = this._gradientType ? "GradientType = 1, " : "";
    if (secondColor) {
      var s2 = tinycolor(secondColor);
      secondHex8String = "#" + rgbaToArgbHex(s2._r, s2._g, s2._b, s2._a);
    }
    return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
  },
  toString: function toString(format2) {
    var formatSet = !!format2;
    format2 = format2 || this._format;
    var formattedString = false;
    var hasAlpha = this._a < 1 && this._a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format2 === "hex" || format2 === "hex6" || format2 === "hex3" || format2 === "hex4" || format2 === "hex8" || format2 === "name");
    if (needsAlphaFormat) {
      if (format2 === "name" && this._a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format2 === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format2 === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format2 === "hex" || format2 === "hex6") {
      formattedString = this.toHexString();
    }
    if (format2 === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format2 === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format2 === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format2 === "name") {
      formattedString = this.toName();
    }
    if (format2 === "hsl") {
      formattedString = this.toHslString();
    }
    if (format2 === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  },
  clone: function clone() {
    return tinycolor(this.toString());
  },
  _applyModification: function _applyModification(fn, args) {
    var color4 = fn.apply(null, [this].concat([].slice.call(args)));
    this._r = color4._r;
    this._g = color4._g;
    this._b = color4._b;
    this.setAlpha(color4._a);
    return this;
  },
  lighten: function lighten() {
    return this._applyModification(_lighten, arguments);
  },
  brighten: function brighten() {
    return this._applyModification(_brighten, arguments);
  },
  darken: function darken() {
    return this._applyModification(_darken, arguments);
  },
  desaturate: function desaturate() {
    return this._applyModification(_desaturate, arguments);
  },
  saturate: function saturate() {
    return this._applyModification(_saturate, arguments);
  },
  greyscale: function greyscale() {
    return this._applyModification(_greyscale, arguments);
  },
  spin: function spin() {
    return this._applyModification(_spin, arguments);
  },
  _applyCombination: function _applyCombination(fn, args) {
    return fn.apply(null, [this].concat([].slice.call(args)));
  },
  analogous: function analogous() {
    return this._applyCombination(_analogous, arguments);
  },
  complement: function complement() {
    return this._applyCombination(_complement, arguments);
  },
  monochromatic: function monochromatic() {
    return this._applyCombination(_monochromatic, arguments);
  },
  splitcomplement: function splitcomplement() {
    return this._applyCombination(_splitcomplement, arguments);
  },
  // Disabled until https://github.com/bgrins/TinyColor/issues/254
  // polyad: function (number) {
  //   return this._applyCombination(polyad, [number]);
  // },
  triad: function triad() {
    return this._applyCombination(polyad, [3]);
  },
  tetrad: function tetrad() {
    return this._applyCombination(polyad, [4]);
  }
};
tinycolor.fromRatio = function(color4, opts) {
  if (_typeof(color4) == "object") {
    var newColor = {};
    for (var i2 in color4) {
      if (color4.hasOwnProperty(i2)) {
        if (i2 === "a") {
          newColor[i2] = color4[i2];
        } else {
          newColor[i2] = convertToPercentage(color4[i2]);
        }
      }
    }
    color4 = newColor;
  }
  return tinycolor(color4, opts);
};
function inputToRGB(color4) {
  var rgb2 = {
    r: 0,
    g: 0,
    b: 0
  };
  var a2 = 1;
  var s2 = null;
  var v2 = null;
  var l2 = null;
  var ok = false;
  var format2 = false;
  if (typeof color4 == "string") {
    color4 = stringInputToObject(color4);
  }
  if (_typeof(color4) == "object") {
    if (isValidCSSUnit(color4.r) && isValidCSSUnit(color4.g) && isValidCSSUnit(color4.b)) {
      rgb2 = rgbToRgb(color4.r, color4.g, color4.b);
      ok = true;
      format2 = String(color4.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color4.h) && isValidCSSUnit(color4.s) && isValidCSSUnit(color4.v)) {
      s2 = convertToPercentage(color4.s);
      v2 = convertToPercentage(color4.v);
      rgb2 = hsvToRgb(color4.h, s2, v2);
      ok = true;
      format2 = "hsv";
    } else if (isValidCSSUnit(color4.h) && isValidCSSUnit(color4.s) && isValidCSSUnit(color4.l)) {
      s2 = convertToPercentage(color4.s);
      l2 = convertToPercentage(color4.l);
      rgb2 = hslToRgb(color4.h, s2, l2);
      ok = true;
      format2 = "hsl";
    }
    if (color4.hasOwnProperty("a")) {
      a2 = color4.a;
    }
  }
  a2 = boundAlpha(a2);
  return {
    ok,
    format: color4.format || format2,
    r: Math.min(255, Math.max(rgb2.r, 0)),
    g: Math.min(255, Math.max(rgb2.g, 0)),
    b: Math.min(255, Math.max(rgb2.b, 0)),
    a: a2
  };
}
function rgbToRgb(r2, g2, b) {
  return {
    r: bound01(r2, 255) * 255,
    g: bound01(g2, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max5 = Math.max(r2, g2, b), min4 = Math.min(r2, g2, b);
  var h2, s2, l2 = (max5 + min4) / 2;
  if (max5 == min4) {
    h2 = s2 = 0;
  } else {
    var d2 = max5 - min4;
    s2 = l2 > 0.5 ? d2 / (2 - max5 - min4) : d2 / (max5 + min4);
    switch (max5) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return {
    h: h2,
    s: s2,
    l: l2
  };
}
function hslToRgb(h2, s2, l2) {
  var r2, g2, b;
  h2 = bound01(h2, 360);
  s2 = bound01(s2, 100);
  l2 = bound01(l2, 100);
  function hue2rgb(p3, q3, t2) {
    if (t2 < 0)
      t2 += 1;
    if (t2 > 1)
      t2 -= 1;
    if (t2 < 1 / 6)
      return p3 + (q3 - p3) * 6 * t2;
    if (t2 < 1 / 2)
      return q3;
    if (t2 < 2 / 3)
      return p3 + (q3 - p3) * (2 / 3 - t2) * 6;
    return p3;
  }
  if (s2 === 0) {
    r2 = g2 = b = l2;
  } else {
    var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
    var p2 = 2 * l2 - q2;
    r2 = hue2rgb(p2, q2, h2 + 1 / 3);
    g2 = hue2rgb(p2, q2, h2);
    b = hue2rgb(p2, q2, h2 - 1 / 3);
  }
  return {
    r: r2 * 255,
    g: g2 * 255,
    b: b * 255
  };
}
function rgbToHsv(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max5 = Math.max(r2, g2, b), min4 = Math.min(r2, g2, b);
  var h2, s2, v2 = max5;
  var d2 = max5 - min4;
  s2 = max5 === 0 ? 0 : d2 / max5;
  if (max5 == min4) {
    h2 = 0;
  } else {
    switch (max5) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return {
    h: h2,
    s: s2,
    v: v2
  };
}
function hsvToRgb(h2, s2, v2) {
  h2 = bound01(h2, 360) * 6;
  s2 = bound01(s2, 100);
  v2 = bound01(v2, 100);
  var i2 = Math.floor(h2), f2 = h2 - i2, p2 = v2 * (1 - s2), q2 = v2 * (1 - f2 * s2), t2 = v2 * (1 - (1 - f2) * s2), mod3 = i2 % 6, r2 = [v2, q2, p2, p2, t2, v2][mod3], g2 = [t2, v2, v2, q2, p2, p2][mod3], b = [p2, p2, t2, v2, v2, q2][mod3];
  return {
    r: r2 * 255,
    g: g2 * 255,
    b: b * 255
  };
}
function rgbToHex(r2, g2, b, allow3Char) {
  var hex = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g2).toString(16)), pad2(Math.round(b).toString(16))];
  if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
  }
  return hex.join("");
}
function rgbaToHex(r2, g2, b, a2, allow4Char) {
  var hex = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g2).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a2))];
  if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
  }
  return hex.join("");
}
function rgbaToArgbHex(r2, g2, b, a2) {
  var hex = [pad2(convertDecimalToHex(a2)), pad2(Math.round(r2).toString(16)), pad2(Math.round(g2).toString(16)), pad2(Math.round(b).toString(16))];
  return hex.join("");
}
tinycolor.equals = function(color1, color22) {
  if (!color1 || !color22)
    return false;
  return tinycolor(color1).toRgbString() == tinycolor(color22).toRgbString();
};
tinycolor.random = function() {
  return tinycolor.fromRatio({
    r: Math.random(),
    g: Math.random(),
    b: Math.random()
  });
};
function _desaturate(color4, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color4).toHsl();
  hsl2.s -= amount / 100;
  hsl2.s = clamp01(hsl2.s);
  return tinycolor(hsl2);
}
function _saturate(color4, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color4).toHsl();
  hsl2.s += amount / 100;
  hsl2.s = clamp01(hsl2.s);
  return tinycolor(hsl2);
}
function _greyscale(color4) {
  return tinycolor(color4).desaturate(100);
}
function _lighten(color4, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color4).toHsl();
  hsl2.l += amount / 100;
  hsl2.l = clamp01(hsl2.l);
  return tinycolor(hsl2);
}
function _brighten(color4, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var rgb2 = tinycolor(color4).toRgb();
  rgb2.r = Math.max(0, Math.min(255, rgb2.r - Math.round(255 * -(amount / 100))));
  rgb2.g = Math.max(0, Math.min(255, rgb2.g - Math.round(255 * -(amount / 100))));
  rgb2.b = Math.max(0, Math.min(255, rgb2.b - Math.round(255 * -(amount / 100))));
  return tinycolor(rgb2);
}
function _darken(color4, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color4).toHsl();
  hsl2.l -= amount / 100;
  hsl2.l = clamp01(hsl2.l);
  return tinycolor(hsl2);
}
function _spin(color4, amount) {
  var hsl2 = tinycolor(color4).toHsl();
  var hue3 = (hsl2.h + amount) % 360;
  hsl2.h = hue3 < 0 ? 360 + hue3 : hue3;
  return tinycolor(hsl2);
}
function _complement(color4) {
  var hsl2 = tinycolor(color4).toHsl();
  hsl2.h = (hsl2.h + 180) % 360;
  return tinycolor(hsl2);
}
function polyad(color4, number) {
  if (isNaN(number) || number <= 0) {
    throw new Error("Argument to polyad must be a positive number");
  }
  var hsl2 = tinycolor(color4).toHsl();
  var result = [tinycolor(color4)];
  var step3 = 360 / number;
  for (var i2 = 1; i2 < number; i2++) {
    result.push(tinycolor({
      h: (hsl2.h + i2 * step3) % 360,
      s: hsl2.s,
      l: hsl2.l
    }));
  }
  return result;
}
function _splitcomplement(color4) {
  var hsl2 = tinycolor(color4).toHsl();
  var h2 = hsl2.h;
  return [tinycolor(color4), tinycolor({
    h: (h2 + 72) % 360,
    s: hsl2.s,
    l: hsl2.l
  }), tinycolor({
    h: (h2 + 216) % 360,
    s: hsl2.s,
    l: hsl2.l
  })];
}
function _analogous(color4, results, slices) {
  results = results || 6;
  slices = slices || 30;
  var hsl2 = tinycolor(color4).toHsl();
  var part = 360 / slices;
  var ret = [tinycolor(color4)];
  for (hsl2.h = (hsl2.h - (part * results >> 1) + 720) % 360; --results; ) {
    hsl2.h = (hsl2.h + part) % 360;
    ret.push(tinycolor(hsl2));
  }
  return ret;
}
function _monochromatic(color4, results) {
  results = results || 6;
  var hsv = tinycolor(color4).toHsv();
  var h2 = hsv.h, s2 = hsv.s, v2 = hsv.v;
  var ret = [];
  var modification = 1 / results;
  while (results--) {
    ret.push(tinycolor({
      h: h2,
      s: s2,
      v: v2
    }));
    v2 = (v2 + modification) % 1;
  }
  return ret;
}
tinycolor.mix = function(color1, color22, amount) {
  amount = amount === 0 ? 0 : amount || 50;
  var rgb1 = tinycolor(color1).toRgb();
  var rgb2 = tinycolor(color22).toRgb();
  var p2 = amount / 100;
  var rgba2 = {
    r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
    g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
    b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
    a: (rgb2.a - rgb1.a) * p2 + rgb1.a
  };
  return tinycolor(rgba2);
};
tinycolor.readability = function(color1, color22) {
  var c1 = tinycolor(color1);
  var c2 = tinycolor(color22);
  return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
};
tinycolor.isReadable = function(color1, color22, wcag2) {
  var readability = tinycolor.readability(color1, color22);
  var wcag2Parms, out;
  out = false;
  wcag2Parms = validateWCAG2Parms(wcag2);
  switch (wcag2Parms.level + wcag2Parms.size) {
    case "AAsmall":
    case "AAAlarge":
      out = readability >= 4.5;
      break;
    case "AAlarge":
      out = readability >= 3;
      break;
    case "AAAsmall":
      out = readability >= 7;
      break;
  }
  return out;
};
tinycolor.mostReadable = function(baseColor, colorList, args) {
  var bestColor = null;
  var bestScore = 0;
  var readability;
  var includeFallbackColors, level, size;
  args = args || {};
  includeFallbackColors = args.includeFallbackColors;
  level = args.level;
  size = args.size;
  for (var i2 = 0; i2 < colorList.length; i2++) {
    readability = tinycolor.readability(baseColor, colorList[i2]);
    if (readability > bestScore) {
      bestScore = readability;
      bestColor = tinycolor(colorList[i2]);
    }
  }
  if (tinycolor.isReadable(baseColor, bestColor, {
    level,
    size
  }) || !includeFallbackColors) {
    return bestColor;
  } else {
    args.includeFallbackColors = false;
    return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
  }
};
var names = tinycolor.names = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "0ff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "00f",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  burntsienna: "ea7e5d",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "0ff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "f0f",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "663399",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
var hexNames = tinycolor.hexNames = flip(names);
function flip(o2) {
  var flipped = {};
  for (var i2 in o2) {
    if (o2.hasOwnProperty(i2)) {
      flipped[o2[i2]] = i2;
    }
  }
  return flipped;
}
function boundAlpha(a2) {
  a2 = parseFloat(a2);
  if (isNaN(a2) || a2 < 0 || a2 > 1) {
    a2 = 1;
  }
  return a2;
}
function bound01(n2, max5) {
  if (isOnePointZero(n2))
    n2 = "100%";
  var processPercent = isPercentage(n2);
  n2 = Math.min(max5, Math.max(0, parseFloat(n2)));
  if (processPercent) {
    n2 = parseInt(n2 * max5, 10) / 100;
  }
  if (Math.abs(n2 - max5) < 1e-6) {
    return 1;
  }
  return n2 % max5 / parseFloat(max5);
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function isOnePointZero(n2) {
  return typeof n2 == "string" && n2.indexOf(".") != -1 && parseFloat(n2) === 1;
}
function isPercentage(n2) {
  return typeof n2 === "string" && n2.indexOf("%") != -1;
}
function pad2(c2) {
  return c2.length == 1 ? "0" + c2 : "" + c2;
}
function convertToPercentage(n2) {
  if (n2 <= 1) {
    n2 = n2 * 100 + "%";
  }
  return n2;
}
function convertDecimalToHex(d2) {
  return Math.round(parseFloat(d2) * 255).toString(16);
}
function convertHexToDecimal(h2) {
  return parseIntFromHex(h2) / 255;
}
var matchers = function() {
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  return {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
}();
function isValidCSSUnit(color4) {
  return !!matchers.CSS_UNIT.exec(color4);
}
function stringInputToObject(color4) {
  color4 = color4.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
  var named = false;
  if (names[color4]) {
    color4 = names[color4];
    named = true;
  } else if (color4 == "transparent") {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: "name"
    };
  }
  var match;
  if (match = matchers.rgb.exec(color4)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3]
    };
  }
  if (match = matchers.rgba.exec(color4)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsl.exec(color4)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3]
    };
  }
  if (match = matchers.hsla.exec(color4)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsv.exec(color4)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3]
    };
  }
  if (match = matchers.hsva.exec(color4)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hex8.exec(color4)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  if (match = matchers.hex6.exec(color4)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  if (match = matchers.hex4.exec(color4)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      a: convertHexToDecimal(match[4] + "" + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  if (match = matchers.hex3.exec(color4)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function validateWCAG2Parms(parms) {
  var level, size;
  parms = parms || {
    level: "AA",
    size: "small"
  };
  level = (parms.level || "AA").toUpperCase();
  size = (parms.size || "small").toLowerCase();
  if (level !== "AA" && level !== "AAA") {
    level = "AA";
  }
  if (size !== "small" && size !== "large") {
    size = "small";
  }
  return {
    level,
    size
  };
}

// node_modules/data-bind-mapper/dist/data-bind-mapper.mjs
function _arrayLikeToArray6(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles6(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles5(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray6(r2);
}
function _assertClassBrand2(e2, t2, n2) {
  if ("function" == typeof e2 ? e2 === t2 : e2.has(t2))
    return arguments.length < 3 ? t2 : n2;
  throw new TypeError("Private element is not present on this object");
}
function _checkPrivateRedeclaration2(e2, t2) {
  if (t2.has(e2))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classCallCheck4(a2, n2) {
  if (!(a2 instanceof n2))
    throw new TypeError("Cannot call a class as a function");
}
function _classPrivateFieldGet22(s2, a2) {
  return s2.get(_assertClassBrand2(s2, a2));
}
function _classPrivateFieldInitSpec2(e2, t2, a2) {
  _checkPrivateRedeclaration2(e2, t2), t2.set(e2, a2);
}
function _classPrivateFieldSet22(s2, a2, r2) {
  return s2.set(_assertClassBrand2(s2, a2), r2), r2;
}
function _defineProperties2(e2, r2) {
  for (var t2 = 0; t2 < r2.length; t2++) {
    var o2 = r2[t2];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, _toPropertyKey3(o2.key), o2);
  }
}
function _createClass4(e2, r2, t2) {
  return r2 && _defineProperties2(e2.prototype, r2), Object.defineProperty(e2, "prototype", {
    writable: false
  }), e2;
}
function _iterableToArray5(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit6(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray6(r2, e2) {
  return _arrayWithHoles6(r2) || _iterableToArrayLimit6(r2, e2) || _unsupportedIterableToArray6(r2, e2) || _nonIterableRest6();
}
function _toConsumableArray5(r2) {
  return _arrayWithoutHoles5(r2) || _iterableToArray5(r2) || _unsupportedIterableToArray6(r2) || _nonIterableSpread5();
}
function _toPrimitive3(t2, r2) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2);
    if ("object" != typeof i2)
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t2);
}
function _toPropertyKey3(t2) {
  var i2 = _toPrimitive3(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray6(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray6(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray6(r2, a2) : void 0;
  }
}
var _dataMap = /* @__PURE__ */ new WeakMap();
var _objMap = /* @__PURE__ */ new WeakMap();
var _id = /* @__PURE__ */ new WeakMap();
var _createObj = /* @__PURE__ */ new WeakMap();
var _updateObj = /* @__PURE__ */ new WeakMap();
var _removeObj = /* @__PURE__ */ new WeakMap();
var DataBindMapper = function() {
  function DataBindMapper2() {
    _classCallCheck4(this, DataBindMapper2);
    _classPrivateFieldInitSpec2(this, _dataMap, /* @__PURE__ */ new Map());
    _classPrivateFieldInitSpec2(this, _objMap, /* @__PURE__ */ new Map());
    _classPrivateFieldInitSpec2(this, _id, function(d2) {
      return d2;
    });
    _classPrivateFieldInitSpec2(this, _createObj, function() {
      return {};
    });
    _classPrivateFieldInitSpec2(this, _updateObj, function() {
    });
    _classPrivateFieldInitSpec2(this, _removeObj, function() {
    });
  }
  return _createClass4(DataBindMapper2, [{
    key: "getObj",
    value: function getObj(d2) {
      return _classPrivateFieldGet22(_dataMap, this).get(_classPrivateFieldGet22(_id, this).call(this, d2));
    }
  }, {
    key: "getData",
    value: function getData2(o2) {
      return _classPrivateFieldGet22(_objMap, this).get(o2);
    }
  }, {
    key: "entries",
    value: function entries() {
      return _toConsumableArray5(_classPrivateFieldGet22(_objMap, this).entries()).map(function(_ref) {
        var _ref2 = _slicedToArray6(_ref, 2), o2 = _ref2[0], d2 = _ref2[1];
        return [d2, o2];
      });
    }
  }, {
    key: "id",
    value: function id(p2) {
      _classPrivateFieldSet22(_id, this, index3(p2));
      return this;
    }
  }, {
    key: "onCreateObj",
    value: function onCreateObj(fn) {
      _classPrivateFieldSet22(_createObj, this, fn);
      return this;
    }
  }, {
    key: "onUpdateObj",
    value: function onUpdateObj(fn) {
      _classPrivateFieldSet22(_updateObj, this, fn);
      return this;
    }
  }, {
    key: "onRemoveObj",
    value: function onRemoveObj(fn) {
      _classPrivateFieldSet22(_removeObj, this, fn);
      return this;
    }
  }, {
    key: "digest",
    value: function digest(data) {
      var _this = this;
      data.filter(function(d2) {
        return !_classPrivateFieldGet22(_dataMap, _this).has(_classPrivateFieldGet22(_id, _this).call(_this, d2));
      }).forEach(function(d2) {
        var obj = _classPrivateFieldGet22(_createObj, _this).call(_this, d2);
        _classPrivateFieldGet22(_dataMap, _this).set(_classPrivateFieldGet22(_id, _this).call(_this, d2), obj);
        _classPrivateFieldGet22(_objMap, _this).set(obj, d2);
      });
      var dataIdsMap = new Map(data.map(function(d2) {
        return [_classPrivateFieldGet22(_id, _this).call(_this, d2), d2];
      }));
      _classPrivateFieldGet22(_dataMap, this).forEach(function(o2, dId) {
        if (!dataIdsMap.has(dId)) {
          _classPrivateFieldGet22(_removeObj, _this).call(_this, o2, dId);
          _classPrivateFieldGet22(_dataMap, _this)["delete"](dId);
          _classPrivateFieldGet22(_objMap, _this)["delete"](o2);
        } else {
          _classPrivateFieldGet22(_updateObj, _this).call(_this, o2, dataIdsMap.get(dId));
        }
      });
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.digest([]);
      return this;
    }
  }]);
}();

// node_modules/three-globe/dist/three-globe.mjs
var import_frame_ticker = __toESM(require_FrameTicker(), 1);

// node_modules/point-in-polygon-hao/dist/esm/index.js
function pointInPolygon(p2, polygon) {
  var i2;
  var ii;
  var k2 = 0;
  var f2;
  var u1;
  var v1;
  var u2;
  var v2;
  var currentP;
  var nextP;
  var x2 = p2[0];
  var y2 = p2[1];
  var numContours = polygon.length;
  for (i2 = 0; i2 < numContours; i2++) {
    ii = 0;
    var contour = polygon[i2];
    var contourLen = contour.length - 1;
    currentP = contour[0];
    if (currentP[0] !== contour[contourLen][0] && currentP[1] !== contour[contourLen][1]) {
      throw new Error("First and last coordinates in a ring must be the same");
    }
    u1 = currentP[0] - x2;
    v1 = currentP[1] - y2;
    for (ii; ii < contourLen; ii++) {
      nextP = contour[ii + 1];
      u2 = nextP[0] - x2;
      v2 = nextP[1] - y2;
      if (v1 === 0 && v2 === 0) {
        if (u2 <= 0 && u1 >= 0 || u1 <= 0 && u2 >= 0) {
          return 0;
        }
      } else if (v2 >= 0 && v1 <= 0 || v2 <= 0 && v1 >= 0) {
        f2 = orient2d(u1, u2, v1, v2, 0, 0);
        if (f2 === 0) {
          return 0;
        }
        if (f2 > 0 && v2 > 0 && v1 <= 0 || f2 < 0 && v2 <= 0 && v1 > 0) {
          k2++;
        }
      }
      currentP = nextP;
      v1 = v2;
      u1 = u2;
    }
  }
  if (k2 % 2 === 0) {
    return false;
  }
  return true;
}

// node_modules/@turf/helpers/dist/esm/index.js
var earthRadius = 63710088e-1;
var factors = {
  centimeters: earthRadius * 100,
  centimetres: earthRadius * 100,
  degrees: 360 / (2 * Math.PI),
  feet: earthRadius * 3.28084,
  inches: earthRadius * 39.37,
  kilometers: earthRadius / 1e3,
  kilometres: earthRadius / 1e3,
  meters: earthRadius,
  metres: earthRadius,
  miles: earthRadius / 1609.344,
  millimeters: earthRadius * 1e3,
  millimetres: earthRadius * 1e3,
  nauticalmiles: earthRadius / 1852,
  radians: 1,
  yards: earthRadius * 1.0936
};

// node_modules/@turf/invariant/dist/esm/index.js
function getCoord(coord) {
  if (!coord) {
    throw new Error("coord is required");
  }
  if (!Array.isArray(coord)) {
    if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
      return [...coord.geometry.coordinates];
    }
    if (coord.type === "Point") {
      return [...coord.coordinates];
    }
  }
  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
    return [...coord];
  }
  throw new Error("coord must be GeoJSON Point or an Array of numbers");
}
function getGeom(geojson) {
  if (geojson.type === "Feature") {
    return geojson.geometry;
  }
  return geojson;
}

// node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js
function booleanPointInPolygon(point, polygon, options = {}) {
  if (!point) {
    throw new Error("point is required");
  }
  if (!polygon) {
    throw new Error("polygon is required");
  }
  const pt = getCoord(point);
  const geom = getGeom(polygon);
  const type = geom.type;
  const bbox = polygon.bbox;
  let polys = geom.coordinates;
  if (bbox && inBBox(pt, bbox) === false) {
    return false;
  }
  if (type === "Polygon") {
    polys = [polys];
  }
  let result = false;
  for (var i2 = 0; i2 < polys.length; ++i2) {
    const polyResult = pointInPolygon(pt, polys[i2]);
    if (polyResult === 0)
      return options.ignoreBoundary ? false : true;
    else if (polyResult)
      result = true;
  }
  return result;
}
function inBBox(pt, bbox) {
  return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];
}
var turf_boolean_point_in_polygon_default = booleanPointInPolygon;

// node_modules/d3-geo-voronoi/src/math.js
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
var atan2 = Math.atan2;
var cos = Math.cos;
var max2 = Math.max;
var min = Math.min;
var sin = Math.sin;
var sign2 = Math.sign || function(x2) {
  return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
function asin(x2) {
  return x2 > 1 ? halfPi : x2 < -1 ? -halfPi : Math.asin(x2);
}

// node_modules/d3-geo-voronoi/src/cartesian.js
function cartesianDot(a2, b) {
  return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
}
function cartesianCross(a2, b) {
  return [
    a2[1] * b[2] - a2[2] * b[1],
    a2[2] * b[0] - a2[0] * b[2],
    a2[0] * b[1] - a2[1] * b[0]
  ];
}
function cartesianAdd(a2, b) {
  return [a2[0] + b[0], a2[1] + b[1], a2[2] + b[2]];
}
function cartesianNormalize(d2) {
  var l2 = sqrt(d2[0] * d2[0] + d2[1] * d2[1] + d2[2] * d2[2]);
  return [d2[0] / l2, d2[1] / l2, d2[2] / l2];
}

// node_modules/d3-geo-voronoi/src/delaunay.js
function spherical(cartesian2) {
  return [
    atan2(cartesian2[1], cartesian2[0]) * degrees,
    asin(max2(-1, min(1, cartesian2[2]))) * degrees
  ];
}
function cartesian(coordinates) {
  const lambda = coordinates[0] * radians, phi = coordinates[1] * radians, cosphi = cos(phi);
  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];
}
function excess(triangle) {
  triangle = triangle.map((p2) => cartesian(p2));
  return cartesianDot(triangle[0], cartesianCross(triangle[2], triangle[1]));
}
function geoDelaunay(points) {
  const delaunay = geo_delaunay_from(points), triangles = geo_triangles(delaunay), edges = geo_edges(triangles, points), neighbors = geo_neighbors(triangles, points.length), find = geo_find(neighbors, points), circumcenters = geo_circumcenters(triangles, points), { polygons, centers } = geo_polygons(circumcenters, triangles, points), mesh = geo_mesh(polygons), hull = geo_hull(triangles, points), urquhart = geo_urquhart(edges, triangles);
  return {
    delaunay,
    edges,
    triangles,
    centers,
    neighbors,
    polygons,
    mesh,
    hull,
    urquhart,
    find
  };
}
function geo_find(neighbors, points) {
  function distance22(a2, b) {
    let x2 = a2[0] - b[0], y2 = a2[1] - b[1], z2 = a2[2] - b[2];
    return x2 * x2 + y2 * y2 + z2 * z2;
  }
  return function find(x2, y2, next) {
    if (next === void 0)
      next = 0;
    let cell, dist, found = next;
    const xyz = cartesian([x2, y2]);
    do {
      cell = next;
      next = null;
      dist = distance22(xyz, cartesian(points[cell]));
      neighbors[cell].forEach((i2) => {
        let ndist = distance22(xyz, cartesian(points[i2]));
        if (ndist < dist) {
          dist = ndist;
          next = i2;
          found = i2;
          return;
        }
      });
    } while (next !== null);
    return found;
  };
}
function geo_delaunay_from(points) {
  if (points.length < 2)
    return {};
  let pivot = 0;
  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length)
    ;
  const r2 = rotation_default(points[pivot]), projection = stereographic_default().translate([0, 0]).scale(1).rotate(r2.invert([180, 0]));
  points = points.map(projection);
  const zeros = [];
  let max22 = 1;
  for (let i2 = 0, n2 = points.length; i2 < n2; i2++) {
    let m2 = points[i2][0] ** 2 + points[i2][1] ** 2;
    if (!isFinite(m2) || m2 > 1e32)
      zeros.push(i2);
    else if (m2 > max22)
      max22 = m2;
  }
  const FAR = 1e6 * sqrt(max22);
  zeros.forEach((i2) => points[i2] = [FAR, 0]);
  points.push([0, FAR]);
  points.push([-FAR, 0]);
  points.push([0, -FAR]);
  const delaunay = Delaunay.from(points);
  delaunay.projection = projection;
  const { triangles, halfedges, inedges } = delaunay;
  const degenerate = [];
  for (let i2 = 0, l2 = halfedges.length; i2 < l2; i2++) {
    if (halfedges[i2] < 0) {
      const j2 = i2 % 3 == 2 ? i2 - 2 : i2 + 1;
      const k2 = i2 % 3 == 0 ? i2 + 2 : i2 - 1;
      const a2 = halfedges[j2];
      const b = halfedges[k2];
      halfedges[a2] = b;
      halfedges[b] = a2;
      halfedges[j2] = halfedges[k2] = -1;
      triangles[i2] = triangles[j2] = triangles[k2] = pivot;
      inedges[triangles[a2]] = a2 % 3 == 0 ? a2 + 2 : a2 - 1;
      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;
      degenerate.push(Math.min(i2, j2, k2));
      i2 += 2 - i2 % 3;
    } else if (triangles[i2] > points.length - 3 - 1) {
      triangles[i2] = pivot;
    }
  }
  return delaunay;
}
function geo_edges(triangles, points) {
  const _index = /* @__PURE__ */ new Set();
  if (points.length === 2)
    return [[0, 1]];
  triangles.forEach((tri2) => {
    if (tri2[0] === tri2[1])
      return;
    if (excess(tri2.map((i2) => points[i2])) < 0)
      return;
    for (let i2 = 0, j2; i2 < 3; i2++) {
      j2 = (i2 + 1) % 3;
      _index.add(extent([tri2[i2], tri2[j2]]).join("-"));
    }
  });
  return Array.from(_index, (d2) => d2.split("-").map(Number));
}
function geo_triangles(delaunay) {
  const { triangles } = delaunay;
  if (!triangles)
    return [];
  const geo_triangles2 = [];
  for (let i2 = 0, n2 = triangles.length / 3; i2 < n2; i2++) {
    const a2 = triangles[3 * i2], b = triangles[3 * i2 + 1], c2 = triangles[3 * i2 + 2];
    if (a2 !== b && b !== c2) {
      geo_triangles2.push([a2, c2, b]);
    }
  }
  return geo_triangles2;
}
function geo_circumcenters(triangles, points) {
  return triangles.map((tri2) => {
    const c2 = tri2.map((i2) => points[i2]).map(cartesian), V2 = cartesianAdd(
      cartesianAdd(cartesianCross(c2[1], c2[0]), cartesianCross(c2[2], c2[1])),
      cartesianCross(c2[0], c2[2])
    );
    return spherical(cartesianNormalize(V2));
  });
}
function geo_neighbors(triangles, npoints) {
  const neighbors = [];
  triangles.forEach((tri2) => {
    for (let j2 = 0; j2 < 3; j2++) {
      const a2 = tri2[j2], b = tri2[(j2 + 1) % 3];
      neighbors[a2] = neighbors[a2] || [];
      neighbors[a2].push(b);
    }
  });
  if (triangles.length === 0) {
    if (npoints === 2)
      neighbors[0] = [1], neighbors[1] = [0];
    else if (npoints === 1)
      neighbors[0] = [];
  }
  return neighbors;
}
function geo_polygons(circumcenters, triangles, points) {
  const polygons = [];
  const centers = circumcenters.slice();
  if (triangles.length === 0) {
    if (points.length < 2)
      return { polygons, centers };
    if (points.length === 2) {
      const a2 = cartesian(points[0]), b = cartesian(points[1]), m2 = cartesianNormalize(cartesianAdd(a2, b)), d2 = cartesianNormalize(cartesianCross(a2, b)), c2 = cartesianCross(m2, d2);
      const poly = [
        m2,
        cartesianCross(m2, c2),
        cartesianCross(cartesianCross(m2, c2), c2),
        cartesianCross(cartesianCross(cartesianCross(m2, c2), c2), c2)
      ].map(spherical).map(supplement);
      return polygons.push(poly), polygons.push(poly.slice().reverse()), { polygons, centers };
    }
  }
  triangles.forEach((tri2, t2) => {
    for (let j2 = 0; j2 < 3; j2++) {
      const a2 = tri2[j2], b = tri2[(j2 + 1) % 3], c2 = tri2[(j2 + 2) % 3];
      polygons[a2] = polygons[a2] || [];
      polygons[a2].push([b, c2, t2, [a2, b, c2]]);
    }
  });
  const reordered = polygons.map((poly) => {
    const p2 = [poly[0][2]];
    let k2 = poly[0][1];
    for (let i2 = 1; i2 < poly.length; i2++) {
      for (let j2 = 0; j2 < poly.length; j2++) {
        if (poly[j2][0] == k2) {
          k2 = poly[j2][1];
          p2.push(poly[j2][2]);
          break;
        }
      }
    }
    if (p2.length > 2) {
      return p2;
    } else if (p2.length == 2) {
      const R0 = o_midpoint(
        points[poly[0][3][0]],
        points[poly[0][3][1]],
        centers[p2[0]]
      ), R1 = o_midpoint(
        points[poly[0][3][2]],
        points[poly[0][3][0]],
        centers[p2[0]]
      );
      const i0 = supplement(R0), i1 = supplement(R1);
      return [p2[0], i1, p2[1], i0];
    }
  });
  function supplement(point) {
    let f2 = -1;
    centers.slice(triangles.length, Infinity).forEach((p2, i2) => {
      if (p2[0] === point[0] && p2[1] === point[1])
        f2 = i2 + triangles.length;
    });
    if (f2 < 0)
      f2 = centers.length, centers.push(point);
    return f2;
  }
  return { polygons: reordered, centers };
}
function o_midpoint(a2, b, c2) {
  a2 = cartesian(a2);
  b = cartesian(b);
  c2 = cartesian(c2);
  const s2 = sign2(cartesianDot(cartesianCross(b, a2), c2));
  return spherical(cartesianNormalize(cartesianAdd(a2, b)).map((d2) => s2 * d2));
}
function geo_mesh(polygons) {
  const mesh = [];
  polygons.forEach((poly) => {
    if (!poly)
      return;
    let p2 = poly[poly.length - 1];
    for (let q2 of poly) {
      if (q2 > p2)
        mesh.push([p2, q2]);
      p2 = q2;
    }
  });
  return mesh;
}
function geo_urquhart(edges, triangles) {
  return function(distances) {
    const _lengths = /* @__PURE__ */ new Map(), _urquhart = /* @__PURE__ */ new Map();
    edges.forEach((edge, i2) => {
      const u2 = edge.join("-");
      _lengths.set(u2, distances[i2]);
      _urquhart.set(u2, true);
    });
    triangles.forEach((tri2) => {
      let l2 = 0, remove2 = -1;
      for (let j2 = 0; j2 < 3; j2++) {
        let u2 = extent([tri2[j2], tri2[(j2 + 1) % 3]]).join("-");
        if (_lengths.get(u2) > l2) {
          l2 = _lengths.get(u2);
          remove2 = u2;
        }
      }
      _urquhart.set(remove2, false);
    });
    return edges.map((edge) => _urquhart.get(edge.join("-")));
  };
}
function geo_hull(triangles, points) {
  const _hull = /* @__PURE__ */ new Set(), hull = [];
  triangles.map((tri2) => {
    if (excess(tri2.map((i2) => points[i2 > points.length ? 0 : i2])) > 1e-12)
      return;
    for (let i2 = 0; i2 < 3; i2++) {
      let e2 = [tri2[i2], tri2[(i2 + 1) % 3]], code3 = `${e2[0]}-${e2[1]}`;
      if (_hull.has(code3))
        _hull.delete(code3);
      else
        _hull.add(`${e2[1]}-${e2[0]}`);
    }
  });
  const _index = /* @__PURE__ */ new Map();
  let start;
  _hull.forEach((e2) => {
    e2 = e2.split("-").map(Number);
    _index.set(e2[0], e2[1]);
    start = e2[0];
  });
  if (start === void 0)
    return hull;
  let next = start;
  do {
    hull.push(next);
    let n2 = _index.get(next);
    _index.set(next, -1);
    next = n2;
  } while (next > -1 && next !== start);
  return hull;
}

// node_modules/d3-geo-voronoi/src/voronoi.js
function geoVoronoi(data) {
  const v2 = function(data2) {
    v2.delaunay = null;
    v2._data = data2;
    if (typeof v2._data === "object" && v2._data.type === "FeatureCollection") {
      v2._data = v2._data.features;
    }
    if (typeof v2._data === "object") {
      const temp = v2._data.map((d2) => [v2._vx(d2), v2._vy(d2), d2]).filter((d2) => isFinite(d2[0] + d2[1]));
      v2.points = temp.map((d2) => [d2[0], d2[1]]);
      v2.valid = temp.map((d2) => d2[2]);
      v2.delaunay = geoDelaunay(v2.points);
    }
    return v2;
  };
  v2._vx = function(d2) {
    if (typeof d2 == "object" && "type" in d2) {
      return centroid_default(d2)[0];
    }
    if (0 in d2)
      return d2[0];
  };
  v2._vy = function(d2) {
    if (typeof d2 == "object" && "type" in d2) {
      return centroid_default(d2)[1];
    }
    if (1 in d2)
      return d2[1];
  };
  v2.x = function(f2) {
    if (!f2)
      return v2._vx;
    v2._vx = f2;
    return v2;
  };
  v2.y = function(f2) {
    if (!f2)
      return v2._vy;
    v2._vy = f2;
    return v2;
  };
  v2.polygons = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    const coll = {
      type: "FeatureCollection",
      features: []
    };
    if (v2.valid.length === 0)
      return coll;
    v2.delaunay.polygons.forEach(
      (poly, i2) => coll.features.push({
        type: "Feature",
        geometry: !poly ? null : {
          type: "Polygon",
          coordinates: [
            [...poly, poly[0]].map((i3) => v2.delaunay.centers[i3])
          ]
        },
        properties: {
          site: v2.valid[i2],
          sitecoordinates: v2.points[i2],
          neighbours: v2.delaunay.neighbors[i2]
          // not part of the public API
        }
      })
    );
    if (v2.valid.length === 1)
      coll.features.push({
        type: "Feature",
        geometry: { type: "Sphere" },
        properties: {
          site: v2.valid[0],
          sitecoordinates: v2.points[0],
          neighbours: []
        }
      });
    return coll;
  };
  v2.triangles = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    return {
      type: "FeatureCollection",
      features: v2.delaunay.triangles.map((tri2, index6) => {
        tri2 = tri2.map((i2) => v2.points[i2]);
        tri2.center = v2.delaunay.centers[index6];
        return tri2;
      }).filter((tri2) => excess(tri2) > 0).map((tri2) => ({
        type: "Feature",
        properties: {
          circumcenter: tri2.center
        },
        geometry: {
          type: "Polygon",
          coordinates: [[...tri2, tri2[0]]]
        }
      }))
    };
  };
  v2.links = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    const _distances = v2.delaunay.edges.map(
      (e2) => distance_default(v2.points[e2[0]], v2.points[e2[1]])
    ), _urquart = v2.delaunay.urquhart(_distances);
    return {
      type: "FeatureCollection",
      features: v2.delaunay.edges.map((e2, i2) => ({
        type: "Feature",
        properties: {
          source: v2.valid[e2[0]],
          target: v2.valid[e2[1]],
          length: _distances[i2],
          urquhart: !!_urquart[i2]
        },
        geometry: {
          type: "LineString",
          coordinates: [v2.points[e2[0]], v2.points[e2[1]]]
        }
      }))
    };
  };
  v2.mesh = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    return {
      type: "MultiLineString",
      coordinates: v2.delaunay.edges.map((e2) => [
        v2.points[e2[0]],
        v2.points[e2[1]]
      ])
    };
  };
  v2.cellMesh = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay)
      return false;
    const { centers, polygons } = v2.delaunay;
    const coordinates = [];
    for (const p2 of polygons) {
      if (!p2)
        continue;
      for (let n2 = p2.length, p0 = p2[n2 - 1], p1 = p2[0], i2 = 0; i2 < n2; p0 = p1, p1 = p2[++i2]) {
        if (p1 > p0) {
          coordinates.push([centers[p0], centers[p1]]);
        }
      }
    }
    return {
      type: "MultiLineString",
      coordinates
    };
  };
  v2._found = void 0;
  v2.find = function(x2, y2, radius) {
    v2._found = v2.delaunay.find(x2, y2, v2._found);
    if (!radius || distance_default([x2, y2], v2.points[v2._found]) < radius)
      return v2._found;
  };
  v2.hull = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    const hull = v2.delaunay.hull, points = v2.points;
    return hull.length === 0 ? null : {
      type: "Polygon",
      coordinates: [[...hull.map((i2) => points[i2]), points[hull[0]]]]
    };
  };
  return data ? v2(data) : v2;
}

// node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs
function _arrayLikeToArray7(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles7(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles6(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray7(r2);
}
function _assertThisInitialized3(e2) {
  if (void 0 === e2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}
function _callSuper3(t2, o2, e2) {
  return o2 = _getPrototypeOf3(o2), _possibleConstructorReturn3(t2, _isNativeReflectConstruct3() ? Reflect.construct(o2, [], _getPrototypeOf3(t2).constructor) : o2.apply(t2, e2));
}
function _classCallCheck5(a2, n2) {
  if (!(a2 instanceof n2))
    throw new TypeError("Cannot call a class as a function");
}
function _createClass5(e2, r2, t2) {
  return Object.defineProperty(e2, "prototype", {
    writable: false
  }), e2;
}
function _getPrototypeOf3(t2) {
  return _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf3(t2);
}
function _inherits3(t2, e2) {
  if ("function" != typeof e2 && null !== e2)
    throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e2 && e2.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e2 && _setPrototypeOf3(t2, e2);
}
function _isNativeReflectConstruct3() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct3 = function() {
    return !!t2;
  })();
}
function _iterableToArray6(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit7(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn3(t2, e2) {
  if (e2 && ("object" == typeof e2 || "function" == typeof e2))
    return e2;
  if (void 0 !== e2)
    throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized3(t2);
}
function _setPrototypeOf3(t2, e2) {
  return _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, _setPrototypeOf3(t2, e2);
}
function _slicedToArray7(r2, e2) {
  return _arrayWithHoles7(r2) || _iterableToArrayLimit7(r2, e2) || _unsupportedIterableToArray7(r2, e2) || _nonIterableRest7();
}
function _toConsumableArray6(r2) {
  return _arrayWithoutHoles6(r2) || _iterableToArray6(r2) || _unsupportedIterableToArray7(r2) || _nonIterableSpread6();
}
function _unsupportedIterableToArray7(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray7(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray7(r2, a2) : void 0;
  }
}
function geoPolygonTriangulate(polygon) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$resolution = _ref.resolution, resolution2 = _ref$resolution === void 0 ? Infinity : _ref$resolution;
  var contour = interpolateContourPoints(polygon, resolution2);
  var edgePoints = merge(contour);
  var innerPoints = getInnerGeoPoints(polygon, resolution2);
  var points = [].concat(_toConsumableArray6(edgePoints), _toConsumableArray6(innerPoints));
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds = bounds_default(boundariesGeojson), _geoBounds2 = _slicedToArray7(_geoBounds, 2), _geoBounds2$ = _slicedToArray7(_geoBounds2[0], 2), minLng = _geoBounds2$[0], minLat = _geoBounds2$[1], _geoBounds2$2 = _slicedToArray7(_geoBounds2[1], 2), maxLng = _geoBounds2$2[0], maxLat = _geoBounds2$2[1];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  var indices = [];
  if (crossesPoleOrAntimeridian) {
    var vt = geoVoronoi(points).triangles();
    var pntMap = new Map(points.map(function(_ref2, idx) {
      var _ref3 = _slicedToArray7(_ref2, 2), lng = _ref3[0], lat = _ref3[1];
      return ["".concat(lng, "-").concat(lat), idx];
    }));
    vt.features.forEach(function(f2) {
      var _indices;
      var triangle = f2.geometry.coordinates[0].slice(0, 3).reverse();
      var inds = [];
      triangle.forEach(function(_ref4) {
        var _ref5 = _slicedToArray7(_ref4, 2), lng = _ref5[0], lat = _ref5[1];
        var k2 = "".concat(lng, "-").concat(lat);
        pntMap.has(k2) && inds.push(pntMap.get(k2));
      });
      if (inds.length !== 3)
        return;
      if (inds.some(function(ind) {
        return ind < edgePoints.length;
      })) {
        var triangleCentroid = f2.properties.circumcenter;
        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian))
          return;
      }
      (_indices = indices).push.apply(_indices, inds);
    });
  } else if (!innerPoints.length) {
    var _earcutFlatten = flatten(contour), vertices = _earcutFlatten.vertices, _earcutFlatten$holes = _earcutFlatten.holes, holes = _earcutFlatten$holes === void 0 ? [] : _earcutFlatten$holes;
    indices = earcut(vertices, holes, 2);
  } else {
    var delaunay = Delaunator.from(points);
    var _loop = function _loop2(i3) {
      var _indices2;
      var inds = [2, 1, 0].map(function(idx) {
        return delaunay.triangles[i3 + idx];
      });
      var triangle = inds.map(function(indice) {
        return points[indice];
      });
      if (inds.some(function(ind) {
        return ind < edgePoints.length;
      })) {
        var triangleCentroid = [0, 1].map(function(coordIdx) {
          return mean(triangle, function(p2) {
            return p2[coordIdx];
          });
        });
        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian))
          return 1;
      }
      (_indices2 = indices).push.apply(_indices2, _toConsumableArray6(inds));
    };
    for (var i2 = 0, len = delaunay.triangles.length; i2 < len; i2 += 3) {
      if (_loop(i2))
        continue;
    }
  }
  var lngUvScale = linear(extent(points, function(d2) {
    return d2[0];
  }), [0, 1]);
  var latUvScale = linear(extent(points, function(d2) {
    return d2[1];
  }), [0, 1]);
  var uvs = points.map(function(_ref6) {
    var _ref7 = _slicedToArray7(_ref6, 2), lng = _ref7[0], lat = _ref7[1];
    return [lngUvScale(lng), latUvScale(lat)];
  });
  var triangles = {
    points,
    indices,
    uvs
  };
  return {
    contour,
    triangles
  };
}
function interpolateContourPoints(polygon, maxDistance) {
  return polygon.map(function(coords) {
    var pnts = [];
    var prevPnt;
    coords.forEach(function(pnt) {
      if (prevPnt) {
        var dist = distance_default(pnt, prevPnt) * 180 / Math.PI;
        if (dist > maxDistance) {
          var interpol = interpolate_default(prevPnt, pnt);
          var tStep = 1 / Math.ceil(dist / maxDistance);
          var t2 = tStep;
          while (t2 < 1) {
            pnts.push(interpol(t2));
            t2 += tStep;
          }
        }
      }
      pnts.push(prevPnt = pnt);
    });
    return pnts;
  });
}
function getInnerGeoPoints(polygon, maxDistance) {
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds3 = bounds_default(boundariesGeojson), _geoBounds4 = _slicedToArray7(_geoBounds3, 2), _geoBounds4$ = _slicedToArray7(_geoBounds4[0], 2), minLng = _geoBounds4$[0], minLat = _geoBounds4$[1], _geoBounds4$2 = _slicedToArray7(_geoBounds4[1], 2), maxLng = _geoBounds4$2[0], maxLat = _geoBounds4$2[1];
  if (Math.min(Math.abs(maxLng - minLng), Math.abs(maxLat - minLat)) < maxDistance)
    return [];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  return getGeoSpiralGrid(maxDistance, {
    minLng,
    maxLng,
    minLat,
    maxLat
  }).filter(function(pnt) {
    return pointInside(pnt, boundariesGeojson, crossesPoleOrAntimeridian);
  });
}
function getGeoSpiralGrid(distanceBetweenPoints) {
  var _ref8 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, minLng = _ref8.minLng, maxLng = _ref8.maxLng, minLat = _ref8.minLat, maxLat = _ref8.maxLat;
  var numPoints = Math.round(Math.pow(360 / distanceBetweenPoints, 2) / Math.PI);
  var phi = (1 + Math.sqrt(5)) / 2;
  var getPntLng = function getPntLng2(idx) {
    return idx / phi * 360 % 360 - 180;
  };
  var getPntLat = function getPntLat2(idx) {
    return Math.acos(2 * idx / numPoints - 1) / Math.PI * 180 - 90;
  };
  var getPntIdx = function getPntIdx2(lat) {
    return numPoints * (Math.cos((lat + 90) * Math.PI / 180) + 1) / 2;
  };
  var pntIdxRange = [maxLat !== void 0 ? Math.ceil(getPntIdx(maxLat)) : 0, minLat !== void 0 ? Math.floor(getPntIdx(minLat)) : numPoints - 1];
  var isLngInRange = minLng === void 0 && maxLng === void 0 ? function() {
    return true;
  } : minLng === void 0 ? function(lng2) {
    return lng2 <= maxLng;
  } : maxLng === void 0 ? function(lng2) {
    return lng2 >= minLng;
  } : maxLng >= minLng ? function(lng2) {
    return lng2 >= minLng && lng2 <= maxLng;
  } : function(lng2) {
    return lng2 >= minLng || lng2 <= maxLng;
  };
  var pnts = [];
  for (var i2 = pntIdxRange[0]; i2 <= pntIdxRange[1]; i2++) {
    var lng = getPntLng(i2);
    isLngInRange(lng) && pnts.push([lng, getPntLat(i2)]);
  }
  return pnts;
}
function pointInside(pnt, polygon) {
  var crossesPoleOrAntimeridian = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  return crossesPoleOrAntimeridian ? contains_default(polygon, pnt) : turf_boolean_point_in_polygon_default(pnt, polygon);
}
var THREE2 = window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn2 = new THREE2.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var ConicPolygonGeometry = function(_THREE$BufferGeometry) {
  function ConicPolygonGeometry2(polygonGeoJson, bottomHeight, topHeight, closedBottom, closedTop, includeSides, curvatureResolution) {
    var _this;
    _classCallCheck5(this, ConicPolygonGeometry2);
    _this = _callSuper3(this, ConicPolygonGeometry2);
    _this.type = "ConicPolygonGeometry";
    _this.parameters = {
      polygonGeoJson,
      bottomHeight,
      topHeight,
      closedBottom,
      closedTop,
      includeSides,
      curvatureResolution
    };
    bottomHeight = bottomHeight || 0;
    topHeight = topHeight || 1;
    closedBottom = closedBottom !== void 0 ? closedBottom : true;
    closedTop = closedTop !== void 0 ? closedTop : true;
    includeSides = includeSides !== void 0 ? includeSides : true;
    curvatureResolution = curvatureResolution || 5;
    var _geoPolygonTriangulat = geoPolygonTriangulate(polygonGeoJson, {
      resolution: curvatureResolution
    }), contour = _geoPolygonTriangulat.contour, triangles = _geoPolygonTriangulat.triangles;
    var flatUvs = merge(triangles.uvs);
    var vertices = [];
    var uvs = [];
    var indices = [];
    var groupCnt = 0;
    var addGroup = function addGroup2(groupData) {
      var prevVertCnt = Math.round(vertices.length / 3);
      var prevIndCnt = indices.length;
      vertices = vertices.concat(groupData.vertices);
      uvs = uvs.concat(groupData.uvs);
      indices = indices.concat(!prevVertCnt ? groupData.indices : groupData.indices.map(function(ind) {
        return ind + prevVertCnt;
      }));
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    };
    includeSides && addGroup(generateTorso());
    closedBottom && addGroup(generateCap(bottomHeight, false));
    closedTop && addGroup(generateCap(topHeight, true));
    _this.setIndex(indices);
    _this[setAttributeFn2]("position", new THREE2.Float32BufferAttribute(vertices, 3));
    _this[setAttributeFn2]("uv", new THREE2.Float32BufferAttribute(uvs, 2));
    _this.computeVertexNormals();
    function generateVertices(polygon, altitude) {
      var altFn = typeof altitude === "function" ? altitude : function() {
        return altitude;
      };
      var coords3d = polygon.map(function(coords) {
        return coords.map(function(_ref) {
          var _ref2 = _slicedToArray7(_ref, 2), lng = _ref2[0], lat = _ref2[1];
          return polar2Cartesian3(lat, lng, altFn(lng, lat));
        });
      });
      return flatten(coords3d);
    }
    function generateTorso() {
      var _generateVertices = generateVertices(contour, bottomHeight), bottomVerts = _generateVertices.vertices, holes = _generateVertices.holes;
      var _generateVertices2 = generateVertices(contour, topHeight), topVerts = _generateVertices2.vertices;
      var vertices2 = merge([topVerts, bottomVerts]);
      var numPoints = Math.round(topVerts.length / 3);
      var holesIdx = new Set(holes);
      var lastHoleIdx = 0;
      var indices2 = [];
      for (var v0Idx = 0; v0Idx < numPoints; v0Idx++) {
        var v1Idx = v0Idx + 1;
        if (v1Idx === numPoints) {
          v1Idx = lastHoleIdx;
        } else if (holesIdx.has(v1Idx)) {
          var holeIdx = v1Idx;
          v1Idx = lastHoleIdx;
          lastHoleIdx = holeIdx;
        }
        indices2.push(v0Idx, v0Idx + numPoints, v1Idx + numPoints);
        indices2.push(v1Idx + numPoints, v1Idx, v0Idx);
      }
      var uvs2 = [];
      for (var v2 = 1; v2 >= 0; v2--)
        for (var i2 = 0; i2 < numPoints; i2 += 1)
          uvs2.push(i2 / (numPoints - 1), v2);
      return {
        indices: indices2,
        vertices: vertices2,
        uvs: uvs2
      };
    }
    function generateCap(radius) {
      var isTop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return {
        // need to reverse-wind the bottom triangles to make them face outwards
        indices: isTop ? triangles.indices : triangles.indices.slice().reverse(),
        vertices: generateVertices([triangles.points], radius).vertices,
        uvs: flatUvs
      };
    }
    return _this;
  }
  _inherits3(ConicPolygonGeometry2, _THREE$BufferGeometry);
  return _createClass5(ConicPolygonGeometry2);
}(THREE2.BufferGeometry);
function polar2Cartesian3(lat, lng) {
  var r2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r2 * Math.sin(phi) * Math.cos(theta),
    // x
    r2 * Math.cos(phi),
    // y
    r2 * Math.sin(phi) * Math.sin(theta)
    // z
  ];
}

// node_modules/index-array-by/dist/index-array-by.mjs
function _arrayLikeToArray8(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles8(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles7(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray8(r2);
}
function _iterableToArray7(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit8(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest8() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread7() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectWithoutProperties(e2, t2) {
  if (null == e2)
    return {};
  var o2, r2, i2 = _objectWithoutPropertiesLoose(e2, t2);
  if (Object.getOwnPropertySymbols) {
    var s2 = Object.getOwnPropertySymbols(e2);
    for (r2 = 0; r2 < s2.length; r2++)
      o2 = s2[r2], t2.includes(o2) || {}.propertyIsEnumerable.call(e2, o2) && (i2[o2] = e2[o2]);
  }
  return i2;
}
function _objectWithoutPropertiesLoose(r2, e2) {
  if (null == r2)
    return {};
  var t2 = {};
  for (var n2 in r2)
    if ({}.hasOwnProperty.call(r2, n2)) {
      if (e2.includes(n2))
        continue;
      t2[n2] = r2[n2];
    }
  return t2;
}
function _slicedToArray8(r2, e2) {
  return _arrayWithHoles8(r2) || _iterableToArrayLimit8(r2, e2) || _unsupportedIterableToArray8(r2, e2) || _nonIterableRest8();
}
function _toConsumableArray7(r2) {
  return _arrayWithoutHoles7(r2) || _iterableToArray7(r2) || _unsupportedIterableToArray8(r2) || _nonIterableSpread7();
}
function _toPrimitive4(t2, r2) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2);
    if ("object" != typeof i2)
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t2);
}
function _toPropertyKey4(t2) {
  var i2 = _toPrimitive4(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray8(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray8(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray8(r2, a2) : void 0;
  }
}
var index4 = function() {
  var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var keyAccessors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var multiItem = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var flattenKeys = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [void 0] : [keyAccessors]).map(function(key) {
    return {
      keyAccessor: key,
      isProp: !(key instanceof Function)
    };
  });
  var indexedResult = list.reduce(function(res, item) {
    var iterObj = res;
    var itemVal = item;
    keys.forEach(function(_ref, idx) {
      var keyAccessor = _ref.keyAccessor, isProp = _ref.isProp;
      var key;
      if (isProp) {
        var _itemVal = itemVal, propVal = _itemVal[keyAccessor], rest = _objectWithoutProperties(_itemVal, [keyAccessor].map(_toPropertyKey4));
        key = propVal;
        itemVal = rest;
      } else {
        key = keyAccessor(itemVal, idx);
      }
      if (idx + 1 < keys.length) {
        if (!iterObj.hasOwnProperty(key)) {
          iterObj[key] = {};
        }
        iterObj = iterObj[key];
      } else {
        if (multiItem) {
          if (!iterObj.hasOwnProperty(key)) {
            iterObj[key] = [];
          }
          iterObj[key].push(itemVal);
        } else {
          iterObj[key] = itemVal;
        }
      }
    });
    return res;
  }, {});
  if (multiItem instanceof Function) {
    (function reduce(node) {
      var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      if (level === keys.length) {
        Object.keys(node).forEach(function(k2) {
          return node[k2] = multiItem(node[k2]);
        });
      } else {
        Object.values(node).forEach(function(child) {
          return reduce(child, level + 1);
        });
      }
    })(indexedResult);
  }
  var result = indexedResult;
  if (flattenKeys) {
    result = [];
    (function flatten2(node) {
      var accKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (accKeys.length === keys.length) {
        result.push({
          keys: accKeys,
          vals: node
        });
      } else {
        Object.entries(node).forEach(function(_ref2) {
          var _ref3 = _slicedToArray8(_ref2, 2), key = _ref3[0], val = _ref3[1];
          return flatten2(val, [].concat(_toConsumableArray7(accKeys), [key]));
        });
      }
    })(indexedResult);
    if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {
      result[0].keys = [];
    }
  }
  return result;
};

// node_modules/h3-js/dist/browser/h3-js.es.js
var libh3 = function(libh32) {
  libh32 = libh32 || {};
  var Module = typeof libh32 !== "undefined" ? libh32 : {};
  var moduleOverrides = {};
  var key;
  for (key in Module) {
    if (Module.hasOwnProperty(key)) {
      moduleOverrides[key] = Module[key];
    }
  }
  var arguments_ = [];
  var scriptDirectory = "";
  function locateFile(path) {
    if (Module["locateFile"]) {
      return Module["locateFile"](path, scriptDirectory);
    }
    return scriptDirectory + path;
  }
  var readAsync;
  {
    if (typeof document !== "undefined" && document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
    if (scriptDirectory.indexOf("blob:") !== 0) {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
    } else {
      scriptDirectory = "";
    }
    readAsync = function readAsync2(url, onload, onerror) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = function xhr_onload() {
        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
          onload(xhr.response);
          return;
        }
        var data = tryParseAsDataURI(url);
        if (data) {
          onload(data.buffer);
          return;
        }
        onerror();
      };
      xhr.onerror = onerror;
      xhr.send(null);
    };
  }
  var out = Module["print"] || console.log.bind(console);
  var err = Module["printErr"] || console.warn.bind(console);
  for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
      Module[key] = moduleOverrides[key];
    }
  }
  moduleOverrides = null;
  if (Module["arguments"]) {
    arguments_ = Module["arguments"];
  }
  var tempRet0 = 0;
  var setTempRet0 = function(value) {
    tempRet0 = value;
  };
  var getTempRet0 = function() {
    return tempRet0;
  };
  var GLOBAL_BASE = 8;
  function setValue(ptr, value, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        HEAP8[ptr >> 0] = value;
        break;
      case "i8":
        HEAP8[ptr >> 0] = value;
        break;
      case "i16":
        HEAP16[ptr >> 1] = value;
        break;
      case "i32":
        HEAP32[ptr >> 2] = value;
        break;
      case "i64":
        tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
        break;
      case "float":
        HEAPF32[ptr >> 2] = value;
        break;
      case "double":
        HEAPF64[ptr >> 3] = value;
        break;
      default:
        abort("invalid type for setValue: " + type);
    }
  }
  function getValue(ptr, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        return HEAP8[ptr >> 0];
      case "i8":
        return HEAP8[ptr >> 0];
      case "i16":
        return HEAP16[ptr >> 1];
      case "i32":
        return HEAP32[ptr >> 2];
      case "i64":
        return HEAP32[ptr >> 2];
      case "float":
        return HEAPF32[ptr >> 2];
      case "double":
        return HEAPF64[ptr >> 3];
      default:
        abort("invalid type for getValue: " + type);
    }
    return null;
  }
  var ABORT = false;
  function assert(condition, text) {
    if (!condition) {
      abort("Assertion failed: " + text);
    }
  }
  function getCFunc(ident) {
    var func = Module["_" + ident];
    assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
    return func;
  }
  function ccall(ident, returnType, argTypes, args, opts) {
    var toC = {
      "string": function(str) {
        var ret2 = 0;
        if (str !== null && str !== void 0 && str !== 0) {
          var len = (str.length << 2) + 1;
          ret2 = stackAlloc(len);
          stringToUTF8(str, ret2, len);
        }
        return ret2;
      },
      "array": function(arr) {
        var ret2 = stackAlloc(arr.length);
        writeArrayToMemory(arr, ret2);
        return ret2;
      }
    };
    function convertReturnValue(ret2) {
      if (returnType === "string") {
        return UTF8ToString(ret2);
      }
      if (returnType === "boolean") {
        return Boolean(ret2);
      }
      return ret2;
    }
    var func = getCFunc(ident);
    var cArgs = [];
    var stack3 = 0;
    if (args) {
      for (var i2 = 0; i2 < args.length; i2++) {
        var converter = toC[argTypes[i2]];
        if (converter) {
          if (stack3 === 0) {
            stack3 = stackSave();
          }
          cArgs[i2] = converter(args[i2]);
        } else {
          cArgs[i2] = args[i2];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    ret = convertReturnValue(ret);
    if (stack3 !== 0) {
      stackRestore(stack3);
    }
    return ret;
  }
  function cwrap(ident, returnType, argTypes, opts) {
    argTypes = argTypes || [];
    var numericArgs = argTypes.every(function(type) {
      return type === "number";
    });
    var numericRet = returnType !== "string";
    if (numericRet && numericArgs && !opts) {
      return getCFunc(ident);
    }
    return function() {
      return ccall(ident, returnType, argTypes, arguments, opts);
    };
  }
  var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
  function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
    var endIdx = idx + maxBytesToRead;
    var endPtr = idx;
    while (u8Array[endPtr] && !(endPtr >= endIdx)) {
      ++endPtr;
    }
    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
      return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
    } else {
      var str = "";
      while (idx < endPtr) {
        var u0 = u8Array[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = u8Array[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u2 = u8Array[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
    }
    return str;
  }
  function UTF8ToString(ptr, maxBytesToRead) {
    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
  }
  function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) {
      return 0;
    }
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i2 = 0; i2 < str.length; ++i2) {
      var u2 = str.charCodeAt(i2);
      if (u2 >= 55296 && u2 <= 57343) {
        var u1 = str.charCodeAt(++i2);
        u2 = 65536 + ((u2 & 1023) << 10) | u1 & 1023;
      }
      if (u2 <= 127) {
        if (outIdx >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = u2;
      } else if (u2 <= 2047) {
        if (outIdx + 1 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 192 | u2 >> 6;
        outU8Array[outIdx++] = 128 | u2 & 63;
      } else if (u2 <= 65535) {
        if (outIdx + 2 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 224 | u2 >> 12;
        outU8Array[outIdx++] = 128 | u2 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u2 & 63;
      } else {
        if (outIdx + 3 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 240 | u2 >> 18;
        outU8Array[outIdx++] = 128 | u2 >> 12 & 63;
        outU8Array[outIdx++] = 128 | u2 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u2 & 63;
      }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
  }
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
  }
  var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
  function writeArrayToMemory(array3, buffer4) {
    HEAP8.set(array3, buffer4);
  }
  function alignUp(x2, multiple) {
    if (x2 % multiple > 0) {
      x2 += multiple - x2 % multiple;
    }
    return x2;
  }
  var buffer3, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
  function updateGlobalBufferAndViews(buf) {
    buffer3 = buf;
    Module["HEAP8"] = HEAP8 = new Int8Array(buf);
    Module["HEAP16"] = HEAP16 = new Int16Array(buf);
    Module["HEAP32"] = HEAP32 = new Int32Array(buf);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
  }
  var DYNAMIC_BASE = 5271520, DYNAMICTOP_PTR = 28608;
  var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 33554432;
  if (Module["buffer"]) {
    buffer3 = Module["buffer"];
  } else {
    buffer3 = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  INITIAL_TOTAL_MEMORY = buffer3.byteLength;
  updateGlobalBufferAndViews(buffer3);
  HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
  function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
      var callback = callbacks.shift();
      if (typeof callback == "function") {
        callback();
        continue;
      }
      var func = callback.func;
      if (typeof func === "number") {
        if (callback.arg === void 0) {
          Module["dynCall_v"](func);
        } else {
          Module["dynCall_vi"](func, callback.arg);
        }
      } else {
        func(callback.arg === void 0 ? null : callback.arg);
      }
    }
  }
  var __ATPRERUN__ = [];
  var __ATINIT__ = [];
  var __ATMAIN__ = [];
  var __ATPOSTRUN__ = [];
  function preRun() {
    if (Module["preRun"]) {
      if (typeof Module["preRun"] == "function") {
        Module["preRun"] = [Module["preRun"]];
      }
      while (Module["preRun"].length) {
        addOnPreRun(Module["preRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }
  function initRuntime() {
    callRuntimeCallbacks(__ATINIT__);
  }
  function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
  }
  function postRun() {
    if (Module["postRun"]) {
      if (typeof Module["postRun"] == "function") {
        Module["postRun"] = [Module["postRun"]];
      }
      while (Module["postRun"].length) {
        addOnPostRun(Module["postRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
  }
  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }
  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }
  var Math_abs = Math.abs;
  var Math_ceil = Math.ceil;
  var Math_floor = Math.floor;
  var Math_min = Math.min;
  var runDependencies = 0;
  var runDependencyWatcher = null;
  var dependenciesFulfilled = null;
  function addRunDependency(id) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
  }
  function removeRunDependency(id) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
    if (runDependencies == 0) {
      if (runDependencyWatcher !== null) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
      }
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback();
      }
    }
  }
  Module["preloadedImages"] = {};
  Module["preloadedAudios"] = {};
  var memoryInitializer = null;
  var dataURIPrefix = "data:application/octet-stream;base64,";
  function isDataURI(filename) {
    return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
  }
  var tempDouble;
  var tempI64;
  memoryInitializer = "data:application/octet-stream;base64,";
  var tempDoublePtr = 28624;
  function demangle(func) {
    return func;
  }
  function demangleAll(text) {
    var regex = /\b__Z[\w\d_]+/g;
    return text.replace(regex, function(x2) {
      var y2 = demangle(x2);
      return x2 === y2 ? x2 : y2 + " [" + x2 + "]";
    });
  }
  function jsStackTrace() {
    var err2 = new Error();
    if (!err2.stack) {
      try {
        throw new Error(0);
      } catch (e2) {
        err2 = e2;
      }
      if (!err2.stack) {
        return "(no stack trace available)";
      }
    }
    return err2.stack.toString();
  }
  function stackTrace() {
    var js3 = jsStackTrace();
    if (Module["extraStackTrace"]) {
      js3 += "\n" + Module["extraStackTrace"]();
    }
    return demangleAll(js3);
  }
  function ___assert_fail(condition, filename, line, func) {
    abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
  }
  function _emscripten_get_heap_size() {
    return HEAP8.length;
  }
  function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
  }
  function ___setErrNo(value) {
    if (Module["___errno_location"]) {
      HEAP32[Module["___errno_location"]() >> 2] = value;
    }
    return value;
  }
  function abortOnCannotGrowMemory(requestedSize) {
    abort("OOM");
  }
  function emscripten_realloc_buffer(size) {
    try {
      var newBuffer = new ArrayBuffer(size);
      if (newBuffer.byteLength != size) {
        return;
      }
      new Int8Array(newBuffer).set(HEAP8);
      _emscripten_replace_memory(newBuffer);
      updateGlobalBufferAndViews(newBuffer);
      return 1;
    } catch (e2) {
    }
  }
  function _emscripten_resize_heap(requestedSize) {
    var oldSize = _emscripten_get_heap_size();
    var PAGE_MULTIPLE = 16777216;
    var LIMIT = 2147483648 - PAGE_MULTIPLE;
    if (requestedSize > LIMIT) {
      return false;
    }
    var MIN_TOTAL_MEMORY = 16777216;
    var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
    while (newSize < requestedSize) {
      if (newSize <= 536870912) {
        newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
      } else {
        newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
      }
    }
    var replacement = emscripten_realloc_buffer(newSize);
    if (!replacement) {
      return false;
    }
    return true;
  }
  var decodeBase64 = typeof atob === "function" ? atob : function(input) {
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var output3 = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i2 = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    do {
      enc1 = keyStr.indexOf(input.charAt(i2++));
      enc2 = keyStr.indexOf(input.charAt(i2++));
      enc3 = keyStr.indexOf(input.charAt(i2++));
      enc4 = keyStr.indexOf(input.charAt(i2++));
      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;
      output3 = output3 + String.fromCharCode(chr1);
      if (enc3 !== 64) {
        output3 = output3 + String.fromCharCode(chr2);
      }
      if (enc4 !== 64) {
        output3 = output3 + String.fromCharCode(chr3);
      }
    } while (i2 < input.length);
    return output3;
  };
  function intArrayFromBase64(s2) {
    try {
      var decoded = decodeBase64(s2);
      var bytes = new Uint8Array(decoded.length);
      for (var i2 = 0; i2 < decoded.length; ++i2) {
        bytes[i2] = decoded.charCodeAt(i2);
      }
      return bytes;
    } catch (_2) {
      throw new Error("Converting base64 string to bytes failed.");
    }
  }
  function tryParseAsDataURI(filename) {
    if (!isDataURI(filename)) {
      return;
    }
    return intArrayFromBase64(filename.slice(dataURIPrefix.length));
  }
  var asmGlobalArg = {
    "Math": Math,
    "Int8Array": Int8Array,
    "Int32Array": Int32Array,
    "Uint8Array": Uint8Array,
    "Float32Array": Float32Array,
    "Float64Array": Float64Array
  };
  var asmLibraryArg = {
    "a": abort,
    "b": setTempRet0,
    "c": getTempRet0,
    "d": ___assert_fail,
    "e": ___setErrNo,
    "f": _emscripten_get_heap_size,
    "g": _emscripten_memcpy_big,
    "h": _emscripten_resize_heap,
    "i": abortOnCannotGrowMemory,
    "j": demangle,
    "k": demangleAll,
    "l": emscripten_realloc_buffer,
    "m": jsStackTrace,
    "n": stackTrace,
    "o": tempDoublePtr,
    "p": DYNAMICTOP_PTR
  };
  var asm = (
    /** @suppress {uselessCode} */
    function(global2, env, buffer4) {
      "almost asm";
      var a2 = new global2.Int8Array(buffer4), b = new global2.Int32Array(buffer4), c2 = new global2.Uint8Array(buffer4), d2 = new global2.Float32Array(buffer4), e2 = new global2.Float64Array(buffer4), f2 = env.o | 0, g2 = env.p | 0, p2 = global2.Math.floor, q2 = global2.Math.abs, r2 = global2.Math.sqrt, s2 = global2.Math.pow, t2 = global2.Math.cos, u2 = global2.Math.sin, v2 = global2.Math.tan, w4 = global2.Math.acos, x2 = global2.Math.asin, y2 = global2.Math.atan, z2 = global2.Math.atan2, A2 = global2.Math.ceil, B3 = global2.Math.imul, C2 = global2.Math.min, D2 = global2.Math.max, E2 = global2.Math.clz32, G2 = env.b, H = env.c, I2 = env.d, J = env.e, K2 = env.f, L2 = env.g, M2 = env.h, N3 = env.i, T3 = 28640;
      function W(newBuffer) {
        a2 = new Int8Array(newBuffer);
        c2 = new Uint8Array(newBuffer);
        b = new Int32Array(newBuffer);
        d2 = new Float32Array(newBuffer);
        e2 = new Float64Array(newBuffer);
        buffer4 = newBuffer;
        return true;
      }
      function X(a3) {
        a3 = a3 | 0;
        var b2 = 0;
        b2 = T3;
        T3 = T3 + a3 | 0;
        T3 = T3 + 15 & -16;
        return b2 | 0;
      }
      function Y() {
        return T3 | 0;
      }
      function Z(a3) {
        a3 = a3 | 0;
        T3 = a3;
      }
      function _2(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        T3 = a3;
      }
      function $2(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0;
        if ((a3 | 0) < 0) {
          c3 = 2;
          return c3 | 0;
        }
        if ((a3 | 0) > 13780509) {
          c3 = uc(15, c3) | 0;
          return c3 | 0;
        } else {
          d3 = ((a3 | 0) < 0) << 31 >> 31;
          f3 = Md(a3 | 0, d3 | 0, 3, 0) | 0;
          e3 = H() | 0;
          d3 = Gd(a3 | 0, d3 | 0, 1, 0) | 0;
          d3 = Md(f3 | 0, e3 | 0, d3 | 0, H() | 0) | 0;
          d3 = Gd(d3 | 0, H() | 0, 1, 0) | 0;
          a3 = H() | 0;
          b[c3 >> 2] = d3;
          b[c3 + 4 >> 2] = a3;
          c3 = 0;
          return c3 | 0;
        }
        return 0;
      }
      function aa(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        return ba(a3, b2, c3, d3, 0) | 0;
      }
      function ba(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        j2 = T3;
        T3 = T3 + 16 | 0;
        h2 = j2;
        if (!(ca(a3, c3, d3, e3, f3) | 0)) {
          e3 = 0;
          T3 = j2;
          return e3 | 0;
        }
        do {
          if ((d3 | 0) >= 0) {
            if ((d3 | 0) > 13780509) {
              g3 = uc(15, h2) | 0;
              if (g3 | 0) {
                break;
              }
              i2 = h2;
              h2 = b[i2 >> 2] | 0;
              i2 = b[i2 + 4 >> 2] | 0;
            } else {
              g3 = ((d3 | 0) < 0) << 31 >> 31;
              k2 = Md(d3 | 0, g3 | 0, 3, 0) | 0;
              i2 = H() | 0;
              g3 = Gd(d3 | 0, g3 | 0, 1, 0) | 0;
              g3 = Md(k2 | 0, i2 | 0, g3 | 0, H() | 0) | 0;
              g3 = Gd(g3 | 0, H() | 0, 1, 0) | 0;
              i2 = H() | 0;
              b[h2 >> 2] = g3;
              b[h2 + 4 >> 2] = i2;
              h2 = g3;
            }
            Xd(e3 | 0, 0, h2 << 3 | 0) | 0;
            if (f3 | 0) {
              Xd(f3 | 0, 0, h2 << 2 | 0) | 0;
              g3 = da(a3, c3, d3, e3, f3, h2, i2, 0) | 0;
              break;
            }
            g3 = Fd(h2, 4) | 0;
            if (!g3) {
              g3 = 13;
            } else {
              k2 = da(a3, c3, d3, e3, g3, h2, i2, 0) | 0;
              Ed(g3);
              g3 = k2;
            }
          } else {
            g3 = 2;
          }
        } while (0);
        k2 = g3;
        T3 = j2;
        return k2 | 0;
      }
      function ca(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0;
        q3 = T3;
        T3 = T3 + 16 | 0;
        o2 = q3;
        p3 = q3 + 8 | 0;
        n2 = o2;
        b[n2 >> 2] = a3;
        b[n2 + 4 >> 2] = c3;
        if ((d3 | 0) < 0) {
          p3 = 2;
          T3 = q3;
          return p3 | 0;
        }
        g3 = e3;
        b[g3 >> 2] = a3;
        b[g3 + 4 >> 2] = c3;
        g3 = (f3 | 0) != 0;
        if (g3) {
          b[f3 >> 2] = 0;
        }
        if (Hb(a3, c3) | 0) {
          p3 = 9;
          T3 = q3;
          return p3 | 0;
        }
        b[p3 >> 2] = 0;
        a:
          do {
            if ((d3 | 0) >= 1) {
              if (g3) {
                l2 = 1;
                k2 = 0;
                m2 = 0;
                n2 = 1;
                g3 = a3;
                while (1) {
                  if (!(k2 | m2)) {
                    g3 = ea(g3, c3, 4, p3, o2) | 0;
                    if (g3 | 0) {
                      break a;
                    }
                    c3 = o2;
                    g3 = b[c3 >> 2] | 0;
                    c3 = b[c3 + 4 >> 2] | 0;
                    if (Hb(g3, c3) | 0) {
                      g3 = 9;
                      break a;
                    }
                  }
                  g3 = ea(g3, c3, b[26800 + (m2 << 2) >> 2] | 0, p3, o2) | 0;
                  if (g3 | 0) {
                    break a;
                  }
                  c3 = o2;
                  g3 = b[c3 >> 2] | 0;
                  c3 = b[c3 + 4 >> 2] | 0;
                  a3 = e3 + (l2 << 3) | 0;
                  b[a3 >> 2] = g3;
                  b[a3 + 4 >> 2] = c3;
                  b[f3 + (l2 << 2) >> 2] = n2;
                  a3 = k2 + 1 | 0;
                  h2 = (a3 | 0) == (n2 | 0);
                  i2 = m2 + 1 | 0;
                  j2 = (i2 | 0) == 6;
                  if (Hb(g3, c3) | 0) {
                    g3 = 9;
                    break a;
                  }
                  n2 = n2 + (j2 & h2 & 1) | 0;
                  if ((n2 | 0) > (d3 | 0)) {
                    g3 = 0;
                    break;
                  } else {
                    l2 = l2 + 1 | 0;
                    k2 = h2 ? 0 : a3;
                    m2 = h2 ? j2 ? 0 : i2 : m2;
                  }
                }
              } else {
                l2 = 1;
                k2 = 0;
                m2 = 0;
                n2 = 1;
                g3 = a3;
                while (1) {
                  if (!(k2 | m2)) {
                    g3 = ea(g3, c3, 4, p3, o2) | 0;
                    if (g3 | 0) {
                      break a;
                    }
                    c3 = o2;
                    g3 = b[c3 >> 2] | 0;
                    c3 = b[c3 + 4 >> 2] | 0;
                    if (Hb(g3, c3) | 0) {
                      g3 = 9;
                      break a;
                    }
                  }
                  g3 = ea(g3, c3, b[26800 + (m2 << 2) >> 2] | 0, p3, o2) | 0;
                  if (g3 | 0) {
                    break a;
                  }
                  c3 = o2;
                  g3 = b[c3 >> 2] | 0;
                  c3 = b[c3 + 4 >> 2] | 0;
                  a3 = e3 + (l2 << 3) | 0;
                  b[a3 >> 2] = g3;
                  b[a3 + 4 >> 2] = c3;
                  a3 = k2 + 1 | 0;
                  h2 = (a3 | 0) == (n2 | 0);
                  i2 = m2 + 1 | 0;
                  j2 = (i2 | 0) == 6;
                  if (Hb(g3, c3) | 0) {
                    g3 = 9;
                    break a;
                  }
                  n2 = n2 + (j2 & h2 & 1) | 0;
                  if ((n2 | 0) > (d3 | 0)) {
                    g3 = 0;
                    break;
                  } else {
                    l2 = l2 + 1 | 0;
                    k2 = h2 ? 0 : a3;
                    m2 = h2 ? j2 ? 0 : i2 : m2;
                  }
                }
              }
            } else {
              g3 = 0;
            }
          } while (0);
        p3 = g3;
        T3 = q3;
        return p3 | 0;
      }
      function da(a3, c3, d3, e3, f3, g3, h2, i2) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        h2 = h2 | 0;
        i2 = i2 | 0;
        var j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0;
        q3 = T3;
        T3 = T3 + 16 | 0;
        o2 = q3 + 8 | 0;
        p3 = q3;
        j2 = Od(a3 | 0, c3 | 0, g3 | 0, h2 | 0) | 0;
        l2 = H() | 0;
        m2 = e3 + (j2 << 3) | 0;
        r3 = m2;
        s3 = b[r3 >> 2] | 0;
        r3 = b[r3 + 4 >> 2] | 0;
        k2 = (s3 | 0) == (a3 | 0) & (r3 | 0) == (c3 | 0);
        if (!((s3 | 0) == 0 & (r3 | 0) == 0 | k2)) {
          do {
            j2 = Gd(j2 | 0, l2 | 0, 1, 0) | 0;
            j2 = Nd(j2 | 0, H() | 0, g3 | 0, h2 | 0) | 0;
            l2 = H() | 0;
            m2 = e3 + (j2 << 3) | 0;
            s3 = m2;
            r3 = b[s3 >> 2] | 0;
            s3 = b[s3 + 4 >> 2] | 0;
            k2 = (r3 | 0) == (a3 | 0) & (s3 | 0) == (c3 | 0);
          } while (!((r3 | 0) == 0 & (s3 | 0) == 0 | k2));
        }
        j2 = f3 + (j2 << 2) | 0;
        if (k2 ? (b[j2 >> 2] | 0) <= (i2 | 0) : 0) {
          s3 = 0;
          T3 = q3;
          return s3 | 0;
        }
        s3 = m2;
        b[s3 >> 2] = a3;
        b[s3 + 4 >> 2] = c3;
        b[j2 >> 2] = i2;
        if ((i2 | 0) >= (d3 | 0)) {
          s3 = 0;
          T3 = q3;
          return s3 | 0;
        }
        k2 = i2 + 1 | 0;
        b[o2 >> 2] = 0;
        j2 = ea(a3, c3, 2, o2, p3) | 0;
        switch (j2 | 0) {
          case 9: {
            n2 = 9;
            break;
          }
          case 0: {
            j2 = p3;
            j2 = da(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e3, f3, g3, h2, k2) | 0;
            if (!j2) {
              n2 = 9;
            }
            break;
          }
          default:
        }
        a:
          do {
            if ((n2 | 0) == 9) {
              b[o2 >> 2] = 0;
              j2 = ea(a3, c3, 3, o2, p3) | 0;
              switch (j2 | 0) {
                case 9:
                  break;
                case 0: {
                  j2 = p3;
                  j2 = da(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e3, f3, g3, h2, k2) | 0;
                  if (j2 | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o2 >> 2] = 0;
              j2 = ea(a3, c3, 1, o2, p3) | 0;
              switch (j2 | 0) {
                case 9:
                  break;
                case 0: {
                  j2 = p3;
                  j2 = da(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e3, f3, g3, h2, k2) | 0;
                  if (j2 | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o2 >> 2] = 0;
              j2 = ea(a3, c3, 5, o2, p3) | 0;
              switch (j2 | 0) {
                case 9:
                  break;
                case 0: {
                  j2 = p3;
                  j2 = da(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e3, f3, g3, h2, k2) | 0;
                  if (j2 | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o2 >> 2] = 0;
              j2 = ea(a3, c3, 4, o2, p3) | 0;
              switch (j2 | 0) {
                case 9:
                  break;
                case 0: {
                  j2 = p3;
                  j2 = da(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e3, f3, g3, h2, k2) | 0;
                  if (j2 | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o2 >> 2] = 0;
              j2 = ea(a3, c3, 6, o2, p3) | 0;
              switch (j2 | 0) {
                case 9:
                  break;
                case 0: {
                  j2 = p3;
                  j2 = da(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e3, f3, g3, h2, k2) | 0;
                  if (j2 | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              s3 = 0;
              T3 = q3;
              return s3 | 0;
            }
          } while (0);
        s3 = j2;
        T3 = q3;
        return s3 | 0;
      }
      function ea(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        if (d3 >>> 0 > 6) {
          f3 = 1;
          return f3 | 0;
        }
        m2 = (b[e3 >> 2] | 0) % 6 | 0;
        b[e3 >> 2] = m2;
        if ((m2 | 0) > 0) {
          g3 = 0;
          do {
            d3 = $a(d3) | 0;
            g3 = g3 + 1 | 0;
          } while ((g3 | 0) < (b[e3 >> 2] | 0));
        }
        m2 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        l2 = m2 & 127;
        if (l2 >>> 0 > 121) {
          f3 = 5;
          return f3 | 0;
        }
        j2 = Pb(a3, c3) | 0;
        g3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        a:
          do {
            if (!g3) {
              k2 = 8;
            } else {
              while (1) {
                h2 = (15 - g3 | 0) * 3 | 0;
                i2 = Qd(a3 | 0, c3 | 0, h2 | 0) | 0;
                H() | 0;
                i2 = i2 & 7;
                if ((i2 | 0) == 7) {
                  c3 = 5;
                  break;
                }
                p3 = (Vb(g3) | 0) == 0;
                g3 = g3 + -1 | 0;
                n2 = Rd(7, 0, h2 | 0) | 0;
                c3 = c3 & ~(H() | 0);
                o2 = Rd(b[(p3 ? 432 : 16) + (i2 * 28 | 0) + (d3 << 2) >> 2] | 0, 0, h2 | 0) | 0;
                h2 = H() | 0;
                d3 = b[(p3 ? 640 : 224) + (i2 * 28 | 0) + (d3 << 2) >> 2] | 0;
                a3 = o2 | a3 & ~n2;
                c3 = h2 | c3;
                if (!d3) {
                  d3 = 0;
                  break a;
                }
                if (!g3) {
                  k2 = 8;
                  break a;
                }
              }
              return c3 | 0;
            }
          } while (0);
        if ((k2 | 0) == 8) {
          p3 = b[848 + (l2 * 28 | 0) + (d3 << 2) >> 2] | 0;
          o2 = Rd(p3 | 0, 0, 45) | 0;
          a3 = o2 | a3;
          c3 = H() | 0 | c3 & -1040385;
          d3 = b[4272 + (l2 * 28 | 0) + (d3 << 2) >> 2] | 0;
          if ((p3 & 127 | 0) == 127) {
            p3 = Rd(b[848 + (l2 * 28 | 0) + 20 >> 2] | 0, 0, 45) | 0;
            c3 = H() | 0 | c3 & -1040385;
            d3 = b[4272 + (l2 * 28 | 0) + 20 >> 2] | 0;
            a3 = Rb(p3 | a3, c3) | 0;
            c3 = H() | 0;
            b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
          }
        }
        i2 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        i2 = i2 & 127;
        b:
          do {
            if (!(oa(i2) | 0)) {
              if ((d3 | 0) > 0) {
                g3 = 0;
                do {
                  a3 = Rb(a3, c3) | 0;
                  c3 = H() | 0;
                  g3 = g3 + 1 | 0;
                } while ((g3 | 0) != (d3 | 0));
              }
            } else {
              c:
                do {
                  if ((Pb(a3, c3) | 0) == 1) {
                    if ((l2 | 0) != (i2 | 0)) {
                      if (ua(i2, b[7696 + (l2 * 28 | 0) >> 2] | 0) | 0) {
                        a3 = Tb(a3, c3) | 0;
                        h2 = 1;
                        c3 = H() | 0;
                        break;
                      } else {
                        I2(27795, 26864, 533, 26872);
                      }
                    }
                    switch (j2 | 0) {
                      case 3: {
                        a3 = Rb(a3, c3) | 0;
                        c3 = H() | 0;
                        b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
                        h2 = 0;
                        break c;
                      }
                      case 5: {
                        a3 = Tb(a3, c3) | 0;
                        c3 = H() | 0;
                        b[e3 >> 2] = (b[e3 >> 2] | 0) + 5;
                        h2 = 0;
                        break c;
                      }
                      case 0: {
                        p3 = 9;
                        return p3 | 0;
                      }
                      default: {
                        p3 = 1;
                        return p3 | 0;
                      }
                    }
                  } else {
                    h2 = 0;
                  }
                } while (0);
              if ((d3 | 0) > 0) {
                g3 = 0;
                do {
                  a3 = Qb(a3, c3) | 0;
                  c3 = H() | 0;
                  g3 = g3 + 1 | 0;
                } while ((g3 | 0) != (d3 | 0));
              }
              if ((l2 | 0) != (i2 | 0)) {
                if (!(pa(i2) | 0)) {
                  if ((h2 | 0) != 0 | (Pb(a3, c3) | 0) != 5) {
                    break;
                  }
                  b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
                  break;
                }
                switch (m2 & 127) {
                  case 8:
                  case 118:
                    break b;
                  default:
                }
                if ((Pb(a3, c3) | 0) != 3) {
                  b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
                }
              }
            }
          } while (0);
        b[e3 >> 2] = ((b[e3 >> 2] | 0) + d3 | 0) % 6 | 0;
        p3 = f3;
        b[p3 >> 2] = a3;
        b[p3 + 4 >> 2] = c3;
        p3 = 0;
        return p3 | 0;
      }
      function fa(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        if (!(ga(a3, b2, c3, d3) | 0)) {
          d3 = 0;
          return d3 | 0;
        }
        Xd(d3 | 0, 0, c3 * 48 | 0) | 0;
        d3 = ha(a3, b2, c3, d3) | 0;
        return d3 | 0;
      }
      function ga(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        p3 = T3;
        T3 = T3 + 16 | 0;
        n2 = p3;
        o2 = p3 + 8 | 0;
        m2 = n2;
        b[m2 >> 2] = a3;
        b[m2 + 4 >> 2] = c3;
        if ((d3 | 0) < 0) {
          o2 = 2;
          T3 = p3;
          return o2 | 0;
        }
        if (!d3) {
          o2 = e3;
          b[o2 >> 2] = a3;
          b[o2 + 4 >> 2] = c3;
          o2 = 0;
          T3 = p3;
          return o2 | 0;
        }
        b[o2 >> 2] = 0;
        a:
          do {
            if (!(Hb(a3, c3) | 0)) {
              f3 = 0;
              m2 = a3;
              do {
                a3 = ea(m2, c3, 4, o2, n2) | 0;
                if (a3 | 0) {
                  break a;
                }
                c3 = n2;
                m2 = b[c3 >> 2] | 0;
                c3 = b[c3 + 4 >> 2] | 0;
                f3 = f3 + 1 | 0;
                if (Hb(m2, c3) | 0) {
                  a3 = 9;
                  break a;
                }
              } while ((f3 | 0) < (d3 | 0));
              l2 = e3;
              b[l2 >> 2] = m2;
              b[l2 + 4 >> 2] = c3;
              l2 = d3 + -1 | 0;
              k2 = 0;
              a3 = 1;
              do {
                f3 = 26800 + (k2 << 2) | 0;
                if ((k2 | 0) == 5) {
                  h2 = b[f3 >> 2] | 0;
                  g3 = 0;
                  f3 = a3;
                  while (1) {
                    a3 = n2;
                    a3 = ea(b[a3 >> 2] | 0, b[a3 + 4 >> 2] | 0, h2, o2, n2) | 0;
                    if (a3 | 0) {
                      break a;
                    }
                    if ((g3 | 0) != (l2 | 0)) {
                      j2 = n2;
                      i2 = b[j2 >> 2] | 0;
                      j2 = b[j2 + 4 >> 2] | 0;
                      a3 = e3 + (f3 << 3) | 0;
                      b[a3 >> 2] = i2;
                      b[a3 + 4 >> 2] = j2;
                      if (!(Hb(i2, j2) | 0)) {
                        a3 = f3 + 1 | 0;
                      } else {
                        a3 = 9;
                        break a;
                      }
                    } else {
                      a3 = f3;
                    }
                    g3 = g3 + 1 | 0;
                    if ((g3 | 0) >= (d3 | 0)) {
                      break;
                    } else {
                      f3 = a3;
                    }
                  }
                } else {
                  h2 = n2;
                  j2 = b[f3 >> 2] | 0;
                  i2 = 0;
                  f3 = a3;
                  g3 = b[h2 >> 2] | 0;
                  h2 = b[h2 + 4 >> 2] | 0;
                  while (1) {
                    a3 = ea(g3, h2, j2, o2, n2) | 0;
                    if (a3 | 0) {
                      break a;
                    }
                    h2 = n2;
                    g3 = b[h2 >> 2] | 0;
                    h2 = b[h2 + 4 >> 2] | 0;
                    a3 = e3 + (f3 << 3) | 0;
                    b[a3 >> 2] = g3;
                    b[a3 + 4 >> 2] = h2;
                    a3 = f3 + 1 | 0;
                    if (Hb(g3, h2) | 0) {
                      a3 = 9;
                      break a;
                    }
                    i2 = i2 + 1 | 0;
                    if ((i2 | 0) >= (d3 | 0)) {
                      break;
                    } else {
                      f3 = a3;
                    }
                  }
                }
                k2 = k2 + 1 | 0;
              } while (k2 >>> 0 < 6);
              a3 = n2;
              a3 = ((m2 | 0) == (b[a3 >> 2] | 0) ? (c3 | 0) == (b[a3 + 4 >> 2] | 0) : 0) ? 0 : 9;
            } else {
              a3 = 9;
            }
          } while (0);
        o2 = a3;
        T3 = p3;
        return o2 | 0;
      }
      function ha(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        m2 = T3;
        T3 = T3 + 16 | 0;
        h2 = m2;
        if (!d3) {
          b[e3 >> 2] = a3;
          b[e3 + 4 >> 2] = c3;
          e3 = 0;
          T3 = m2;
          return e3 | 0;
        }
        do {
          if ((d3 | 0) >= 0) {
            if ((d3 | 0) > 13780509) {
              f3 = uc(15, h2) | 0;
              if (f3 | 0) {
                break;
              }
              g3 = h2;
              f3 = b[g3 >> 2] | 0;
              g3 = b[g3 + 4 >> 2] | 0;
            } else {
              f3 = ((d3 | 0) < 0) << 31 >> 31;
              l2 = Md(d3 | 0, f3 | 0, 3, 0) | 0;
              g3 = H() | 0;
              f3 = Gd(d3 | 0, f3 | 0, 1, 0) | 0;
              f3 = Md(l2 | 0, g3 | 0, f3 | 0, H() | 0) | 0;
              f3 = Gd(f3 | 0, H() | 0, 1, 0) | 0;
              g3 = H() | 0;
              l2 = h2;
              b[l2 >> 2] = f3;
              b[l2 + 4 >> 2] = g3;
            }
            k2 = Fd(f3, 8) | 0;
            if (!k2) {
              f3 = 13;
            } else {
              l2 = Fd(f3, 4) | 0;
              if (!l2) {
                Ed(k2);
                f3 = 13;
                break;
              }
              f3 = da(a3, c3, d3, k2, l2, f3, g3, 0) | 0;
              if (f3 | 0) {
                Ed(k2);
                Ed(l2);
                break;
              }
              c3 = b[h2 >> 2] | 0;
              h2 = b[h2 + 4 >> 2] | 0;
              if ((h2 | 0) > 0 | (h2 | 0) == 0 & c3 >>> 0 > 0) {
                f3 = 0;
                i2 = 0;
                j2 = 0;
                do {
                  a3 = k2 + (i2 << 3) | 0;
                  g3 = b[a3 >> 2] | 0;
                  a3 = b[a3 + 4 >> 2] | 0;
                  if (!((g3 | 0) == 0 & (a3 | 0) == 0) ? (b[l2 + (i2 << 2) >> 2] | 0) == (d3 | 0) : 0) {
                    n2 = e3 + (f3 << 3) | 0;
                    b[n2 >> 2] = g3;
                    b[n2 + 4 >> 2] = a3;
                    f3 = f3 + 1 | 0;
                  }
                  i2 = Gd(i2 | 0, j2 | 0, 1, 0) | 0;
                  j2 = H() | 0;
                } while ((j2 | 0) < (h2 | 0) | (j2 | 0) == (h2 | 0) & i2 >>> 0 < c3 >>> 0);
              }
              Ed(k2);
              Ed(l2);
              f3 = 0;
            }
          } else {
            f3 = 2;
          }
        } while (0);
        n2 = f3;
        T3 = m2;
        return n2 | 0;
      }
      function ia(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        i2 = T3;
        T3 = T3 + 16 | 0;
        g3 = i2;
        h2 = i2 + 8 | 0;
        f3 = (Hb(a3, c3) | 0) == 0;
        f3 = f3 ? 1 : 2;
        while (1) {
          b[h2 >> 2] = 0;
          k2 = (ea(a3, c3, f3, h2, g3) | 0) == 0;
          j2 = g3;
          if (k2 & ((b[j2 >> 2] | 0) == (d3 | 0) ? (b[j2 + 4 >> 2] | 0) == (e3 | 0) : 0)) {
            a3 = 4;
            break;
          }
          f3 = f3 + 1 | 0;
          if (f3 >>> 0 >= 7) {
            f3 = 7;
            a3 = 4;
            break;
          }
        }
        if ((a3 | 0) == 4) {
          T3 = i2;
          return f3 | 0;
        }
        return 0;
      }
      function ja(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        i2 = T3;
        T3 = T3 + 48 | 0;
        f3 = i2 + 16 | 0;
        g3 = i2 + 8 | 0;
        h2 = i2;
        d3 = Xc(d3) | 0;
        if (d3 | 0) {
          h2 = d3;
          T3 = i2;
          return h2 | 0;
        }
        k2 = a3;
        j2 = b[k2 + 4 >> 2] | 0;
        d3 = g3;
        b[d3 >> 2] = b[k2 >> 2];
        b[d3 + 4 >> 2] = j2;
        Wc(g3, f3);
        d3 = Ha(f3, c3, h2) | 0;
        if (!d3) {
          c3 = b[g3 >> 2] | 0;
          g3 = b[a3 + 8 >> 2] | 0;
          if ((g3 | 0) > 0) {
            f3 = b[a3 + 12 >> 2] | 0;
            d3 = 0;
            do {
              c3 = (b[f3 + (d3 << 3) >> 2] | 0) + c3 | 0;
              d3 = d3 + 1 | 0;
            } while ((d3 | 0) < (g3 | 0));
          }
          d3 = h2;
          f3 = b[d3 >> 2] | 0;
          d3 = b[d3 + 4 >> 2] | 0;
          g3 = ((c3 | 0) < 0) << 31 >> 31;
          if ((d3 | 0) < (g3 | 0) | (d3 | 0) == (g3 | 0) & f3 >>> 0 < c3 >>> 0) {
            d3 = h2;
            b[d3 >> 2] = c3;
            b[d3 + 4 >> 2] = g3;
            d3 = g3;
          } else {
            c3 = f3;
          }
          j2 = Gd(c3 | 0, d3 | 0, 12, 0) | 0;
          k2 = H() | 0;
          d3 = h2;
          b[d3 >> 2] = j2;
          b[d3 + 4 >> 2] = k2;
          d3 = e3;
          b[d3 >> 2] = j2;
          b[d3 + 4 >> 2] = k2;
          d3 = 0;
        }
        k2 = d3;
        T3 = i2;
        return k2 | 0;
      }
      function ka(a3, c3, d3, f3, g3, h2, i2) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        h2 = h2 | 0;
        i2 = i2 | 0;
        var j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B4 = 0, C3 = 0, D3 = 0, E3 = 0, F2 = 0, G3 = 0, I3 = 0, J2 = 0, K3 = 0, L3 = 0, M3 = 0;
        I3 = T3;
        T3 = T3 + 64 | 0;
        D3 = I3 + 48 | 0;
        E3 = I3 + 32 | 0;
        F2 = I3 + 24 | 0;
        x3 = I3 + 8 | 0;
        y3 = I3;
        k2 = b[a3 >> 2] | 0;
        if ((k2 | 0) <= 0) {
          G3 = 0;
          T3 = I3;
          return G3 | 0;
        }
        z3 = a3 + 4 | 0;
        A3 = D3 + 8 | 0;
        B4 = E3 + 8 | 0;
        C3 = x3 + 8 | 0;
        j2 = 0;
        v3 = 0;
        while (1) {
          l2 = b[z3 >> 2] | 0;
          u3 = l2 + (v3 << 4) | 0;
          b[D3 >> 2] = b[u3 >> 2];
          b[D3 + 4 >> 2] = b[u3 + 4 >> 2];
          b[D3 + 8 >> 2] = b[u3 + 8 >> 2];
          b[D3 + 12 >> 2] = b[u3 + 12 >> 2];
          if ((v3 | 0) == (k2 + -1 | 0)) {
            b[E3 >> 2] = b[l2 >> 2];
            b[E3 + 4 >> 2] = b[l2 + 4 >> 2];
            b[E3 + 8 >> 2] = b[l2 + 8 >> 2];
            b[E3 + 12 >> 2] = b[l2 + 12 >> 2];
          } else {
            u3 = l2 + (v3 + 1 << 4) | 0;
            b[E3 >> 2] = b[u3 >> 2];
            b[E3 + 4 >> 2] = b[u3 + 4 >> 2];
            b[E3 + 8 >> 2] = b[u3 + 8 >> 2];
            b[E3 + 12 >> 2] = b[u3 + 12 >> 2];
          }
          k2 = Ia(D3, E3, f3, F2) | 0;
          a:
            do {
              if (!k2) {
                k2 = F2;
                l2 = b[k2 >> 2] | 0;
                k2 = b[k2 + 4 >> 2] | 0;
                if ((k2 | 0) > 0 | (k2 | 0) == 0 & l2 >>> 0 > 0) {
                  t3 = 0;
                  u3 = 0;
                  b:
                    while (1) {
                      K3 = 1 / (+(l2 >>> 0) + 4294967296 * +(k2 | 0));
                      M3 = +e2[D3 >> 3];
                      k2 = Hd(l2 | 0, k2 | 0, t3 | 0, u3 | 0) | 0;
                      L3 = +(k2 >>> 0) + 4294967296 * +(H() | 0);
                      J2 = +(t3 >>> 0) + 4294967296 * +(u3 | 0);
                      e2[x3 >> 3] = K3 * (M3 * L3) + K3 * (+e2[E3 >> 3] * J2);
                      e2[C3 >> 3] = K3 * (+e2[A3 >> 3] * L3) + K3 * (+e2[B4 >> 3] * J2);
                      k2 = Wb(x3, f3, y3) | 0;
                      if (k2 | 0) {
                        j2 = k2;
                        break;
                      }
                      s3 = y3;
                      r3 = b[s3 >> 2] | 0;
                      s3 = b[s3 + 4 >> 2] | 0;
                      o2 = Od(r3 | 0, s3 | 0, c3 | 0, d3 | 0) | 0;
                      m2 = H() | 0;
                      k2 = i2 + (o2 << 3) | 0;
                      n2 = k2;
                      l2 = b[n2 >> 2] | 0;
                      n2 = b[n2 + 4 >> 2] | 0;
                      c:
                        do {
                          if ((l2 | 0) == 0 & (n2 | 0) == 0) {
                            w5 = k2;
                            G3 = 16;
                          } else {
                            p3 = 0;
                            q3 = 0;
                            while (1) {
                              if ((p3 | 0) > (d3 | 0) | (p3 | 0) == (d3 | 0) & q3 >>> 0 > c3 >>> 0) {
                                j2 = 1;
                                break b;
                              }
                              if ((l2 | 0) == (r3 | 0) & (n2 | 0) == (s3 | 0)) {
                                break c;
                              }
                              k2 = Gd(o2 | 0, m2 | 0, 1, 0) | 0;
                              o2 = Nd(k2 | 0, H() | 0, c3 | 0, d3 | 0) | 0;
                              m2 = H() | 0;
                              q3 = Gd(q3 | 0, p3 | 0, 1, 0) | 0;
                              p3 = H() | 0;
                              k2 = i2 + (o2 << 3) | 0;
                              n2 = k2;
                              l2 = b[n2 >> 2] | 0;
                              n2 = b[n2 + 4 >> 2] | 0;
                              if ((l2 | 0) == 0 & (n2 | 0) == 0) {
                                w5 = k2;
                                G3 = 16;
                                break;
                              }
                            }
                          }
                        } while (0);
                      if ((G3 | 0) == 16 ? (G3 = 0, !((r3 | 0) == 0 & (s3 | 0) == 0)) : 0) {
                        q3 = w5;
                        b[q3 >> 2] = r3;
                        b[q3 + 4 >> 2] = s3;
                        q3 = h2 + (b[g3 >> 2] << 3) | 0;
                        b[q3 >> 2] = r3;
                        b[q3 + 4 >> 2] = s3;
                        q3 = g3;
                        q3 = Gd(b[q3 >> 2] | 0, b[q3 + 4 >> 2] | 0, 1, 0) | 0;
                        r3 = H() | 0;
                        s3 = g3;
                        b[s3 >> 2] = q3;
                        b[s3 + 4 >> 2] = r3;
                      }
                      t3 = Gd(t3 | 0, u3 | 0, 1, 0) | 0;
                      u3 = H() | 0;
                      k2 = F2;
                      l2 = b[k2 >> 2] | 0;
                      k2 = b[k2 + 4 >> 2] | 0;
                      if (!((k2 | 0) > (u3 | 0) | (k2 | 0) == (u3 | 0) & l2 >>> 0 > t3 >>> 0)) {
                        l2 = 1;
                        break a;
                      }
                    }
                  l2 = 0;
                } else {
                  l2 = 1;
                }
              } else {
                l2 = 0;
                j2 = k2;
              }
            } while (0);
          v3 = v3 + 1 | 0;
          if (!l2) {
            G3 = 21;
            break;
          }
          k2 = b[a3 >> 2] | 0;
          if ((v3 | 0) >= (k2 | 0)) {
            j2 = 0;
            G3 = 21;
            break;
          }
        }
        if ((G3 | 0) == 21) {
          T3 = I3;
          return j2 | 0;
        }
        return 0;
      }
      function la(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B4 = 0, C3 = 0, D3 = 0, E3 = 0, F2 = 0, G3 = 0, I3 = 0, J2 = 0, K3 = 0;
        K3 = T3;
        T3 = T3 + 112 | 0;
        F2 = K3 + 80 | 0;
        j2 = K3 + 72 | 0;
        G3 = K3;
        I3 = K3 + 56 | 0;
        f3 = Xc(d3) | 0;
        if (f3 | 0) {
          J2 = f3;
          T3 = K3;
          return J2 | 0;
        }
        k2 = a3 + 8 | 0;
        J2 = Dd((b[k2 >> 2] << 5) + 32 | 0) | 0;
        if (!J2) {
          J2 = 13;
          T3 = K3;
          return J2 | 0;
        }
        Yc(a3, J2);
        f3 = Xc(d3) | 0;
        if (!f3) {
          D3 = a3;
          E3 = b[D3 + 4 >> 2] | 0;
          f3 = j2;
          b[f3 >> 2] = b[D3 >> 2];
          b[f3 + 4 >> 2] = E3;
          Wc(j2, F2);
          f3 = Ha(F2, c3, G3) | 0;
          if (!f3) {
            f3 = b[j2 >> 2] | 0;
            g3 = b[k2 >> 2] | 0;
            if ((g3 | 0) > 0) {
              h2 = b[a3 + 12 >> 2] | 0;
              d3 = 0;
              do {
                f3 = (b[h2 + (d3 << 3) >> 2] | 0) + f3 | 0;
                d3 = d3 + 1 | 0;
              } while ((d3 | 0) != (g3 | 0));
              d3 = f3;
            } else {
              d3 = f3;
            }
            f3 = G3;
            g3 = b[f3 >> 2] | 0;
            f3 = b[f3 + 4 >> 2] | 0;
            h2 = ((d3 | 0) < 0) << 31 >> 31;
            if ((f3 | 0) < (h2 | 0) | (f3 | 0) == (h2 | 0) & g3 >>> 0 < d3 >>> 0) {
              f3 = G3;
              b[f3 >> 2] = d3;
              b[f3 + 4 >> 2] = h2;
              f3 = h2;
            } else {
              d3 = g3;
            }
            D3 = Gd(d3 | 0, f3 | 0, 12, 0) | 0;
            E3 = H() | 0;
            f3 = G3;
            b[f3 >> 2] = D3;
            b[f3 + 4 >> 2] = E3;
            f3 = 0;
          } else {
            D3 = 0;
            E3 = 0;
          }
          if (!f3) {
            d3 = Fd(D3, 8) | 0;
            if (!d3) {
              Ed(J2);
              J2 = 13;
              T3 = K3;
              return J2 | 0;
            }
            i2 = Fd(D3, 8) | 0;
            if (!i2) {
              Ed(J2);
              Ed(d3);
              J2 = 13;
              T3 = K3;
              return J2 | 0;
            }
            B4 = F2;
            b[B4 >> 2] = 0;
            b[B4 + 4 >> 2] = 0;
            B4 = a3;
            C3 = b[B4 + 4 >> 2] | 0;
            f3 = j2;
            b[f3 >> 2] = b[B4 >> 2];
            b[f3 + 4 >> 2] = C3;
            f3 = ka(j2, D3, E3, c3, F2, d3, i2) | 0;
            a:
              do {
                if (!f3) {
                  b:
                    do {
                      if ((b[k2 >> 2] | 0) > 0) {
                        h2 = a3 + 12 | 0;
                        g3 = 0;
                        while (1) {
                          f3 = ka((b[h2 >> 2] | 0) + (g3 << 3) | 0, D3, E3, c3, F2, d3, i2) | 0;
                          g3 = g3 + 1 | 0;
                          if (f3 | 0) {
                            break;
                          }
                          if ((g3 | 0) >= (b[k2 >> 2] | 0)) {
                            break b;
                          }
                        }
                        Ed(d3);
                        Ed(i2);
                        Ed(J2);
                        break a;
                      }
                    } while (0);
                  if ((E3 | 0) > 0 | (E3 | 0) == 0 & D3 >>> 0 > 0) {
                    Xd(i2 | 0, 0, D3 << 3 | 0) | 0;
                  }
                  C3 = F2;
                  B4 = b[C3 + 4 >> 2] | 0;
                  c:
                    do {
                      if ((B4 | 0) > 0 | (B4 | 0) == 0 & (b[C3 >> 2] | 0) >>> 0 > 0) {
                        y3 = d3;
                        z3 = i2;
                        A3 = d3;
                        B4 = i2;
                        C3 = d3;
                        f3 = d3;
                        v3 = d3;
                        w5 = i2;
                        x3 = i2;
                        d3 = i2;
                        d:
                          while (1) {
                            r3 = 0;
                            s3 = 0;
                            t3 = 0;
                            u3 = 0;
                            g3 = 0;
                            h2 = 0;
                            while (1) {
                              i2 = G3;
                              j2 = i2 + 56 | 0;
                              do {
                                b[i2 >> 2] = 0;
                                i2 = i2 + 4 | 0;
                              } while ((i2 | 0) < (j2 | 0));
                              c3 = y3 + (r3 << 3) | 0;
                              k2 = b[c3 >> 2] | 0;
                              c3 = b[c3 + 4 >> 2] | 0;
                              if (ca(k2, c3, 1, G3, 0) | 0) {
                                i2 = G3;
                                j2 = i2 + 56 | 0;
                                do {
                                  b[i2 >> 2] = 0;
                                  i2 = i2 + 4 | 0;
                                } while ((i2 | 0) < (j2 | 0));
                                i2 = Fd(7, 4) | 0;
                                if (i2 | 0) {
                                  da(k2, c3, 1, G3, i2, 7, 0, 0) | 0;
                                  Ed(i2);
                                }
                              }
                              q3 = 0;
                              while (1) {
                                p3 = G3 + (q3 << 3) | 0;
                                o2 = b[p3 >> 2] | 0;
                                p3 = b[p3 + 4 >> 2] | 0;
                                e:
                                  do {
                                    if ((o2 | 0) == 0 & (p3 | 0) == 0) {
                                      i2 = g3;
                                      j2 = h2;
                                    } else {
                                      l2 = Od(o2 | 0, p3 | 0, D3 | 0, E3 | 0) | 0;
                                      k2 = H() | 0;
                                      i2 = e3 + (l2 << 3) | 0;
                                      c3 = i2;
                                      j2 = b[c3 >> 2] | 0;
                                      c3 = b[c3 + 4 >> 2] | 0;
                                      if (!((j2 | 0) == 0 & (c3 | 0) == 0)) {
                                        m2 = 0;
                                        n2 = 0;
                                        do {
                                          if ((m2 | 0) > (E3 | 0) | (m2 | 0) == (E3 | 0) & n2 >>> 0 > D3 >>> 0) {
                                            break d;
                                          }
                                          if ((j2 | 0) == (o2 | 0) & (c3 | 0) == (p3 | 0)) {
                                            i2 = g3;
                                            j2 = h2;
                                            break e;
                                          }
                                          i2 = Gd(l2 | 0, k2 | 0, 1, 0) | 0;
                                          l2 = Nd(i2 | 0, H() | 0, D3 | 0, E3 | 0) | 0;
                                          k2 = H() | 0;
                                          n2 = Gd(n2 | 0, m2 | 0, 1, 0) | 0;
                                          m2 = H() | 0;
                                          i2 = e3 + (l2 << 3) | 0;
                                          c3 = i2;
                                          j2 = b[c3 >> 2] | 0;
                                          c3 = b[c3 + 4 >> 2] | 0;
                                        } while (!((j2 | 0) == 0 & (c3 | 0) == 0));
                                      }
                                      if ((o2 | 0) == 0 & (p3 | 0) == 0) {
                                        i2 = g3;
                                        j2 = h2;
                                        break;
                                      }
                                      Zb(o2, p3, I3) | 0;
                                      if (Zc(a3, J2, I3) | 0) {
                                        n2 = Gd(g3 | 0, h2 | 0, 1, 0) | 0;
                                        h2 = H() | 0;
                                        m2 = i2;
                                        b[m2 >> 2] = o2;
                                        b[m2 + 4 >> 2] = p3;
                                        g3 = z3 + (g3 << 3) | 0;
                                        b[g3 >> 2] = o2;
                                        b[g3 + 4 >> 2] = p3;
                                        g3 = n2;
                                      }
                                      i2 = g3;
                                      j2 = h2;
                                    }
                                  } while (0);
                                q3 = q3 + 1 | 0;
                                if (q3 >>> 0 >= 7) {
                                  break;
                                } else {
                                  g3 = i2;
                                  h2 = j2;
                                }
                              }
                              r3 = Gd(r3 | 0, s3 | 0, 1, 0) | 0;
                              s3 = H() | 0;
                              t3 = Gd(t3 | 0, u3 | 0, 1, 0) | 0;
                              u3 = H() | 0;
                              h2 = F2;
                              g3 = b[h2 >> 2] | 0;
                              h2 = b[h2 + 4 >> 2] | 0;
                              if (!((u3 | 0) < (h2 | 0) | (u3 | 0) == (h2 | 0) & t3 >>> 0 < g3 >>> 0)) {
                                break;
                              } else {
                                g3 = i2;
                                h2 = j2;
                              }
                            }
                            if ((h2 | 0) > 0 | (h2 | 0) == 0 & g3 >>> 0 > 0) {
                              g3 = 0;
                              h2 = 0;
                              do {
                                u3 = y3 + (g3 << 3) | 0;
                                b[u3 >> 2] = 0;
                                b[u3 + 4 >> 2] = 0;
                                g3 = Gd(g3 | 0, h2 | 0, 1, 0) | 0;
                                h2 = H() | 0;
                                u3 = F2;
                                t3 = b[u3 + 4 >> 2] | 0;
                              } while ((h2 | 0) < (t3 | 0) | ((h2 | 0) == (t3 | 0) ? g3 >>> 0 < (b[u3 >> 2] | 0) >>> 0 : 0));
                            }
                            u3 = F2;
                            b[u3 >> 2] = i2;
                            b[u3 + 4 >> 2] = j2;
                            if ((j2 | 0) > 0 | (j2 | 0) == 0 & i2 >>> 0 > 0) {
                              q3 = d3;
                              r3 = x3;
                              s3 = C3;
                              t3 = w5;
                              u3 = z3;
                              d3 = v3;
                              x3 = f3;
                              w5 = A3;
                              v3 = q3;
                              f3 = r3;
                              C3 = B4;
                              B4 = s3;
                              A3 = t3;
                              z3 = y3;
                              y3 = u3;
                            } else {
                              break c;
                            }
                          }
                        Ed(A3);
                        Ed(B4);
                        Ed(J2);
                        f3 = 1;
                        break a;
                      } else {
                        f3 = i2;
                      }
                    } while (0);
                  Ed(J2);
                  Ed(d3);
                  Ed(f3);
                  f3 = 0;
                } else {
                  Ed(d3);
                  Ed(i2);
                  Ed(J2);
                }
              } while (0);
            J2 = f3;
            T3 = K3;
            return J2 | 0;
          }
        }
        Ed(J2);
        J2 = f3;
        T3 = K3;
        return J2 | 0;
      }
      function ma(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        l2 = T3;
        T3 = T3 + 176 | 0;
        j2 = l2;
        if ((c3 | 0) < 1) {
          ud(d3, 0, 0);
          k2 = 0;
          T3 = l2;
          return k2 | 0;
        }
        i2 = a3;
        i2 = Qd(b[i2 >> 2] | 0, b[i2 + 4 >> 2] | 0, 52) | 0;
        H() | 0;
        ud(d3, (c3 | 0) > 6 ? c3 : 6, i2 & 15);
        i2 = 0;
        while (1) {
          e3 = a3 + (i2 << 3) | 0;
          e3 = _b2(b[e3 >> 2] | 0, b[e3 + 4 >> 2] | 0, j2) | 0;
          if (e3 | 0) {
            break;
          }
          e3 = b[j2 >> 2] | 0;
          if ((e3 | 0) > 0) {
            h2 = 0;
            do {
              g3 = j2 + 8 + (h2 << 4) | 0;
              h2 = h2 + 1 | 0;
              e3 = j2 + 8 + (((h2 | 0) % (e3 | 0) | 0) << 4) | 0;
              f3 = zd(d3, e3, g3) | 0;
              if (!f3) {
                yd(d3, g3, e3) | 0;
              } else {
                xd(d3, f3) | 0;
              }
              e3 = b[j2 >> 2] | 0;
            } while ((h2 | 0) < (e3 | 0));
          }
          i2 = i2 + 1 | 0;
          if ((i2 | 0) >= (c3 | 0)) {
            e3 = 0;
            k2 = 13;
            break;
          }
        }
        if ((k2 | 0) == 13) {
          T3 = l2;
          return e3 | 0;
        }
        vd(d3);
        k2 = e3;
        T3 = l2;
        return k2 | 0;
      }
      function na(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0;
        g3 = T3;
        T3 = T3 + 32 | 0;
        e3 = g3;
        f3 = g3 + 16 | 0;
        a3 = ma(a3, c3, f3) | 0;
        if (a3 | 0) {
          d3 = a3;
          T3 = g3;
          return d3 | 0;
        }
        b[d3 >> 2] = 0;
        b[d3 + 4 >> 2] = 0;
        b[d3 + 8 >> 2] = 0;
        a3 = wd(f3) | 0;
        if (a3 | 0) {
          do {
            c3 = Cc(d3) | 0;
            do {
              Dc(c3, a3) | 0;
              h2 = a3 + 16 | 0;
              b[e3 >> 2] = b[h2 >> 2];
              b[e3 + 4 >> 2] = b[h2 + 4 >> 2];
              b[e3 + 8 >> 2] = b[h2 + 8 >> 2];
              b[e3 + 12 >> 2] = b[h2 + 12 >> 2];
              xd(f3, a3) | 0;
              a3 = Ad(f3, e3) | 0;
            } while ((a3 | 0) != 0);
            a3 = wd(f3) | 0;
          } while ((a3 | 0) != 0);
        }
        vd(f3);
        a3 = Fc(d3) | 0;
        if (!a3) {
          h2 = 0;
          T3 = g3;
          return h2 | 0;
        }
        Ec(d3);
        h2 = a3;
        T3 = g3;
        return h2 | 0;
      }
      function oa(a3) {
        a3 = a3 | 0;
        if (a3 >>> 0 > 121) {
          a3 = 0;
          return a3 | 0;
        }
        a3 = b[7696 + (a3 * 28 | 0) + 16 >> 2] | 0;
        return a3 | 0;
      }
      function pa(a3) {
        a3 = a3 | 0;
        return (a3 | 0) == 4 | (a3 | 0) == 117 | 0;
      }
      function qa(a3) {
        a3 = a3 | 0;
        return b[11120 + ((b[a3 >> 2] | 0) * 216 | 0) + ((b[a3 + 4 >> 2] | 0) * 72 | 0) + ((b[a3 + 8 >> 2] | 0) * 24 | 0) + (b[a3 + 12 >> 2] << 3) >> 2] | 0;
      }
      function ra(a3) {
        a3 = a3 | 0;
        return b[11120 + ((b[a3 >> 2] | 0) * 216 | 0) + ((b[a3 + 4 >> 2] | 0) * 72 | 0) + ((b[a3 + 8 >> 2] | 0) * 24 | 0) + (b[a3 + 12 >> 2] << 3) + 4 >> 2] | 0;
      }
      function sa(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        a3 = 7696 + (a3 * 28 | 0) | 0;
        b[c3 >> 2] = b[a3 >> 2];
        b[c3 + 4 >> 2] = b[a3 + 4 >> 2];
        b[c3 + 8 >> 2] = b[a3 + 8 >> 2];
        b[c3 + 12 >> 2] = b[a3 + 12 >> 2];
        return;
      }
      function ta(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0;
        if (c3 >>> 0 > 20) {
          c3 = -1;
          return c3 | 0;
        }
        do {
          if ((b[11120 + (c3 * 216 | 0) >> 2] | 0) != (a3 | 0)) {
            if ((b[11120 + (c3 * 216 | 0) + 8 >> 2] | 0) != (a3 | 0)) {
              if ((b[11120 + (c3 * 216 | 0) + 16 >> 2] | 0) != (a3 | 0)) {
                if ((b[11120 + (c3 * 216 | 0) + 24 >> 2] | 0) != (a3 | 0)) {
                  if ((b[11120 + (c3 * 216 | 0) + 32 >> 2] | 0) != (a3 | 0)) {
                    if ((b[11120 + (c3 * 216 | 0) + 40 >> 2] | 0) != (a3 | 0)) {
                      if ((b[11120 + (c3 * 216 | 0) + 48 >> 2] | 0) != (a3 | 0)) {
                        if ((b[11120 + (c3 * 216 | 0) + 56 >> 2] | 0) != (a3 | 0)) {
                          if ((b[11120 + (c3 * 216 | 0) + 64 >> 2] | 0) != (a3 | 0)) {
                            if ((b[11120 + (c3 * 216 | 0) + 72 >> 2] | 0) != (a3 | 0)) {
                              if ((b[11120 + (c3 * 216 | 0) + 80 >> 2] | 0) != (a3 | 0)) {
                                if ((b[11120 + (c3 * 216 | 0) + 88 >> 2] | 0) != (a3 | 0)) {
                                  if ((b[11120 + (c3 * 216 | 0) + 96 >> 2] | 0) != (a3 | 0)) {
                                    if ((b[11120 + (c3 * 216 | 0) + 104 >> 2] | 0) != (a3 | 0)) {
                                      if ((b[11120 + (c3 * 216 | 0) + 112 >> 2] | 0) != (a3 | 0)) {
                                        if ((b[11120 + (c3 * 216 | 0) + 120 >> 2] | 0) != (a3 | 0)) {
                                          if ((b[11120 + (c3 * 216 | 0) + 128 >> 2] | 0) != (a3 | 0)) {
                                            if ((b[11120 + (c3 * 216 | 0) + 136 >> 2] | 0) == (a3 | 0)) {
                                              a3 = 2;
                                              d3 = 1;
                                              e3 = 2;
                                            } else {
                                              if ((b[11120 + (c3 * 216 | 0) + 144 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 0;
                                                d3 = 2;
                                                e3 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 152 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 0;
                                                d3 = 2;
                                                e3 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 160 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 0;
                                                d3 = 2;
                                                e3 = 2;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 168 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 1;
                                                d3 = 2;
                                                e3 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 176 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 1;
                                                d3 = 2;
                                                e3 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 184 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 1;
                                                d3 = 2;
                                                e3 = 2;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 192 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 2;
                                                d3 = 2;
                                                e3 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 200 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 2;
                                                d3 = 2;
                                                e3 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c3 * 216 | 0) + 208 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 2;
                                                d3 = 2;
                                                e3 = 2;
                                                break;
                                              } else {
                                                a3 = -1;
                                              }
                                              return a3 | 0;
                                            }
                                          } else {
                                            a3 = 2;
                                            d3 = 1;
                                            e3 = 1;
                                          }
                                        } else {
                                          a3 = 2;
                                          d3 = 1;
                                          e3 = 0;
                                        }
                                      } else {
                                        a3 = 1;
                                        d3 = 1;
                                        e3 = 2;
                                      }
                                    } else {
                                      a3 = 1;
                                      d3 = 1;
                                      e3 = 1;
                                    }
                                  } else {
                                    a3 = 1;
                                    d3 = 1;
                                    e3 = 0;
                                  }
                                } else {
                                  a3 = 0;
                                  d3 = 1;
                                  e3 = 2;
                                }
                              } else {
                                a3 = 0;
                                d3 = 1;
                                e3 = 1;
                              }
                            } else {
                              a3 = 0;
                              d3 = 1;
                              e3 = 0;
                            }
                          } else {
                            a3 = 2;
                            d3 = 0;
                            e3 = 2;
                          }
                        } else {
                          a3 = 2;
                          d3 = 0;
                          e3 = 1;
                        }
                      } else {
                        a3 = 2;
                        d3 = 0;
                        e3 = 0;
                      }
                    } else {
                      a3 = 1;
                      d3 = 0;
                      e3 = 2;
                    }
                  } else {
                    a3 = 1;
                    d3 = 0;
                    e3 = 1;
                  }
                } else {
                  a3 = 1;
                  d3 = 0;
                  e3 = 0;
                }
              } else {
                a3 = 0;
                d3 = 0;
                e3 = 2;
              }
            } else {
              a3 = 0;
              d3 = 0;
              e3 = 1;
            }
          } else {
            a3 = 0;
            d3 = 0;
            e3 = 0;
          }
        } while (0);
        c3 = b[11120 + (c3 * 216 | 0) + (d3 * 72 | 0) + (a3 * 24 | 0) + (e3 << 3) + 4 >> 2] | 0;
        return c3 | 0;
      }
      function ua(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        if ((b[7696 + (a3 * 28 | 0) + 20 >> 2] | 0) == (c3 | 0)) {
          c3 = 1;
          return c3 | 0;
        }
        c3 = (b[7696 + (a3 * 28 | 0) + 24 >> 2] | 0) == (c3 | 0);
        return c3 | 0;
      }
      function va(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        return b[848 + (a3 * 28 | 0) + (c3 << 2) >> 2] | 0;
      }
      function wa(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        if ((b[848 + (a3 * 28 | 0) >> 2] | 0) == (c3 | 0)) {
          c3 = 0;
          return c3 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 4 >> 2] | 0) == (c3 | 0)) {
          c3 = 1;
          return c3 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 8 >> 2] | 0) == (c3 | 0)) {
          c3 = 2;
          return c3 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 12 >> 2] | 0) == (c3 | 0)) {
          c3 = 3;
          return c3 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 16 >> 2] | 0) == (c3 | 0)) {
          c3 = 4;
          return c3 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 20 >> 2] | 0) == (c3 | 0)) {
          c3 = 5;
          return c3 | 0;
        } else {
          return ((b[848 + (a3 * 28 | 0) + 24 >> 2] | 0) == (c3 | 0) ? 6 : 7) | 0;
        }
        return 0;
      }
      function xa() {
        return 122;
      }
      function ya(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0;
        c3 = 0;
        do {
          Rd(c3 | 0, 0, 45) | 0;
          e3 = H() | 0 | 134225919;
          d3 = a3 + (c3 << 3) | 0;
          b[d3 >> 2] = -1;
          b[d3 + 4 >> 2] = e3;
          c3 = c3 + 1 | 0;
        } while ((c3 | 0) != 122);
        return 0;
      }
      function za(a3) {
        a3 = a3 | 0;
        var b2 = 0, c3 = 0, d3 = 0;
        d3 = +e2[a3 + 16 >> 3];
        c3 = +e2[a3 + 24 >> 3];
        b2 = d3 - c3;
        return +(d3 < c3 ? b2 + 6.283185307179586 : b2);
      }
      function Aa(a3) {
        a3 = a3 | 0;
        return +e2[a3 + 16 >> 3] < +e2[a3 + 24 >> 3] | 0;
      }
      function Ba(a3) {
        a3 = a3 | 0;
        return +(+e2[a3 >> 3] - +e2[a3 + 8 >> 3]);
      }
      function Ca(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0;
        c3 = +e2[b2 >> 3];
        if (!(c3 >= +e2[a3 + 8 >> 3])) {
          b2 = 0;
          return b2 | 0;
        }
        if (!(c3 <= +e2[a3 >> 3])) {
          b2 = 0;
          return b2 | 0;
        }
        d3 = +e2[a3 + 16 >> 3];
        c3 = +e2[a3 + 24 >> 3];
        f3 = +e2[b2 + 8 >> 3];
        b2 = f3 >= c3;
        a3 = f3 <= d3 & 1;
        if (d3 < c3) {
          if (b2) {
            a3 = 1;
          }
        } else if (!b2) {
          a3 = 0;
        }
        b2 = (a3 | 0) != 0;
        return b2 | 0;
      }
      function Da(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        if (+e2[a3 >> 3] < +e2[b2 + 8 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        if (+e2[a3 + 8 >> 3] > +e2[b2 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        g3 = +e2[a3 + 16 >> 3];
        c3 = a3 + 24 | 0;
        l2 = +e2[c3 >> 3];
        h2 = g3 < l2;
        d3 = b2 + 16 | 0;
        k2 = +e2[d3 >> 3];
        f3 = b2 + 24 | 0;
        j2 = +e2[f3 >> 3];
        i2 = k2 < j2;
        b2 = l2 - k2 < j2 - g3;
        a3 = h2 ? i2 | b2 ? 1 : 2 : 0;
        b2 = i2 ? h2 ? 1 : b2 ? 2 : 1 : 0;
        g3 = +kc(g3, a3);
        if (g3 < +kc(+e2[f3 >> 3], b2)) {
          i2 = 0;
          return i2 | 0;
        }
        l2 = +kc(+e2[c3 >> 3], a3);
        if (l2 > +kc(+e2[d3 >> 3], b2)) {
          i2 = 0;
          return i2 | 0;
        }
        i2 = 1;
        return i2 | 0;
      }
      function Ea(a3, c3, d3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        h2 = +e2[a3 + 16 >> 3];
        k2 = +e2[a3 + 24 >> 3];
        a3 = h2 < k2;
        j2 = +e2[c3 + 16 >> 3];
        i2 = +e2[c3 + 24 >> 3];
        g3 = j2 < i2;
        c3 = k2 - j2 < i2 - h2;
        b[d3 >> 2] = a3 ? g3 | c3 ? 1 : 2 : 0;
        b[f3 >> 2] = g3 ? a3 ? 1 : c3 ? 2 : 1 : 0;
        return;
      }
      function Fa(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        if (+e2[a3 >> 3] < +e2[b2 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        if (+e2[a3 + 8 >> 3] > +e2[b2 + 8 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        d3 = a3 + 16 | 0;
        j2 = +e2[d3 >> 3];
        g3 = +e2[a3 + 24 >> 3];
        h2 = j2 < g3;
        c3 = b2 + 16 | 0;
        l2 = +e2[c3 >> 3];
        f3 = b2 + 24 | 0;
        k2 = +e2[f3 >> 3];
        i2 = l2 < k2;
        b2 = g3 - l2 < k2 - j2;
        a3 = h2 ? i2 | b2 ? 1 : 2 : 0;
        b2 = i2 ? h2 ? 1 : b2 ? 2 : 1 : 0;
        g3 = +kc(g3, a3);
        if (!(g3 <= +kc(+e2[f3 >> 3], b2))) {
          i2 = 0;
          return i2 | 0;
        }
        l2 = +kc(+e2[d3 >> 3], a3);
        i2 = l2 >= +kc(+e2[c3 >> 3], b2);
        return i2 | 0;
      }
      function Ga(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        g3 = T3;
        T3 = T3 + 176 | 0;
        f3 = g3;
        b[f3 >> 2] = 4;
        j2 = +e2[c3 >> 3];
        e2[f3 + 8 >> 3] = j2;
        h2 = +e2[c3 + 16 >> 3];
        e2[f3 + 16 >> 3] = h2;
        e2[f3 + 24 >> 3] = j2;
        j2 = +e2[c3 + 24 >> 3];
        e2[f3 + 32 >> 3] = j2;
        i2 = +e2[c3 + 8 >> 3];
        e2[f3 + 40 >> 3] = i2;
        e2[f3 + 48 >> 3] = j2;
        e2[f3 + 56 >> 3] = i2;
        e2[f3 + 64 >> 3] = h2;
        c3 = f3 + 72 | 0;
        d3 = c3 + 96 | 0;
        do {
          b[c3 >> 2] = 0;
          c3 = c3 + 4 | 0;
        } while ((c3 | 0) < (d3 | 0));
        Wd(a3 | 0, f3 | 0, 168) | 0;
        T3 = g3;
        return;
      }
      function Ha(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0;
        t3 = T3;
        T3 = T3 + 288 | 0;
        n2 = t3 + 264 | 0;
        o2 = t3 + 96 | 0;
        m2 = t3;
        k2 = m2;
        l2 = k2 + 96 | 0;
        do {
          b[k2 >> 2] = 0;
          k2 = k2 + 4 | 0;
        } while ((k2 | 0) < (l2 | 0));
        c3 = cc(c3, m2) | 0;
        if (c3 | 0) {
          s3 = c3;
          T3 = t3;
          return s3 | 0;
        }
        l2 = m2;
        m2 = b[l2 >> 2] | 0;
        l2 = b[l2 + 4 >> 2] | 0;
        Zb(m2, l2, n2) | 0;
        _b2(m2, l2, o2) | 0;
        j2 = +mc(n2, o2 + 8 | 0);
        e2[n2 >> 3] = +e2[a3 >> 3];
        l2 = n2 + 8 | 0;
        e2[l2 >> 3] = +e2[a3 + 16 >> 3];
        e2[o2 >> 3] = +e2[a3 + 8 >> 3];
        m2 = o2 + 8 | 0;
        e2[m2 >> 3] = +e2[a3 + 24 >> 3];
        h2 = +mc(n2, o2);
        v3 = +e2[l2 >> 3] - +e2[m2 >> 3];
        i2 = +q2(+v3);
        u3 = +e2[n2 >> 3] - +e2[o2 >> 3];
        g3 = +q2(+u3);
        if (!(v3 == 0 | u3 == 0) ? (v3 = +Td(+i2, +g3), v3 = +A2(+(h2 * h2 / +Ud(+(v3 / +Ud(+i2, +g3)), 3) / (j2 * (j2 * 2.59807621135) * 0.8))), e2[f2 >> 3] = v3, r3 = ~~v3 >>> 0, s3 = +q2(v3) >= 1 ? v3 > 0 ? ~~+C2(+p2(v3 / 4294967296), 4294967295) >>> 0 : ~~+A2((v3 - +(~~v3 >>> 0)) / 4294967296) >>> 0 : 0, !((b[f2 + 4 >> 2] & 2146435072 | 0) == 2146435072)) : 0) {
          o2 = (r3 | 0) == 0 & (s3 | 0) == 0;
          c3 = d3;
          b[c3 >> 2] = o2 ? 1 : r3;
          b[c3 + 4 >> 2] = o2 ? 0 : s3;
          c3 = 0;
        } else {
          c3 = 1;
        }
        s3 = c3;
        T3 = t3;
        return s3 | 0;
      }
      function Ia(a3, c3, d3, g3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        m2 = T3;
        T3 = T3 + 288 | 0;
        j2 = m2 + 264 | 0;
        k2 = m2 + 96 | 0;
        l2 = m2;
        h2 = l2;
        i2 = h2 + 96 | 0;
        do {
          b[h2 >> 2] = 0;
          h2 = h2 + 4 | 0;
        } while ((h2 | 0) < (i2 | 0));
        d3 = cc(d3, l2) | 0;
        if (d3 | 0) {
          g3 = d3;
          T3 = m2;
          return g3 | 0;
        }
        d3 = l2;
        h2 = b[d3 >> 2] | 0;
        d3 = b[d3 + 4 >> 2] | 0;
        Zb(h2, d3, j2) | 0;
        _b2(h2, d3, k2) | 0;
        n2 = +mc(j2, k2 + 8 | 0);
        n2 = +A2(+(+mc(a3, c3) / (n2 * 2)));
        e2[f2 >> 3] = n2;
        d3 = ~~n2 >>> 0;
        h2 = +q2(n2) >= 1 ? n2 > 0 ? ~~+C2(+p2(n2 / 4294967296), 4294967295) >>> 0 : ~~+A2((n2 - +(~~n2 >>> 0)) / 4294967296) >>> 0 : 0;
        if ((b[f2 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          g3 = 1;
          T3 = m2;
          return g3 | 0;
        }
        l2 = (d3 | 0) == 0 & (h2 | 0) == 0;
        b[g3 >> 2] = l2 ? 1 : d3;
        b[g3 + 4 >> 2] = l2 ? 0 : h2;
        g3 = 0;
        T3 = m2;
        return g3 | 0;
      }
      function Ja(a3, b2) {
        a3 = a3 | 0;
        b2 = +b2;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        g3 = a3 + 16 | 0;
        h2 = +e2[g3 >> 3];
        c3 = a3 + 24 | 0;
        f3 = +e2[c3 >> 3];
        d3 = h2 - f3;
        d3 = h2 < f3 ? d3 + 6.283185307179586 : d3;
        k2 = +e2[a3 >> 3];
        i2 = a3 + 8 | 0;
        j2 = +e2[i2 >> 3];
        l2 = k2 - j2;
        d3 = (d3 * b2 - d3) * 0.5;
        b2 = (l2 * b2 - l2) * 0.5;
        k2 = k2 + b2;
        e2[a3 >> 3] = k2 > 1.5707963267948966 ? 1.5707963267948966 : k2;
        b2 = j2 - b2;
        e2[i2 >> 3] = b2 < -1.5707963267948966 ? -1.5707963267948966 : b2;
        b2 = h2 + d3;
        b2 = b2 > 3.141592653589793 ? b2 + -6.283185307179586 : b2;
        e2[g3 >> 3] = b2 < -3.141592653589793 ? b2 + 6.283185307179586 : b2;
        b2 = f3 - d3;
        b2 = b2 > 3.141592653589793 ? b2 + -6.283185307179586 : b2;
        e2[c3 >> 3] = b2 < -3.141592653589793 ? b2 + 6.283185307179586 : b2;
        return;
      }
      function Ka(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        b[a3 >> 2] = c3;
        b[a3 + 4 >> 2] = d3;
        b[a3 + 8 >> 2] = e3;
        return;
      }
      function La(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0;
        n2 = c3 + 8 | 0;
        b[n2 >> 2] = 0;
        k2 = +e2[a3 >> 3];
        i2 = +q2(+k2);
        l2 = +e2[a3 + 8 >> 3];
        j2 = +q2(+l2) * 1.1547005383792515;
        i2 = i2 + j2 * 0.5;
        d3 = ~~i2;
        a3 = ~~j2;
        i2 = i2 - +(d3 | 0);
        j2 = j2 - +(a3 | 0);
        do {
          if (i2 < 0.5) {
            if (i2 < 0.3333333333333333) {
              b[c3 >> 2] = d3;
              if (j2 < (i2 + 1) * 0.5) {
                b[c3 + 4 >> 2] = a3;
                break;
              } else {
                a3 = a3 + 1 | 0;
                b[c3 + 4 >> 2] = a3;
                break;
              }
            } else {
              o2 = 1 - i2;
              a3 = (!(j2 < o2) & 1) + a3 | 0;
              b[c3 + 4 >> 2] = a3;
              if (o2 <= j2 & j2 < i2 * 2) {
                d3 = d3 + 1 | 0;
                b[c3 >> 2] = d3;
                break;
              } else {
                b[c3 >> 2] = d3;
                break;
              }
            }
          } else {
            if (!(i2 < 0.6666666666666666)) {
              d3 = d3 + 1 | 0;
              b[c3 >> 2] = d3;
              if (j2 < i2 * 0.5) {
                b[c3 + 4 >> 2] = a3;
                break;
              } else {
                a3 = a3 + 1 | 0;
                b[c3 + 4 >> 2] = a3;
                break;
              }
            }
            if (j2 < 1 - i2) {
              b[c3 + 4 >> 2] = a3;
              if (i2 * 2 + -1 < j2) {
                b[c3 >> 2] = d3;
                break;
              }
            } else {
              a3 = a3 + 1 | 0;
              b[c3 + 4 >> 2] = a3;
            }
            d3 = d3 + 1 | 0;
            b[c3 >> 2] = d3;
          }
        } while (0);
        do {
          if (k2 < 0) {
            if (!(a3 & 1)) {
              m2 = (a3 | 0) / 2 | 0;
              m2 = Hd(d3 | 0, ((d3 | 0) < 0) << 31 >> 31 | 0, m2 | 0, ((m2 | 0) < 0) << 31 >> 31 | 0) | 0;
              d3 = ~~(+(d3 | 0) - (+(m2 >>> 0) + 4294967296 * +(H() | 0)) * 2);
              b[c3 >> 2] = d3;
              break;
            } else {
              m2 = (a3 + 1 | 0) / 2 | 0;
              m2 = Hd(d3 | 0, ((d3 | 0) < 0) << 31 >> 31 | 0, m2 | 0, ((m2 | 0) < 0) << 31 >> 31 | 0) | 0;
              d3 = ~~(+(d3 | 0) - ((+(m2 >>> 0) + 4294967296 * +(H() | 0)) * 2 + 1));
              b[c3 >> 2] = d3;
              break;
            }
          }
        } while (0);
        m2 = c3 + 4 | 0;
        if (l2 < 0) {
          d3 = d3 - ((a3 << 1 | 1 | 0) / 2 | 0) | 0;
          b[c3 >> 2] = d3;
          a3 = 0 - a3 | 0;
          b[m2 >> 2] = a3;
        }
        f3 = a3 - d3 | 0;
        if ((d3 | 0) < 0) {
          g3 = 0 - d3 | 0;
          b[m2 >> 2] = f3;
          b[n2 >> 2] = g3;
          b[c3 >> 2] = 0;
          a3 = f3;
          d3 = 0;
        } else {
          g3 = 0;
        }
        if ((a3 | 0) < 0) {
          d3 = d3 - a3 | 0;
          b[c3 >> 2] = d3;
          g3 = g3 - a3 | 0;
          b[n2 >> 2] = g3;
          b[m2 >> 2] = 0;
          a3 = 0;
        }
        h2 = d3 - g3 | 0;
        f3 = a3 - g3 | 0;
        if ((g3 | 0) < 0) {
          b[c3 >> 2] = h2;
          b[m2 >> 2] = f3;
          b[n2 >> 2] = 0;
          a3 = f3;
          d3 = h2;
          g3 = 0;
        }
        f3 = (a3 | 0) < (d3 | 0) ? a3 : d3;
        f3 = (g3 | 0) < (f3 | 0) ? g3 : f3;
        if ((f3 | 0) <= 0) {
          return;
        }
        b[c3 >> 2] = d3 - f3;
        b[m2 >> 2] = a3 - f3;
        b[n2 >> 2] = g3 - f3;
        return;
      }
      function Ma(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0;
        c3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        d3 = b[h2 >> 2] | 0;
        if ((c3 | 0) < 0) {
          d3 = d3 - c3 | 0;
          b[h2 >> 2] = d3;
          g3 = a3 + 8 | 0;
          b[g3 >> 2] = (b[g3 >> 2] | 0) - c3;
          b[a3 >> 2] = 0;
          c3 = 0;
        }
        if ((d3 | 0) < 0) {
          c3 = c3 - d3 | 0;
          b[a3 >> 2] = c3;
          g3 = a3 + 8 | 0;
          f3 = (b[g3 >> 2] | 0) - d3 | 0;
          b[g3 >> 2] = f3;
          b[h2 >> 2] = 0;
          d3 = 0;
        } else {
          f3 = a3 + 8 | 0;
          g3 = f3;
          f3 = b[f3 >> 2] | 0;
        }
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[a3 >> 2] = c3;
          d3 = d3 - f3 | 0;
          b[h2 >> 2] = d3;
          b[g3 >> 2] = 0;
          f3 = 0;
        }
        e3 = (d3 | 0) < (c3 | 0) ? d3 : c3;
        e3 = (f3 | 0) < (e3 | 0) ? f3 : e3;
        if ((e3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = c3 - e3;
        b[h2 >> 2] = d3 - e3;
        b[g3 >> 2] = f3 - e3;
        return;
      }
      function Na(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, f3 = 0;
        f3 = b[a3 + 8 >> 2] | 0;
        d3 = +((b[a3 + 4 >> 2] | 0) - f3 | 0);
        e2[c3 >> 3] = +((b[a3 >> 2] | 0) - f3 | 0) - d3 * 0.5;
        e2[c3 + 8 >> 3] = d3 * 0.8660254037844386;
        return;
      }
      function Oa(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        b[d3 >> 2] = (b[c3 >> 2] | 0) + (b[a3 >> 2] | 0);
        b[d3 + 4 >> 2] = (b[c3 + 4 >> 2] | 0) + (b[a3 + 4 >> 2] | 0);
        b[d3 + 8 >> 2] = (b[c3 + 8 >> 2] | 0) + (b[a3 + 8 >> 2] | 0);
        return;
      }
      function Pa(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        b[d3 >> 2] = (b[a3 >> 2] | 0) - (b[c3 >> 2] | 0);
        b[d3 + 4 >> 2] = (b[a3 + 4 >> 2] | 0) - (b[c3 + 4 >> 2] | 0);
        b[d3 + 8 >> 2] = (b[a3 + 8 >> 2] | 0) - (b[c3 + 8 >> 2] | 0);
        return;
      }
      function Qa(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0;
        d3 = B3(b[a3 >> 2] | 0, c3) | 0;
        b[a3 >> 2] = d3;
        d3 = a3 + 4 | 0;
        e3 = B3(b[d3 >> 2] | 0, c3) | 0;
        b[d3 >> 2] = e3;
        a3 = a3 + 8 | 0;
        c3 = B3(b[a3 >> 2] | 0, c3) | 0;
        b[a3 >> 2] = c3;
        return;
      }
      function Ra(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = b[a3 >> 2] | 0;
        i2 = (h2 | 0) < 0;
        e3 = (b[a3 + 4 >> 2] | 0) - (i2 ? h2 : 0) | 0;
        g3 = (e3 | 0) < 0;
        f3 = (g3 ? 0 - e3 | 0 : 0) + ((b[a3 + 8 >> 2] | 0) - (i2 ? h2 : 0)) | 0;
        d3 = (f3 | 0) < 0;
        a3 = d3 ? 0 : f3;
        c3 = (g3 ? 0 : e3) - (d3 ? f3 : 0) | 0;
        f3 = (i2 ? 0 : h2) - (g3 ? e3 : 0) - (d3 ? f3 : 0) | 0;
        d3 = (c3 | 0) < (f3 | 0) ? c3 : f3;
        d3 = (a3 | 0) < (d3 | 0) ? a3 : d3;
        e3 = (d3 | 0) > 0;
        a3 = a3 - (e3 ? d3 : 0) | 0;
        c3 = c3 - (e3 ? d3 : 0) | 0;
        a:
          do {
            switch (f3 - (e3 ? d3 : 0) | 0) {
              case 0:
                switch (c3 | 0) {
                  case 0: {
                    i2 = (a3 | 0) == 0 ? 0 : (a3 | 0) == 1 ? 1 : 7;
                    return i2 | 0;
                  }
                  case 1: {
                    i2 = (a3 | 0) == 0 ? 2 : (a3 | 0) == 1 ? 3 : 7;
                    return i2 | 0;
                  }
                  default:
                    break a;
                }
              case 1:
                switch (c3 | 0) {
                  case 0: {
                    i2 = (a3 | 0) == 0 ? 4 : (a3 | 0) == 1 ? 5 : 7;
                    return i2 | 0;
                  }
                  case 1: {
                    if (!a3) {
                      a3 = 6;
                    } else {
                      break a;
                    }
                    return a3 | 0;
                  }
                  default:
                    break a;
                }
              default:
            }
          } while (0);
        i2 = 7;
        return i2 | 0;
      }
      function Sa(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        j2 = a3 + 8 | 0;
        h2 = b[j2 >> 2] | 0;
        i2 = (b[a3 >> 2] | 0) - h2 | 0;
        k2 = a3 + 4 | 0;
        h2 = (b[k2 >> 2] | 0) - h2 | 0;
        if (i2 >>> 0 > 715827881 | h2 >>> 0 > 715827881) {
          e3 = (i2 | 0) > 0;
          f3 = 2147483647 - i2 | 0;
          g3 = -2147483648 - i2 | 0;
          if (e3 ? (f3 | 0) < (i2 | 0) : (g3 | 0) > (i2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
          d3 = i2 << 1;
          if (e3 ? (2147483647 - d3 | 0) < (i2 | 0) : (-2147483648 - d3 | 0) > (i2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
          if ((h2 | 0) > 0 ? (2147483647 - h2 | 0) < (h2 | 0) : (-2147483648 - h2 | 0) > (h2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
          c3 = i2 * 3 | 0;
          d3 = h2 << 1;
          if ((e3 ? (f3 | 0) < (d3 | 0) : (g3 | 0) > (d3 | 0)) ? 1 : (i2 | 0) > -1 ? (c3 | -2147483648 | 0) >= (h2 | 0) : (c3 ^ -2147483648 | 0) < (h2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
        } else {
          d3 = h2 << 1;
          c3 = i2 * 3 | 0;
        }
        e3 = Cd(+(c3 - h2 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e3;
        f3 = Cd(+(d3 + i2 | 0) * 0.14285714285714285) | 0;
        b[k2 >> 2] = f3;
        b[j2 >> 2] = 0;
        d3 = (f3 | 0) < (e3 | 0);
        c3 = d3 ? e3 : f3;
        d3 = d3 ? f3 : e3;
        if ((d3 | 0) < 0) {
          if ((d3 | 0) == -2147483648 ? 1 : (c3 | 0) > 0 ? (2147483647 - c3 | 0) < (d3 | 0) : (-2147483648 - c3 | 0) > (d3 | 0)) {
            I2(27795, 26892, 354, 26903);
          }
          if ((c3 | 0) > -1 ? (c3 | -2147483648 | 0) >= (d3 | 0) : (c3 ^ -2147483648 | 0) < (d3 | 0)) {
            I2(27795, 26892, 354, 26903);
          }
        }
        c3 = f3 - e3 | 0;
        if ((e3 | 0) < 0) {
          d3 = 0 - e3 | 0;
          b[k2 >> 2] = c3;
          b[j2 >> 2] = d3;
          b[a3 >> 2] = 0;
          e3 = 0;
        } else {
          c3 = f3;
          d3 = 0;
        }
        if ((c3 | 0) < 0) {
          e3 = e3 - c3 | 0;
          b[a3 >> 2] = e3;
          d3 = d3 - c3 | 0;
          b[j2 >> 2] = d3;
          b[k2 >> 2] = 0;
          c3 = 0;
        }
        g3 = e3 - d3 | 0;
        f3 = c3 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[k2 >> 2] = f3;
          b[j2 >> 2] = 0;
          c3 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e3;
        }
        e3 = (c3 | 0) < (f3 | 0) ? c3 : f3;
        e3 = (d3 | 0) < (e3 | 0) ? d3 : e3;
        if ((e3 | 0) <= 0) {
          k2 = 0;
          return k2 | 0;
        }
        b[a3 >> 2] = f3 - e3;
        b[k2 >> 2] = c3 - e3;
        b[j2 >> 2] = d3 - e3;
        k2 = 0;
        return k2 | 0;
      }
      function Ta(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        h2 = a3 + 8 | 0;
        f3 = b[h2 >> 2] | 0;
        g3 = (b[a3 >> 2] | 0) - f3 | 0;
        i2 = a3 + 4 | 0;
        f3 = (b[i2 >> 2] | 0) - f3 | 0;
        if (g3 >>> 0 > 715827881 | f3 >>> 0 > 715827881) {
          d3 = (g3 | 0) > 0;
          if (d3 ? (2147483647 - g3 | 0) < (g3 | 0) : (-2147483648 - g3 | 0) > (g3 | 0)) {
            i2 = 1;
            return i2 | 0;
          }
          c3 = g3 << 1;
          e3 = (f3 | 0) > 0;
          if (e3 ? (2147483647 - f3 | 0) < (f3 | 0) : (-2147483648 - f3 | 0) > (f3 | 0)) {
            i2 = 1;
            return i2 | 0;
          }
          j2 = f3 << 1;
          if (e3 ? (2147483647 - j2 | 0) < (f3 | 0) : (-2147483648 - j2 | 0) > (f3 | 0)) {
            j2 = 1;
            return j2 | 0;
          }
          if (d3 ? (2147483647 - c3 | 0) < (f3 | 0) : (-2147483648 - c3 | 0) > (f3 | 0)) {
            j2 = 1;
            return j2 | 0;
          }
          d3 = f3 * 3 | 0;
          if ((f3 | 0) > -1 ? (d3 | -2147483648 | 0) >= (g3 | 0) : (d3 ^ -2147483648 | 0) < (g3 | 0)) {
            j2 = 1;
            return j2 | 0;
          }
        } else {
          d3 = f3 * 3 | 0;
          c3 = g3 << 1;
        }
        e3 = Cd(+(c3 + f3 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e3;
        f3 = Cd(+(d3 - g3 | 0) * 0.14285714285714285) | 0;
        b[i2 >> 2] = f3;
        b[h2 >> 2] = 0;
        d3 = (f3 | 0) < (e3 | 0);
        c3 = d3 ? e3 : f3;
        d3 = d3 ? f3 : e3;
        if ((d3 | 0) < 0) {
          if ((d3 | 0) == -2147483648 ? 1 : (c3 | 0) > 0 ? (2147483647 - c3 | 0) < (d3 | 0) : (-2147483648 - c3 | 0) > (d3 | 0)) {
            I2(27795, 26892, 402, 26917);
          }
          if ((c3 | 0) > -1 ? (c3 | -2147483648 | 0) >= (d3 | 0) : (c3 ^ -2147483648 | 0) < (d3 | 0)) {
            I2(27795, 26892, 402, 26917);
          }
        }
        c3 = f3 - e3 | 0;
        if ((e3 | 0) < 0) {
          d3 = 0 - e3 | 0;
          b[i2 >> 2] = c3;
          b[h2 >> 2] = d3;
          b[a3 >> 2] = 0;
          e3 = 0;
        } else {
          c3 = f3;
          d3 = 0;
        }
        if ((c3 | 0) < 0) {
          e3 = e3 - c3 | 0;
          b[a3 >> 2] = e3;
          d3 = d3 - c3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          c3 = 0;
        }
        g3 = e3 - d3 | 0;
        f3 = c3 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          c3 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e3;
        }
        e3 = (c3 | 0) < (f3 | 0) ? c3 : f3;
        e3 = (d3 | 0) < (e3 | 0) ? d3 : e3;
        if ((e3 | 0) <= 0) {
          j2 = 0;
          return j2 | 0;
        }
        b[a3 >> 2] = f3 - e3;
        b[i2 >> 2] = c3 - e3;
        b[h2 >> 2] = d3 - e3;
        j2 = 0;
        return j2 | 0;
      }
      function Ua(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = a3 + 8 | 0;
        d3 = b[h2 >> 2] | 0;
        c3 = (b[a3 >> 2] | 0) - d3 | 0;
        i2 = a3 + 4 | 0;
        d3 = (b[i2 >> 2] | 0) - d3 | 0;
        e3 = Cd(+((c3 * 3 | 0) - d3 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e3;
        c3 = Cd(+((d3 << 1) + c3 | 0) * 0.14285714285714285) | 0;
        b[i2 >> 2] = c3;
        b[h2 >> 2] = 0;
        d3 = c3 - e3 | 0;
        if ((e3 | 0) < 0) {
          g3 = 0 - e3 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = g3;
          b[a3 >> 2] = 0;
          c3 = d3;
          e3 = 0;
          d3 = g3;
        } else {
          d3 = 0;
        }
        if ((c3 | 0) < 0) {
          e3 = e3 - c3 | 0;
          b[a3 >> 2] = e3;
          d3 = d3 - c3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          c3 = 0;
        }
        g3 = e3 - d3 | 0;
        f3 = c3 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          c3 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e3;
        }
        e3 = (c3 | 0) < (f3 | 0) ? c3 : f3;
        e3 = (d3 | 0) < (e3 | 0) ? d3 : e3;
        if ((e3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - e3;
        b[i2 >> 2] = c3 - e3;
        b[h2 >> 2] = d3 - e3;
        return;
      }
      function Va(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = a3 + 8 | 0;
        d3 = b[h2 >> 2] | 0;
        c3 = (b[a3 >> 2] | 0) - d3 | 0;
        i2 = a3 + 4 | 0;
        d3 = (b[i2 >> 2] | 0) - d3 | 0;
        e3 = Cd(+((c3 << 1) + d3 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e3;
        c3 = Cd(+((d3 * 3 | 0) - c3 | 0) * 0.14285714285714285) | 0;
        b[i2 >> 2] = c3;
        b[h2 >> 2] = 0;
        d3 = c3 - e3 | 0;
        if ((e3 | 0) < 0) {
          g3 = 0 - e3 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = g3;
          b[a3 >> 2] = 0;
          c3 = d3;
          e3 = 0;
          d3 = g3;
        } else {
          d3 = 0;
        }
        if ((c3 | 0) < 0) {
          e3 = e3 - c3 | 0;
          b[a3 >> 2] = e3;
          d3 = d3 - c3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          c3 = 0;
        }
        g3 = e3 - d3 | 0;
        f3 = c3 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          c3 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e3;
        }
        e3 = (c3 | 0) < (f3 | 0) ? c3 : f3;
        e3 = (d3 | 0) < (e3 | 0) ? d3 : e3;
        if ((e3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - e3;
        b[i2 >> 2] = c3 - e3;
        b[h2 >> 2] = d3 - e3;
        return;
      }
      function Wa(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        c3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        d3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        e3 = b[i2 >> 2] | 0;
        f3 = d3 + (c3 * 3 | 0) | 0;
        b[a3 >> 2] = f3;
        d3 = e3 + (d3 * 3 | 0) | 0;
        b[h2 >> 2] = d3;
        c3 = (e3 * 3 | 0) + c3 | 0;
        b[i2 >> 2] = c3;
        e3 = d3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[h2 >> 2] = e3;
          b[i2 >> 2] = c3;
          b[a3 >> 2] = 0;
          d3 = e3;
          e3 = 0;
        } else {
          e3 = f3;
        }
        if ((d3 | 0) < 0) {
          e3 = e3 - d3 | 0;
          b[a3 >> 2] = e3;
          c3 = c3 - d3 | 0;
          b[i2 >> 2] = c3;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e3 - c3 | 0;
        f3 = d3 - c3 | 0;
        if ((c3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e3 = g3;
          c3 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e3 | 0) ? f3 : e3;
        d3 = (c3 | 0) < (d3 | 0) ? c3 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e3 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c3 - d3;
        return;
      }
      function Xa(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        c3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        e3 = (c3 * 3 | 0) + f3 | 0;
        f3 = d3 + (f3 * 3 | 0) | 0;
        b[a3 >> 2] = f3;
        b[h2 >> 2] = e3;
        c3 = (d3 * 3 | 0) + c3 | 0;
        b[i2 >> 2] = c3;
        d3 = e3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c3;
          b[a3 >> 2] = 0;
          f3 = 0;
        } else {
          d3 = e3;
        }
        if ((d3 | 0) < 0) {
          f3 = f3 - d3 | 0;
          b[a3 >> 2] = f3;
          c3 = c3 - d3 | 0;
          b[i2 >> 2] = c3;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = f3 - c3 | 0;
        e3 = d3 - c3 | 0;
        if ((c3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = e3;
          b[i2 >> 2] = 0;
          f3 = g3;
          c3 = 0;
        } else {
          e3 = d3;
        }
        d3 = (e3 | 0) < (f3 | 0) ? e3 : f3;
        d3 = (c3 | 0) < (d3 | 0) ? c3 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - d3;
        b[h2 >> 2] = e3 - d3;
        b[i2 >> 2] = c3 - d3;
        return;
      }
      function Ya(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        if ((c3 + -1 | 0) >>> 0 >= 6) {
          return;
        }
        f3 = (b[15440 + (c3 * 12 | 0) >> 2] | 0) + (b[a3 >> 2] | 0) | 0;
        b[a3 >> 2] = f3;
        i2 = a3 + 4 | 0;
        e3 = (b[15440 + (c3 * 12 | 0) + 4 >> 2] | 0) + (b[i2 >> 2] | 0) | 0;
        b[i2 >> 2] = e3;
        h2 = a3 + 8 | 0;
        c3 = (b[15440 + (c3 * 12 | 0) + 8 >> 2] | 0) + (b[h2 >> 2] | 0) | 0;
        b[h2 >> 2] = c3;
        d3 = e3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = c3;
          b[a3 >> 2] = 0;
          e3 = 0;
        } else {
          d3 = e3;
          e3 = f3;
        }
        if ((d3 | 0) < 0) {
          e3 = e3 - d3 | 0;
          b[a3 >> 2] = e3;
          c3 = c3 - d3 | 0;
          b[h2 >> 2] = c3;
          b[i2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e3 - c3 | 0;
        f3 = d3 - c3 | 0;
        if ((c3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          e3 = g3;
          c3 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e3 | 0) ? f3 : e3;
        d3 = (c3 | 0) < (d3 | 0) ? c3 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e3 - d3;
        b[i2 >> 2] = f3 - d3;
        b[h2 >> 2] = c3 - d3;
        return;
      }
      function Za(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        c3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        e3 = c3 + f3 | 0;
        f3 = d3 + f3 | 0;
        b[a3 >> 2] = f3;
        b[h2 >> 2] = e3;
        c3 = d3 + c3 | 0;
        b[i2 >> 2] = c3;
        d3 = e3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c3;
          b[a3 >> 2] = 0;
          e3 = 0;
        } else {
          d3 = e3;
          e3 = f3;
        }
        if ((d3 | 0) < 0) {
          e3 = e3 - d3 | 0;
          b[a3 >> 2] = e3;
          c3 = c3 - d3 | 0;
          b[i2 >> 2] = c3;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e3 - c3 | 0;
        f3 = d3 - c3 | 0;
        if ((c3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e3 = g3;
          c3 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e3 | 0) ? f3 : e3;
        d3 = (c3 | 0) < (d3 | 0) ? c3 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e3 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c3 - d3;
        return;
      }
      function _a2(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        c3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        e3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        f3 = e3 + c3 | 0;
        b[a3 >> 2] = f3;
        e3 = d3 + e3 | 0;
        b[h2 >> 2] = e3;
        c3 = d3 + c3 | 0;
        b[i2 >> 2] = c3;
        d3 = e3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c3;
          b[a3 >> 2] = 0;
          e3 = 0;
        } else {
          d3 = e3;
          e3 = f3;
        }
        if ((d3 | 0) < 0) {
          e3 = e3 - d3 | 0;
          b[a3 >> 2] = e3;
          c3 = c3 - d3 | 0;
          b[i2 >> 2] = c3;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e3 - c3 | 0;
        f3 = d3 - c3 | 0;
        if ((c3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e3 = g3;
          c3 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e3 | 0) ? f3 : e3;
        d3 = (c3 | 0) < (d3 | 0) ? c3 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e3 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c3 - d3;
        return;
      }
      function $a(a3) {
        a3 = a3 | 0;
        switch (a3 | 0) {
          case 1: {
            a3 = 5;
            break;
          }
          case 5: {
            a3 = 4;
            break;
          }
          case 4: {
            a3 = 6;
            break;
          }
          case 6: {
            a3 = 2;
            break;
          }
          case 2: {
            a3 = 3;
            break;
          }
          case 3: {
            a3 = 1;
            break;
          }
          default:
        }
        return a3 | 0;
      }
      function ab(a3) {
        a3 = a3 | 0;
        switch (a3 | 0) {
          case 1: {
            a3 = 3;
            break;
          }
          case 3: {
            a3 = 2;
            break;
          }
          case 2: {
            a3 = 6;
            break;
          }
          case 6: {
            a3 = 4;
            break;
          }
          case 4: {
            a3 = 5;
            break;
          }
          case 5: {
            a3 = 1;
            break;
          }
          default:
        }
        return a3 | 0;
      }
      function bb(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        c3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        d3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        e3 = b[i2 >> 2] | 0;
        f3 = d3 + (c3 << 1) | 0;
        b[a3 >> 2] = f3;
        d3 = e3 + (d3 << 1) | 0;
        b[h2 >> 2] = d3;
        c3 = (e3 << 1) + c3 | 0;
        b[i2 >> 2] = c3;
        e3 = d3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[h2 >> 2] = e3;
          b[i2 >> 2] = c3;
          b[a3 >> 2] = 0;
          d3 = e3;
          e3 = 0;
        } else {
          e3 = f3;
        }
        if ((d3 | 0) < 0) {
          e3 = e3 - d3 | 0;
          b[a3 >> 2] = e3;
          c3 = c3 - d3 | 0;
          b[i2 >> 2] = c3;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e3 - c3 | 0;
        f3 = d3 - c3 | 0;
        if ((c3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e3 = g3;
          c3 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e3 | 0) ? f3 : e3;
        d3 = (c3 | 0) < (d3 | 0) ? c3 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e3 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c3 - d3;
        return;
      }
      function cb(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        c3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        e3 = (c3 << 1) + f3 | 0;
        f3 = d3 + (f3 << 1) | 0;
        b[a3 >> 2] = f3;
        b[h2 >> 2] = e3;
        c3 = (d3 << 1) + c3 | 0;
        b[i2 >> 2] = c3;
        d3 = e3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c3 = c3 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c3;
          b[a3 >> 2] = 0;
          f3 = 0;
        } else {
          d3 = e3;
        }
        if ((d3 | 0) < 0) {
          f3 = f3 - d3 | 0;
          b[a3 >> 2] = f3;
          c3 = c3 - d3 | 0;
          b[i2 >> 2] = c3;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = f3 - c3 | 0;
        e3 = d3 - c3 | 0;
        if ((c3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = e3;
          b[i2 >> 2] = 0;
          f3 = g3;
          c3 = 0;
        } else {
          e3 = d3;
        }
        d3 = (e3 | 0) < (f3 | 0) ? e3 : f3;
        d3 = (c3 | 0) < (d3 | 0) ? c3 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - d3;
        b[h2 >> 2] = e3 - d3;
        b[i2 >> 2] = c3 - d3;
        return;
      }
      function db(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = (b[a3 >> 2] | 0) - (b[c3 >> 2] | 0) | 0;
        i2 = (h2 | 0) < 0;
        e3 = (b[a3 + 4 >> 2] | 0) - (b[c3 + 4 >> 2] | 0) - (i2 ? h2 : 0) | 0;
        g3 = (e3 | 0) < 0;
        f3 = (i2 ? 0 - h2 | 0 : 0) + (b[a3 + 8 >> 2] | 0) - (b[c3 + 8 >> 2] | 0) + (g3 ? 0 - e3 | 0 : 0) | 0;
        a3 = (f3 | 0) < 0;
        c3 = a3 ? 0 : f3;
        d3 = (g3 ? 0 : e3) - (a3 ? f3 : 0) | 0;
        f3 = (i2 ? 0 : h2) - (g3 ? e3 : 0) - (a3 ? f3 : 0) | 0;
        a3 = (d3 | 0) < (f3 | 0) ? d3 : f3;
        a3 = (c3 | 0) < (a3 | 0) ? c3 : a3;
        e3 = (a3 | 0) > 0;
        c3 = c3 - (e3 ? a3 : 0) | 0;
        d3 = d3 - (e3 ? a3 : 0) | 0;
        a3 = f3 - (e3 ? a3 : 0) | 0;
        a3 = (a3 | 0) > -1 ? a3 : 0 - a3 | 0;
        d3 = (d3 | 0) > -1 ? d3 : 0 - d3 | 0;
        c3 = (c3 | 0) > -1 ? c3 : 0 - c3 | 0;
        c3 = (d3 | 0) > (c3 | 0) ? d3 : c3;
        return ((a3 | 0) > (c3 | 0) ? a3 : c3) | 0;
      }
      function eb(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0;
        d3 = b[a3 + 8 >> 2] | 0;
        b[c3 >> 2] = (b[a3 >> 2] | 0) - d3;
        b[c3 + 4 >> 2] = (b[a3 + 4 >> 2] | 0) - d3;
        return;
      }
      function fb(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        e3 = b[a3 >> 2] | 0;
        b[c3 >> 2] = e3;
        f3 = b[a3 + 4 >> 2] | 0;
        h2 = c3 + 4 | 0;
        b[h2 >> 2] = f3;
        i2 = c3 + 8 | 0;
        b[i2 >> 2] = 0;
        d3 = (f3 | 0) < (e3 | 0);
        a3 = d3 ? e3 : f3;
        d3 = d3 ? f3 : e3;
        if ((d3 | 0) < 0) {
          if ((d3 | 0) == -2147483648 ? 1 : (a3 | 0) > 0 ? (2147483647 - a3 | 0) < (d3 | 0) : (-2147483648 - a3 | 0) > (d3 | 0)) {
            c3 = 1;
            return c3 | 0;
          }
          if ((a3 | 0) > -1 ? (a3 | -2147483648 | 0) >= (d3 | 0) : (a3 ^ -2147483648 | 0) < (d3 | 0)) {
            c3 = 1;
            return c3 | 0;
          }
        }
        a3 = f3 - e3 | 0;
        if ((e3 | 0) < 0) {
          d3 = 0 - e3 | 0;
          b[h2 >> 2] = a3;
          b[i2 >> 2] = d3;
          b[c3 >> 2] = 0;
          e3 = 0;
        } else {
          a3 = f3;
          d3 = 0;
        }
        if ((a3 | 0) < 0) {
          e3 = e3 - a3 | 0;
          b[c3 >> 2] = e3;
          d3 = d3 - a3 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = 0;
          a3 = 0;
        }
        g3 = e3 - d3 | 0;
        f3 = a3 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[c3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          a3 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e3;
        }
        e3 = (a3 | 0) < (f3 | 0) ? a3 : f3;
        e3 = (d3 | 0) < (e3 | 0) ? d3 : e3;
        if ((e3 | 0) <= 0) {
          c3 = 0;
          return c3 | 0;
        }
        b[c3 >> 2] = f3 - e3;
        b[h2 >> 2] = a3 - e3;
        b[i2 >> 2] = d3 - e3;
        c3 = 0;
        return c3 | 0;
      }
      function gb(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0;
        c3 = a3 + 8 | 0;
        f3 = b[c3 >> 2] | 0;
        d3 = f3 - (b[a3 >> 2] | 0) | 0;
        b[a3 >> 2] = d3;
        e3 = a3 + 4 | 0;
        a3 = (b[e3 >> 2] | 0) - f3 | 0;
        b[e3 >> 2] = a3;
        b[c3 >> 2] = 0 - (a3 + d3);
        return;
      }
      function hb(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        d3 = b[a3 >> 2] | 0;
        c3 = 0 - d3 | 0;
        b[a3 >> 2] = c3;
        h2 = a3 + 8 | 0;
        b[h2 >> 2] = 0;
        i2 = a3 + 4 | 0;
        e3 = b[i2 >> 2] | 0;
        f3 = e3 + d3 | 0;
        if ((d3 | 0) > 0) {
          b[i2 >> 2] = f3;
          b[h2 >> 2] = d3;
          b[a3 >> 2] = 0;
          c3 = 0;
          e3 = f3;
        } else {
          d3 = 0;
        }
        if ((e3 | 0) < 0) {
          g3 = c3 - e3 | 0;
          b[a3 >> 2] = g3;
          d3 = d3 - e3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          f3 = g3 - d3 | 0;
          c3 = 0 - d3 | 0;
          if ((d3 | 0) < 0) {
            b[a3 >> 2] = f3;
            b[i2 >> 2] = c3;
            b[h2 >> 2] = 0;
            e3 = c3;
            d3 = 0;
          } else {
            e3 = 0;
            f3 = g3;
          }
        } else {
          f3 = c3;
        }
        c3 = (e3 | 0) < (f3 | 0) ? e3 : f3;
        c3 = (d3 | 0) < (c3 | 0) ? d3 : c3;
        if ((c3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - c3;
        b[i2 >> 2] = e3 - c3;
        b[h2 >> 2] = d3 - c3;
        return;
      }
      function ib(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        m2 = T3;
        T3 = T3 + 64 | 0;
        l2 = m2;
        i2 = m2 + 56 | 0;
        if (!(true & (c3 & 2013265920 | 0) == 134217728 & (true & (e3 & 2013265920 | 0) == 134217728))) {
          f3 = 5;
          T3 = m2;
          return f3 | 0;
        }
        if ((a3 | 0) == (d3 | 0) & (c3 | 0) == (e3 | 0)) {
          b[f3 >> 2] = 0;
          f3 = 0;
          T3 = m2;
          return f3 | 0;
        }
        h2 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        h2 = h2 & 15;
        k2 = Qd(d3 | 0, e3 | 0, 52) | 0;
        H() | 0;
        if ((h2 | 0) != (k2 & 15 | 0)) {
          f3 = 12;
          T3 = m2;
          return f3 | 0;
        }
        g3 = h2 + -1 | 0;
        if (h2 >>> 0 > 1) {
          Fb(a3, c3, g3, l2) | 0;
          Fb(d3, e3, g3, i2) | 0;
          k2 = l2;
          j2 = b[k2 >> 2] | 0;
          k2 = b[k2 + 4 >> 2] | 0;
          a:
            do {
              if ((j2 | 0) == (b[i2 >> 2] | 0) ? (k2 | 0) == (b[i2 + 4 >> 2] | 0) : 0) {
                h2 = (h2 ^ 15) * 3 | 0;
                g3 = Qd(a3 | 0, c3 | 0, h2 | 0) | 0;
                H() | 0;
                g3 = g3 & 7;
                h2 = Qd(d3 | 0, e3 | 0, h2 | 0) | 0;
                H() | 0;
                h2 = h2 & 7;
                do {
                  if (!((g3 | 0) == 0 | (h2 | 0) == 0)) {
                    if ((g3 | 0) == 7) {
                      g3 = 5;
                    } else {
                      if ((g3 | 0) == 1 | (h2 | 0) == 1 ? Hb(j2, k2) | 0 : 0) {
                        g3 = 5;
                        break;
                      }
                      if ((b[15536 + (g3 << 2) >> 2] | 0) != (h2 | 0) ? (b[15568 + (g3 << 2) >> 2] | 0) != (h2 | 0) : 0) {
                        break a;
                      }
                      b[f3 >> 2] = 1;
                      g3 = 0;
                    }
                  } else {
                    b[f3 >> 2] = 1;
                    g3 = 0;
                  }
                } while (0);
                f3 = g3;
                T3 = m2;
                return f3 | 0;
              }
            } while (0);
        }
        g3 = l2;
        h2 = g3 + 56 | 0;
        do {
          b[g3 >> 2] = 0;
          g3 = g3 + 4 | 0;
        } while ((g3 | 0) < (h2 | 0));
        aa(a3, c3, 1, l2) | 0;
        c3 = l2;
        if (((((!((b[c3 >> 2] | 0) == (d3 | 0) ? (b[c3 + 4 >> 2] | 0) == (e3 | 0) : 0) ? (c3 = l2 + 8 | 0, !((b[c3 >> 2] | 0) == (d3 | 0) ? (b[c3 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c3 = l2 + 16 | 0, !((b[c3 >> 2] | 0) == (d3 | 0) ? (b[c3 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c3 = l2 + 24 | 0, !((b[c3 >> 2] | 0) == (d3 | 0) ? (b[c3 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c3 = l2 + 32 | 0, !((b[c3 >> 2] | 0) == (d3 | 0) ? (b[c3 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c3 = l2 + 40 | 0, !((b[c3 >> 2] | 0) == (d3 | 0) ? (b[c3 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) {
          g3 = l2 + 48 | 0;
          g3 = ((b[g3 >> 2] | 0) == (d3 | 0) ? (b[g3 + 4 >> 2] | 0) == (e3 | 0) : 0) & 1;
        } else {
          g3 = 1;
        }
        b[f3 >> 2] = g3;
        f3 = 0;
        T3 = m2;
        return f3 | 0;
      }
      function jb(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        d3 = ia(a3, c3, d3, e3) | 0;
        if ((d3 | 0) == 7) {
          f3 = 11;
          return f3 | 0;
        }
        e3 = Rd(d3 | 0, 0, 56) | 0;
        c3 = c3 & -2130706433 | (H() | 0) | 268435456;
        b[f3 >> 2] = a3 | e3;
        b[f3 + 4 >> 2] = c3;
        f3 = 0;
        return f3 | 0;
      }
      function kb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        if (!(true & (c3 & 2013265920 | 0) == 268435456)) {
          d3 = 6;
          return d3 | 0;
        }
        b[d3 >> 2] = a3;
        b[d3 + 4 >> 2] = c3 & -2130706433 | 134217728;
        d3 = 0;
        return d3 | 0;
      }
      function lb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0;
        f3 = T3;
        T3 = T3 + 16 | 0;
        e3 = f3;
        b[e3 >> 2] = 0;
        if (!(true & (c3 & 2013265920 | 0) == 268435456)) {
          e3 = 6;
          T3 = f3;
          return e3 | 0;
        }
        g3 = Qd(a3 | 0, c3 | 0, 56) | 0;
        H() | 0;
        e3 = ea(a3, c3 & -2130706433 | 134217728, g3 & 7, e3, d3) | 0;
        T3 = f3;
        return e3 | 0;
      }
      function mb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0;
        c3 = Qd(a3 | 0, b2 | 0, 56) | 0;
        H() | 0;
        switch (c3 & 7) {
          case 0:
          case 7: {
            c3 = 0;
            return c3 | 0;
          }
          default:
        }
        c3 = b2 & -2130706433 | 134217728;
        if (!(true & (b2 & 2013265920 | 0) == 268435456)) {
          c3 = 0;
          return c3 | 0;
        }
        if (true & (b2 & 117440512 | 0) == 16777216 & (Hb(a3, c3) | 0) != 0) {
          c3 = 0;
          return c3 | 0;
        }
        c3 = Db(a3, c3) | 0;
        return c3 | 0;
      }
      function nb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0;
        f3 = T3;
        T3 = T3 + 16 | 0;
        e3 = f3;
        if (!(true & (c3 & 2013265920 | 0) == 268435456)) {
          e3 = 6;
          T3 = f3;
          return e3 | 0;
        }
        g3 = c3 & -2130706433 | 134217728;
        h2 = d3;
        b[h2 >> 2] = a3;
        b[h2 + 4 >> 2] = g3;
        b[e3 >> 2] = 0;
        c3 = Qd(a3 | 0, c3 | 0, 56) | 0;
        H() | 0;
        e3 = ea(a3, g3, c3 & 7, e3, d3 + 8 | 0) | 0;
        T3 = f3;
        return e3 | 0;
      }
      function ob(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0;
        f3 = (Hb(a3, c3) | 0) == 0;
        c3 = c3 & -2130706433;
        e3 = d3;
        b[e3 >> 2] = f3 ? a3 : 0;
        b[e3 + 4 >> 2] = f3 ? c3 | 285212672 : 0;
        e3 = d3 + 8 | 0;
        b[e3 >> 2] = a3;
        b[e3 + 4 >> 2] = c3 | 301989888;
        e3 = d3 + 16 | 0;
        b[e3 >> 2] = a3;
        b[e3 + 4 >> 2] = c3 | 318767104;
        e3 = d3 + 24 | 0;
        b[e3 >> 2] = a3;
        b[e3 + 4 >> 2] = c3 | 335544320;
        e3 = d3 + 32 | 0;
        b[e3 >> 2] = a3;
        b[e3 + 4 >> 2] = c3 | 352321536;
        d3 = d3 + 40 | 0;
        b[d3 >> 2] = a3;
        b[d3 + 4 >> 2] = c3 | 369098752;
        return 0;
      }
      function pb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0;
        h2 = T3;
        T3 = T3 + 16 | 0;
        f3 = h2;
        g3 = c3 & -2130706433 | 134217728;
        if (!(true & (c3 & 2013265920 | 0) == 268435456)) {
          g3 = 6;
          T3 = h2;
          return g3 | 0;
        }
        e3 = Qd(a3 | 0, c3 | 0, 56) | 0;
        H() | 0;
        e3 = od(a3, g3, e3 & 7) | 0;
        if ((e3 | 0) == -1) {
          b[d3 >> 2] = 0;
          g3 = 6;
          T3 = h2;
          return g3 | 0;
        }
        if (Yb(a3, g3, f3) | 0) {
          I2(27795, 26932, 282, 26947);
        }
        c3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        c3 = c3 & 15;
        if (!(Hb(a3, g3) | 0)) {
          zb(f3, c3, e3, 2, d3);
        } else {
          vb(f3, c3, e3, 2, d3);
        }
        g3 = 0;
        T3 = h2;
        return g3 | 0;
      }
      function qb(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0;
        d3 = T3;
        T3 = T3 + 16 | 0;
        e3 = d3;
        rb(a3, b2, c3, e3);
        La(e3, c3 + 4 | 0);
        T3 = d3;
        return;
      }
      function rb(a3, c3, d3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        j2 = T3;
        T3 = T3 + 16 | 0;
        k2 = j2;
        sb(a3, d3, k2);
        h2 = +w4(+(1 - +e2[k2 >> 3] * 0.5));
        if (h2 < 1e-16) {
          b[f3 >> 2] = 0;
          b[f3 + 4 >> 2] = 0;
          b[f3 + 8 >> 2] = 0;
          b[f3 + 12 >> 2] = 0;
          T3 = j2;
          return;
        }
        k2 = b[d3 >> 2] | 0;
        g3 = +e2[15920 + (k2 * 24 | 0) >> 3];
        g3 = +ic(g3 - +ic(+oc(15600 + (k2 << 4) | 0, a3)));
        if (!(Vb(c3) | 0)) {
          i2 = g3;
        } else {
          i2 = +ic(g3 + -0.3334731722518321);
        }
        g3 = +v2(+h2) * 2.618033988749896;
        if ((c3 | 0) > 0) {
          a3 = 0;
          do {
            g3 = g3 * 2.6457513110645907;
            a3 = a3 + 1 | 0;
          } while ((a3 | 0) != (c3 | 0));
        }
        h2 = +t2(+i2) * g3;
        e2[f3 >> 3] = h2;
        i2 = +u2(+i2) * g3;
        e2[f3 + 8 >> 3] = i2;
        T3 = j2;
        return;
      }
      function sb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        h2 = T3;
        T3 = T3 + 32 | 0;
        g3 = h2;
        nd(a3, g3);
        b[c3 >> 2] = 0;
        e2[d3 >> 3] = 5;
        f3 = +md(16400, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 0;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16424, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 1;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16448, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 2;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16472, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 3;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16496, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 4;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16520, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 5;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16544, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 6;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16568, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 7;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16592, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 8;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16616, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 9;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16640, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 10;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16664, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 11;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16688, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 12;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16712, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 13;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16736, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 14;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16760, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 15;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16784, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 16;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16808, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 17;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16832, g3);
        if (f3 < +e2[d3 >> 3]) {
          b[c3 >> 2] = 18;
          e2[d3 >> 3] = f3;
        }
        f3 = +md(16856, g3);
        if (!(f3 < +e2[d3 >> 3])) {
          T3 = h2;
          return;
        }
        b[c3 >> 2] = 19;
        e2[d3 >> 3] = f3;
        T3 = h2;
        return;
      }
      function tb(a3, c3, d3, f3, g3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0;
        h2 = +jd(a3);
        if (h2 < 1e-16) {
          c3 = 15600 + (c3 << 4) | 0;
          b[g3 >> 2] = b[c3 >> 2];
          b[g3 + 4 >> 2] = b[c3 + 4 >> 2];
          b[g3 + 8 >> 2] = b[c3 + 8 >> 2];
          b[g3 + 12 >> 2] = b[c3 + 12 >> 2];
          return;
        }
        i2 = +z2(+ +e2[a3 + 8 >> 3], + +e2[a3 >> 3]);
        if ((d3 | 0) > 0) {
          a3 = 0;
          do {
            h2 = h2 * 0.37796447300922725;
            a3 = a3 + 1 | 0;
          } while ((a3 | 0) != (d3 | 0));
        }
        j2 = h2 * 0.3333333333333333;
        if (!f3) {
          h2 = +y2(+(h2 * 0.381966011250105));
          if (Vb(d3) | 0) {
            i2 = +ic(i2 + 0.3334731722518321);
          }
        } else {
          d3 = (Vb(d3) | 0) == 0;
          h2 = +y2(+((d3 ? j2 : j2 * 0.37796447300922725) * 0.381966011250105));
        }
        pc(15600 + (c3 << 4) | 0, +ic(+e2[15920 + (c3 * 24 | 0) >> 3] - i2), h2, g3);
        return;
      }
      function ub(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0;
        e3 = T3;
        T3 = T3 + 16 | 0;
        f3 = e3;
        Na(a3 + 4 | 0, f3);
        tb(f3, b[a3 >> 2] | 0, c3, 0, d3);
        T3 = e3;
        return;
      }
      function vb(a3, c3, d3, f3, g3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B4 = 0, C3 = 0, D3 = 0, E3 = 0, F2 = 0, G3 = 0, H2 = 0, J2 = 0;
        G3 = T3;
        T3 = T3 + 272 | 0;
        h2 = G3 + 256 | 0;
        u3 = G3 + 240 | 0;
        D3 = G3;
        E3 = G3 + 224 | 0;
        F2 = G3 + 208 | 0;
        v3 = G3 + 176 | 0;
        w5 = G3 + 160 | 0;
        x3 = G3 + 192 | 0;
        y3 = G3 + 144 | 0;
        z3 = G3 + 128 | 0;
        A3 = G3 + 112 | 0;
        B4 = G3 + 96 | 0;
        C3 = G3 + 80 | 0;
        b[h2 >> 2] = c3;
        b[u3 >> 2] = b[a3 >> 2];
        b[u3 + 4 >> 2] = b[a3 + 4 >> 2];
        b[u3 + 8 >> 2] = b[a3 + 8 >> 2];
        b[u3 + 12 >> 2] = b[a3 + 12 >> 2];
        wb(u3, h2, D3);
        b[g3 >> 2] = 0;
        u3 = f3 + d3 + ((f3 | 0) == 5 & 1) | 0;
        if ((u3 | 0) <= (d3 | 0)) {
          T3 = G3;
          return;
        }
        k2 = b[h2 >> 2] | 0;
        l2 = E3 + 4 | 0;
        m2 = v3 + 4 | 0;
        n2 = d3 + 5 | 0;
        o2 = 16880 + (k2 << 2) | 0;
        p3 = 16960 + (k2 << 2) | 0;
        q3 = z3 + 8 | 0;
        r3 = A3 + 8 | 0;
        s3 = B4 + 8 | 0;
        t3 = F2 + 4 | 0;
        j2 = d3;
        a:
          while (1) {
            i2 = D3 + (((j2 | 0) % 5 | 0) << 4) | 0;
            b[F2 >> 2] = b[i2 >> 2];
            b[F2 + 4 >> 2] = b[i2 + 4 >> 2];
            b[F2 + 8 >> 2] = b[i2 + 8 >> 2];
            b[F2 + 12 >> 2] = b[i2 + 12 >> 2];
            do {
            } while ((xb(F2, k2, 0, 1) | 0) == 2);
            if ((j2 | 0) > (d3 | 0) & (Vb(c3) | 0) != 0) {
              b[v3 >> 2] = b[F2 >> 2];
              b[v3 + 4 >> 2] = b[F2 + 4 >> 2];
              b[v3 + 8 >> 2] = b[F2 + 8 >> 2];
              b[v3 + 12 >> 2] = b[F2 + 12 >> 2];
              Na(l2, w5);
              f3 = b[v3 >> 2] | 0;
              h2 = b[17040 + (f3 * 80 | 0) + (b[E3 >> 2] << 2) >> 2] | 0;
              b[v3 >> 2] = b[18640 + (f3 * 80 | 0) + (h2 * 20 | 0) >> 2];
              i2 = b[18640 + (f3 * 80 | 0) + (h2 * 20 | 0) + 16 >> 2] | 0;
              if ((i2 | 0) > 0) {
                a3 = 0;
                do {
                  Za(m2);
                  a3 = a3 + 1 | 0;
                } while ((a3 | 0) < (i2 | 0));
              }
              i2 = 18640 + (f3 * 80 | 0) + (h2 * 20 | 0) + 4 | 0;
              b[x3 >> 2] = b[i2 >> 2];
              b[x3 + 4 >> 2] = b[i2 + 4 >> 2];
              b[x3 + 8 >> 2] = b[i2 + 8 >> 2];
              Qa(x3, (b[o2 >> 2] | 0) * 3 | 0);
              Oa(m2, x3, m2);
              Ma(m2);
              Na(m2, y3);
              H2 = +(b[p3 >> 2] | 0);
              e2[z3 >> 3] = H2 * 3;
              e2[q3 >> 3] = 0;
              J2 = H2 * -1.5;
              e2[A3 >> 3] = J2;
              e2[r3 >> 3] = H2 * 2.598076211353316;
              e2[B4 >> 3] = J2;
              e2[s3 >> 3] = H2 * -2.598076211353316;
              switch (b[17040 + ((b[v3 >> 2] | 0) * 80 | 0) + (b[F2 >> 2] << 2) >> 2] | 0) {
                case 1: {
                  a3 = A3;
                  f3 = z3;
                  break;
                }
                case 3: {
                  a3 = B4;
                  f3 = A3;
                  break;
                }
                case 2: {
                  a3 = z3;
                  f3 = B4;
                  break;
                }
                default: {
                  a3 = 12;
                  break a;
                }
              }
              kd(w5, y3, f3, a3, C3);
              tb(C3, b[v3 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
              b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
            }
            if ((j2 | 0) < (n2 | 0)) {
              Na(t3, v3);
              tb(v3, b[F2 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
              b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
            }
            b[E3 >> 2] = b[F2 >> 2];
            b[E3 + 4 >> 2] = b[F2 + 4 >> 2];
            b[E3 + 8 >> 2] = b[F2 + 8 >> 2];
            b[E3 + 12 >> 2] = b[F2 + 12 >> 2];
            j2 = j2 + 1 | 0;
            if ((j2 | 0) >= (u3 | 0)) {
              a3 = 3;
              break;
            }
          }
        if ((a3 | 0) == 3) {
          T3 = G3;
          return;
        } else if ((a3 | 0) == 12) {
          I2(26970, 27017, 572, 27027);
        }
      }
      function wb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T3;
        T3 = T3 + 128 | 0;
        e3 = j2 + 64 | 0;
        f3 = j2;
        g3 = e3;
        h2 = 20240;
        i2 = g3 + 60 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        g3 = f3;
        h2 = 20304;
        i2 = g3 + 60 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        i2 = (Vb(b[c3 >> 2] | 0) | 0) == 0;
        e3 = i2 ? e3 : f3;
        f3 = a3 + 4 | 0;
        bb(f3);
        cb(f3);
        if (Vb(b[c3 >> 2] | 0) | 0) {
          Xa(f3);
          b[c3 >> 2] = (b[c3 >> 2] | 0) + 1;
        }
        b[d3 >> 2] = b[a3 >> 2];
        c3 = d3 + 4 | 0;
        Oa(f3, e3, c3);
        Ma(c3);
        b[d3 + 16 >> 2] = b[a3 >> 2];
        c3 = d3 + 20 | 0;
        Oa(f3, e3 + 12 | 0, c3);
        Ma(c3);
        b[d3 + 32 >> 2] = b[a3 >> 2];
        c3 = d3 + 36 | 0;
        Oa(f3, e3 + 24 | 0, c3);
        Ma(c3);
        b[d3 + 48 >> 2] = b[a3 >> 2];
        c3 = d3 + 52 | 0;
        Oa(f3, e3 + 36 | 0, c3);
        Ma(c3);
        b[d3 + 64 >> 2] = b[a3 >> 2];
        d3 = d3 + 68 | 0;
        Oa(f3, e3 + 48 | 0, d3);
        Ma(d3);
        T3 = j2;
        return;
      }
      function xb(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        p3 = T3;
        T3 = T3 + 32 | 0;
        n2 = p3 + 12 | 0;
        i2 = p3;
        o2 = a3 + 4 | 0;
        m2 = b[16960 + (c3 << 2) >> 2] | 0;
        l2 = (e3 | 0) != 0;
        m2 = l2 ? m2 * 3 | 0 : m2;
        f3 = b[o2 >> 2] | 0;
        k2 = a3 + 8 | 0;
        h2 = b[k2 >> 2] | 0;
        if (l2) {
          g3 = a3 + 12 | 0;
          e3 = b[g3 >> 2] | 0;
          f3 = h2 + f3 + e3 | 0;
          if ((f3 | 0) == (m2 | 0)) {
            o2 = 1;
            T3 = p3;
            return o2 | 0;
          } else {
            j2 = g3;
          }
        } else {
          j2 = a3 + 12 | 0;
          e3 = b[j2 >> 2] | 0;
          f3 = h2 + f3 + e3 | 0;
        }
        if ((f3 | 0) <= (m2 | 0)) {
          o2 = 0;
          T3 = p3;
          return o2 | 0;
        }
        do {
          if ((e3 | 0) > 0) {
            e3 = b[a3 >> 2] | 0;
            if ((h2 | 0) > 0) {
              g3 = 18640 + (e3 * 80 | 0) + 60 | 0;
              e3 = a3;
              break;
            }
            e3 = 18640 + (e3 * 80 | 0) + 40 | 0;
            if (!d3) {
              g3 = e3;
              e3 = a3;
            } else {
              Ka(n2, m2, 0, 0);
              Pa(o2, n2, i2);
              _a2(i2);
              Oa(i2, n2, o2);
              g3 = e3;
              e3 = a3;
            }
          } else {
            g3 = 18640 + ((b[a3 >> 2] | 0) * 80 | 0) + 20 | 0;
            e3 = a3;
          }
        } while (0);
        b[e3 >> 2] = b[g3 >> 2];
        f3 = g3 + 16 | 0;
        if ((b[f3 >> 2] | 0) > 0) {
          e3 = 0;
          do {
            Za(o2);
            e3 = e3 + 1 | 0;
          } while ((e3 | 0) < (b[f3 >> 2] | 0));
        }
        a3 = g3 + 4 | 0;
        b[n2 >> 2] = b[a3 >> 2];
        b[n2 + 4 >> 2] = b[a3 + 4 >> 2];
        b[n2 + 8 >> 2] = b[a3 + 8 >> 2];
        c3 = b[16880 + (c3 << 2) >> 2] | 0;
        Qa(n2, l2 ? c3 * 3 | 0 : c3);
        Oa(o2, n2, o2);
        Ma(o2);
        if (l2) {
          e3 = ((b[k2 >> 2] | 0) + (b[o2 >> 2] | 0) + (b[j2 >> 2] | 0) | 0) == (m2 | 0) ? 1 : 2;
        } else {
          e3 = 2;
        }
        o2 = e3;
        T3 = p3;
        return o2 | 0;
      }
      function yb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0;
        do {
          c3 = xb(a3, b2, 0, 1) | 0;
        } while ((c3 | 0) == 2);
        return c3 | 0;
      }
      function zb(a3, c3, d3, f3, g3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B4 = 0, C3 = 0, D3 = 0;
        B4 = T3;
        T3 = T3 + 240 | 0;
        h2 = B4 + 224 | 0;
        x3 = B4 + 208 | 0;
        y3 = B4;
        z3 = B4 + 192 | 0;
        A3 = B4 + 176 | 0;
        s3 = B4 + 160 | 0;
        t3 = B4 + 144 | 0;
        u3 = B4 + 128 | 0;
        v3 = B4 + 112 | 0;
        w5 = B4 + 96 | 0;
        b[h2 >> 2] = c3;
        b[x3 >> 2] = b[a3 >> 2];
        b[x3 + 4 >> 2] = b[a3 + 4 >> 2];
        b[x3 + 8 >> 2] = b[a3 + 8 >> 2];
        b[x3 + 12 >> 2] = b[a3 + 12 >> 2];
        Ab(x3, h2, y3);
        b[g3 >> 2] = 0;
        r3 = f3 + d3 + ((f3 | 0) == 6 & 1) | 0;
        if ((r3 | 0) <= (d3 | 0)) {
          T3 = B4;
          return;
        }
        k2 = b[h2 >> 2] | 0;
        l2 = d3 + 6 | 0;
        m2 = 16960 + (k2 << 2) | 0;
        n2 = t3 + 8 | 0;
        o2 = u3 + 8 | 0;
        p3 = v3 + 8 | 0;
        q3 = z3 + 4 | 0;
        i2 = 0;
        j2 = d3;
        f3 = -1;
        a:
          while (1) {
            h2 = (j2 | 0) % 6 | 0;
            a3 = y3 + (h2 << 4) | 0;
            b[z3 >> 2] = b[a3 >> 2];
            b[z3 + 4 >> 2] = b[a3 + 4 >> 2];
            b[z3 + 8 >> 2] = b[a3 + 8 >> 2];
            b[z3 + 12 >> 2] = b[a3 + 12 >> 2];
            a3 = i2;
            i2 = xb(z3, k2, 0, 1) | 0;
            if ((j2 | 0) > (d3 | 0) & (Vb(c3) | 0) != 0 ? (a3 | 0) != 1 ? (b[z3 >> 2] | 0) != (f3 | 0) : 0 : 0) {
              Na(y3 + (((h2 + 5 | 0) % 6 | 0) << 4) + 4 | 0, A3);
              Na(y3 + (h2 << 4) + 4 | 0, s3);
              C3 = +(b[m2 >> 2] | 0);
              e2[t3 >> 3] = C3 * 3;
              e2[n2 >> 3] = 0;
              D3 = C3 * -1.5;
              e2[u3 >> 3] = D3;
              e2[o2 >> 3] = C3 * 2.598076211353316;
              e2[v3 >> 3] = D3;
              e2[p3 >> 3] = C3 * -2.598076211353316;
              h2 = b[x3 >> 2] | 0;
              switch (b[17040 + (h2 * 80 | 0) + (((f3 | 0) == (h2 | 0) ? b[z3 >> 2] | 0 : f3) << 2) >> 2] | 0) {
                case 1: {
                  a3 = u3;
                  f3 = t3;
                  break;
                }
                case 3: {
                  a3 = v3;
                  f3 = u3;
                  break;
                }
                case 2: {
                  a3 = t3;
                  f3 = v3;
                  break;
                }
                default: {
                  a3 = 8;
                  break a;
                }
              }
              kd(A3, s3, f3, a3, w5);
              if (!(ld(A3, w5) | 0) ? !(ld(s3, w5) | 0) : 0) {
                tb(w5, b[x3 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
                b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
              }
            }
            if ((j2 | 0) < (l2 | 0)) {
              Na(q3, A3);
              tb(A3, b[z3 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
              b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
            }
            j2 = j2 + 1 | 0;
            if ((j2 | 0) >= (r3 | 0)) {
              a3 = 3;
              break;
            } else {
              f3 = b[z3 >> 2] | 0;
            }
          }
        if ((a3 | 0) == 3) {
          T3 = B4;
          return;
        } else if ((a3 | 0) == 8) {
          I2(27054, 27017, 737, 27099);
        }
      }
      function Ab(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T3;
        T3 = T3 + 160 | 0;
        e3 = j2 + 80 | 0;
        f3 = j2;
        g3 = e3;
        h2 = 20368;
        i2 = g3 + 72 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        g3 = f3;
        h2 = 20448;
        i2 = g3 + 72 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        i2 = (Vb(b[c3 >> 2] | 0) | 0) == 0;
        e3 = i2 ? e3 : f3;
        f3 = a3 + 4 | 0;
        bb(f3);
        cb(f3);
        if (Vb(b[c3 >> 2] | 0) | 0) {
          Xa(f3);
          b[c3 >> 2] = (b[c3 >> 2] | 0) + 1;
        }
        b[d3 >> 2] = b[a3 >> 2];
        c3 = d3 + 4 | 0;
        Oa(f3, e3, c3);
        Ma(c3);
        b[d3 + 16 >> 2] = b[a3 >> 2];
        c3 = d3 + 20 | 0;
        Oa(f3, e3 + 12 | 0, c3);
        Ma(c3);
        b[d3 + 32 >> 2] = b[a3 >> 2];
        c3 = d3 + 36 | 0;
        Oa(f3, e3 + 24 | 0, c3);
        Ma(c3);
        b[d3 + 48 >> 2] = b[a3 >> 2];
        c3 = d3 + 52 | 0;
        Oa(f3, e3 + 36 | 0, c3);
        Ma(c3);
        b[d3 + 64 >> 2] = b[a3 >> 2];
        c3 = d3 + 68 | 0;
        Oa(f3, e3 + 48 | 0, c3);
        Ma(c3);
        b[d3 + 80 >> 2] = b[a3 >> 2];
        d3 = d3 + 84 | 0;
        Oa(f3, e3 + 60 | 0, d3);
        Ma(d3);
        T3 = j2;
        return;
      }
      function Bb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        b2 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        return b2 & 15 | 0;
      }
      function Cb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        b2 = Qd(a3 | 0, b2 | 0, 45) | 0;
        H() | 0;
        return b2 & 127 | 0;
      }
      function Db(b2, c3) {
        b2 = b2 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0;
        if (!(true & (c3 & -16777216 | 0) == 134217728)) {
          b2 = 0;
          return b2 | 0;
        }
        e3 = Qd(b2 | 0, c3 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        d3 = Qd(b2 | 0, c3 | 0, 45) | 0;
        H() | 0;
        d3 = d3 & 127;
        if (d3 >>> 0 > 121) {
          b2 = 0;
          return b2 | 0;
        }
        h2 = (e3 ^ 15) * 3 | 0;
        f3 = Qd(b2 | 0, c3 | 0, h2 | 0) | 0;
        h2 = Rd(f3 | 0, H() | 0, h2 | 0) | 0;
        f3 = H() | 0;
        g3 = Hd(-1227133514, -1171, h2 | 0, f3 | 0) | 0;
        if (!((h2 & 613566756 & g3 | 0) == 0 & (f3 & 4681 & (H() | 0) | 0) == 0)) {
          h2 = 0;
          return h2 | 0;
        }
        h2 = (e3 * 3 | 0) + 19 | 0;
        g3 = Rd(~b2 | 0, ~c3 | 0, h2 | 0) | 0;
        h2 = Qd(g3 | 0, H() | 0, h2 | 0) | 0;
        if (!((e3 | 0) == 15 | (h2 | 0) == 0 & (H() | 0) == 0)) {
          h2 = 0;
          return h2 | 0;
        }
        if (!(a2[20528 + d3 >> 0] | 0)) {
          h2 = 1;
          return h2 | 0;
        }
        c3 = c3 & 8191;
        if ((b2 | 0) == 0 & (c3 | 0) == 0) {
          h2 = 1;
          return h2 | 0;
        } else {
          h2 = Sd(b2 | 0, c3 | 0, 0) | 0;
          H() | 0;
          return ((63 - h2 | 0) % 3 | 0 | 0) != 0 | 0;
        }
        return 0;
      }
      function Eb(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = Rd(c3 | 0, 0, 52) | 0;
        g3 = H() | 0;
        d3 = Rd(d3 | 0, 0, 45) | 0;
        d3 = g3 | (H() | 0) | 134225919;
        if ((c3 | 0) < 1) {
          g3 = -1;
          e3 = d3;
          c3 = a3;
          b[c3 >> 2] = g3;
          a3 = a3 + 4 | 0;
          b[a3 >> 2] = e3;
          return;
        }
        g3 = 1;
        f3 = -1;
        while (1) {
          h2 = (15 - g3 | 0) * 3 | 0;
          i2 = Rd(7, 0, h2 | 0) | 0;
          d3 = d3 & ~(H() | 0);
          h2 = Rd(e3 | 0, 0, h2 | 0) | 0;
          f3 = f3 & ~i2 | h2;
          d3 = d3 | (H() | 0);
          if ((g3 | 0) == (c3 | 0)) {
            break;
          } else {
            g3 = g3 + 1 | 0;
          }
        }
        i2 = a3;
        h2 = i2;
        b[h2 >> 2] = f3;
        i2 = i2 + 4 | 0;
        b[i2 >> 2] = d3;
        return;
      }
      function Fb(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0;
        g3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        if (d3 >>> 0 > 15) {
          e3 = 4;
          return e3 | 0;
        }
        if ((g3 | 0) < (d3 | 0)) {
          e3 = 12;
          return e3 | 0;
        }
        if ((g3 | 0) == (d3 | 0)) {
          b[e3 >> 2] = a3;
          b[e3 + 4 >> 2] = c3;
          e3 = 0;
          return e3 | 0;
        }
        f3 = Rd(d3 | 0, 0, 52) | 0;
        f3 = f3 | a3;
        a3 = H() | 0 | c3 & -15728641;
        if ((g3 | 0) > (d3 | 0)) {
          do {
            c3 = Rd(7, 0, (14 - d3 | 0) * 3 | 0) | 0;
            d3 = d3 + 1 | 0;
            f3 = c3 | f3;
            a3 = H() | 0 | a3;
          } while ((d3 | 0) < (g3 | 0));
        }
        b[e3 >> 2] = f3;
        b[e3 + 4 >> 2] = a3;
        e3 = 0;
        return e3 | 0;
      }
      function Gb(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        g3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        if (!((d3 | 0) < 16 & (g3 | 0) <= (d3 | 0))) {
          e3 = 4;
          return e3 | 0;
        }
        f3 = d3 - g3 | 0;
        d3 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        a:
          do {
            if (!(oa(d3 & 127) | 0)) {
              d3 = Oc(7, 0, f3, ((f3 | 0) < 0) << 31 >> 31) | 0;
              f3 = H() | 0;
            } else {
              b:
                do {
                  if (g3 | 0) {
                    d3 = 1;
                    while (1) {
                      h2 = Rd(7, 0, (15 - d3 | 0) * 3 | 0) | 0;
                      if (!((h2 & a3 | 0) == 0 & ((H() | 0) & c3 | 0) == 0)) {
                        break;
                      }
                      if (d3 >>> 0 < g3 >>> 0) {
                        d3 = d3 + 1 | 0;
                      } else {
                        break b;
                      }
                    }
                    d3 = Oc(7, 0, f3, ((f3 | 0) < 0) << 31 >> 31) | 0;
                    f3 = H() | 0;
                    break a;
                  }
                } while (0);
              d3 = Oc(7, 0, f3, ((f3 | 0) < 0) << 31 >> 31) | 0;
              d3 = Md(d3 | 0, H() | 0, 5, 0) | 0;
              d3 = Gd(d3 | 0, H() | 0, -5, -1) | 0;
              d3 = Kd(d3 | 0, H() | 0, 6, 0) | 0;
              d3 = Gd(d3 | 0, H() | 0, 1, 0) | 0;
              f3 = H() | 0;
            }
          } while (0);
        h2 = e3;
        b[h2 >> 2] = d3;
        b[h2 + 4 >> 2] = f3;
        h2 = 0;
        return h2 | 0;
      }
      function Hb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, e3 = 0;
        e3 = Qd(a3 | 0, b2 | 0, 45) | 0;
        H() | 0;
        if (!(oa(e3 & 127) | 0)) {
          e3 = 0;
          return e3 | 0;
        }
        e3 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        a:
          do {
            if (!e3) {
              c3 = 0;
            } else {
              d3 = 1;
              while (1) {
                c3 = Qd(a3 | 0, b2 | 0, (15 - d3 | 0) * 3 | 0) | 0;
                H() | 0;
                c3 = c3 & 7;
                if (c3 | 0) {
                  break a;
                }
                if (d3 >>> 0 < e3 >>> 0) {
                  d3 = d3 + 1 | 0;
                } else {
                  c3 = 0;
                  break;
                }
              }
            }
          } while (0);
        e3 = (c3 | 0) == 0 & 1;
        return e3 | 0;
      }
      function Ib(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = T3;
        T3 = T3 + 16 | 0;
        g3 = h2;
        fc(g3, a3, c3, d3);
        c3 = g3;
        a3 = b[c3 >> 2] | 0;
        c3 = b[c3 + 4 >> 2] | 0;
        if ((a3 | 0) == 0 & (c3 | 0) == 0) {
          T3 = h2;
          return 0;
        }
        f3 = 0;
        d3 = 0;
        do {
          i2 = e3 + (f3 << 3) | 0;
          b[i2 >> 2] = a3;
          b[i2 + 4 >> 2] = c3;
          f3 = Gd(f3 | 0, d3 | 0, 1, 0) | 0;
          d3 = H() | 0;
          hc(g3);
          i2 = g3;
          a3 = b[i2 >> 2] | 0;
          c3 = b[i2 + 4 >> 2] | 0;
        } while (!((a3 | 0) == 0 & (c3 | 0) == 0));
        T3 = h2;
        return 0;
      }
      function Jb(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        if ((d3 | 0) < (c3 | 0)) {
          c3 = b2;
          d3 = a3;
          G2(c3 | 0);
          return d3 | 0;
        }
        c3 = Rd(-1, -1, ((d3 - c3 | 0) * 3 | 0) + 3 | 0) | 0;
        d3 = Rd(~c3 | 0, ~(H() | 0) | 0, (15 - d3 | 0) * 3 | 0) | 0;
        c3 = ~(H() | 0) & b2;
        d3 = ~d3 & a3;
        G2(c3 | 0);
        return d3 | 0;
      }
      function Kb(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0;
        f3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        if (!((d3 | 0) < 16 & (f3 | 0) <= (d3 | 0))) {
          e3 = 4;
          return e3 | 0;
        }
        if ((f3 | 0) < (d3 | 0)) {
          f3 = Rd(-1, -1, ((d3 + -1 - f3 | 0) * 3 | 0) + 3 | 0) | 0;
          f3 = Rd(~f3 | 0, ~(H() | 0) | 0, (15 - d3 | 0) * 3 | 0) | 0;
          c3 = ~(H() | 0) & c3;
          a3 = ~f3 & a3;
        }
        f3 = Rd(d3 | 0, 0, 52) | 0;
        d3 = c3 & -15728641 | (H() | 0);
        b[e3 >> 2] = a3 | f3;
        b[e3 + 4 >> 2] = d3;
        e3 = 0;
        return e3 | 0;
      }
      function Lb(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B4 = 0, C3 = 0, D3 = 0, E3 = 0;
        if ((d3 | 0) == 0 & (e3 | 0) == 0) {
          E3 = 0;
          return E3 | 0;
        }
        f3 = a3;
        g3 = b[f3 >> 2] | 0;
        f3 = b[f3 + 4 >> 2] | 0;
        if (true & (f3 & 15728640 | 0) == 0) {
          if (!((e3 | 0) > 0 | (e3 | 0) == 0 & d3 >>> 0 > 0)) {
            E3 = 0;
            return E3 | 0;
          }
          E3 = c3;
          b[E3 >> 2] = g3;
          b[E3 + 4 >> 2] = f3;
          if ((d3 | 0) == 1 & (e3 | 0) == 0) {
            E3 = 0;
            return E3 | 0;
          }
          f3 = 1;
          g3 = 0;
          do {
            C3 = a3 + (f3 << 3) | 0;
            D3 = b[C3 + 4 >> 2] | 0;
            E3 = c3 + (f3 << 3) | 0;
            b[E3 >> 2] = b[C3 >> 2];
            b[E3 + 4 >> 2] = D3;
            f3 = Gd(f3 | 0, g3 | 0, 1, 0) | 0;
            g3 = H() | 0;
          } while ((g3 | 0) < (e3 | 0) | (g3 | 0) == (e3 | 0) & f3 >>> 0 < d3 >>> 0);
          f3 = 0;
          return f3 | 0;
        }
        B4 = d3 << 3;
        D3 = Dd(B4) | 0;
        if (!D3) {
          E3 = 13;
          return E3 | 0;
        }
        Wd(D3 | 0, a3 | 0, B4 | 0) | 0;
        C3 = Fd(d3, 8) | 0;
        if (!C3) {
          Ed(D3);
          E3 = 13;
          return E3 | 0;
        }
        a:
          while (1) {
            f3 = D3;
            k2 = b[f3 >> 2] | 0;
            f3 = b[f3 + 4 >> 2] | 0;
            z3 = Qd(k2 | 0, f3 | 0, 52) | 0;
            H() | 0;
            z3 = z3 & 15;
            A3 = z3 + -1 | 0;
            y3 = (z3 | 0) != 0;
            x3 = (e3 | 0) > 0 | (e3 | 0) == 0 & d3 >>> 0 > 0;
            b:
              do {
                if (y3 & x3) {
                  t3 = Rd(A3 | 0, 0, 52) | 0;
                  u3 = H() | 0;
                  if (A3 >>> 0 > 15) {
                    if (!((k2 | 0) == 0 & (f3 | 0) == 0)) {
                      E3 = 16;
                      break a;
                    }
                    g3 = 0;
                    a3 = 0;
                    while (1) {
                      g3 = Gd(g3 | 0, a3 | 0, 1, 0) | 0;
                      a3 = H() | 0;
                      if (!((a3 | 0) < (e3 | 0) | (a3 | 0) == (e3 | 0) & g3 >>> 0 < d3 >>> 0)) {
                        break b;
                      }
                      h2 = D3 + (g3 << 3) | 0;
                      w5 = b[h2 >> 2] | 0;
                      h2 = b[h2 + 4 >> 2] | 0;
                      if (!((w5 | 0) == 0 & (h2 | 0) == 0)) {
                        f3 = h2;
                        E3 = 16;
                        break a;
                      }
                    }
                  }
                  i2 = k2;
                  a3 = f3;
                  g3 = 0;
                  h2 = 0;
                  while (1) {
                    if (!((i2 | 0) == 0 & (a3 | 0) == 0)) {
                      if (!(true & (a3 & 117440512 | 0) == 0)) {
                        E3 = 21;
                        break a;
                      }
                      l2 = Qd(i2 | 0, a3 | 0, 52) | 0;
                      H() | 0;
                      l2 = l2 & 15;
                      if ((l2 | 0) < (A3 | 0)) {
                        f3 = 12;
                        E3 = 27;
                        break a;
                      }
                      if ((l2 | 0) != (A3 | 0)) {
                        i2 = i2 | t3;
                        a3 = a3 & -15728641 | u3;
                        if (l2 >>> 0 >= z3 >>> 0) {
                          j2 = A3;
                          do {
                            w5 = Rd(7, 0, (14 - j2 | 0) * 3 | 0) | 0;
                            j2 = j2 + 1 | 0;
                            i2 = w5 | i2;
                            a3 = H() | 0 | a3;
                          } while (j2 >>> 0 < l2 >>> 0);
                        }
                      }
                      n2 = Od(i2 | 0, a3 | 0, d3 | 0, e3 | 0) | 0;
                      o2 = H() | 0;
                      j2 = C3 + (n2 << 3) | 0;
                      l2 = j2;
                      m2 = b[l2 >> 2] | 0;
                      l2 = b[l2 + 4 >> 2] | 0;
                      if (!((m2 | 0) == 0 & (l2 | 0) == 0)) {
                        r3 = 0;
                        s3 = 0;
                        do {
                          if ((r3 | 0) > (e3 | 0) | (r3 | 0) == (e3 | 0) & s3 >>> 0 > d3 >>> 0) {
                            E3 = 31;
                            break a;
                          }
                          if ((m2 | 0) == (i2 | 0) & (l2 & -117440513 | 0) == (a3 | 0)) {
                            p3 = Qd(m2 | 0, l2 | 0, 56) | 0;
                            H() | 0;
                            p3 = p3 & 7;
                            q3 = p3 + 1 | 0;
                            w5 = Qd(m2 | 0, l2 | 0, 45) | 0;
                            H() | 0;
                            c:
                              do {
                                if (!(oa(w5 & 127) | 0)) {
                                  l2 = 7;
                                } else {
                                  m2 = Qd(m2 | 0, l2 | 0, 52) | 0;
                                  H() | 0;
                                  m2 = m2 & 15;
                                  if (!m2) {
                                    l2 = 6;
                                    break;
                                  }
                                  l2 = 1;
                                  while (1) {
                                    w5 = Rd(7, 0, (15 - l2 | 0) * 3 | 0) | 0;
                                    if (!((w5 & i2 | 0) == 0 & ((H() | 0) & a3 | 0) == 0)) {
                                      l2 = 7;
                                      break c;
                                    }
                                    if (l2 >>> 0 < m2 >>> 0) {
                                      l2 = l2 + 1 | 0;
                                    } else {
                                      l2 = 6;
                                      break;
                                    }
                                  }
                                }
                              } while (0);
                            if ((p3 + 2 | 0) >>> 0 > l2 >>> 0) {
                              E3 = 41;
                              break a;
                            }
                            w5 = Rd(q3 | 0, 0, 56) | 0;
                            a3 = H() | 0 | a3 & -117440513;
                            v3 = j2;
                            b[v3 >> 2] = 0;
                            b[v3 + 4 >> 2] = 0;
                            i2 = w5 | i2;
                          } else {
                            n2 = Gd(n2 | 0, o2 | 0, 1, 0) | 0;
                            n2 = Nd(n2 | 0, H() | 0, d3 | 0, e3 | 0) | 0;
                            o2 = H() | 0;
                          }
                          s3 = Gd(s3 | 0, r3 | 0, 1, 0) | 0;
                          r3 = H() | 0;
                          j2 = C3 + (n2 << 3) | 0;
                          l2 = j2;
                          m2 = b[l2 >> 2] | 0;
                          l2 = b[l2 + 4 >> 2] | 0;
                        } while (!((m2 | 0) == 0 & (l2 | 0) == 0));
                      }
                      w5 = j2;
                      b[w5 >> 2] = i2;
                      b[w5 + 4 >> 2] = a3;
                    }
                    g3 = Gd(g3 | 0, h2 | 0, 1, 0) | 0;
                    h2 = H() | 0;
                    if (!((h2 | 0) < (e3 | 0) | (h2 | 0) == (e3 | 0) & g3 >>> 0 < d3 >>> 0)) {
                      break b;
                    }
                    a3 = D3 + (g3 << 3) | 0;
                    i2 = b[a3 >> 2] | 0;
                    a3 = b[a3 + 4 >> 2] | 0;
                  }
                }
              } while (0);
            w5 = Gd(d3 | 0, e3 | 0, 5, 0) | 0;
            v3 = H() | 0;
            if (v3 >>> 0 < 0 | (v3 | 0) == 0 & w5 >>> 0 < 11) {
              E3 = 85;
              break;
            }
            w5 = Kd(d3 | 0, e3 | 0, 6, 0) | 0;
            H() | 0;
            w5 = Fd(w5, 8) | 0;
            if (!w5) {
              E3 = 48;
              break;
            }
            do {
              if (x3) {
                q3 = 0;
                a3 = 0;
                p3 = 0;
                r3 = 0;
                while (1) {
                  l2 = C3 + (q3 << 3) | 0;
                  h2 = l2;
                  g3 = b[h2 >> 2] | 0;
                  h2 = b[h2 + 4 >> 2] | 0;
                  if (!((g3 | 0) == 0 & (h2 | 0) == 0)) {
                    m2 = Qd(g3 | 0, h2 | 0, 56) | 0;
                    H() | 0;
                    m2 = m2 & 7;
                    i2 = m2 + 1 | 0;
                    n2 = h2 & -117440513;
                    v3 = Qd(g3 | 0, h2 | 0, 45) | 0;
                    H() | 0;
                    d:
                      do {
                        if (oa(v3 & 127) | 0) {
                          o2 = Qd(g3 | 0, h2 | 0, 52) | 0;
                          H() | 0;
                          o2 = o2 & 15;
                          if (o2 | 0) {
                            j2 = 1;
                            while (1) {
                              v3 = Rd(7, 0, (15 - j2 | 0) * 3 | 0) | 0;
                              if (!((g3 & v3 | 0) == 0 & (n2 & (H() | 0) | 0) == 0)) {
                                break d;
                              }
                              if (j2 >>> 0 < o2 >>> 0) {
                                j2 = j2 + 1 | 0;
                              } else {
                                break;
                              }
                            }
                          }
                          h2 = Rd(i2 | 0, 0, 56) | 0;
                          g3 = h2 | g3;
                          h2 = H() | 0 | n2;
                          i2 = l2;
                          b[i2 >> 2] = g3;
                          b[i2 + 4 >> 2] = h2;
                          i2 = m2 + 2 | 0;
                        }
                      } while (0);
                    if ((i2 | 0) == 7) {
                      v3 = w5 + (a3 << 3) | 0;
                      b[v3 >> 2] = g3;
                      b[v3 + 4 >> 2] = h2 & -117440513;
                      a3 = Gd(a3 | 0, p3 | 0, 1, 0) | 0;
                      v3 = H() | 0;
                    } else {
                      v3 = p3;
                    }
                  } else {
                    v3 = p3;
                  }
                  q3 = Gd(q3 | 0, r3 | 0, 1, 0) | 0;
                  r3 = H() | 0;
                  if (!((r3 | 0) < (e3 | 0) | (r3 | 0) == (e3 | 0) & q3 >>> 0 < d3 >>> 0)) {
                    break;
                  } else {
                    p3 = v3;
                  }
                }
                if (x3) {
                  s3 = A3 >>> 0 > 15;
                  t3 = Rd(A3 | 0, 0, 52) | 0;
                  u3 = H() | 0;
                  if (!y3) {
                    g3 = 0;
                    j2 = 0;
                    i2 = 0;
                    h2 = 0;
                    while (1) {
                      if (!((k2 | 0) == 0 & (f3 | 0) == 0)) {
                        A3 = c3 + (g3 << 3) | 0;
                        b[A3 >> 2] = k2;
                        b[A3 + 4 >> 2] = f3;
                        g3 = Gd(g3 | 0, j2 | 0, 1, 0) | 0;
                        j2 = H() | 0;
                      }
                      i2 = Gd(i2 | 0, h2 | 0, 1, 0) | 0;
                      h2 = H() | 0;
                      if (!((h2 | 0) < (e3 | 0) | (h2 | 0) == (e3 | 0) & i2 >>> 0 < d3 >>> 0)) {
                        break;
                      }
                      f3 = D3 + (i2 << 3) | 0;
                      k2 = b[f3 >> 2] | 0;
                      f3 = b[f3 + 4 >> 2] | 0;
                    }
                    f3 = v3;
                    break;
                  }
                  g3 = 0;
                  j2 = 0;
                  h2 = 0;
                  i2 = 0;
                  while (1) {
                    do {
                      if (!((k2 | 0) == 0 & (f3 | 0) == 0)) {
                        o2 = Qd(k2 | 0, f3 | 0, 52) | 0;
                        H() | 0;
                        o2 = o2 & 15;
                        if (s3 | (o2 | 0) < (A3 | 0)) {
                          E3 = 80;
                          break a;
                        }
                        if ((o2 | 0) != (A3 | 0)) {
                          l2 = k2 | t3;
                          m2 = f3 & -15728641 | u3;
                          if (o2 >>> 0 >= z3 >>> 0) {
                            n2 = A3;
                            do {
                              y3 = Rd(7, 0, (14 - n2 | 0) * 3 | 0) | 0;
                              n2 = n2 + 1 | 0;
                              l2 = y3 | l2;
                              m2 = H() | 0 | m2;
                            } while (n2 >>> 0 < o2 >>> 0);
                          }
                        } else {
                          l2 = k2;
                          m2 = f3;
                        }
                        p3 = Od(l2 | 0, m2 | 0, d3 | 0, e3 | 0) | 0;
                        n2 = 0;
                        o2 = 0;
                        r3 = H() | 0;
                        do {
                          if ((n2 | 0) > (e3 | 0) | (n2 | 0) == (e3 | 0) & o2 >>> 0 > d3 >>> 0) {
                            E3 = 81;
                            break a;
                          }
                          y3 = C3 + (p3 << 3) | 0;
                          q3 = b[y3 + 4 >> 2] | 0;
                          if ((q3 & -117440513 | 0) == (m2 | 0) ? (b[y3 >> 2] | 0) == (l2 | 0) : 0) {
                            E3 = 65;
                            break;
                          }
                          y3 = Gd(p3 | 0, r3 | 0, 1, 0) | 0;
                          p3 = Nd(y3 | 0, H() | 0, d3 | 0, e3 | 0) | 0;
                          r3 = H() | 0;
                          o2 = Gd(o2 | 0, n2 | 0, 1, 0) | 0;
                          n2 = H() | 0;
                          y3 = C3 + (p3 << 3) | 0;
                        } while (!((b[y3 >> 2] | 0) == (l2 | 0) ? (b[y3 + 4 >> 2] | 0) == (m2 | 0) : 0));
                        if ((E3 | 0) == 65 ? (E3 = 0, true & (q3 & 117440512 | 0) == 100663296) : 0) {
                          break;
                        }
                        y3 = c3 + (g3 << 3) | 0;
                        b[y3 >> 2] = k2;
                        b[y3 + 4 >> 2] = f3;
                        g3 = Gd(g3 | 0, j2 | 0, 1, 0) | 0;
                        j2 = H() | 0;
                      }
                    } while (0);
                    h2 = Gd(h2 | 0, i2 | 0, 1, 0) | 0;
                    i2 = H() | 0;
                    if (!((i2 | 0) < (e3 | 0) | (i2 | 0) == (e3 | 0) & h2 >>> 0 < d3 >>> 0)) {
                      break;
                    }
                    f3 = D3 + (h2 << 3) | 0;
                    k2 = b[f3 >> 2] | 0;
                    f3 = b[f3 + 4 >> 2] | 0;
                  }
                  f3 = v3;
                } else {
                  g3 = 0;
                  f3 = v3;
                }
              } else {
                g3 = 0;
                a3 = 0;
                f3 = 0;
              }
            } while (0);
            Xd(C3 | 0, 0, B4 | 0) | 0;
            Wd(D3 | 0, w5 | 0, a3 << 3 | 0) | 0;
            Ed(w5);
            if ((a3 | 0) == 0 & (f3 | 0) == 0) {
              E3 = 89;
              break;
            } else {
              c3 = c3 + (g3 << 3) | 0;
              e3 = f3;
              d3 = a3;
            }
          }
        if ((E3 | 0) == 16) {
          if (true & (f3 & 117440512 | 0) == 0) {
            f3 = 4;
            E3 = 27;
          } else {
            E3 = 21;
          }
        } else if ((E3 | 0) == 31) {
          I2(27795, 27122, 529, 27132);
        } else if ((E3 | 0) == 41) {
          Ed(D3);
          Ed(C3);
          E3 = 10;
          return E3 | 0;
        } else if ((E3 | 0) == 48) {
          Ed(D3);
          Ed(C3);
          E3 = 13;
          return E3 | 0;
        } else if ((E3 | 0) == 80) {
          I2(27795, 27122, 620, 27132);
        } else if ((E3 | 0) == 81) {
          I2(27795, 27122, 632, 27132);
        } else if ((E3 | 0) == 85) {
          Wd(c3 | 0, D3 | 0, d3 << 3 | 0) | 0;
          E3 = 89;
        }
        if ((E3 | 0) == 21) {
          Ed(D3);
          Ed(C3);
          E3 = 5;
          return E3 | 0;
        } else if ((E3 | 0) == 27) {
          Ed(D3);
          Ed(C3);
          E3 = f3;
          return E3 | 0;
        } else if ((E3 | 0) == 89) {
          Ed(D3);
          Ed(C3);
          E3 = 0;
          return E3 | 0;
        }
        return 0;
      }
      function Mb(a3, c3, d3, e3, f3, g3, h2) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        h2 = h2 | 0;
        var i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0;
        q3 = T3;
        T3 = T3 + 16 | 0;
        p3 = q3;
        if (!((d3 | 0) > 0 | (d3 | 0) == 0 & c3 >>> 0 > 0)) {
          p3 = 0;
          T3 = q3;
          return p3 | 0;
        }
        if ((h2 | 0) >= 16) {
          p3 = 12;
          T3 = q3;
          return p3 | 0;
        }
        n2 = 0;
        o2 = 0;
        m2 = 0;
        i2 = 0;
        a:
          while (1) {
            k2 = a3 + (n2 << 3) | 0;
            j2 = b[k2 >> 2] | 0;
            k2 = b[k2 + 4 >> 2] | 0;
            l2 = Qd(j2 | 0, k2 | 0, 52) | 0;
            H() | 0;
            if ((l2 & 15 | 0) > (h2 | 0)) {
              i2 = 12;
              j2 = 11;
              break;
            }
            fc(p3, j2, k2, h2);
            l2 = p3;
            k2 = b[l2 >> 2] | 0;
            l2 = b[l2 + 4 >> 2] | 0;
            if ((k2 | 0) == 0 & (l2 | 0) == 0) {
              j2 = m2;
            } else {
              j2 = m2;
              do {
                if (!((i2 | 0) < (g3 | 0) | (i2 | 0) == (g3 | 0) & j2 >>> 0 < f3 >>> 0)) {
                  j2 = 10;
                  break a;
                }
                m2 = e3 + (j2 << 3) | 0;
                b[m2 >> 2] = k2;
                b[m2 + 4 >> 2] = l2;
                j2 = Gd(j2 | 0, i2 | 0, 1, 0) | 0;
                i2 = H() | 0;
                hc(p3);
                m2 = p3;
                k2 = b[m2 >> 2] | 0;
                l2 = b[m2 + 4 >> 2] | 0;
              } while (!((k2 | 0) == 0 & (l2 | 0) == 0));
            }
            n2 = Gd(n2 | 0, o2 | 0, 1, 0) | 0;
            o2 = H() | 0;
            if (!((o2 | 0) < (d3 | 0) | (o2 | 0) == (d3 | 0) & n2 >>> 0 < c3 >>> 0)) {
              i2 = 0;
              j2 = 11;
              break;
            } else {
              m2 = j2;
            }
          }
        if ((j2 | 0) == 10) {
          p3 = 14;
          T3 = q3;
          return p3 | 0;
        } else if ((j2 | 0) == 11) {
          T3 = q3;
          return i2 | 0;
        }
        return 0;
      }
      function Nb(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        n2 = T3;
        T3 = T3 + 16 | 0;
        m2 = n2;
        a:
          do {
            if ((d3 | 0) > 0 | (d3 | 0) == 0 & c3 >>> 0 > 0) {
              k2 = 0;
              h2 = 0;
              g3 = 0;
              l2 = 0;
              while (1) {
                j2 = a3 + (k2 << 3) | 0;
                i2 = b[j2 >> 2] | 0;
                j2 = b[j2 + 4 >> 2] | 0;
                if (!((i2 | 0) == 0 & (j2 | 0) == 0)) {
                  j2 = (Gb(i2, j2, e3, m2) | 0) == 0;
                  i2 = m2;
                  h2 = Gd(b[i2 >> 2] | 0, b[i2 + 4 >> 2] | 0, h2 | 0, g3 | 0) | 0;
                  g3 = H() | 0;
                  if (!j2) {
                    g3 = 12;
                    break;
                  }
                }
                k2 = Gd(k2 | 0, l2 | 0, 1, 0) | 0;
                l2 = H() | 0;
                if (!((l2 | 0) < (d3 | 0) | (l2 | 0) == (d3 | 0) & k2 >>> 0 < c3 >>> 0)) {
                  break a;
                }
              }
              T3 = n2;
              return g3 | 0;
            } else {
              h2 = 0;
              g3 = 0;
            }
          } while (0);
        b[f3 >> 2] = h2;
        b[f3 + 4 >> 2] = g3;
        f3 = 0;
        T3 = n2;
        return f3 | 0;
      }
      function Ob(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        b2 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        return b2 & 1 | 0;
      }
      function Pb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, e3 = 0;
        e3 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        if (!e3) {
          e3 = 0;
          return e3 | 0;
        }
        d3 = 1;
        while (1) {
          c3 = Qd(a3 | 0, b2 | 0, (15 - d3 | 0) * 3 | 0) | 0;
          H() | 0;
          c3 = c3 & 7;
          if (c3 | 0) {
            d3 = 5;
            break;
          }
          if (d3 >>> 0 < e3 >>> 0) {
            d3 = d3 + 1 | 0;
          } else {
            c3 = 0;
            d3 = 5;
            break;
          }
        }
        if ((d3 | 0) == 5) {
          return c3 | 0;
        }
        return 0;
      }
      function Qb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        i2 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        if (!i2) {
          h2 = b2;
          i2 = a3;
          G2(h2 | 0);
          return i2 | 0;
        }
        h2 = 1;
        c3 = 0;
        while (1) {
          f3 = (15 - h2 | 0) * 3 | 0;
          d3 = Rd(7, 0, f3 | 0) | 0;
          e3 = H() | 0;
          g3 = Qd(a3 | 0, b2 | 0, f3 | 0) | 0;
          H() | 0;
          f3 = Rd($a(g3 & 7) | 0, 0, f3 | 0) | 0;
          g3 = H() | 0;
          a3 = f3 | a3 & ~d3;
          b2 = g3 | b2 & ~e3;
          a:
            do {
              if (!c3) {
                if (!((f3 & d3 | 0) == 0 & (g3 & e3 | 0) == 0)) {
                  d3 = Qd(a3 | 0, b2 | 0, 52) | 0;
                  H() | 0;
                  d3 = d3 & 15;
                  if (!d3) {
                    c3 = 1;
                  } else {
                    c3 = 1;
                    b:
                      while (1) {
                        g3 = Qd(a3 | 0, b2 | 0, (15 - c3 | 0) * 3 | 0) | 0;
                        H() | 0;
                        switch (g3 & 7) {
                          case 1:
                            break b;
                          case 0:
                            break;
                          default: {
                            c3 = 1;
                            break a;
                          }
                        }
                        if (c3 >>> 0 < d3 >>> 0) {
                          c3 = c3 + 1 | 0;
                        } else {
                          c3 = 1;
                          break a;
                        }
                      }
                    c3 = 1;
                    while (1) {
                      g3 = (15 - c3 | 0) * 3 | 0;
                      e3 = Qd(a3 | 0, b2 | 0, g3 | 0) | 0;
                      H() | 0;
                      f3 = Rd(7, 0, g3 | 0) | 0;
                      b2 = b2 & ~(H() | 0);
                      g3 = Rd($a(e3 & 7) | 0, 0, g3 | 0) | 0;
                      a3 = a3 & ~f3 | g3;
                      b2 = b2 | (H() | 0);
                      if (c3 >>> 0 < d3 >>> 0) {
                        c3 = c3 + 1 | 0;
                      } else {
                        c3 = 1;
                        break;
                      }
                    }
                  }
                } else {
                  c3 = 0;
                }
              }
            } while (0);
          if (h2 >>> 0 < i2 >>> 0) {
            h2 = h2 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Rb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0;
        d3 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        d3 = d3 & 15;
        if (!d3) {
          c3 = b2;
          d3 = a3;
          G2(c3 | 0);
          return d3 | 0;
        }
        c3 = 1;
        while (1) {
          f3 = (15 - c3 | 0) * 3 | 0;
          g3 = Qd(a3 | 0, b2 | 0, f3 | 0) | 0;
          H() | 0;
          e3 = Rd(7, 0, f3 | 0) | 0;
          b2 = b2 & ~(H() | 0);
          f3 = Rd($a(g3 & 7) | 0, 0, f3 | 0) | 0;
          a3 = f3 | a3 & ~e3;
          b2 = H() | 0 | b2;
          if (c3 >>> 0 < d3 >>> 0) {
            c3 = c3 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Sb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        i2 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        if (!i2) {
          h2 = b2;
          i2 = a3;
          G2(h2 | 0);
          return i2 | 0;
        }
        h2 = 1;
        c3 = 0;
        while (1) {
          f3 = (15 - h2 | 0) * 3 | 0;
          d3 = Rd(7, 0, f3 | 0) | 0;
          e3 = H() | 0;
          g3 = Qd(a3 | 0, b2 | 0, f3 | 0) | 0;
          H() | 0;
          f3 = Rd(ab(g3 & 7) | 0, 0, f3 | 0) | 0;
          g3 = H() | 0;
          a3 = f3 | a3 & ~d3;
          b2 = g3 | b2 & ~e3;
          a:
            do {
              if (!c3) {
                if (!((f3 & d3 | 0) == 0 & (g3 & e3 | 0) == 0)) {
                  d3 = Qd(a3 | 0, b2 | 0, 52) | 0;
                  H() | 0;
                  d3 = d3 & 15;
                  if (!d3) {
                    c3 = 1;
                  } else {
                    c3 = 1;
                    b:
                      while (1) {
                        g3 = Qd(a3 | 0, b2 | 0, (15 - c3 | 0) * 3 | 0) | 0;
                        H() | 0;
                        switch (g3 & 7) {
                          case 1:
                            break b;
                          case 0:
                            break;
                          default: {
                            c3 = 1;
                            break a;
                          }
                        }
                        if (c3 >>> 0 < d3 >>> 0) {
                          c3 = c3 + 1 | 0;
                        } else {
                          c3 = 1;
                          break a;
                        }
                      }
                    c3 = 1;
                    while (1) {
                      e3 = (15 - c3 | 0) * 3 | 0;
                      f3 = Rd(7, 0, e3 | 0) | 0;
                      g3 = b2 & ~(H() | 0);
                      b2 = Qd(a3 | 0, b2 | 0, e3 | 0) | 0;
                      H() | 0;
                      b2 = Rd(ab(b2 & 7) | 0, 0, e3 | 0) | 0;
                      a3 = a3 & ~f3 | b2;
                      b2 = g3 | (H() | 0);
                      if (c3 >>> 0 < d3 >>> 0) {
                        c3 = c3 + 1 | 0;
                      } else {
                        c3 = 1;
                        break;
                      }
                    }
                  }
                } else {
                  c3 = 0;
                }
              }
            } while (0);
          if (h2 >>> 0 < i2 >>> 0) {
            h2 = h2 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Tb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0;
        d3 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        d3 = d3 & 15;
        if (!d3) {
          c3 = b2;
          d3 = a3;
          G2(c3 | 0);
          return d3 | 0;
        }
        c3 = 1;
        while (1) {
          g3 = (15 - c3 | 0) * 3 | 0;
          f3 = Rd(7, 0, g3 | 0) | 0;
          e3 = b2 & ~(H() | 0);
          b2 = Qd(a3 | 0, b2 | 0, g3 | 0) | 0;
          H() | 0;
          b2 = Rd(ab(b2 & 7) | 0, 0, g3 | 0) | 0;
          a3 = b2 | a3 & ~f3;
          b2 = H() | 0 | e3;
          if (c3 >>> 0 < d3 >>> 0) {
            c3 = c3 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Ub(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        j2 = T3;
        T3 = T3 + 64 | 0;
        i2 = j2 + 40 | 0;
        e3 = j2 + 24 | 0;
        f3 = j2 + 12 | 0;
        g3 = j2;
        Rd(c3 | 0, 0, 52) | 0;
        d3 = H() | 0 | 134225919;
        if (!c3) {
          if ((b[a3 + 4 >> 2] | 0) > 2) {
            h2 = 0;
            i2 = 0;
            G2(h2 | 0);
            T3 = j2;
            return i2 | 0;
          }
          if ((b[a3 + 8 >> 2] | 0) > 2) {
            h2 = 0;
            i2 = 0;
            G2(h2 | 0);
            T3 = j2;
            return i2 | 0;
          }
          if ((b[a3 + 12 >> 2] | 0) > 2) {
            h2 = 0;
            i2 = 0;
            G2(h2 | 0);
            T3 = j2;
            return i2 | 0;
          }
          Rd(qa(a3) | 0, 0, 45) | 0;
          h2 = H() | 0 | d3;
          i2 = -1;
          G2(h2 | 0);
          T3 = j2;
          return i2 | 0;
        }
        b[i2 >> 2] = b[a3 >> 2];
        b[i2 + 4 >> 2] = b[a3 + 4 >> 2];
        b[i2 + 8 >> 2] = b[a3 + 8 >> 2];
        b[i2 + 12 >> 2] = b[a3 + 12 >> 2];
        h2 = i2 + 4 | 0;
        if ((c3 | 0) > 0) {
          a3 = -1;
          while (1) {
            b[e3 >> 2] = b[h2 >> 2];
            b[e3 + 4 >> 2] = b[h2 + 4 >> 2];
            b[e3 + 8 >> 2] = b[h2 + 8 >> 2];
            if (!(c3 & 1)) {
              Va(h2);
              b[f3 >> 2] = b[h2 >> 2];
              b[f3 + 4 >> 2] = b[h2 + 4 >> 2];
              b[f3 + 8 >> 2] = b[h2 + 8 >> 2];
              Xa(f3);
            } else {
              Ua(h2);
              b[f3 >> 2] = b[h2 >> 2];
              b[f3 + 4 >> 2] = b[h2 + 4 >> 2];
              b[f3 + 8 >> 2] = b[h2 + 8 >> 2];
              Wa(f3);
            }
            Pa(e3, f3, g3);
            Ma(g3);
            l2 = (15 - c3 | 0) * 3 | 0;
            k2 = Rd(7, 0, l2 | 0) | 0;
            d3 = d3 & ~(H() | 0);
            l2 = Rd(Ra(g3) | 0, 0, l2 | 0) | 0;
            a3 = l2 | a3 & ~k2;
            d3 = H() | 0 | d3;
            if ((c3 | 0) > 1) {
              c3 = c3 + -1 | 0;
            } else {
              break;
            }
          }
        } else {
          a3 = -1;
        }
        a:
          do {
            if (((b[h2 >> 2] | 0) <= 2 ? (b[i2 + 8 >> 2] | 0) <= 2 : 0) ? (b[i2 + 12 >> 2] | 0) <= 2 : 0) {
              e3 = qa(i2) | 0;
              c3 = Rd(e3 | 0, 0, 45) | 0;
              c3 = c3 | a3;
              a3 = H() | 0 | d3 & -1040385;
              g3 = ra(i2) | 0;
              if (!(oa(e3) | 0)) {
                if ((g3 | 0) <= 0) {
                  break;
                }
                f3 = 0;
                while (1) {
                  e3 = Qd(c3 | 0, a3 | 0, 52) | 0;
                  H() | 0;
                  e3 = e3 & 15;
                  if (e3) {
                    d3 = 1;
                    while (1) {
                      l2 = (15 - d3 | 0) * 3 | 0;
                      i2 = Qd(c3 | 0, a3 | 0, l2 | 0) | 0;
                      H() | 0;
                      k2 = Rd(7, 0, l2 | 0) | 0;
                      a3 = a3 & ~(H() | 0);
                      l2 = Rd($a(i2 & 7) | 0, 0, l2 | 0) | 0;
                      c3 = c3 & ~k2 | l2;
                      a3 = a3 | (H() | 0);
                      if (d3 >>> 0 < e3 >>> 0) {
                        d3 = d3 + 1 | 0;
                      } else {
                        break;
                      }
                    }
                  }
                  f3 = f3 + 1 | 0;
                  if ((f3 | 0) == (g3 | 0)) {
                    break a;
                  }
                }
              }
              f3 = Qd(c3 | 0, a3 | 0, 52) | 0;
              H() | 0;
              f3 = f3 & 15;
              b:
                do {
                  if (f3) {
                    d3 = 1;
                    c:
                      while (1) {
                        l2 = Qd(c3 | 0, a3 | 0, (15 - d3 | 0) * 3 | 0) | 0;
                        H() | 0;
                        switch (l2 & 7) {
                          case 1:
                            break c;
                          case 0:
                            break;
                          default:
                            break b;
                        }
                        if (d3 >>> 0 < f3 >>> 0) {
                          d3 = d3 + 1 | 0;
                        } else {
                          break b;
                        }
                      }
                    if (ua(e3, b[i2 >> 2] | 0) | 0) {
                      d3 = 1;
                      while (1) {
                        i2 = (15 - d3 | 0) * 3 | 0;
                        k2 = Rd(7, 0, i2 | 0) | 0;
                        l2 = a3 & ~(H() | 0);
                        a3 = Qd(c3 | 0, a3 | 0, i2 | 0) | 0;
                        H() | 0;
                        a3 = Rd(ab(a3 & 7) | 0, 0, i2 | 0) | 0;
                        c3 = c3 & ~k2 | a3;
                        a3 = l2 | (H() | 0);
                        if (d3 >>> 0 < f3 >>> 0) {
                          d3 = d3 + 1 | 0;
                        } else {
                          break;
                        }
                      }
                    } else {
                      d3 = 1;
                      while (1) {
                        l2 = (15 - d3 | 0) * 3 | 0;
                        i2 = Qd(c3 | 0, a3 | 0, l2 | 0) | 0;
                        H() | 0;
                        k2 = Rd(7, 0, l2 | 0) | 0;
                        a3 = a3 & ~(H() | 0);
                        l2 = Rd($a(i2 & 7) | 0, 0, l2 | 0) | 0;
                        c3 = c3 & ~k2 | l2;
                        a3 = a3 | (H() | 0);
                        if (d3 >>> 0 < f3 >>> 0) {
                          d3 = d3 + 1 | 0;
                        } else {
                          break;
                        }
                      }
                    }
                  }
                } while (0);
              if ((g3 | 0) > 0) {
                d3 = 0;
                do {
                  c3 = Qb(c3, a3) | 0;
                  a3 = H() | 0;
                  d3 = d3 + 1 | 0;
                } while ((d3 | 0) != (g3 | 0));
              }
            } else {
              c3 = 0;
              a3 = 0;
            }
          } while (0);
        k2 = a3;
        l2 = c3;
        G2(k2 | 0);
        T3 = j2;
        return l2 | 0;
      }
      function Vb(a3) {
        a3 = a3 | 0;
        return (a3 | 0) % 2 | 0 | 0;
      }
      function Wb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0;
        f3 = T3;
        T3 = T3 + 16 | 0;
        e3 = f3;
        if (c3 >>> 0 > 15) {
          e3 = 4;
          T3 = f3;
          return e3 | 0;
        }
        if ((b[a3 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          e3 = 3;
          T3 = f3;
          return e3 | 0;
        }
        if ((b[a3 + 8 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          e3 = 3;
          T3 = f3;
          return e3 | 0;
        }
        qb(a3, c3, e3);
        c3 = Ub(e3, c3) | 0;
        e3 = H() | 0;
        b[d3 >> 2] = c3;
        b[d3 + 4 >> 2] = e3;
        if ((c3 | 0) == 0 & (e3 | 0) == 0) {
          I2(27795, 27122, 959, 27145);
        }
        e3 = 0;
        T3 = f3;
        return e3 | 0;
      }
      function Xb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0;
        f3 = d3 + 4 | 0;
        g3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        h2 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        e3 = (g3 | 0) == 0;
        if (!(oa(h2 & 127) | 0)) {
          if (e3) {
            h2 = 0;
            return h2 | 0;
          }
          if ((b[f3 >> 2] | 0) == 0 ? (b[d3 + 8 >> 2] | 0) == 0 : 0) {
            e3 = (b[d3 + 12 >> 2] | 0) != 0 & 1;
          } else {
            e3 = 1;
          }
        } else if (e3) {
          h2 = 1;
          return h2 | 0;
        } else {
          e3 = 1;
        }
        d3 = 1;
        while (1) {
          if (!(d3 & 1)) {
            Xa(f3);
          } else {
            Wa(f3);
          }
          h2 = Qd(a3 | 0, c3 | 0, (15 - d3 | 0) * 3 | 0) | 0;
          H() | 0;
          Ya(f3, h2 & 7);
          if (d3 >>> 0 < g3 >>> 0) {
            d3 = d3 + 1 | 0;
          } else {
            break;
          }
        }
        return e3 | 0;
      }
      function Yb(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        l2 = T3;
        T3 = T3 + 16 | 0;
        j2 = l2;
        k2 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        k2 = k2 & 127;
        if (k2 >>> 0 > 121) {
          b[d3 >> 2] = 0;
          b[d3 + 4 >> 2] = 0;
          b[d3 + 8 >> 2] = 0;
          b[d3 + 12 >> 2] = 0;
          k2 = 5;
          T3 = l2;
          return k2 | 0;
        }
        a:
          do {
            if ((oa(k2) | 0) != 0 ? (g3 = Qd(a3 | 0, c3 | 0, 52) | 0, H() | 0, g3 = g3 & 15, (g3 | 0) != 0) : 0) {
              e3 = 1;
              b:
                while (1) {
                  i2 = Qd(a3 | 0, c3 | 0, (15 - e3 | 0) * 3 | 0) | 0;
                  H() | 0;
                  switch (i2 & 7) {
                    case 5:
                      break b;
                    case 0:
                      break;
                    default: {
                      e3 = c3;
                      break a;
                    }
                  }
                  if (e3 >>> 0 < g3 >>> 0) {
                    e3 = e3 + 1 | 0;
                  } else {
                    e3 = c3;
                    break a;
                  }
                }
              f3 = 1;
              e3 = c3;
              while (1) {
                c3 = (15 - f3 | 0) * 3 | 0;
                h2 = Rd(7, 0, c3 | 0) | 0;
                i2 = e3 & ~(H() | 0);
                e3 = Qd(a3 | 0, e3 | 0, c3 | 0) | 0;
                H() | 0;
                e3 = Rd(ab(e3 & 7) | 0, 0, c3 | 0) | 0;
                a3 = a3 & ~h2 | e3;
                e3 = i2 | (H() | 0);
                if (f3 >>> 0 < g3 >>> 0) {
                  f3 = f3 + 1 | 0;
                } else {
                  break;
                }
              }
            } else {
              e3 = c3;
            }
          } while (0);
        i2 = 7696 + (k2 * 28 | 0) | 0;
        b[d3 >> 2] = b[i2 >> 2];
        b[d3 + 4 >> 2] = b[i2 + 4 >> 2];
        b[d3 + 8 >> 2] = b[i2 + 8 >> 2];
        b[d3 + 12 >> 2] = b[i2 + 12 >> 2];
        if (!(Xb(a3, e3, d3) | 0)) {
          k2 = 0;
          T3 = l2;
          return k2 | 0;
        }
        h2 = d3 + 4 | 0;
        b[j2 >> 2] = b[h2 >> 2];
        b[j2 + 4 >> 2] = b[h2 + 4 >> 2];
        b[j2 + 8 >> 2] = b[h2 + 8 >> 2];
        g3 = Qd(a3 | 0, e3 | 0, 52) | 0;
        H() | 0;
        i2 = g3 & 15;
        if (!(g3 & 1)) {
          g3 = i2;
        } else {
          Xa(h2);
          g3 = i2 + 1 | 0;
        }
        if (!(oa(k2) | 0)) {
          e3 = 0;
        } else {
          c:
            do {
              if (!i2) {
                e3 = 0;
              } else {
                c3 = 1;
                while (1) {
                  f3 = Qd(a3 | 0, e3 | 0, (15 - c3 | 0) * 3 | 0) | 0;
                  H() | 0;
                  f3 = f3 & 7;
                  if (f3 | 0) {
                    e3 = f3;
                    break c;
                  }
                  if (c3 >>> 0 < i2 >>> 0) {
                    c3 = c3 + 1 | 0;
                  } else {
                    e3 = 0;
                    break;
                  }
                }
              }
            } while (0);
          e3 = (e3 | 0) == 4 & 1;
        }
        if (!(xb(d3, g3, e3, 0) | 0)) {
          if ((g3 | 0) != (i2 | 0)) {
            b[h2 >> 2] = b[j2 >> 2];
            b[h2 + 4 >> 2] = b[j2 + 4 >> 2];
            b[h2 + 8 >> 2] = b[j2 + 8 >> 2];
          }
        } else {
          if (oa(k2) | 0) {
            do {
            } while ((xb(d3, g3, 0, 0) | 0) != 0);
          }
          if ((g3 | 0) != (i2 | 0)) {
            Va(h2);
          }
        }
        k2 = 0;
        T3 = l2;
        return k2 | 0;
      }
      function Zb(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0;
        f3 = T3;
        T3 = T3 + 16 | 0;
        d3 = f3;
        e3 = Yb(a3, b2, d3) | 0;
        if (e3 | 0) {
          T3 = f3;
          return e3 | 0;
        }
        e3 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        ub(d3, e3 & 15, c3);
        e3 = 0;
        T3 = f3;
        return e3 | 0;
      }
      function _b2(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0;
        g3 = T3;
        T3 = T3 + 16 | 0;
        f3 = g3;
        d3 = Yb(a3, b2, f3) | 0;
        if (d3 | 0) {
          f3 = d3;
          T3 = g3;
          return f3 | 0;
        }
        d3 = Qd(a3 | 0, b2 | 0, 45) | 0;
        H() | 0;
        d3 = (oa(d3 & 127) | 0) == 0;
        e3 = Qd(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        a:
          do {
            if (!d3) {
              if (e3 | 0) {
                d3 = 1;
                while (1) {
                  h2 = Rd(7, 0, (15 - d3 | 0) * 3 | 0) | 0;
                  if (!((h2 & a3 | 0) == 0 & ((H() | 0) & b2 | 0) == 0)) {
                    break a;
                  }
                  if (d3 >>> 0 < e3 >>> 0) {
                    d3 = d3 + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              vb(f3, e3, 0, 5, c3);
              h2 = 0;
              T3 = g3;
              return h2 | 0;
            }
          } while (0);
        zb(f3, e3, 0, 6, c3);
        h2 = 0;
        T3 = g3;
        return h2 | 0;
      }
      function $b(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0;
        f3 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        if (!(oa(f3 & 127) | 0)) {
          f3 = 2;
          b[d3 >> 2] = f3;
          return 0;
        }
        f3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        if (!f3) {
          f3 = 5;
          b[d3 >> 2] = f3;
          return 0;
        }
        e3 = 1;
        while (1) {
          g3 = Rd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
          if (!((g3 & a3 | 0) == 0 & ((H() | 0) & c3 | 0) == 0)) {
            e3 = 2;
            a3 = 6;
            break;
          }
          if (e3 >>> 0 < f3 >>> 0) {
            e3 = e3 + 1 | 0;
          } else {
            e3 = 5;
            a3 = 6;
            break;
          }
        }
        if ((a3 | 0) == 6) {
          b[d3 >> 2] = e3;
          return 0;
        }
        return 0;
      }
      function ac(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        m2 = T3;
        T3 = T3 + 128 | 0;
        k2 = m2 + 112 | 0;
        g3 = m2 + 96 | 0;
        l2 = m2;
        f3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        i2 = f3 & 15;
        b[k2 >> 2] = i2;
        h2 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        h2 = h2 & 127;
        a:
          do {
            if (oa(h2) | 0) {
              if (i2 | 0) {
                e3 = 1;
                while (1) {
                  j2 = Rd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
                  if (!((j2 & a3 | 0) == 0 & ((H() | 0) & c3 | 0) == 0)) {
                    f3 = 0;
                    break a;
                  }
                  if (e3 >>> 0 < i2 >>> 0) {
                    e3 = e3 + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              if (!(f3 & 1)) {
                j2 = Rd(i2 + 1 | 0, 0, 52) | 0;
                l2 = H() | 0 | c3 & -15728641;
                k2 = Rd(7, 0, (14 - i2 | 0) * 3 | 0) | 0;
                l2 = ac((j2 | a3) & ~k2, l2 & ~(H() | 0), d3) | 0;
                T3 = m2;
                return l2 | 0;
              } else {
                f3 = 1;
              }
            } else {
              f3 = 0;
            }
          } while (0);
        e3 = Yb(a3, c3, g3) | 0;
        if (!e3) {
          if (f3) {
            wb(g3, k2, l2);
            j2 = 5;
          } else {
            Ab(g3, k2, l2);
            j2 = 6;
          }
          b:
            do {
              if (oa(h2) | 0) {
                if (!i2) {
                  a3 = 5;
                } else {
                  e3 = 1;
                  while (1) {
                    h2 = Rd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
                    if (!((h2 & a3 | 0) == 0 & ((H() | 0) & c3 | 0) == 0)) {
                      a3 = 2;
                      break b;
                    }
                    if (e3 >>> 0 < i2 >>> 0) {
                      e3 = e3 + 1 | 0;
                    } else {
                      a3 = 5;
                      break;
                    }
                  }
                }
              } else {
                a3 = 2;
              }
            } while (0);
          Xd(d3 | 0, -1, a3 << 2 | 0) | 0;
          c:
            do {
              if (f3) {
                g3 = 0;
                while (1) {
                  h2 = l2 + (g3 << 4) | 0;
                  yb(h2, b[k2 >> 2] | 0) | 0;
                  h2 = b[h2 >> 2] | 0;
                  i2 = b[d3 >> 2] | 0;
                  if ((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)) {
                    e3 = d3;
                  } else {
                    f3 = 0;
                    do {
                      f3 = f3 + 1 | 0;
                      if (f3 >>> 0 >= a3 >>> 0) {
                        e3 = 1;
                        break c;
                      }
                      e3 = d3 + (f3 << 2) | 0;
                      i2 = b[e3 >> 2] | 0;
                    } while (!((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)));
                  }
                  b[e3 >> 2] = h2;
                  g3 = g3 + 1 | 0;
                  if (g3 >>> 0 >= j2 >>> 0) {
                    e3 = 0;
                    break;
                  }
                }
              } else {
                g3 = 0;
                while (1) {
                  h2 = l2 + (g3 << 4) | 0;
                  xb(h2, b[k2 >> 2] | 0, 0, 1) | 0;
                  h2 = b[h2 >> 2] | 0;
                  i2 = b[d3 >> 2] | 0;
                  if ((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)) {
                    e3 = d3;
                  } else {
                    f3 = 0;
                    do {
                      f3 = f3 + 1 | 0;
                      if (f3 >>> 0 >= a3 >>> 0) {
                        e3 = 1;
                        break c;
                      }
                      e3 = d3 + (f3 << 2) | 0;
                      i2 = b[e3 >> 2] | 0;
                    } while (!((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)));
                  }
                  b[e3 >> 2] = h2;
                  g3 = g3 + 1 | 0;
                  if (g3 >>> 0 >= j2 >>> 0) {
                    e3 = 0;
                    break;
                  }
                }
              }
            } while (0);
        }
        l2 = e3;
        T3 = m2;
        return l2 | 0;
      }
      function bc() {
        return 12;
      }
      function cc(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        if (a3 >>> 0 > 15) {
          i2 = 4;
          return i2 | 0;
        }
        Rd(a3 | 0, 0, 52) | 0;
        i2 = H() | 0 | 134225919;
        if (!a3) {
          d3 = 0;
          e3 = 0;
          do {
            if (oa(e3) | 0) {
              Rd(e3 | 0, 0, 45) | 0;
              h2 = i2 | (H() | 0);
              a3 = c3 + (d3 << 3) | 0;
              b[a3 >> 2] = -1;
              b[a3 + 4 >> 2] = h2;
              d3 = d3 + 1 | 0;
            }
            e3 = e3 + 1 | 0;
          } while ((e3 | 0) != 122);
          d3 = 0;
          return d3 | 0;
        }
        d3 = 0;
        h2 = 0;
        do {
          if (oa(h2) | 0) {
            Rd(h2 | 0, 0, 45) | 0;
            e3 = 1;
            f3 = -1;
            g3 = i2 | (H() | 0);
            while (1) {
              j2 = Rd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
              f3 = f3 & ~j2;
              g3 = g3 & ~(H() | 0);
              if ((e3 | 0) == (a3 | 0)) {
                break;
              } else {
                e3 = e3 + 1 | 0;
              }
            }
            j2 = c3 + (d3 << 3) | 0;
            b[j2 >> 2] = f3;
            b[j2 + 4 >> 2] = g3;
            d3 = d3 + 1 | 0;
          }
          h2 = h2 + 1 | 0;
        } while ((h2 | 0) != 122);
        d3 = 0;
        return d3 | 0;
      }
      function dc(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0;
        t3 = T3;
        T3 = T3 + 16 | 0;
        r3 = t3;
        s3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        s3 = s3 & 15;
        if (d3 >>> 0 > 15) {
          s3 = 4;
          T3 = t3;
          return s3 | 0;
        }
        if ((s3 | 0) < (d3 | 0)) {
          s3 = 12;
          T3 = t3;
          return s3 | 0;
        }
        if ((s3 | 0) != (d3 | 0)) {
          g3 = Rd(d3 | 0, 0, 52) | 0;
          g3 = g3 | a3;
          i2 = H() | 0 | c3 & -15728641;
          if ((s3 | 0) > (d3 | 0)) {
            j2 = d3;
            do {
              q3 = Rd(7, 0, (14 - j2 | 0) * 3 | 0) | 0;
              j2 = j2 + 1 | 0;
              g3 = q3 | g3;
              i2 = H() | 0 | i2;
            } while ((j2 | 0) < (s3 | 0));
            q3 = g3;
          } else {
            q3 = g3;
          }
        } else {
          q3 = a3;
          i2 = c3;
        }
        p3 = Qd(q3 | 0, i2 | 0, 45) | 0;
        H() | 0;
        a:
          do {
            if (oa(p3 & 127) | 0) {
              j2 = Qd(q3 | 0, i2 | 0, 52) | 0;
              H() | 0;
              j2 = j2 & 15;
              if (j2 | 0) {
                g3 = 1;
                while (1) {
                  p3 = Rd(7, 0, (15 - g3 | 0) * 3 | 0) | 0;
                  if (!((p3 & q3 | 0) == 0 & ((H() | 0) & i2 | 0) == 0)) {
                    k2 = 33;
                    break a;
                  }
                  if (g3 >>> 0 < j2 >>> 0) {
                    g3 = g3 + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              p3 = e3;
              b[p3 >> 2] = 0;
              b[p3 + 4 >> 2] = 0;
              if ((s3 | 0) > (d3 | 0)) {
                p3 = c3 & -15728641;
                o2 = s3;
                while (1) {
                  n2 = o2;
                  o2 = o2 + -1 | 0;
                  if (o2 >>> 0 > 15 | (s3 | 0) < (o2 | 0)) {
                    k2 = 19;
                    break;
                  }
                  if ((s3 | 0) != (o2 | 0)) {
                    g3 = Rd(o2 | 0, 0, 52) | 0;
                    g3 = g3 | a3;
                    j2 = H() | 0 | p3;
                    if ((s3 | 0) < (n2 | 0)) {
                      m2 = g3;
                    } else {
                      k2 = o2;
                      do {
                        m2 = Rd(7, 0, (14 - k2 | 0) * 3 | 0) | 0;
                        k2 = k2 + 1 | 0;
                        g3 = m2 | g3;
                        j2 = H() | 0 | j2;
                      } while ((k2 | 0) < (s3 | 0));
                      m2 = g3;
                    }
                  } else {
                    m2 = a3;
                    j2 = c3;
                  }
                  l2 = Qd(m2 | 0, j2 | 0, 45) | 0;
                  H() | 0;
                  if (!(oa(l2 & 127) | 0)) {
                    g3 = 0;
                  } else {
                    l2 = Qd(m2 | 0, j2 | 0, 52) | 0;
                    H() | 0;
                    l2 = l2 & 15;
                    b:
                      do {
                        if (!l2) {
                          g3 = 0;
                        } else {
                          k2 = 1;
                          while (1) {
                            g3 = Qd(m2 | 0, j2 | 0, (15 - k2 | 0) * 3 | 0) | 0;
                            H() | 0;
                            g3 = g3 & 7;
                            if (g3 | 0) {
                              break b;
                            }
                            if (k2 >>> 0 < l2 >>> 0) {
                              k2 = k2 + 1 | 0;
                            } else {
                              g3 = 0;
                              break;
                            }
                          }
                        }
                      } while (0);
                    g3 = (g3 | 0) == 0 & 1;
                  }
                  j2 = Qd(a3 | 0, c3 | 0, (15 - n2 | 0) * 3 | 0) | 0;
                  H() | 0;
                  j2 = j2 & 7;
                  if ((j2 | 0) == 7) {
                    f3 = 5;
                    k2 = 42;
                    break;
                  }
                  g3 = (g3 | 0) != 0;
                  if ((j2 | 0) == 1 & g3) {
                    f3 = 5;
                    k2 = 42;
                    break;
                  }
                  m2 = j2 + (((j2 | 0) != 0 & g3) << 31 >> 31) | 0;
                  if (m2 | 0) {
                    k2 = s3 - n2 | 0;
                    k2 = Oc(7, 0, k2, ((k2 | 0) < 0) << 31 >> 31) | 0;
                    l2 = H() | 0;
                    if (g3) {
                      g3 = Md(k2 | 0, l2 | 0, 5, 0) | 0;
                      g3 = Gd(g3 | 0, H() | 0, -5, -1) | 0;
                      g3 = Kd(g3 | 0, H() | 0, 6, 0) | 0;
                      g3 = Gd(g3 | 0, H() | 0, 1, 0) | 0;
                      j2 = H() | 0;
                    } else {
                      g3 = k2;
                      j2 = l2;
                    }
                    n2 = m2 + -1 | 0;
                    n2 = Md(k2 | 0, l2 | 0, n2 | 0, ((n2 | 0) < 0) << 31 >> 31 | 0) | 0;
                    n2 = Gd(g3 | 0, j2 | 0, n2 | 0, H() | 0) | 0;
                    m2 = H() | 0;
                    l2 = e3;
                    l2 = Gd(n2 | 0, m2 | 0, b[l2 >> 2] | 0, b[l2 + 4 >> 2] | 0) | 0;
                    m2 = H() | 0;
                    n2 = e3;
                    b[n2 >> 2] = l2;
                    b[n2 + 4 >> 2] = m2;
                  }
                  if ((o2 | 0) <= (d3 | 0)) {
                    k2 = 37;
                    break;
                  }
                }
                if ((k2 | 0) == 19) {
                  I2(27795, 27122, 1276, 27158);
                } else if ((k2 | 0) == 37) {
                  h2 = e3;
                  f3 = b[h2 + 4 >> 2] | 0;
                  h2 = b[h2 >> 2] | 0;
                  break;
                } else if ((k2 | 0) == 42) {
                  T3 = t3;
                  return f3 | 0;
                }
              } else {
                f3 = 0;
                h2 = 0;
              }
            } else {
              k2 = 33;
            }
          } while (0);
        c:
          do {
            if ((k2 | 0) == 33) {
              p3 = e3;
              b[p3 >> 2] = 0;
              b[p3 + 4 >> 2] = 0;
              if ((s3 | 0) > (d3 | 0)) {
                g3 = s3;
                while (1) {
                  f3 = Qd(a3 | 0, c3 | 0, (15 - g3 | 0) * 3 | 0) | 0;
                  H() | 0;
                  f3 = f3 & 7;
                  if ((f3 | 0) == 7) {
                    f3 = 5;
                    break;
                  }
                  h2 = s3 - g3 | 0;
                  h2 = Oc(7, 0, h2, ((h2 | 0) < 0) << 31 >> 31) | 0;
                  f3 = Md(h2 | 0, H() | 0, f3 | 0, 0) | 0;
                  h2 = H() | 0;
                  p3 = e3;
                  h2 = Gd(b[p3 >> 2] | 0, b[p3 + 4 >> 2] | 0, f3 | 0, h2 | 0) | 0;
                  f3 = H() | 0;
                  p3 = e3;
                  b[p3 >> 2] = h2;
                  b[p3 + 4 >> 2] = f3;
                  g3 = g3 + -1 | 0;
                  if ((g3 | 0) <= (d3 | 0)) {
                    break c;
                  }
                }
                T3 = t3;
                return f3 | 0;
              } else {
                f3 = 0;
                h2 = 0;
              }
            }
          } while (0);
        if (Gb(q3, i2, s3, r3) | 0) {
          I2(27795, 27122, 1236, 27173);
        }
        s3 = r3;
        r3 = b[s3 + 4 >> 2] | 0;
        if (((f3 | 0) > -1 | (f3 | 0) == -1 & h2 >>> 0 > 4294967295) & ((r3 | 0) > (f3 | 0) | ((r3 | 0) == (f3 | 0) ? (b[s3 >> 2] | 0) >>> 0 > h2 >>> 0 : 0))) {
          s3 = 0;
          T3 = t3;
          return s3 | 0;
        } else {
          I2(27795, 27122, 1316, 27158);
        }
        return 0;
      }
      function ec(a3, c3, d3, e3, f3, g3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0;
        m2 = T3;
        T3 = T3 + 16 | 0;
        h2 = m2;
        if (f3 >>> 0 > 15) {
          g3 = 4;
          T3 = m2;
          return g3 | 0;
        }
        i2 = Qd(d3 | 0, e3 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        if ((i2 | 0) > (f3 | 0)) {
          g3 = 12;
          T3 = m2;
          return g3 | 0;
        }
        if (Gb(d3, e3, f3, h2) | 0) {
          I2(27795, 27122, 1236, 27173);
        }
        l2 = h2;
        k2 = b[l2 + 4 >> 2] | 0;
        if (!(((c3 | 0) > -1 | (c3 | 0) == -1 & a3 >>> 0 > 4294967295) & ((k2 | 0) > (c3 | 0) | ((k2 | 0) == (c3 | 0) ? (b[l2 >> 2] | 0) >>> 0 > a3 >>> 0 : 0)))) {
          g3 = 2;
          T3 = m2;
          return g3 | 0;
        }
        l2 = f3 - i2 | 0;
        f3 = Rd(f3 | 0, 0, 52) | 0;
        j2 = H() | 0 | e3 & -15728641;
        k2 = g3;
        b[k2 >> 2] = f3 | d3;
        b[k2 + 4 >> 2] = j2;
        k2 = Qd(d3 | 0, e3 | 0, 45) | 0;
        H() | 0;
        a:
          do {
            if (oa(k2 & 127) | 0) {
              if (i2 | 0) {
                h2 = 1;
                while (1) {
                  k2 = Rd(7, 0, (15 - h2 | 0) * 3 | 0) | 0;
                  if (!((k2 & d3 | 0) == 0 & ((H() | 0) & e3 | 0) == 0)) {
                    break a;
                  }
                  if (h2 >>> 0 < i2 >>> 0) {
                    h2 = h2 + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              if ((l2 | 0) < 1) {
                g3 = 0;
                T3 = m2;
                return g3 | 0;
              }
              k2 = i2 ^ 15;
              e3 = -1;
              j2 = 1;
              h2 = 1;
              while (1) {
                i2 = l2 - j2 | 0;
                i2 = Oc(7, 0, i2, ((i2 | 0) < 0) << 31 >> 31) | 0;
                d3 = H() | 0;
                do {
                  if (h2) {
                    h2 = Md(i2 | 0, d3 | 0, 5, 0) | 0;
                    h2 = Gd(h2 | 0, H() | 0, -5, -1) | 0;
                    h2 = Kd(h2 | 0, H() | 0, 6, 0) | 0;
                    f3 = H() | 0;
                    if ((c3 | 0) > (f3 | 0) | (c3 | 0) == (f3 | 0) & a3 >>> 0 > h2 >>> 0) {
                      c3 = Gd(a3 | 0, c3 | 0, -1, -1) | 0;
                      c3 = Hd(c3 | 0, H() | 0, h2 | 0, f3 | 0) | 0;
                      h2 = H() | 0;
                      n2 = g3;
                      p3 = b[n2 >> 2] | 0;
                      n2 = b[n2 + 4 >> 2] | 0;
                      q3 = (k2 + e3 | 0) * 3 | 0;
                      o2 = Rd(7, 0, q3 | 0) | 0;
                      n2 = n2 & ~(H() | 0);
                      e3 = Kd(c3 | 0, h2 | 0, i2 | 0, d3 | 0) | 0;
                      a3 = H() | 0;
                      f3 = Gd(e3 | 0, a3 | 0, 2, 0) | 0;
                      q3 = Rd(f3 | 0, H() | 0, q3 | 0) | 0;
                      n2 = H() | 0 | n2;
                      f3 = g3;
                      b[f3 >> 2] = q3 | p3 & ~o2;
                      b[f3 + 4 >> 2] = n2;
                      a3 = Md(e3 | 0, a3 | 0, i2 | 0, d3 | 0) | 0;
                      a3 = Hd(c3 | 0, h2 | 0, a3 | 0, H() | 0) | 0;
                      h2 = 0;
                      c3 = H() | 0;
                      break;
                    } else {
                      q3 = g3;
                      o2 = b[q3 >> 2] | 0;
                      q3 = b[q3 + 4 >> 2] | 0;
                      p3 = Rd(7, 0, (k2 + e3 | 0) * 3 | 0) | 0;
                      q3 = q3 & ~(H() | 0);
                      h2 = g3;
                      b[h2 >> 2] = o2 & ~p3;
                      b[h2 + 4 >> 2] = q3;
                      h2 = 1;
                      break;
                    }
                  } else {
                    o2 = g3;
                    f3 = b[o2 >> 2] | 0;
                    o2 = b[o2 + 4 >> 2] | 0;
                    e3 = (k2 + e3 | 0) * 3 | 0;
                    n2 = Rd(7, 0, e3 | 0) | 0;
                    o2 = o2 & ~(H() | 0);
                    q3 = Kd(a3 | 0, c3 | 0, i2 | 0, d3 | 0) | 0;
                    h2 = H() | 0;
                    e3 = Rd(q3 | 0, h2 | 0, e3 | 0) | 0;
                    o2 = H() | 0 | o2;
                    p3 = g3;
                    b[p3 >> 2] = e3 | f3 & ~n2;
                    b[p3 + 4 >> 2] = o2;
                    h2 = Md(q3 | 0, h2 | 0, i2 | 0, d3 | 0) | 0;
                    a3 = Hd(a3 | 0, c3 | 0, h2 | 0, H() | 0) | 0;
                    h2 = 0;
                    c3 = H() | 0;
                  }
                } while (0);
                if ((l2 | 0) > (j2 | 0)) {
                  e3 = ~j2;
                  j2 = j2 + 1 | 0;
                } else {
                  c3 = 0;
                  break;
                }
              }
              T3 = m2;
              return c3 | 0;
            }
          } while (0);
        if ((l2 | 0) < 1) {
          q3 = 0;
          T3 = m2;
          return q3 | 0;
        }
        f3 = i2 ^ 15;
        h2 = 1;
        while (1) {
          p3 = l2 - h2 | 0;
          p3 = Oc(7, 0, p3, ((p3 | 0) < 0) << 31 >> 31) | 0;
          q3 = H() | 0;
          j2 = g3;
          d3 = b[j2 >> 2] | 0;
          j2 = b[j2 + 4 >> 2] | 0;
          i2 = (f3 - h2 | 0) * 3 | 0;
          e3 = Rd(7, 0, i2 | 0) | 0;
          j2 = j2 & ~(H() | 0);
          n2 = Kd(a3 | 0, c3 | 0, p3 | 0, q3 | 0) | 0;
          o2 = H() | 0;
          i2 = Rd(n2 | 0, o2 | 0, i2 | 0) | 0;
          j2 = H() | 0 | j2;
          k2 = g3;
          b[k2 >> 2] = i2 | d3 & ~e3;
          b[k2 + 4 >> 2] = j2;
          q3 = Md(n2 | 0, o2 | 0, p3 | 0, q3 | 0) | 0;
          a3 = Hd(a3 | 0, c3 | 0, q3 | 0, H() | 0) | 0;
          c3 = H() | 0;
          if ((l2 | 0) <= (h2 | 0)) {
            c3 = 0;
            break;
          } else {
            h2 = h2 + 1 | 0;
          }
        }
        T3 = m2;
        return c3 | 0;
      }
      function fc(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        f3 = Qd(c3 | 0, d3 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        if ((c3 | 0) == 0 & (d3 | 0) == 0 | ((e3 | 0) > 15 | (f3 | 0) > (e3 | 0))) {
          g3 = -1;
          c3 = -1;
          d3 = 0;
          f3 = 0;
        } else {
          c3 = Jb(c3, d3, f3 + 1 | 0, e3) | 0;
          h2 = (H() | 0) & -15728641;
          d3 = Rd(e3 | 0, 0, 52) | 0;
          d3 = c3 | d3;
          h2 = h2 | (H() | 0);
          c3 = (Hb(d3, h2) | 0) == 0;
          g3 = f3;
          c3 = c3 ? -1 : e3;
          f3 = h2;
        }
        h2 = a3;
        b[h2 >> 2] = d3;
        b[h2 + 4 >> 2] = f3;
        b[a3 + 8 >> 2] = g3;
        b[a3 + 12 >> 2] = c3;
        return;
      }
      function gc(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0;
        f3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        g3 = e3 + 8 | 0;
        b[g3 >> 2] = f3;
        if ((a3 | 0) == 0 & (c3 | 0) == 0 | ((d3 | 0) > 15 | (f3 | 0) > (d3 | 0))) {
          d3 = e3;
          b[d3 >> 2] = 0;
          b[d3 + 4 >> 2] = 0;
          b[g3 >> 2] = -1;
          b[e3 + 12 >> 2] = -1;
          return;
        }
        a3 = Jb(a3, c3, f3 + 1 | 0, d3) | 0;
        g3 = (H() | 0) & -15728641;
        f3 = Rd(d3 | 0, 0, 52) | 0;
        f3 = a3 | f3;
        g3 = g3 | (H() | 0);
        a3 = e3;
        b[a3 >> 2] = f3;
        b[a3 + 4 >> 2] = g3;
        a3 = e3 + 12 | 0;
        if (!(Hb(f3, g3) | 0)) {
          b[a3 >> 2] = -1;
          return;
        } else {
          b[a3 >> 2] = d3;
          return;
        }
      }
      function hc(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        d3 = a3;
        c3 = b[d3 >> 2] | 0;
        d3 = b[d3 + 4 >> 2] | 0;
        if ((c3 | 0) == 0 & (d3 | 0) == 0) {
          return;
        }
        e3 = Qd(c3 | 0, d3 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        i2 = Rd(1, 0, (e3 ^ 15) * 3 | 0) | 0;
        c3 = Gd(i2 | 0, H() | 0, c3 | 0, d3 | 0) | 0;
        d3 = H() | 0;
        i2 = a3;
        b[i2 >> 2] = c3;
        b[i2 + 4 >> 2] = d3;
        i2 = a3 + 8 | 0;
        h2 = b[i2 >> 2] | 0;
        if ((e3 | 0) < (h2 | 0)) {
          return;
        }
        j2 = a3 + 12 | 0;
        g3 = e3;
        while (1) {
          if ((g3 | 0) == (h2 | 0)) {
            e3 = 5;
            break;
          }
          k2 = (g3 | 0) == (b[j2 >> 2] | 0);
          f3 = (15 - g3 | 0) * 3 | 0;
          e3 = Qd(c3 | 0, d3 | 0, f3 | 0) | 0;
          H() | 0;
          e3 = e3 & 7;
          if (k2 & ((e3 | 0) == 1 & true)) {
            e3 = 7;
            break;
          }
          if (!((e3 | 0) == 7 & true)) {
            e3 = 10;
            break;
          }
          k2 = Rd(1, 0, f3 | 0) | 0;
          c3 = Gd(c3 | 0, d3 | 0, k2 | 0, H() | 0) | 0;
          d3 = H() | 0;
          k2 = a3;
          b[k2 >> 2] = c3;
          b[k2 + 4 >> 2] = d3;
          if ((g3 | 0) > (h2 | 0)) {
            g3 = g3 + -1 | 0;
          } else {
            e3 = 10;
            break;
          }
        }
        if ((e3 | 0) == 5) {
          k2 = a3;
          b[k2 >> 2] = 0;
          b[k2 + 4 >> 2] = 0;
          b[i2 >> 2] = -1;
          b[j2 >> 2] = -1;
          return;
        } else if ((e3 | 0) == 7) {
          h2 = Rd(1, 0, f3 | 0) | 0;
          h2 = Gd(c3 | 0, d3 | 0, h2 | 0, H() | 0) | 0;
          i2 = H() | 0;
          k2 = a3;
          b[k2 >> 2] = h2;
          b[k2 + 4 >> 2] = i2;
          b[j2 >> 2] = g3 + -1;
          return;
        } else if ((e3 | 0) == 10) {
          return;
        }
      }
      function ic(a3) {
        a3 = +a3;
        var b2 = 0;
        b2 = a3 < 0 ? a3 + 6.283185307179586 : a3;
        return +(!(a3 >= 6.283185307179586) ? b2 : b2 + -6.283185307179586);
      }
      function jc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (!(+q2(+(+e2[a3 >> 3] - +e2[b2 >> 3])) < 17453292519943298e-27)) {
          b2 = 0;
          return b2 | 0;
        }
        b2 = +q2(+(+e2[a3 + 8 >> 3] - +e2[b2 + 8 >> 3])) < 17453292519943298e-27;
        return b2 | 0;
      }
      function kc(a3, b2) {
        a3 = +a3;
        b2 = b2 | 0;
        switch (b2 | 0) {
          case 1: {
            a3 = a3 < 0 ? a3 + 6.283185307179586 : a3;
            break;
          }
          case 2: {
            a3 = a3 > 0 ? a3 + -6.283185307179586 : a3;
            break;
          }
          default:
        }
        return +a3;
      }
      function lc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0;
        f3 = +e2[b2 >> 3];
        d3 = +e2[a3 >> 3];
        g3 = +u2(+((f3 - d3) * 0.5));
        c3 = +u2(+((+e2[b2 + 8 >> 3] - +e2[a3 + 8 >> 3]) * 0.5));
        c3 = g3 * g3 + c3 * (+t2(+f3) * +t2(+d3) * c3);
        return +(+z2(+ +r2(+c3), + +r2(+(1 - c3))) * 2);
      }
      function mc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0;
        f3 = +e2[b2 >> 3];
        d3 = +e2[a3 >> 3];
        g3 = +u2(+((f3 - d3) * 0.5));
        c3 = +u2(+((+e2[b2 + 8 >> 3] - +e2[a3 + 8 >> 3]) * 0.5));
        c3 = g3 * g3 + c3 * (+t2(+f3) * +t2(+d3) * c3);
        return +(+z2(+ +r2(+c3), + +r2(+(1 - c3))) * 2 * 6371.007180918475);
      }
      function nc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0;
        f3 = +e2[b2 >> 3];
        d3 = +e2[a3 >> 3];
        g3 = +u2(+((f3 - d3) * 0.5));
        c3 = +u2(+((+e2[b2 + 8 >> 3] - +e2[a3 + 8 >> 3]) * 0.5));
        c3 = g3 * g3 + c3 * (+t2(+f3) * +t2(+d3) * c3);
        return +(+z2(+ +r2(+c3), + +r2(+(1 - c3))) * 2 * 6371.007180918475 * 1e3);
      }
      function oc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0;
        g3 = +e2[b2 >> 3];
        d3 = +t2(+g3);
        f3 = +e2[b2 + 8 >> 3] - +e2[a3 + 8 >> 3];
        h2 = d3 * +u2(+f3);
        c3 = +e2[a3 >> 3];
        return + +z2(+h2, +(+u2(+g3) * +t2(+c3) - +t2(+f3) * (d3 * +u2(+c3))));
      }
      function pc(a3, c3, d3, f3) {
        a3 = a3 | 0;
        c3 = +c3;
        d3 = +d3;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        if (d3 < 1e-16) {
          b[f3 >> 2] = b[a3 >> 2];
          b[f3 + 4 >> 2] = b[a3 + 4 >> 2];
          b[f3 + 8 >> 2] = b[a3 + 8 >> 2];
          b[f3 + 12 >> 2] = b[a3 + 12 >> 2];
          return;
        }
        h2 = c3 < 0 ? c3 + 6.283185307179586 : c3;
        h2 = !(c3 >= 6.283185307179586) ? h2 : h2 + -6.283185307179586;
        do {
          if (h2 < 1e-16) {
            c3 = +e2[a3 >> 3] + d3;
            e2[f3 >> 3] = c3;
            g3 = f3;
          } else {
            g3 = +q2(+(h2 + -3.141592653589793)) < 1e-16;
            c3 = +e2[a3 >> 3];
            if (g3) {
              c3 = c3 - d3;
              e2[f3 >> 3] = c3;
              g3 = f3;
              break;
            }
            i2 = +t2(+d3);
            d3 = +u2(+d3);
            c3 = i2 * +u2(+c3) + +t2(+h2) * (d3 * +t2(+c3));
            c3 = c3 > 1 ? 1 : c3;
            c3 = +x2(+(c3 < -1 ? -1 : c3));
            e2[f3 >> 3] = c3;
            if (+q2(+(c3 + -1.5707963267948966)) < 1e-16) {
              e2[f3 >> 3] = 1.5707963267948966;
              e2[f3 + 8 >> 3] = 0;
              return;
            }
            if (+q2(+(c3 + 1.5707963267948966)) < 1e-16) {
              e2[f3 >> 3] = -1.5707963267948966;
              e2[f3 + 8 >> 3] = 0;
              return;
            }
            j2 = 1 / +t2(+c3);
            h2 = d3 * +u2(+h2) * j2;
            d3 = +e2[a3 >> 3];
            c3 = j2 * ((i2 - +u2(+c3) * +u2(+d3)) / +t2(+d3));
            i2 = h2 > 1 ? 1 : h2;
            c3 = c3 > 1 ? 1 : c3;
            c3 = +e2[a3 + 8 >> 3] + +z2(+(i2 < -1 ? -1 : i2), +(c3 < -1 ? -1 : c3));
            if (c3 > 3.141592653589793) {
              do {
                c3 = c3 + -6.283185307179586;
              } while (c3 > 3.141592653589793);
            }
            if (c3 < -3.141592653589793) {
              do {
                c3 = c3 + 6.283185307179586;
              } while (c3 < -3.141592653589793);
            }
            e2[f3 + 8 >> 3] = c3;
            return;
          }
        } while (0);
        if (+q2(+(c3 + -1.5707963267948966)) < 1e-16) {
          e2[g3 >> 3] = 1.5707963267948966;
          e2[f3 + 8 >> 3] = 0;
          return;
        }
        if (+q2(+(c3 + 1.5707963267948966)) < 1e-16) {
          e2[g3 >> 3] = -1.5707963267948966;
          e2[f3 + 8 >> 3] = 0;
          return;
        }
        c3 = +e2[a3 + 8 >> 3];
        if (c3 > 3.141592653589793) {
          do {
            c3 = c3 + -6.283185307179586;
          } while (c3 > 3.141592653589793);
        }
        if (c3 < -3.141592653589793) {
          do {
            c3 = c3 + 6.283185307179586;
          } while (c3 < -3.141592653589793);
        }
        e2[f3 + 8 >> 3] = c3;
        return;
      }
      function qc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e2[b2 >> 3] = +e2[20656 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function rc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e2[b2 >> 3] = +e2[20784 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function sc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e2[b2 >> 3] = +e2[20912 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function tc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e2[b2 >> 3] = +e2[21040 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function uc(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0;
        if (a3 >>> 0 > 15) {
          c3 = 4;
          return c3 | 0;
        }
        d3 = Oc(7, 0, a3, ((a3 | 0) < 0) << 31 >> 31) | 0;
        d3 = Md(d3 | 0, H() | 0, 120, 0) | 0;
        a3 = H() | 0;
        b[c3 >> 2] = d3 | 2;
        b[c3 + 4 >> 2] = a3;
        c3 = 0;
        return c3 | 0;
      }
      function vc(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        n2 = +e2[b2 >> 3];
        l2 = +e2[a3 >> 3];
        j2 = +u2(+((n2 - l2) * 0.5));
        g3 = +e2[b2 + 8 >> 3];
        k2 = +e2[a3 + 8 >> 3];
        h2 = +u2(+((g3 - k2) * 0.5));
        i2 = +t2(+l2);
        m2 = +t2(+n2);
        h2 = j2 * j2 + h2 * (m2 * i2 * h2);
        h2 = +z2(+ +r2(+h2), + +r2(+(1 - h2))) * 2;
        j2 = +e2[c3 >> 3];
        n2 = +u2(+((j2 - n2) * 0.5));
        d3 = +e2[c3 + 8 >> 3];
        g3 = +u2(+((d3 - g3) * 0.5));
        f3 = +t2(+j2);
        g3 = n2 * n2 + g3 * (m2 * f3 * g3);
        g3 = +z2(+ +r2(+g3), + +r2(+(1 - g3))) * 2;
        j2 = +u2(+((l2 - j2) * 0.5));
        d3 = +u2(+((k2 - d3) * 0.5));
        d3 = j2 * j2 + d3 * (i2 * f3 * d3);
        d3 = +z2(+ +r2(+d3), + +r2(+(1 - d3))) * 2;
        f3 = (h2 + g3 + d3) * 0.5;
        return +(+y2(+ +r2(+(+v2(+(f3 * 0.5)) * +v2(+((f3 - h2) * 0.5)) * +v2(+((f3 - g3) * 0.5)) * +v2(+((f3 - d3) * 0.5))))) * 4);
      }
      function wc(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T3;
        T3 = T3 + 192 | 0;
        h2 = j2 + 168 | 0;
        i2 = j2;
        g3 = Zb(a3, c3, h2) | 0;
        if (g3 | 0) {
          d3 = g3;
          T3 = j2;
          return d3 | 0;
        }
        if (_b2(a3, c3, i2) | 0) {
          I2(27795, 27190, 415, 27199);
        }
        c3 = b[i2 >> 2] | 0;
        if ((c3 | 0) > 0) {
          f3 = +vc(i2 + 8 | 0, i2 + 8 + (((c3 | 0) != 1 & 1) << 4) | 0, h2) + 0;
          if ((c3 | 0) != 1) {
            a3 = 1;
            do {
              g3 = a3;
              a3 = a3 + 1 | 0;
              f3 = f3 + +vc(i2 + 8 + (g3 << 4) | 0, i2 + 8 + (((a3 | 0) % (c3 | 0) | 0) << 4) | 0, h2);
            } while ((a3 | 0) < (c3 | 0));
          }
        } else {
          f3 = 0;
        }
        e2[d3 >> 3] = f3;
        d3 = 0;
        T3 = j2;
        return d3 | 0;
      }
      function xc(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        a3 = wc(a3, b2, c3) | 0;
        if (a3 | 0) {
          return a3 | 0;
        }
        e2[c3 >> 3] = +e2[c3 >> 3] * 6371.007180918475 * 6371.007180918475;
        return a3 | 0;
      }
      function yc(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        a3 = wc(a3, b2, c3) | 0;
        if (a3 | 0) {
          return a3 | 0;
        }
        e2[c3 >> 3] = +e2[c3 >> 3] * 6371.007180918475 * 6371.007180918475 * 1e3 * 1e3;
        return a3 | 0;
      }
      function zc(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T3;
        T3 = T3 + 176 | 0;
        i2 = j2;
        a3 = pb(a3, c3, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          T3 = j2;
          return i2 | 0;
        }
        e2[d3 >> 3] = 0;
        a3 = b[i2 >> 2] | 0;
        if ((a3 | 0) <= 1) {
          i2 = 0;
          T3 = j2;
          return i2 | 0;
        }
        c3 = a3 + -1 | 0;
        a3 = 0;
        f3 = +e2[i2 + 8 >> 3];
        g3 = +e2[i2 + 16 >> 3];
        h2 = 0;
        do {
          a3 = a3 + 1 | 0;
          l2 = f3;
          f3 = +e2[i2 + 8 + (a3 << 4) >> 3];
          m2 = +u2(+((f3 - l2) * 0.5));
          k2 = g3;
          g3 = +e2[i2 + 8 + (a3 << 4) + 8 >> 3];
          k2 = +u2(+((g3 - k2) * 0.5));
          k2 = m2 * m2 + k2 * (+t2(+f3) * +t2(+l2) * k2);
          h2 = h2 + +z2(+ +r2(+k2), + +r2(+(1 - k2))) * 2;
        } while ((a3 | 0) < (c3 | 0));
        e2[d3 >> 3] = h2;
        i2 = 0;
        T3 = j2;
        return i2 | 0;
      }
      function Ac(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T3;
        T3 = T3 + 176 | 0;
        i2 = j2;
        a3 = pb(a3, c3, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          h2 = +e2[d3 >> 3];
          h2 = h2 * 6371.007180918475;
          e2[d3 >> 3] = h2;
          T3 = j2;
          return i2 | 0;
        }
        e2[d3 >> 3] = 0;
        a3 = b[i2 >> 2] | 0;
        if ((a3 | 0) <= 1) {
          i2 = 0;
          h2 = 0;
          h2 = h2 * 6371.007180918475;
          e2[d3 >> 3] = h2;
          T3 = j2;
          return i2 | 0;
        }
        c3 = a3 + -1 | 0;
        a3 = 0;
        f3 = +e2[i2 + 8 >> 3];
        g3 = +e2[i2 + 16 >> 3];
        h2 = 0;
        do {
          a3 = a3 + 1 | 0;
          l2 = f3;
          f3 = +e2[i2 + 8 + (a3 << 4) >> 3];
          m2 = +u2(+((f3 - l2) * 0.5));
          k2 = g3;
          g3 = +e2[i2 + 8 + (a3 << 4) + 8 >> 3];
          k2 = +u2(+((g3 - k2) * 0.5));
          k2 = m2 * m2 + k2 * (+t2(+l2) * +t2(+f3) * k2);
          h2 = h2 + +z2(+ +r2(+k2), + +r2(+(1 - k2))) * 2;
        } while ((a3 | 0) != (c3 | 0));
        e2[d3 >> 3] = h2;
        i2 = 0;
        m2 = h2;
        m2 = m2 * 6371.007180918475;
        e2[d3 >> 3] = m2;
        T3 = j2;
        return i2 | 0;
      }
      function Bc(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T3;
        T3 = T3 + 176 | 0;
        i2 = j2;
        a3 = pb(a3, c3, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          h2 = +e2[d3 >> 3];
          h2 = h2 * 6371.007180918475;
          h2 = h2 * 1e3;
          e2[d3 >> 3] = h2;
          T3 = j2;
          return i2 | 0;
        }
        e2[d3 >> 3] = 0;
        a3 = b[i2 >> 2] | 0;
        if ((a3 | 0) <= 1) {
          i2 = 0;
          h2 = 0;
          h2 = h2 * 6371.007180918475;
          h2 = h2 * 1e3;
          e2[d3 >> 3] = h2;
          T3 = j2;
          return i2 | 0;
        }
        c3 = a3 + -1 | 0;
        a3 = 0;
        f3 = +e2[i2 + 8 >> 3];
        g3 = +e2[i2 + 16 >> 3];
        h2 = 0;
        do {
          a3 = a3 + 1 | 0;
          l2 = f3;
          f3 = +e2[i2 + 8 + (a3 << 4) >> 3];
          m2 = +u2(+((f3 - l2) * 0.5));
          k2 = g3;
          g3 = +e2[i2 + 8 + (a3 << 4) + 8 >> 3];
          k2 = +u2(+((g3 - k2) * 0.5));
          k2 = m2 * m2 + k2 * (+t2(+l2) * +t2(+f3) * k2);
          h2 = h2 + +z2(+ +r2(+k2), + +r2(+(1 - k2))) * 2;
        } while ((a3 | 0) != (c3 | 0));
        e2[d3 >> 3] = h2;
        i2 = 0;
        m2 = h2;
        m2 = m2 * 6371.007180918475;
        m2 = m2 * 1e3;
        e2[d3 >> 3] = m2;
        T3 = j2;
        return i2 | 0;
      }
      function Cc(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0;
        c3 = Fd(1, 12) | 0;
        if (!c3) {
          I2(27280, 27235, 49, 27293);
        }
        d3 = a3 + 4 | 0;
        e3 = b[d3 >> 2] | 0;
        if (e3 | 0) {
          e3 = e3 + 8 | 0;
          b[e3 >> 2] = c3;
          b[d3 >> 2] = c3;
          return c3 | 0;
        }
        if (b[a3 >> 2] | 0) {
          I2(27310, 27235, 61, 27333);
        }
        e3 = a3;
        b[e3 >> 2] = c3;
        b[d3 >> 2] = c3;
        return c3 | 0;
      }
      function Dc(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0;
        e3 = Dd(24) | 0;
        if (!e3) {
          I2(27347, 27235, 78, 27361);
        }
        b[e3 >> 2] = b[c3 >> 2];
        b[e3 + 4 >> 2] = b[c3 + 4 >> 2];
        b[e3 + 8 >> 2] = b[c3 + 8 >> 2];
        b[e3 + 12 >> 2] = b[c3 + 12 >> 2];
        b[e3 + 16 >> 2] = 0;
        c3 = a3 + 4 | 0;
        d3 = b[c3 >> 2] | 0;
        if (d3 | 0) {
          b[d3 + 16 >> 2] = e3;
          b[c3 >> 2] = e3;
          return e3 | 0;
        }
        if (b[a3 >> 2] | 0) {
          I2(27376, 27235, 82, 27361);
        }
        b[a3 >> 2] = e3;
        b[c3 >> 2] = e3;
        return e3 | 0;
      }
      function Ec(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0;
        if (!a3) {
          return;
        }
        e3 = 1;
        while (1) {
          c3 = b[a3 >> 2] | 0;
          if (c3 | 0) {
            do {
              d3 = b[c3 >> 2] | 0;
              if (d3 | 0) {
                do {
                  f3 = d3;
                  d3 = b[d3 + 16 >> 2] | 0;
                  Ed(f3);
                } while ((d3 | 0) != 0);
              }
              f3 = c3;
              c3 = b[c3 + 8 >> 2] | 0;
              Ed(f3);
            } while ((c3 | 0) != 0);
          }
          c3 = a3;
          a3 = b[a3 + 8 >> 2] | 0;
          if (!e3) {
            Ed(c3);
          }
          if (!a3) {
            break;
          } else {
            e3 = 0;
          }
        }
        return;
      }
      function Fc(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0, B4 = 0, C3 = 0, D3 = 0, E3 = 0, F2 = 0, G3 = 0, H2 = 0, J2 = 0, K3 = 0;
        g3 = a3 + 8 | 0;
        if (b[g3 >> 2] | 0) {
          K3 = 1;
          return K3 | 0;
        }
        f3 = b[a3 >> 2] | 0;
        if (!f3) {
          K3 = 0;
          return K3 | 0;
        }
        c3 = f3;
        d3 = 0;
        do {
          d3 = d3 + 1 | 0;
          c3 = b[c3 + 8 >> 2] | 0;
        } while ((c3 | 0) != 0);
        if (d3 >>> 0 < 2) {
          K3 = 0;
          return K3 | 0;
        }
        H2 = Dd(d3 << 2) | 0;
        if (!H2) {
          I2(27396, 27235, 317, 27415);
        }
        G3 = Dd(d3 << 5) | 0;
        if (!G3) {
          I2(27437, 27235, 321, 27415);
        }
        b[a3 >> 2] = 0;
        z3 = a3 + 4 | 0;
        b[z3 >> 2] = 0;
        b[g3 >> 2] = 0;
        d3 = 0;
        F2 = 0;
        y3 = 0;
        n2 = 0;
        a:
          while (1) {
            m2 = b[f3 >> 2] | 0;
            if (m2) {
              h2 = 0;
              i2 = m2;
              do {
                k2 = +e2[i2 + 8 >> 3];
                c3 = i2;
                i2 = b[i2 + 16 >> 2] | 0;
                l2 = (i2 | 0) == 0;
                g3 = l2 ? m2 : i2;
                j2 = +e2[g3 + 8 >> 3];
                if (+q2(+(k2 - j2)) > 3.141592653589793) {
                  K3 = 14;
                  break;
                }
                h2 = h2 + (j2 - k2) * (+e2[c3 >> 3] + +e2[g3 >> 3]);
              } while (!l2);
              if ((K3 | 0) == 14) {
                K3 = 0;
                h2 = 0;
                c3 = m2;
                do {
                  x3 = +e2[c3 + 8 >> 3];
                  E3 = c3 + 16 | 0;
                  D3 = b[E3 >> 2] | 0;
                  D3 = (D3 | 0) == 0 ? m2 : D3;
                  w5 = +e2[D3 + 8 >> 3];
                  h2 = h2 + (+e2[c3 >> 3] + +e2[D3 >> 3]) * ((w5 < 0 ? w5 + 6.283185307179586 : w5) - (x3 < 0 ? x3 + 6.283185307179586 : x3));
                  c3 = b[((c3 | 0) == 0 ? f3 : E3) >> 2] | 0;
                } while ((c3 | 0) != 0);
              }
              if (h2 > 0) {
                b[H2 + (F2 << 2) >> 2] = f3;
                F2 = F2 + 1 | 0;
                g3 = y3;
                c3 = n2;
              } else {
                K3 = 19;
              }
            } else {
              K3 = 19;
            }
            if ((K3 | 0) == 19) {
              K3 = 0;
              do {
                if (!d3) {
                  if (!n2) {
                    if (!(b[a3 >> 2] | 0)) {
                      g3 = z3;
                      i2 = a3;
                      c3 = f3;
                      d3 = a3;
                      break;
                    } else {
                      K3 = 27;
                      break a;
                    }
                  } else {
                    g3 = z3;
                    i2 = n2 + 8 | 0;
                    c3 = f3;
                    d3 = a3;
                    break;
                  }
                } else {
                  c3 = d3 + 8 | 0;
                  if (b[c3 >> 2] | 0) {
                    K3 = 21;
                    break a;
                  }
                  d3 = Fd(1, 12) | 0;
                  if (!d3) {
                    K3 = 23;
                    break a;
                  }
                  b[c3 >> 2] = d3;
                  g3 = d3 + 4 | 0;
                  i2 = d3;
                  c3 = n2;
                }
              } while (0);
              b[i2 >> 2] = f3;
              b[g3 >> 2] = f3;
              i2 = G3 + (y3 << 5) | 0;
              l2 = b[f3 >> 2] | 0;
              if (l2) {
                m2 = G3 + (y3 << 5) + 8 | 0;
                e2[m2 >> 3] = 17976931348623157e292;
                n2 = G3 + (y3 << 5) + 24 | 0;
                e2[n2 >> 3] = 17976931348623157e292;
                e2[i2 >> 3] = -17976931348623157e292;
                o2 = G3 + (y3 << 5) + 16 | 0;
                e2[o2 >> 3] = -17976931348623157e292;
                u3 = 17976931348623157e292;
                v3 = -17976931348623157e292;
                g3 = 0;
                p3 = l2;
                k2 = 17976931348623157e292;
                s3 = 17976931348623157e292;
                t3 = -17976931348623157e292;
                j2 = -17976931348623157e292;
                while (1) {
                  h2 = +e2[p3 >> 3];
                  x3 = +e2[p3 + 8 >> 3];
                  p3 = b[p3 + 16 >> 2] | 0;
                  r3 = (p3 | 0) == 0;
                  w5 = +e2[(r3 ? l2 : p3) + 8 >> 3];
                  if (h2 < k2) {
                    e2[m2 >> 3] = h2;
                    k2 = h2;
                  }
                  if (x3 < s3) {
                    e2[n2 >> 3] = x3;
                    s3 = x3;
                  }
                  if (h2 > t3) {
                    e2[i2 >> 3] = h2;
                  } else {
                    h2 = t3;
                  }
                  if (x3 > j2) {
                    e2[o2 >> 3] = x3;
                    j2 = x3;
                  }
                  u3 = x3 > 0 & x3 < u3 ? x3 : u3;
                  v3 = x3 < 0 & x3 > v3 ? x3 : v3;
                  g3 = g3 | +q2(+(x3 - w5)) > 3.141592653589793;
                  if (r3) {
                    break;
                  } else {
                    t3 = h2;
                  }
                }
                if (g3) {
                  e2[o2 >> 3] = v3;
                  e2[n2 >> 3] = u3;
                }
              } else {
                b[i2 >> 2] = 0;
                b[i2 + 4 >> 2] = 0;
                b[i2 + 8 >> 2] = 0;
                b[i2 + 12 >> 2] = 0;
                b[i2 + 16 >> 2] = 0;
                b[i2 + 20 >> 2] = 0;
                b[i2 + 24 >> 2] = 0;
                b[i2 + 28 >> 2] = 0;
              }
              g3 = y3 + 1 | 0;
            }
            E3 = f3 + 8 | 0;
            f3 = b[E3 >> 2] | 0;
            b[E3 >> 2] = 0;
            if (!f3) {
              K3 = 45;
              break;
            } else {
              y3 = g3;
              n2 = c3;
            }
          }
        if ((K3 | 0) == 21) {
          I2(27213, 27235, 35, 27247);
        } else if ((K3 | 0) == 23) {
          I2(27267, 27235, 37, 27247);
        } else if ((K3 | 0) == 27) {
          I2(27310, 27235, 61, 27333);
        } else if ((K3 | 0) == 45) {
          b:
            do {
              if ((F2 | 0) > 0) {
                E3 = (g3 | 0) == 0;
                C3 = g3 << 2;
                D3 = (a3 | 0) == 0;
                B4 = 0;
                c3 = 0;
                while (1) {
                  A3 = b[H2 + (B4 << 2) >> 2] | 0;
                  if (!E3) {
                    y3 = Dd(C3) | 0;
                    if (!y3) {
                      K3 = 50;
                      break;
                    }
                    z3 = Dd(C3) | 0;
                    if (!z3) {
                      K3 = 52;
                      break;
                    }
                    c:
                      do {
                        if (!D3) {
                          g3 = 0;
                          d3 = 0;
                          i2 = a3;
                          while (1) {
                            f3 = G3 + (g3 << 5) | 0;
                            if (Gc(b[i2 >> 2] | 0, f3, b[A3 >> 2] | 0) | 0) {
                              b[y3 + (d3 << 2) >> 2] = i2;
                              b[z3 + (d3 << 2) >> 2] = f3;
                              r3 = d3 + 1 | 0;
                            } else {
                              r3 = d3;
                            }
                            i2 = b[i2 + 8 >> 2] | 0;
                            if (!i2) {
                              break;
                            } else {
                              g3 = g3 + 1 | 0;
                              d3 = r3;
                            }
                          }
                          if ((r3 | 0) > 0) {
                            f3 = b[y3 >> 2] | 0;
                            if ((r3 | 0) == 1) {
                              d3 = f3;
                            } else {
                              o2 = 0;
                              p3 = -1;
                              d3 = f3;
                              n2 = f3;
                              while (1) {
                                l2 = b[n2 >> 2] | 0;
                                f3 = 0;
                                i2 = 0;
                                while (1) {
                                  g3 = b[b[y3 + (i2 << 2) >> 2] >> 2] | 0;
                                  if ((g3 | 0) == (l2 | 0)) {
                                    m2 = f3;
                                  } else {
                                    m2 = f3 + ((Gc(g3, b[z3 + (i2 << 2) >> 2] | 0, b[l2 >> 2] | 0) | 0) & 1) | 0;
                                  }
                                  i2 = i2 + 1 | 0;
                                  if ((i2 | 0) == (r3 | 0)) {
                                    break;
                                  } else {
                                    f3 = m2;
                                  }
                                }
                                g3 = (m2 | 0) > (p3 | 0);
                                d3 = g3 ? n2 : d3;
                                f3 = o2 + 1 | 0;
                                if ((f3 | 0) == (r3 | 0)) {
                                  break c;
                                }
                                o2 = f3;
                                p3 = g3 ? m2 : p3;
                                n2 = b[y3 + (f3 << 2) >> 2] | 0;
                              }
                            }
                          } else {
                            d3 = 0;
                          }
                        } else {
                          d3 = 0;
                        }
                      } while (0);
                    Ed(y3);
                    Ed(z3);
                    if (d3) {
                      g3 = d3 + 4 | 0;
                      f3 = b[g3 >> 2] | 0;
                      if (!f3) {
                        if (b[d3 >> 2] | 0) {
                          K3 = 70;
                          break;
                        }
                      } else {
                        d3 = f3 + 8 | 0;
                      }
                      b[d3 >> 2] = A3;
                      b[g3 >> 2] = A3;
                    } else {
                      K3 = 73;
                    }
                  } else {
                    K3 = 73;
                  }
                  if ((K3 | 0) == 73) {
                    K3 = 0;
                    c3 = b[A3 >> 2] | 0;
                    if (c3 | 0) {
                      do {
                        z3 = c3;
                        c3 = b[c3 + 16 >> 2] | 0;
                        Ed(z3);
                      } while ((c3 | 0) != 0);
                    }
                    Ed(A3);
                    c3 = 1;
                  }
                  B4 = B4 + 1 | 0;
                  if ((B4 | 0) >= (F2 | 0)) {
                    J2 = c3;
                    break b;
                  }
                }
                if ((K3 | 0) == 50) {
                  I2(27452, 27235, 249, 27471);
                } else if ((K3 | 0) == 52) {
                  I2(27490, 27235, 252, 27471);
                } else if ((K3 | 0) == 70) {
                  I2(27310, 27235, 61, 27333);
                }
              } else {
                J2 = 0;
              }
            } while (0);
          Ed(H2);
          Ed(G3);
          K3 = J2;
          return K3 | 0;
        }
        return 0;
      }
      function Gc(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        if (!(Ca(c3, d3) | 0)) {
          a3 = 0;
          return a3 | 0;
        }
        c3 = Aa(c3) | 0;
        f3 = +e2[d3 >> 3];
        g3 = +e2[d3 + 8 >> 3];
        g3 = c3 & g3 < 0 ? g3 + 6.283185307179586 : g3;
        a3 = b[a3 >> 2] | 0;
        if (!a3) {
          a3 = 0;
          return a3 | 0;
        }
        if (c3) {
          c3 = 0;
          l2 = g3;
          d3 = a3;
          a:
            while (1) {
              while (1) {
                i2 = +e2[d3 >> 3];
                g3 = +e2[d3 + 8 >> 3];
                d3 = d3 + 16 | 0;
                m2 = b[d3 >> 2] | 0;
                m2 = (m2 | 0) == 0 ? a3 : m2;
                h2 = +e2[m2 >> 3];
                j2 = +e2[m2 + 8 >> 3];
                if (i2 > h2) {
                  k2 = i2;
                  i2 = j2;
                } else {
                  k2 = h2;
                  h2 = i2;
                  i2 = g3;
                  g3 = j2;
                }
                f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
                if (!(f3 < h2 | f3 > k2)) {
                  break;
                }
                d3 = b[d3 >> 2] | 0;
                if (!d3) {
                  d3 = 22;
                  break a;
                }
              }
              j2 = i2 < 0 ? i2 + 6.283185307179586 : i2;
              i2 = g3 < 0 ? g3 + 6.283185307179586 : g3;
              l2 = j2 == l2 | i2 == l2 ? l2 + -2220446049250313e-31 : l2;
              k2 = j2 + (i2 - j2) * ((f3 - h2) / (k2 - h2));
              if ((k2 < 0 ? k2 + 6.283185307179586 : k2) > l2) {
                c3 = c3 ^ 1;
              }
              d3 = b[d3 >> 2] | 0;
              if (!d3) {
                d3 = 22;
                break;
              }
            }
          if ((d3 | 0) == 22) {
            return c3 | 0;
          }
        } else {
          c3 = 0;
          l2 = g3;
          d3 = a3;
          b:
            while (1) {
              while (1) {
                i2 = +e2[d3 >> 3];
                g3 = +e2[d3 + 8 >> 3];
                d3 = d3 + 16 | 0;
                m2 = b[d3 >> 2] | 0;
                m2 = (m2 | 0) == 0 ? a3 : m2;
                h2 = +e2[m2 >> 3];
                j2 = +e2[m2 + 8 >> 3];
                if (i2 > h2) {
                  k2 = i2;
                  i2 = j2;
                } else {
                  k2 = h2;
                  h2 = i2;
                  i2 = g3;
                  g3 = j2;
                }
                f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
                if (!(f3 < h2 | f3 > k2)) {
                  break;
                }
                d3 = b[d3 >> 2] | 0;
                if (!d3) {
                  d3 = 22;
                  break b;
                }
              }
              l2 = i2 == l2 | g3 == l2 ? l2 + -2220446049250313e-31 : l2;
              if (i2 + (g3 - i2) * ((f3 - h2) / (k2 - h2)) > l2) {
                c3 = c3 ^ 1;
              }
              d3 = b[d3 >> 2] | 0;
              if (!d3) {
                d3 = 22;
                break;
              }
            }
          if ((d3 | 0) == 22) {
            return c3 | 0;
          }
        }
        return 0;
      }
      function Hc(c3, d3, e3, f3, g3) {
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0;
        u3 = T3;
        T3 = T3 + 32 | 0;
        t3 = u3 + 16 | 0;
        s3 = u3;
        h2 = Qd(c3 | 0, d3 | 0, 52) | 0;
        H() | 0;
        h2 = h2 & 15;
        p3 = Qd(e3 | 0, f3 | 0, 52) | 0;
        H() | 0;
        if ((h2 | 0) != (p3 & 15 | 0)) {
          t3 = 12;
          T3 = u3;
          return t3 | 0;
        }
        l2 = Qd(c3 | 0, d3 | 0, 45) | 0;
        H() | 0;
        l2 = l2 & 127;
        m2 = Qd(e3 | 0, f3 | 0, 45) | 0;
        H() | 0;
        m2 = m2 & 127;
        if (l2 >>> 0 > 121 | m2 >>> 0 > 121) {
          t3 = 5;
          T3 = u3;
          return t3 | 0;
        }
        p3 = (l2 | 0) != (m2 | 0);
        if (p3) {
          j2 = wa(l2, m2) | 0;
          if ((j2 | 0) == 7) {
            t3 = 1;
            T3 = u3;
            return t3 | 0;
          }
          k2 = wa(m2, l2) | 0;
          if ((k2 | 0) == 7) {
            I2(27514, 27538, 161, 27548);
          } else {
            q3 = j2;
            i2 = k2;
          }
        } else {
          q3 = 0;
          i2 = 0;
        }
        n2 = oa(l2) | 0;
        o2 = oa(m2) | 0;
        b[t3 >> 2] = 0;
        b[t3 + 4 >> 2] = 0;
        b[t3 + 8 >> 2] = 0;
        b[t3 + 12 >> 2] = 0;
        do {
          if (!q3) {
            Xb(e3, f3, t3) | 0;
            if ((n2 | 0) != 0 & (o2 | 0) != 0) {
              if ((m2 | 0) != (l2 | 0)) {
                I2(27621, 27538, 261, 27548);
              }
              i2 = Pb(c3, d3) | 0;
              h2 = Pb(e3, f3) | 0;
              if (!((i2 | 0) == 7 | (h2 | 0) == 7)) {
                if (!(a2[22e3 + (i2 * 7 | 0) + h2 >> 0] | 0)) {
                  i2 = b[21168 + (i2 * 28 | 0) + (h2 << 2) >> 2] | 0;
                  if ((i2 | 0) > 0) {
                    j2 = t3 + 4 | 0;
                    h2 = 0;
                    do {
                      _a2(j2);
                      h2 = h2 + 1 | 0;
                    } while ((h2 | 0) != (i2 | 0));
                    r3 = 51;
                  } else {
                    r3 = 51;
                  }
                } else {
                  h2 = 1;
                }
              } else {
                h2 = 5;
              }
            } else {
              r3 = 51;
            }
          } else {
            m2 = b[4272 + (l2 * 28 | 0) + (q3 << 2) >> 2] | 0;
            j2 = (m2 | 0) > 0;
            if (!o2) {
              if (j2) {
                l2 = 0;
                k2 = e3;
                j2 = f3;
                do {
                  k2 = Tb(k2, j2) | 0;
                  j2 = H() | 0;
                  i2 = ab(i2) | 0;
                  l2 = l2 + 1 | 0;
                } while ((l2 | 0) != (m2 | 0));
                m2 = i2;
                l2 = k2;
                k2 = j2;
              } else {
                m2 = i2;
                l2 = e3;
                k2 = f3;
              }
            } else if (j2) {
              l2 = 0;
              k2 = e3;
              j2 = f3;
              do {
                k2 = Sb(k2, j2) | 0;
                j2 = H() | 0;
                i2 = ab(i2) | 0;
                if ((i2 | 0) == 1) {
                  i2 = ab(1) | 0;
                }
                l2 = l2 + 1 | 0;
              } while ((l2 | 0) != (m2 | 0));
              m2 = i2;
              l2 = k2;
              k2 = j2;
            } else {
              m2 = i2;
              l2 = e3;
              k2 = f3;
            }
            Xb(l2, k2, t3) | 0;
            if (!p3) {
              I2(27563, 27538, 191, 27548);
            }
            j2 = (n2 | 0) != 0;
            i2 = (o2 | 0) != 0;
            if (j2 & i2) {
              I2(27590, 27538, 192, 27548);
            }
            if (!j2) {
              if (i2) {
                i2 = Pb(l2, k2) | 0;
                if ((i2 | 0) == 7) {
                  h2 = 5;
                  break;
                }
                if (a2[22e3 + (i2 * 7 | 0) + m2 >> 0] | 0) {
                  h2 = 1;
                  break;
                }
                l2 = 0;
                k2 = b[21168 + (m2 * 28 | 0) + (i2 << 2) >> 2] | 0;
              } else {
                l2 = 0;
                k2 = 0;
              }
            } else {
              i2 = Pb(c3, d3) | 0;
              if ((i2 | 0) == 7) {
                h2 = 5;
                break;
              }
              if (a2[22e3 + (i2 * 7 | 0) + q3 >> 0] | 0) {
                h2 = 1;
                break;
              }
              k2 = b[21168 + (i2 * 28 | 0) + (q3 << 2) >> 2] | 0;
              l2 = k2;
            }
            if ((l2 | k2 | 0) < 0) {
              h2 = 5;
            } else {
              if ((k2 | 0) > 0) {
                j2 = t3 + 4 | 0;
                i2 = 0;
                do {
                  _a2(j2);
                  i2 = i2 + 1 | 0;
                } while ((i2 | 0) != (k2 | 0));
              }
              b[s3 >> 2] = 0;
              b[s3 + 4 >> 2] = 0;
              b[s3 + 8 >> 2] = 0;
              Ya(s3, q3);
              if (h2 | 0) {
                while (1) {
                  if (!(Vb(h2) | 0)) {
                    Xa(s3);
                  } else {
                    Wa(s3);
                  }
                  if ((h2 | 0) > 1) {
                    h2 = h2 + -1 | 0;
                  } else {
                    break;
                  }
                }
              }
              if ((l2 | 0) > 0) {
                h2 = 0;
                do {
                  _a2(s3);
                  h2 = h2 + 1 | 0;
                } while ((h2 | 0) != (l2 | 0));
              }
              r3 = t3 + 4 | 0;
              Oa(r3, s3, r3);
              Ma(r3);
              r3 = 51;
            }
          }
        } while (0);
        if ((r3 | 0) == 51) {
          h2 = t3 + 4 | 0;
          b[g3 >> 2] = b[h2 >> 2];
          b[g3 + 4 >> 2] = b[h2 + 4 >> 2];
          b[g3 + 8 >> 2] = b[h2 + 8 >> 2];
          h2 = 0;
        }
        t3 = h2;
        T3 = u3;
        return t3 | 0;
      }
      function Ic(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0;
        q3 = T3;
        T3 = T3 + 48 | 0;
        k2 = q3 + 36 | 0;
        h2 = q3 + 24 | 0;
        i2 = q3 + 12 | 0;
        j2 = q3;
        f3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        n2 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        n2 = n2 & 127;
        if (n2 >>> 0 > 121) {
          e3 = 5;
          T3 = q3;
          return e3 | 0;
        }
        l2 = oa(n2) | 0;
        Rd(f3 | 0, 0, 52) | 0;
        r3 = H() | 0 | 134225919;
        g3 = e3;
        b[g3 >> 2] = -1;
        b[g3 + 4 >> 2] = r3;
        if (!f3) {
          f3 = Ra(d3) | 0;
          if ((f3 | 0) == 7) {
            r3 = 1;
            T3 = q3;
            return r3 | 0;
          }
          f3 = va(n2, f3) | 0;
          if ((f3 | 0) == 127) {
            r3 = 1;
            T3 = q3;
            return r3 | 0;
          }
          o2 = Rd(f3 | 0, 0, 45) | 0;
          p3 = H() | 0;
          n2 = e3;
          p3 = b[n2 + 4 >> 2] & -1040385 | p3;
          r3 = e3;
          b[r3 >> 2] = b[n2 >> 2] | o2;
          b[r3 + 4 >> 2] = p3;
          r3 = 0;
          T3 = q3;
          return r3 | 0;
        }
        b[k2 >> 2] = b[d3 >> 2];
        b[k2 + 4 >> 2] = b[d3 + 4 >> 2];
        b[k2 + 8 >> 2] = b[d3 + 8 >> 2];
        d3 = f3;
        while (1) {
          g3 = d3;
          d3 = d3 + -1 | 0;
          b[h2 >> 2] = b[k2 >> 2];
          b[h2 + 4 >> 2] = b[k2 + 4 >> 2];
          b[h2 + 8 >> 2] = b[k2 + 8 >> 2];
          if (!(Vb(g3) | 0)) {
            f3 = Ta(k2) | 0;
            if (f3 | 0) {
              d3 = 13;
              break;
            }
            b[i2 >> 2] = b[k2 >> 2];
            b[i2 + 4 >> 2] = b[k2 + 4 >> 2];
            b[i2 + 8 >> 2] = b[k2 + 8 >> 2];
            Xa(i2);
          } else {
            f3 = Sa(k2) | 0;
            if (f3 | 0) {
              d3 = 13;
              break;
            }
            b[i2 >> 2] = b[k2 >> 2];
            b[i2 + 4 >> 2] = b[k2 + 4 >> 2];
            b[i2 + 8 >> 2] = b[k2 + 8 >> 2];
            Wa(i2);
          }
          Pa(h2, i2, j2);
          Ma(j2);
          f3 = e3;
          t3 = b[f3 >> 2] | 0;
          f3 = b[f3 + 4 >> 2] | 0;
          u3 = (15 - g3 | 0) * 3 | 0;
          s3 = Rd(7, 0, u3 | 0) | 0;
          f3 = f3 & ~(H() | 0);
          u3 = Rd(Ra(j2) | 0, 0, u3 | 0) | 0;
          f3 = H() | 0 | f3;
          r3 = e3;
          b[r3 >> 2] = u3 | t3 & ~s3;
          b[r3 + 4 >> 2] = f3;
          if ((g3 | 0) <= 1) {
            d3 = 14;
            break;
          }
        }
        a:
          do {
            if ((d3 | 0) != 13) {
              if ((d3 | 0) == 14) {
                if (((b[k2 >> 2] | 0) <= 1 ? (b[k2 + 4 >> 2] | 0) <= 1 : 0) ? (b[k2 + 8 >> 2] | 0) <= 1 : 0) {
                  d3 = Ra(k2) | 0;
                  f3 = va(n2, d3) | 0;
                  if ((f3 | 0) == 127) {
                    j2 = 0;
                  } else {
                    j2 = oa(f3) | 0;
                  }
                  b:
                    do {
                      if (!d3) {
                        if ((l2 | 0) != 0 & (j2 | 0) != 0) {
                          d3 = Pb(a3, c3) | 0;
                          g3 = e3;
                          g3 = Pb(b[g3 >> 2] | 0, b[g3 + 4 >> 2] | 0) | 0;
                          if ((d3 | 0) == 7 | (g3 | 0) == 7) {
                            f3 = 5;
                            break a;
                          }
                          g3 = b[21376 + (d3 * 28 | 0) + (g3 << 2) >> 2] | 0;
                          if ((g3 | 0) < 0) {
                            f3 = 5;
                            break a;
                          }
                          if (!g3) {
                            d3 = 59;
                          } else {
                            i2 = e3;
                            d3 = 0;
                            h2 = b[i2 >> 2] | 0;
                            i2 = b[i2 + 4 >> 2] | 0;
                            do {
                              h2 = Rb(h2, i2) | 0;
                              i2 = H() | 0;
                              u3 = e3;
                              b[u3 >> 2] = h2;
                              b[u3 + 4 >> 2] = i2;
                              d3 = d3 + 1 | 0;
                            } while ((d3 | 0) < (g3 | 0));
                            d3 = 58;
                          }
                        } else {
                          d3 = 58;
                        }
                      } else {
                        if (l2) {
                          f3 = Pb(a3, c3) | 0;
                          if ((f3 | 0) == 7) {
                            f3 = 5;
                            break a;
                          }
                          g3 = b[21376 + (f3 * 28 | 0) + (d3 << 2) >> 2] | 0;
                          if ((g3 | 0) > 0) {
                            f3 = d3;
                            d3 = 0;
                            do {
                              f3 = $a(f3) | 0;
                              d3 = d3 + 1 | 0;
                            } while ((d3 | 0) != (g3 | 0));
                          } else {
                            f3 = d3;
                          }
                          if ((f3 | 0) == 1) {
                            f3 = 9;
                            break a;
                          }
                          d3 = va(n2, f3) | 0;
                          if ((d3 | 0) == 127) {
                            I2(27648, 27538, 411, 27678);
                          }
                          if (!(oa(d3) | 0)) {
                            p3 = d3;
                            o2 = g3;
                            m2 = f3;
                          } else {
                            I2(27693, 27538, 412, 27678);
                          }
                        } else {
                          p3 = f3;
                          o2 = 0;
                          m2 = d3;
                        }
                        i2 = b[4272 + (n2 * 28 | 0) + (m2 << 2) >> 2] | 0;
                        if ((i2 | 0) <= -1) {
                          I2(27724, 27538, 419, 27678);
                        }
                        if (!j2) {
                          if ((o2 | 0) < 0) {
                            f3 = 5;
                            break a;
                          }
                          if (o2 | 0) {
                            g3 = e3;
                            f3 = 0;
                            d3 = b[g3 >> 2] | 0;
                            g3 = b[g3 + 4 >> 2] | 0;
                            do {
                              d3 = Rb(d3, g3) | 0;
                              g3 = H() | 0;
                              u3 = e3;
                              b[u3 >> 2] = d3;
                              b[u3 + 4 >> 2] = g3;
                              f3 = f3 + 1 | 0;
                            } while ((f3 | 0) < (o2 | 0));
                          }
                          if ((i2 | 0) <= 0) {
                            f3 = p3;
                            d3 = 58;
                            break;
                          }
                          g3 = e3;
                          f3 = 0;
                          d3 = b[g3 >> 2] | 0;
                          g3 = b[g3 + 4 >> 2] | 0;
                          while (1) {
                            d3 = Rb(d3, g3) | 0;
                            g3 = H() | 0;
                            u3 = e3;
                            b[u3 >> 2] = d3;
                            b[u3 + 4 >> 2] = g3;
                            f3 = f3 + 1 | 0;
                            if ((f3 | 0) == (i2 | 0)) {
                              f3 = p3;
                              d3 = 58;
                              break b;
                            }
                          }
                        }
                        h2 = wa(p3, n2) | 0;
                        if ((h2 | 0) == 7) {
                          I2(27514, 27538, 428, 27678);
                        }
                        f3 = e3;
                        d3 = b[f3 >> 2] | 0;
                        f3 = b[f3 + 4 >> 2] | 0;
                        if ((i2 | 0) > 0) {
                          g3 = 0;
                          do {
                            d3 = Rb(d3, f3) | 0;
                            f3 = H() | 0;
                            u3 = e3;
                            b[u3 >> 2] = d3;
                            b[u3 + 4 >> 2] = f3;
                            g3 = g3 + 1 | 0;
                          } while ((g3 | 0) != (i2 | 0));
                        }
                        f3 = Pb(d3, f3) | 0;
                        if ((f3 | 0) == 7) {
                          I2(27795, 27538, 440, 27678);
                        }
                        d3 = pa(p3) | 0;
                        d3 = b[(d3 ? 21792 : 21584) + (h2 * 28 | 0) + (f3 << 2) >> 2] | 0;
                        if ((d3 | 0) < 0) {
                          I2(27795, 27538, 454, 27678);
                        }
                        if (!d3) {
                          f3 = p3;
                          d3 = 58;
                        } else {
                          h2 = e3;
                          f3 = 0;
                          g3 = b[h2 >> 2] | 0;
                          h2 = b[h2 + 4 >> 2] | 0;
                          do {
                            g3 = Qb(g3, h2) | 0;
                            h2 = H() | 0;
                            u3 = e3;
                            b[u3 >> 2] = g3;
                            b[u3 + 4 >> 2] = h2;
                            f3 = f3 + 1 | 0;
                          } while ((f3 | 0) < (d3 | 0));
                          f3 = p3;
                          d3 = 58;
                        }
                      }
                    } while (0);
                  if ((d3 | 0) == 58) {
                    if (j2) {
                      d3 = 59;
                    }
                  }
                  if ((d3 | 0) == 59) {
                    u3 = e3;
                    if ((Pb(b[u3 >> 2] | 0, b[u3 + 4 >> 2] | 0) | 0) == 1) {
                      f3 = 9;
                      break;
                    }
                  }
                  u3 = e3;
                  s3 = b[u3 >> 2] | 0;
                  u3 = b[u3 + 4 >> 2] & -1040385;
                  t3 = Rd(f3 | 0, 0, 45) | 0;
                  u3 = u3 | (H() | 0);
                  f3 = e3;
                  b[f3 >> 2] = s3 | t3;
                  b[f3 + 4 >> 2] = u3;
                  f3 = 0;
                } else {
                  f3 = 1;
                }
              }
            }
          } while (0);
        u3 = f3;
        T3 = q3;
        return u3 | 0;
      }
      function Jc(a3, b2, c3, d3, e3, f3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0;
        h2 = T3;
        T3 = T3 + 16 | 0;
        g3 = h2;
        if (!e3) {
          a3 = Hc(a3, b2, c3, d3, g3) | 0;
          if (!a3) {
            eb(g3, f3);
            a3 = 0;
          }
        } else {
          a3 = 15;
        }
        T3 = h2;
        return a3 | 0;
      }
      function Kc(a3, b2, c3, d3, e3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0;
        g3 = T3;
        T3 = T3 + 16 | 0;
        f3 = g3;
        if (!d3) {
          c3 = fb(c3, f3) | 0;
          if (!c3) {
            c3 = Ic(a3, b2, f3, e3) | 0;
          }
        } else {
          c3 = 15;
        }
        T3 = g3;
        return c3 | 0;
      }
      function Lc(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T3;
        T3 = T3 + 32 | 0;
        h2 = j2 + 12 | 0;
        i2 = j2;
        g3 = Hc(a3, c3, a3, c3, h2) | 0;
        if (g3 | 0) {
          i2 = g3;
          T3 = j2;
          return i2 | 0;
        }
        a3 = Hc(a3, c3, d3, e3, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          T3 = j2;
          return i2 | 0;
        }
        h2 = db(h2, i2) | 0;
        i2 = f3;
        b[i2 >> 2] = h2;
        b[i2 + 4 >> 2] = ((h2 | 0) < 0) << 31 >> 31;
        i2 = 0;
        T3 = j2;
        return i2 | 0;
      }
      function Mc(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T3;
        T3 = T3 + 32 | 0;
        h2 = j2 + 12 | 0;
        i2 = j2;
        g3 = Hc(a3, c3, a3, c3, h2) | 0;
        if (!g3) {
          g3 = Hc(a3, c3, d3, e3, i2) | 0;
          if (!g3) {
            e3 = db(h2, i2) | 0;
            e3 = Gd(e3 | 0, ((e3 | 0) < 0) << 31 >> 31 | 0, 1, 0) | 0;
            h2 = H() | 0;
            i2 = f3;
            b[i2 >> 2] = e3;
            b[i2 + 4 >> 2] = h2;
            i2 = 0;
            T3 = j2;
            return i2 | 0;
          }
        }
        i2 = g3;
        T3 = j2;
        return i2 | 0;
      }
      function Nc(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0;
        z3 = T3;
        T3 = T3 + 48 | 0;
        x3 = z3 + 24 | 0;
        h2 = z3 + 12 | 0;
        y3 = z3;
        g3 = Hc(a3, c3, a3, c3, x3) | 0;
        if (!g3) {
          g3 = Hc(a3, c3, d3, e3, h2) | 0;
          if (!g3) {
            v3 = db(x3, h2) | 0;
            w5 = ((v3 | 0) < 0) << 31 >> 31;
            b[x3 >> 2] = 0;
            b[x3 + 4 >> 2] = 0;
            b[x3 + 8 >> 2] = 0;
            b[h2 >> 2] = 0;
            b[h2 + 4 >> 2] = 0;
            b[h2 + 8 >> 2] = 0;
            if (Hc(a3, c3, a3, c3, x3) | 0) {
              I2(27795, 27538, 692, 27747);
            }
            if (Hc(a3, c3, d3, e3, h2) | 0) {
              I2(27795, 27538, 697, 27747);
            }
            gb(x3);
            gb(h2);
            l2 = (v3 | 0) == 0 ? 0 : 1 / +(v3 | 0);
            d3 = b[x3 >> 2] | 0;
            r3 = l2 * +((b[h2 >> 2] | 0) - d3 | 0);
            s3 = x3 + 4 | 0;
            e3 = b[s3 >> 2] | 0;
            t3 = l2 * +((b[h2 + 4 >> 2] | 0) - e3 | 0);
            u3 = x3 + 8 | 0;
            g3 = b[u3 >> 2] | 0;
            l2 = l2 * +((b[h2 + 8 >> 2] | 0) - g3 | 0);
            b[y3 >> 2] = d3;
            m2 = y3 + 4 | 0;
            b[m2 >> 2] = e3;
            n2 = y3 + 8 | 0;
            b[n2 >> 2] = g3;
            a:
              do {
                if ((v3 | 0) < 0) {
                  g3 = 0;
                } else {
                  o2 = 0;
                  p3 = 0;
                  while (1) {
                    j2 = +(p3 >>> 0) + 4294967296 * +(o2 | 0);
                    A3 = r3 * j2 + +(d3 | 0);
                    i2 = t3 * j2 + +(e3 | 0);
                    j2 = l2 * j2 + +(g3 | 0);
                    d3 = ~~+Vd(+A3);
                    h2 = ~~+Vd(+i2);
                    g3 = ~~+Vd(+j2);
                    A3 = +q2(+(+(d3 | 0) - A3));
                    i2 = +q2(+(+(h2 | 0) - i2));
                    j2 = +q2(+(+(g3 | 0) - j2));
                    do {
                      if (!(A3 > i2 & A3 > j2)) {
                        k2 = 0 - d3 | 0;
                        if (i2 > j2) {
                          e3 = k2 - g3 | 0;
                          break;
                        } else {
                          e3 = h2;
                          g3 = k2 - h2 | 0;
                          break;
                        }
                      } else {
                        d3 = 0 - (h2 + g3) | 0;
                        e3 = h2;
                      }
                    } while (0);
                    b[y3 >> 2] = d3;
                    b[m2 >> 2] = e3;
                    b[n2 >> 2] = g3;
                    hb(y3);
                    g3 = Ic(a3, c3, y3, f3 + (p3 << 3) | 0) | 0;
                    if (g3 | 0) {
                      break a;
                    }
                    if (!((o2 | 0) < (w5 | 0) | (o2 | 0) == (w5 | 0) & p3 >>> 0 < v3 >>> 0)) {
                      g3 = 0;
                      break a;
                    }
                    d3 = Gd(p3 | 0, o2 | 0, 1, 0) | 0;
                    e3 = H() | 0;
                    o2 = e3;
                    p3 = d3;
                    d3 = b[x3 >> 2] | 0;
                    e3 = b[s3 >> 2] | 0;
                    g3 = b[u3 >> 2] | 0;
                  }
                }
              } while (0);
            y3 = g3;
            T3 = z3;
            return y3 | 0;
          }
        }
        y3 = g3;
        T3 = z3;
        return y3 | 0;
      }
      function Oc(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0;
        if ((c3 | 0) == 0 & (d3 | 0) == 0) {
          e3 = 0;
          f3 = 1;
          G2(e3 | 0);
          return f3 | 0;
        }
        f3 = a3;
        e3 = b2;
        a3 = 1;
        b2 = 0;
        do {
          g3 = (c3 & 1 | 0) == 0 & true;
          a3 = Md((g3 ? 1 : f3) | 0, (g3 ? 0 : e3) | 0, a3 | 0, b2 | 0) | 0;
          b2 = H() | 0;
          c3 = Pd(c3 | 0, d3 | 0, 1) | 0;
          d3 = H() | 0;
          f3 = Md(f3 | 0, e3 | 0, f3 | 0, e3 | 0) | 0;
          e3 = H() | 0;
        } while (!((c3 | 0) == 0 & (d3 | 0) == 0));
        G2(b2 | 0);
        return a3 | 0;
      }
      function Pc(a3, c3, d3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T3;
        T3 = T3 + 16 | 0;
        h2 = j2;
        i2 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        do {
          if (!i2) {
            g3 = Qd(a3 | 0, c3 | 0, 45) | 0;
            H() | 0;
            g3 = g3 & 127;
            if (g3 >>> 0 > 121) {
              i2 = 5;
              T3 = j2;
              return i2 | 0;
            } else {
              h2 = 22064 + (g3 << 5) | 0;
              b[d3 >> 2] = b[h2 >> 2];
              b[d3 + 4 >> 2] = b[h2 + 4 >> 2];
              b[d3 + 8 >> 2] = b[h2 + 8 >> 2];
              b[d3 + 12 >> 2] = b[h2 + 12 >> 2];
              b[d3 + 16 >> 2] = b[h2 + 16 >> 2];
              b[d3 + 20 >> 2] = b[h2 + 20 >> 2];
              b[d3 + 24 >> 2] = b[h2 + 24 >> 2];
              b[d3 + 28 >> 2] = b[h2 + 28 >> 2];
              break;
            }
          } else {
            g3 = Zb(a3, c3, h2) | 0;
            if (!g3) {
              l2 = +e2[h2 >> 3];
              k2 = 1 / +t2(+l2);
              m2 = +e2[25968 + (i2 << 3) >> 3];
              e2[d3 >> 3] = l2 + m2;
              e2[d3 + 8 >> 3] = l2 - m2;
              l2 = +e2[h2 + 8 >> 3];
              k2 = m2 * k2;
              e2[d3 + 16 >> 3] = k2 + l2;
              e2[d3 + 24 >> 3] = l2 - k2;
              break;
            }
            i2 = g3;
            T3 = j2;
            return i2 | 0;
          }
        } while (0);
        Ja(d3, f3 ? 1.4 : 1.1);
        f3 = 26096 + (i2 << 3) | 0;
        if ((b[f3 >> 2] | 0) == (a3 | 0) ? (b[f3 + 4 >> 2] | 0) == (c3 | 0) : 0) {
          e2[d3 >> 3] = 1.5707963267948966;
        }
        i2 = 26224 + (i2 << 3) | 0;
        if ((b[i2 >> 2] | 0) == (a3 | 0) ? (b[i2 + 4 >> 2] | 0) == (c3 | 0) : 0) {
          e2[d3 + 8 >> 3] = -1.5707963267948966;
        }
        if (!(+e2[d3 >> 3] == 1.5707963267948966) ? !(+e2[d3 + 8 >> 3] == -1.5707963267948966) : 0) {
          i2 = 0;
          T3 = j2;
          return i2 | 0;
        }
        e2[d3 + 16 >> 3] = 3.141592653589793;
        e2[d3 + 24 >> 3] = -3.141592653589793;
        i2 = 0;
        T3 = j2;
        return i2 | 0;
      }
      function Qc(c3, d3, e3, f3) {
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        l2 = T3;
        T3 = T3 + 48 | 0;
        i2 = l2 + 32 | 0;
        h2 = l2 + 40 | 0;
        j2 = l2;
        Eb(i2, 0, 0, 0);
        k2 = b[i2 >> 2] | 0;
        i2 = b[i2 + 4 >> 2] | 0;
        do {
          if (e3 >>> 0 <= 15) {
            g3 = Xc(f3) | 0;
            if (g3 | 0) {
              f3 = j2;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[j2 + 8 >> 2] = g3;
              b[j2 + 12 >> 2] = -1;
              f3 = j2 + 16 | 0;
              k2 = j2 + 29 | 0;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[f3 + 8 >> 2] = 0;
              a2[f3 + 12 >> 0] = 0;
              a2[k2 >> 0] = a2[h2 >> 0] | 0;
              a2[k2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
              a2[k2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
              break;
            }
            g3 = Fd((b[d3 + 8 >> 2] | 0) + 1 | 0, 32) | 0;
            if (!g3) {
              f3 = j2;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[j2 + 8 >> 2] = 13;
              b[j2 + 12 >> 2] = -1;
              f3 = j2 + 16 | 0;
              k2 = j2 + 29 | 0;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[f3 + 8 >> 2] = 0;
              a2[f3 + 12 >> 0] = 0;
              a2[k2 >> 0] = a2[h2 >> 0] | 0;
              a2[k2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
              a2[k2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
              break;
            } else {
              Yc(d3, g3);
              m2 = j2;
              b[m2 >> 2] = k2;
              b[m2 + 4 >> 2] = i2;
              b[j2 + 8 >> 2] = 0;
              b[j2 + 12 >> 2] = e3;
              b[j2 + 16 >> 2] = f3;
              b[j2 + 20 >> 2] = d3;
              b[j2 + 24 >> 2] = g3;
              a2[j2 + 28 >> 0] = 0;
              k2 = j2 + 29 | 0;
              a2[k2 >> 0] = a2[h2 >> 0] | 0;
              a2[k2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
              a2[k2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
              break;
            }
          } else {
            k2 = j2;
            b[k2 >> 2] = 0;
            b[k2 + 4 >> 2] = 0;
            b[j2 + 8 >> 2] = 4;
            b[j2 + 12 >> 2] = -1;
            k2 = j2 + 16 | 0;
            m2 = j2 + 29 | 0;
            b[k2 >> 2] = 0;
            b[k2 + 4 >> 2] = 0;
            b[k2 + 8 >> 2] = 0;
            a2[k2 + 12 >> 0] = 0;
            a2[m2 >> 0] = a2[h2 >> 0] | 0;
            a2[m2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
            a2[m2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
          }
        } while (0);
        Rc(j2);
        b[c3 >> 2] = b[j2 >> 2];
        b[c3 + 4 >> 2] = b[j2 + 4 >> 2];
        b[c3 + 8 >> 2] = b[j2 + 8 >> 2];
        b[c3 + 12 >> 2] = b[j2 + 12 >> 2];
        b[c3 + 16 >> 2] = b[j2 + 16 >> 2];
        b[c3 + 20 >> 2] = b[j2 + 20 >> 2];
        b[c3 + 24 >> 2] = b[j2 + 24 >> 2];
        b[c3 + 28 >> 2] = b[j2 + 28 >> 2];
        T3 = l2;
        return;
      }
      function Rc(c3) {
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0;
        w5 = T3;
        T3 = T3 + 336 | 0;
        p3 = w5 + 168 | 0;
        q3 = w5;
        f3 = c3;
        e3 = b[f3 >> 2] | 0;
        f3 = b[f3 + 4 >> 2] | 0;
        if ((e3 | 0) == 0 & (f3 | 0) == 0) {
          T3 = w5;
          return;
        }
        d3 = c3 + 28 | 0;
        if (!(a2[d3 >> 0] | 0)) {
          a2[d3 >> 0] = 1;
        } else {
          e3 = Sc(e3, f3) | 0;
          f3 = H() | 0;
        }
        v3 = c3 + 20 | 0;
        if (!(b[b[v3 >> 2] >> 2] | 0)) {
          d3 = c3 + 24 | 0;
          e3 = b[d3 >> 2] | 0;
          if (e3 | 0) {
            Ed(e3);
          }
          u3 = c3;
          b[u3 >> 2] = 0;
          b[u3 + 4 >> 2] = 0;
          b[c3 + 8 >> 2] = 0;
          b[v3 >> 2] = 0;
          b[c3 + 12 >> 2] = -1;
          b[c3 + 16 >> 2] = 0;
          b[d3 >> 2] = 0;
          T3 = w5;
          return;
        }
        u3 = c3 + 16 | 0;
        d3 = b[u3 >> 2] | 0;
        g3 = d3 & 15;
        a:
          do {
            if (!((e3 | 0) == 0 & (f3 | 0) == 0)) {
              r3 = c3 + 12 | 0;
              n2 = (g3 | 0) == 3;
              m2 = d3 & 255;
              k2 = (g3 | 1 | 0) == 3;
              o2 = c3 + 24 | 0;
              l2 = (g3 + -1 | 0) >>> 0 < 3;
              i2 = (g3 | 2 | 0) == 3;
              j2 = q3 + 8 | 0;
              b:
                while (1) {
                  h2 = Qd(e3 | 0, f3 | 0, 52) | 0;
                  H() | 0;
                  h2 = h2 & 15;
                  if ((h2 | 0) == (b[r3 >> 2] | 0)) {
                    switch (m2 & 15) {
                      case 0:
                      case 2:
                      case 3: {
                        g3 = Zb(e3, f3, p3) | 0;
                        if (g3 | 0) {
                          s3 = 15;
                          break b;
                        }
                        if (Zc(b[v3 >> 2] | 0, b[o2 >> 2] | 0, p3) | 0) {
                          s3 = 19;
                          break b;
                        }
                        break;
                      }
                      default:
                    }
                    if (k2 ? (g3 = b[(b[v3 >> 2] | 0) + 4 >> 2] | 0, b[p3 >> 2] = b[g3 >> 2], b[p3 + 4 >> 2] = b[g3 + 4 >> 2], b[p3 + 8 >> 2] = b[g3 + 8 >> 2], b[p3 + 12 >> 2] = b[g3 + 12 >> 2], Ca(26832, p3) | 0) : 0) {
                      if (Wb(b[(b[v3 >> 2] | 0) + 4 >> 2] | 0, h2, q3) | 0) {
                        s3 = 25;
                        break;
                      }
                      g3 = q3;
                      if ((b[g3 >> 2] | 0) == (e3 | 0) ? (b[g3 + 4 >> 2] | 0) == (f3 | 0) : 0) {
                        s3 = 29;
                        break;
                      }
                    }
                    if (l2) {
                      g3 = _b2(e3, f3, p3) | 0;
                      if (g3 | 0) {
                        s3 = 32;
                        break;
                      }
                      if (Pc(e3, f3, q3, 0) | 0) {
                        s3 = 36;
                        break;
                      }
                      if (i2 ? _c(b[v3 >> 2] | 0, b[o2 >> 2] | 0, p3, q3) | 0 : 0) {
                        s3 = 42;
                        break;
                      }
                      if (k2 ? ad(b[v3 >> 2] | 0, b[o2 >> 2] | 0, p3, q3) | 0 : 0) {
                        s3 = 42;
                        break;
                      }
                    }
                    if (n2) {
                      d3 = Pc(e3, f3, p3, 1) | 0;
                      g3 = b[o2 >> 2] | 0;
                      if (d3 | 0) {
                        s3 = 45;
                        break;
                      }
                      if (Da(g3, p3) | 0) {
                        Ga(q3, p3);
                        if (Fa(p3, b[o2 >> 2] | 0) | 0) {
                          s3 = 53;
                          break;
                        }
                        if (Zc(b[v3 >> 2] | 0, b[o2 >> 2] | 0, j2) | 0) {
                          s3 = 53;
                          break;
                        }
                        if (ad(b[v3 >> 2] | 0, b[o2 >> 2] | 0, q3, p3) | 0) {
                          s3 = 53;
                          break;
                        }
                      }
                    }
                  }
                  do {
                    if ((h2 | 0) < (b[r3 >> 2] | 0)) {
                      d3 = Pc(e3, f3, p3, 1) | 0;
                      g3 = b[o2 >> 2] | 0;
                      if (d3 | 0) {
                        s3 = 58;
                        break b;
                      }
                      if (!(Da(g3, p3) | 0)) {
                        s3 = 73;
                        break;
                      }
                      if (Fa(b[o2 >> 2] | 0, p3) | 0 ? (Ga(q3, p3), _c(b[v3 >> 2] | 0, b[o2 >> 2] | 0, q3, p3) | 0) : 0) {
                        s3 = 65;
                        break b;
                      }
                      e3 = Kb(e3, f3, h2 + 1 | 0, q3) | 0;
                      if (e3 | 0) {
                        s3 = 67;
                        break b;
                      }
                      f3 = q3;
                      e3 = b[f3 >> 2] | 0;
                      f3 = b[f3 + 4 >> 2] | 0;
                    } else {
                      s3 = 73;
                    }
                  } while (0);
                  if ((s3 | 0) == 73) {
                    s3 = 0;
                    e3 = Sc(e3, f3) | 0;
                    f3 = H() | 0;
                  }
                  if ((e3 | 0) == 0 & (f3 | 0) == 0) {
                    t3 = o2;
                    break a;
                  }
                }
              switch (s3 | 0) {
                case 15: {
                  d3 = b[o2 >> 2] | 0;
                  if (d3 | 0) {
                    Ed(d3);
                  }
                  s3 = c3;
                  b[s3 >> 2] = 0;
                  b[s3 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r3 >> 2] = -1;
                  b[u3 >> 2] = 0;
                  b[o2 >> 2] = 0;
                  b[c3 + 8 >> 2] = g3;
                  s3 = 20;
                  break;
                }
                case 19: {
                  b[c3 >> 2] = e3;
                  b[c3 + 4 >> 2] = f3;
                  s3 = 20;
                  break;
                }
                case 25: {
                  I2(27795, 27761, 470, 27772);
                  break;
                }
                case 29: {
                  b[c3 >> 2] = e3;
                  b[c3 + 4 >> 2] = f3;
                  T3 = w5;
                  return;
                }
                case 32: {
                  d3 = b[o2 >> 2] | 0;
                  if (d3 | 0) {
                    Ed(d3);
                  }
                  t3 = c3;
                  b[t3 >> 2] = 0;
                  b[t3 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r3 >> 2] = -1;
                  b[u3 >> 2] = 0;
                  b[o2 >> 2] = 0;
                  b[c3 + 8 >> 2] = g3;
                  T3 = w5;
                  return;
                }
                case 36: {
                  I2(27795, 27761, 493, 27772);
                  break;
                }
                case 42: {
                  b[c3 >> 2] = e3;
                  b[c3 + 4 >> 2] = f3;
                  T3 = w5;
                  return;
                }
                case 45: {
                  if (g3 | 0) {
                    Ed(g3);
                  }
                  s3 = c3;
                  b[s3 >> 2] = 0;
                  b[s3 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r3 >> 2] = -1;
                  b[u3 >> 2] = 0;
                  b[o2 >> 2] = 0;
                  b[c3 + 8 >> 2] = d3;
                  s3 = 55;
                  break;
                }
                case 53: {
                  b[c3 >> 2] = e3;
                  b[c3 + 4 >> 2] = f3;
                  s3 = 55;
                  break;
                }
                case 58: {
                  if (g3 | 0) {
                    Ed(g3);
                  }
                  s3 = c3;
                  b[s3 >> 2] = 0;
                  b[s3 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r3 >> 2] = -1;
                  b[u3 >> 2] = 0;
                  b[o2 >> 2] = 0;
                  b[c3 + 8 >> 2] = d3;
                  s3 = 71;
                  break;
                }
                case 65: {
                  b[c3 >> 2] = e3;
                  b[c3 + 4 >> 2] = f3;
                  s3 = 71;
                  break;
                }
                case 67: {
                  d3 = b[o2 >> 2] | 0;
                  if (d3 | 0) {
                    Ed(d3);
                  }
                  t3 = c3;
                  b[t3 >> 2] = 0;
                  b[t3 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r3 >> 2] = -1;
                  b[u3 >> 2] = 0;
                  b[o2 >> 2] = 0;
                  b[c3 + 8 >> 2] = e3;
                  T3 = w5;
                  return;
                }
              }
              if ((s3 | 0) == 20) {
                T3 = w5;
                return;
              } else if ((s3 | 0) == 55) {
                T3 = w5;
                return;
              } else if ((s3 | 0) == 71) {
                T3 = w5;
                return;
              }
            } else {
              t3 = c3 + 24 | 0;
            }
          } while (0);
        d3 = b[t3 >> 2] | 0;
        if (d3 | 0) {
          Ed(d3);
        }
        s3 = c3;
        b[s3 >> 2] = 0;
        b[s3 + 4 >> 2] = 0;
        b[c3 + 8 >> 2] = 0;
        b[v3 >> 2] = 0;
        b[c3 + 12 >> 2] = -1;
        b[u3 >> 2] = 0;
        b[t3 >> 2] = 0;
        T3 = w5;
        return;
      }
      function Sc(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        m2 = T3;
        T3 = T3 + 16 | 0;
        l2 = m2;
        e3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        d3 = Qd(a3 | 0, c3 | 0, 45) | 0;
        H() | 0;
        do {
          if (e3) {
            while (1) {
              d3 = Rd(e3 + 4095 | 0, 0, 52) | 0;
              f3 = H() | 0 | c3 & -15728641;
              g3 = (15 - e3 | 0) * 3 | 0;
              h2 = Rd(7, 0, g3 | 0) | 0;
              i2 = H() | 0;
              d3 = d3 | a3 | h2;
              f3 = f3 | i2;
              j2 = Qd(a3 | 0, c3 | 0, g3 | 0) | 0;
              H() | 0;
              j2 = j2 & 7;
              e3 = e3 + -1 | 0;
              if (j2 >>> 0 < 6) {
                break;
              }
              if (!e3) {
                k2 = 4;
                break;
              } else {
                c3 = f3;
                a3 = d3;
              }
            }
            if ((k2 | 0) == 4) {
              d3 = Qd(d3 | 0, f3 | 0, 45) | 0;
              H() | 0;
              break;
            }
            l2 = (j2 | 0) == 0 & (Hb(d3, f3) | 0) != 0;
            l2 = Rd((l2 ? 2 : 1) + j2 | 0, 0, g3 | 0) | 0;
            k2 = H() | 0 | c3 & ~i2;
            l2 = l2 | a3 & ~h2;
            G2(k2 | 0);
            T3 = m2;
            return l2 | 0;
          }
        } while (0);
        d3 = d3 & 127;
        if (d3 >>> 0 > 120) {
          k2 = 0;
          l2 = 0;
          G2(k2 | 0);
          T3 = m2;
          return l2 | 0;
        }
        Eb(l2, 0, d3 + 1 | 0, 0);
        k2 = b[l2 + 4 >> 2] | 0;
        l2 = b[l2 >> 2] | 0;
        G2(k2 | 0);
        T3 = m2;
        return l2 | 0;
      }
      function Tc(a3, c3, d3, e3, f3, g3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0;
        r3 = T3;
        T3 = T3 + 160 | 0;
        m2 = r3 + 80 | 0;
        i2 = r3 + 64 | 0;
        n2 = r3 + 112 | 0;
        q3 = r3;
        Qc(m2, a3, c3, d3);
        k2 = m2;
        fc(i2, b[k2 >> 2] | 0, b[k2 + 4 >> 2] | 0, c3);
        k2 = i2;
        j2 = b[k2 >> 2] | 0;
        k2 = b[k2 + 4 >> 2] | 0;
        h2 = b[m2 + 8 >> 2] | 0;
        o2 = n2 + 4 | 0;
        b[o2 >> 2] = b[m2 >> 2];
        b[o2 + 4 >> 2] = b[m2 + 4 >> 2];
        b[o2 + 8 >> 2] = b[m2 + 8 >> 2];
        b[o2 + 12 >> 2] = b[m2 + 12 >> 2];
        b[o2 + 16 >> 2] = b[m2 + 16 >> 2];
        b[o2 + 20 >> 2] = b[m2 + 20 >> 2];
        b[o2 + 24 >> 2] = b[m2 + 24 >> 2];
        b[o2 + 28 >> 2] = b[m2 + 28 >> 2];
        o2 = q3;
        b[o2 >> 2] = j2;
        b[o2 + 4 >> 2] = k2;
        o2 = q3 + 8 | 0;
        b[o2 >> 2] = h2;
        a3 = q3 + 12 | 0;
        c3 = n2;
        d3 = a3 + 36 | 0;
        do {
          b[a3 >> 2] = b[c3 >> 2];
          a3 = a3 + 4 | 0;
          c3 = c3 + 4 | 0;
        } while ((a3 | 0) < (d3 | 0));
        n2 = q3 + 48 | 0;
        b[n2 >> 2] = b[i2 >> 2];
        b[n2 + 4 >> 2] = b[i2 + 4 >> 2];
        b[n2 + 8 >> 2] = b[i2 + 8 >> 2];
        b[n2 + 12 >> 2] = b[i2 + 12 >> 2];
        if ((j2 | 0) == 0 & (k2 | 0) == 0) {
          q3 = h2;
          T3 = r3;
          return q3 | 0;
        }
        d3 = q3 + 16 | 0;
        l2 = q3 + 24 | 0;
        m2 = q3 + 28 | 0;
        h2 = 0;
        i2 = 0;
        c3 = j2;
        a3 = k2;
        do {
          if (!((h2 | 0) < (f3 | 0) | (h2 | 0) == (f3 | 0) & i2 >>> 0 < e3 >>> 0)) {
            p3 = 4;
            break;
          }
          k2 = i2;
          i2 = Gd(i2 | 0, h2 | 0, 1, 0) | 0;
          h2 = H() | 0;
          k2 = g3 + (k2 << 3) | 0;
          b[k2 >> 2] = c3;
          b[k2 + 4 >> 2] = a3;
          hc(n2);
          a3 = n2;
          c3 = b[a3 >> 2] | 0;
          a3 = b[a3 + 4 >> 2] | 0;
          if ((c3 | 0) == 0 & (a3 | 0) == 0) {
            Rc(d3);
            c3 = d3;
            a3 = b[c3 >> 2] | 0;
            c3 = b[c3 + 4 >> 2] | 0;
            if ((a3 | 0) == 0 & (c3 | 0) == 0) {
              p3 = 10;
              break;
            }
            gc(a3, c3, b[m2 >> 2] | 0, n2);
            a3 = n2;
            c3 = b[a3 >> 2] | 0;
            a3 = b[a3 + 4 >> 2] | 0;
          }
          k2 = q3;
          b[k2 >> 2] = c3;
          b[k2 + 4 >> 2] = a3;
        } while (!((c3 | 0) == 0 & (a3 | 0) == 0));
        if ((p3 | 0) == 4) {
          a3 = q3 + 40 | 0;
          c3 = b[a3 >> 2] | 0;
          if (c3 | 0) {
            Ed(c3);
          }
          p3 = q3 + 16 | 0;
          b[p3 >> 2] = 0;
          b[p3 + 4 >> 2] = 0;
          b[l2 >> 2] = 0;
          b[q3 + 36 >> 2] = 0;
          b[m2 >> 2] = -1;
          b[q3 + 32 >> 2] = 0;
          b[a3 >> 2] = 0;
          gc(0, 0, 0, n2);
          b[q3 >> 2] = 0;
          b[q3 + 4 >> 2] = 0;
          b[o2 >> 2] = 0;
          q3 = 14;
          T3 = r3;
          return q3 | 0;
        } else if ((p3 | 0) == 10) {
          b[q3 >> 2] = 0;
          b[q3 + 4 >> 2] = 0;
          b[o2 >> 2] = b[l2 >> 2];
        }
        q3 = b[o2 >> 2] | 0;
        T3 = r3;
        return q3 | 0;
      }
      function Uc(c3, d3, f3, g3) {
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0;
        o2 = T3;
        T3 = T3 + 48 | 0;
        l2 = o2 + 32 | 0;
        k2 = o2 + 40 | 0;
        m2 = o2;
        if (!(b[c3 >> 2] | 0)) {
          n2 = g3;
          b[n2 >> 2] = 0;
          b[n2 + 4 >> 2] = 0;
          n2 = 0;
          T3 = o2;
          return n2 | 0;
        }
        Eb(l2, 0, 0, 0);
        j2 = l2;
        h2 = b[j2 >> 2] | 0;
        j2 = b[j2 + 4 >> 2] | 0;
        do {
          if (d3 >>> 0 > 15) {
            n2 = m2;
            b[n2 >> 2] = 0;
            b[n2 + 4 >> 2] = 0;
            b[m2 + 8 >> 2] = 4;
            b[m2 + 12 >> 2] = -1;
            n2 = m2 + 16 | 0;
            f3 = m2 + 29 | 0;
            b[n2 >> 2] = 0;
            b[n2 + 4 >> 2] = 0;
            b[n2 + 8 >> 2] = 0;
            a2[n2 + 12 >> 0] = 0;
            a2[f3 >> 0] = a2[k2 >> 0] | 0;
            a2[f3 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
            a2[f3 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
            f3 = 4;
            n2 = 9;
          } else {
            f3 = Xc(f3) | 0;
            if (f3 | 0) {
              l2 = m2;
              b[l2 >> 2] = 0;
              b[l2 + 4 >> 2] = 0;
              b[m2 + 8 >> 2] = f3;
              b[m2 + 12 >> 2] = -1;
              l2 = m2 + 16 | 0;
              n2 = m2 + 29 | 0;
              b[l2 >> 2] = 0;
              b[l2 + 4 >> 2] = 0;
              b[l2 + 8 >> 2] = 0;
              a2[l2 + 12 >> 0] = 0;
              a2[n2 >> 0] = a2[k2 >> 0] | 0;
              a2[n2 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
              a2[n2 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
              n2 = 9;
              break;
            }
            f3 = Fd((b[c3 + 8 >> 2] | 0) + 1 | 0, 32) | 0;
            if (!f3) {
              n2 = m2;
              b[n2 >> 2] = 0;
              b[n2 + 4 >> 2] = 0;
              b[m2 + 8 >> 2] = 13;
              b[m2 + 12 >> 2] = -1;
              n2 = m2 + 16 | 0;
              f3 = m2 + 29 | 0;
              b[n2 >> 2] = 0;
              b[n2 + 4 >> 2] = 0;
              b[n2 + 8 >> 2] = 0;
              a2[n2 + 12 >> 0] = 0;
              a2[f3 >> 0] = a2[k2 >> 0] | 0;
              a2[f3 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
              a2[f3 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
              f3 = 13;
              n2 = 9;
              break;
            }
            Yc(c3, f3);
            r3 = m2;
            b[r3 >> 2] = h2;
            b[r3 + 4 >> 2] = j2;
            j2 = m2 + 8 | 0;
            b[j2 >> 2] = 0;
            b[m2 + 12 >> 2] = d3;
            b[m2 + 20 >> 2] = c3;
            b[m2 + 24 >> 2] = f3;
            a2[m2 + 28 >> 0] = 0;
            h2 = m2 + 29 | 0;
            a2[h2 >> 0] = a2[k2 >> 0] | 0;
            a2[h2 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
            a2[h2 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
            b[m2 + 16 >> 2] = 3;
            p3 = +Ba(f3);
            p3 = p3 * +za(f3);
            i2 = +q2(+ +e2[f3 >> 3]);
            i2 = p3 / +t2(+ +Ud(+i2, + +q2(+ +e2[f3 + 8 >> 3]))) * 6371.007180918475 * 6371.007180918475;
            h2 = m2 + 12 | 0;
            f3 = b[h2 >> 2] | 0;
            a:
              do {
                if ((f3 | 0) > 0) {
                  do {
                    qc(f3 + -1 | 0, l2) | 0;
                    if (!(i2 / +e2[l2 >> 3] > 10)) {
                      break a;
                    }
                    r3 = b[h2 >> 2] | 0;
                    f3 = r3 + -1 | 0;
                    b[h2 >> 2] = f3;
                  } while ((r3 | 0) > 1);
                }
              } while (0);
            Rc(m2);
            h2 = g3;
            b[h2 >> 2] = 0;
            b[h2 + 4 >> 2] = 0;
            h2 = m2;
            f3 = b[h2 >> 2] | 0;
            h2 = b[h2 + 4 >> 2] | 0;
            if (!((f3 | 0) == 0 & (h2 | 0) == 0)) {
              do {
                Gb(f3, h2, d3, l2) | 0;
                k2 = l2;
                c3 = g3;
                k2 = Gd(b[c3 >> 2] | 0, b[c3 + 4 >> 2] | 0, b[k2 >> 2] | 0, b[k2 + 4 >> 2] | 0) | 0;
                c3 = H() | 0;
                r3 = g3;
                b[r3 >> 2] = k2;
                b[r3 + 4 >> 2] = c3;
                Rc(m2);
                r3 = m2;
                f3 = b[r3 >> 2] | 0;
                h2 = b[r3 + 4 >> 2] | 0;
              } while (!((f3 | 0) == 0 & (h2 | 0) == 0));
            }
            f3 = b[j2 >> 2] | 0;
          }
        } while (0);
        r3 = f3;
        T3 = o2;
        return r3 | 0;
      }
      function Vc(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0;
        if (!(Ca(c3, d3) | 0)) {
          o2 = 0;
          return o2 | 0;
        }
        c3 = Aa(c3) | 0;
        f3 = +e2[d3 >> 3];
        g3 = +e2[d3 + 8 >> 3];
        g3 = c3 & g3 < 0 ? g3 + 6.283185307179586 : g3;
        o2 = b[a3 >> 2] | 0;
        if ((o2 | 0) <= 0) {
          o2 = 0;
          return o2 | 0;
        }
        n2 = b[a3 + 4 >> 2] | 0;
        if (c3) {
          c3 = 0;
          m2 = g3;
          d3 = -1;
          a3 = 0;
          a:
            while (1) {
              l2 = a3;
              while (1) {
                i2 = +e2[n2 + (l2 << 4) >> 3];
                g3 = +e2[n2 + (l2 << 4) + 8 >> 3];
                a3 = (d3 + 2 | 0) % (o2 | 0) | 0;
                h2 = +e2[n2 + (a3 << 4) >> 3];
                j2 = +e2[n2 + (a3 << 4) + 8 >> 3];
                if (i2 > h2) {
                  k2 = i2;
                  i2 = j2;
                } else {
                  k2 = h2;
                  h2 = i2;
                  i2 = g3;
                  g3 = j2;
                }
                f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
                if (!(f3 < h2 | f3 > k2)) {
                  break;
                }
                d3 = l2 + 1 | 0;
                if ((d3 | 0) >= (o2 | 0)) {
                  d3 = 22;
                  break a;
                } else {
                  a3 = l2;
                  l2 = d3;
                  d3 = a3;
                }
              }
              j2 = i2 < 0 ? i2 + 6.283185307179586 : i2;
              i2 = g3 < 0 ? g3 + 6.283185307179586 : g3;
              m2 = j2 == m2 | i2 == m2 ? m2 + -2220446049250313e-31 : m2;
              k2 = j2 + (i2 - j2) * ((f3 - h2) / (k2 - h2));
              if ((k2 < 0 ? k2 + 6.283185307179586 : k2) > m2) {
                c3 = c3 ^ 1;
              }
              a3 = l2 + 1 | 0;
              if ((a3 | 0) >= (o2 | 0)) {
                d3 = 22;
                break;
              } else {
                d3 = l2;
              }
            }
          if ((d3 | 0) == 22) {
            return c3 | 0;
          }
        } else {
          c3 = 0;
          m2 = g3;
          d3 = -1;
          a3 = 0;
          b:
            while (1) {
              l2 = a3;
              while (1) {
                i2 = +e2[n2 + (l2 << 4) >> 3];
                g3 = +e2[n2 + (l2 << 4) + 8 >> 3];
                a3 = (d3 + 2 | 0) % (o2 | 0) | 0;
                h2 = +e2[n2 + (a3 << 4) >> 3];
                j2 = +e2[n2 + (a3 << 4) + 8 >> 3];
                if (i2 > h2) {
                  k2 = i2;
                  i2 = j2;
                } else {
                  k2 = h2;
                  h2 = i2;
                  i2 = g3;
                  g3 = j2;
                }
                f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
                if (!(f3 < h2 | f3 > k2)) {
                  break;
                }
                d3 = l2 + 1 | 0;
                if ((d3 | 0) >= (o2 | 0)) {
                  d3 = 22;
                  break b;
                } else {
                  a3 = l2;
                  l2 = d3;
                  d3 = a3;
                }
              }
              m2 = i2 == m2 | g3 == m2 ? m2 + -2220446049250313e-31 : m2;
              if (i2 + (g3 - i2) * ((f3 - h2) / (k2 - h2)) > m2) {
                c3 = c3 ^ 1;
              }
              a3 = l2 + 1 | 0;
              if ((a3 | 0) >= (o2 | 0)) {
                d3 = 22;
                break;
              } else {
                d3 = l2;
              }
            }
          if ((d3 | 0) == 22) {
            return c3 | 0;
          }
        }
        return 0;
      }
      function Wc(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0;
        r3 = b[a3 >> 2] | 0;
        if (!r3) {
          b[c3 >> 2] = 0;
          b[c3 + 4 >> 2] = 0;
          b[c3 + 8 >> 2] = 0;
          b[c3 + 12 >> 2] = 0;
          b[c3 + 16 >> 2] = 0;
          b[c3 + 20 >> 2] = 0;
          b[c3 + 24 >> 2] = 0;
          b[c3 + 28 >> 2] = 0;
          return;
        }
        s3 = c3 + 8 | 0;
        e2[s3 >> 3] = 17976931348623157e292;
        t3 = c3 + 24 | 0;
        e2[t3 >> 3] = 17976931348623157e292;
        e2[c3 >> 3] = -17976931348623157e292;
        u3 = c3 + 16 | 0;
        e2[u3 >> 3] = -17976931348623157e292;
        if ((r3 | 0) <= 0) {
          return;
        }
        o2 = b[a3 + 4 >> 2] | 0;
        l2 = 17976931348623157e292;
        m2 = -17976931348623157e292;
        n2 = 0;
        a3 = -1;
        h2 = 17976931348623157e292;
        i2 = 17976931348623157e292;
        k2 = -17976931348623157e292;
        f3 = -17976931348623157e292;
        p3 = 0;
        while (1) {
          d3 = +e2[o2 + (p3 << 4) >> 3];
          j2 = +e2[o2 + (p3 << 4) + 8 >> 3];
          a3 = a3 + 2 | 0;
          g3 = +e2[o2 + (((a3 | 0) == (r3 | 0) ? 0 : a3) << 4) + 8 >> 3];
          if (d3 < h2) {
            e2[s3 >> 3] = d3;
            h2 = d3;
          }
          if (j2 < i2) {
            e2[t3 >> 3] = j2;
            i2 = j2;
          }
          if (d3 > k2) {
            e2[c3 >> 3] = d3;
          } else {
            d3 = k2;
          }
          if (j2 > f3) {
            e2[u3 >> 3] = j2;
            f3 = j2;
          }
          l2 = j2 > 0 & j2 < l2 ? j2 : l2;
          m2 = j2 < 0 & j2 > m2 ? j2 : m2;
          n2 = n2 | +q2(+(j2 - g3)) > 3.141592653589793;
          a3 = p3 + 1 | 0;
          if ((a3 | 0) == (r3 | 0)) {
            break;
          } else {
            v3 = p3;
            k2 = d3;
            p3 = a3;
            a3 = v3;
          }
        }
        if (!n2) {
          return;
        }
        e2[u3 >> 3] = m2;
        e2[t3 >> 3] = l2;
        return;
      }
      function Xc(a3) {
        a3 = a3 | 0;
        return (a3 >>> 0 < 4 ? 0 : 15) | 0;
      }
      function Yc(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0;
        r3 = b[a3 >> 2] | 0;
        if (r3) {
          s3 = c3 + 8 | 0;
          e2[s3 >> 3] = 17976931348623157e292;
          t3 = c3 + 24 | 0;
          e2[t3 >> 3] = 17976931348623157e292;
          e2[c3 >> 3] = -17976931348623157e292;
          u3 = c3 + 16 | 0;
          e2[u3 >> 3] = -17976931348623157e292;
          if ((r3 | 0) > 0) {
            g3 = b[a3 + 4 >> 2] | 0;
            o2 = 17976931348623157e292;
            p3 = -17976931348623157e292;
            f3 = 0;
            d3 = -1;
            k2 = 17976931348623157e292;
            l2 = 17976931348623157e292;
            n2 = -17976931348623157e292;
            i2 = -17976931348623157e292;
            v3 = 0;
            while (1) {
              h2 = +e2[g3 + (v3 << 4) >> 3];
              m2 = +e2[g3 + (v3 << 4) + 8 >> 3];
              z3 = d3 + 2 | 0;
              j2 = +e2[g3 + (((z3 | 0) == (r3 | 0) ? 0 : z3) << 4) + 8 >> 3];
              if (h2 < k2) {
                e2[s3 >> 3] = h2;
                k2 = h2;
              }
              if (m2 < l2) {
                e2[t3 >> 3] = m2;
                l2 = m2;
              }
              if (h2 > n2) {
                e2[c3 >> 3] = h2;
              } else {
                h2 = n2;
              }
              if (m2 > i2) {
                e2[u3 >> 3] = m2;
                i2 = m2;
              }
              o2 = m2 > 0 & m2 < o2 ? m2 : o2;
              p3 = m2 < 0 & m2 > p3 ? m2 : p3;
              f3 = f3 | +q2(+(m2 - j2)) > 3.141592653589793;
              d3 = v3 + 1 | 0;
              if ((d3 | 0) == (r3 | 0)) {
                break;
              } else {
                z3 = v3;
                n2 = h2;
                v3 = d3;
                d3 = z3;
              }
            }
            if (f3) {
              e2[u3 >> 3] = p3;
              e2[t3 >> 3] = o2;
            }
          }
        } else {
          b[c3 >> 2] = 0;
          b[c3 + 4 >> 2] = 0;
          b[c3 + 8 >> 2] = 0;
          b[c3 + 12 >> 2] = 0;
          b[c3 + 16 >> 2] = 0;
          b[c3 + 20 >> 2] = 0;
          b[c3 + 24 >> 2] = 0;
          b[c3 + 28 >> 2] = 0;
        }
        z3 = a3 + 8 | 0;
        d3 = b[z3 >> 2] | 0;
        if ((d3 | 0) <= 0) {
          return;
        }
        y3 = a3 + 12 | 0;
        x3 = 0;
        do {
          g3 = b[y3 >> 2] | 0;
          f3 = x3;
          x3 = x3 + 1 | 0;
          t3 = c3 + (x3 << 5) | 0;
          u3 = b[g3 + (f3 << 3) >> 2] | 0;
          if (u3) {
            v3 = c3 + (x3 << 5) + 8 | 0;
            e2[v3 >> 3] = 17976931348623157e292;
            a3 = c3 + (x3 << 5) + 24 | 0;
            e2[a3 >> 3] = 17976931348623157e292;
            e2[t3 >> 3] = -17976931348623157e292;
            w5 = c3 + (x3 << 5) + 16 | 0;
            e2[w5 >> 3] = -17976931348623157e292;
            if ((u3 | 0) > 0) {
              r3 = b[g3 + (f3 << 3) + 4 >> 2] | 0;
              o2 = 17976931348623157e292;
              p3 = -17976931348623157e292;
              g3 = 0;
              f3 = -1;
              s3 = 0;
              k2 = 17976931348623157e292;
              l2 = 17976931348623157e292;
              m2 = -17976931348623157e292;
              i2 = -17976931348623157e292;
              while (1) {
                h2 = +e2[r3 + (s3 << 4) >> 3];
                n2 = +e2[r3 + (s3 << 4) + 8 >> 3];
                f3 = f3 + 2 | 0;
                j2 = +e2[r3 + (((f3 | 0) == (u3 | 0) ? 0 : f3) << 4) + 8 >> 3];
                if (h2 < k2) {
                  e2[v3 >> 3] = h2;
                  k2 = h2;
                }
                if (n2 < l2) {
                  e2[a3 >> 3] = n2;
                  l2 = n2;
                }
                if (h2 > m2) {
                  e2[t3 >> 3] = h2;
                } else {
                  h2 = m2;
                }
                if (n2 > i2) {
                  e2[w5 >> 3] = n2;
                  i2 = n2;
                }
                o2 = n2 > 0 & n2 < o2 ? n2 : o2;
                p3 = n2 < 0 & n2 > p3 ? n2 : p3;
                g3 = g3 | +q2(+(n2 - j2)) > 3.141592653589793;
                f3 = s3 + 1 | 0;
                if ((f3 | 0) == (u3 | 0)) {
                  break;
                } else {
                  A3 = s3;
                  s3 = f3;
                  m2 = h2;
                  f3 = A3;
                }
              }
              if (g3) {
                e2[w5 >> 3] = p3;
                e2[a3 >> 3] = o2;
              }
            }
          } else {
            b[t3 >> 2] = 0;
            b[t3 + 4 >> 2] = 0;
            b[t3 + 8 >> 2] = 0;
            b[t3 + 12 >> 2] = 0;
            b[t3 + 16 >> 2] = 0;
            b[t3 + 20 >> 2] = 0;
            b[t3 + 24 >> 2] = 0;
            b[t3 + 28 >> 2] = 0;
            d3 = b[z3 >> 2] | 0;
          }
        } while ((x3 | 0) < (d3 | 0));
        return;
      }
      function Zc(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0;
        if (!(Vc(a3, c3, d3) | 0)) {
          f3 = 0;
          return f3 | 0;
        }
        f3 = a3 + 8 | 0;
        if ((b[f3 >> 2] | 0) <= 0) {
          f3 = 1;
          return f3 | 0;
        }
        e3 = a3 + 12 | 0;
        a3 = 0;
        while (1) {
          g3 = a3;
          a3 = a3 + 1 | 0;
          if (Vc((b[e3 >> 2] | 0) + (g3 << 3) | 0, c3 + (a3 << 5) | 0, d3) | 0) {
            a3 = 0;
            e3 = 6;
            break;
          }
          if ((a3 | 0) >= (b[f3 >> 2] | 0)) {
            a3 = 1;
            e3 = 6;
            break;
          }
        }
        if ((e3 | 0) == 6) {
          return a3 | 0;
        }
        return 0;
      }
      function _c(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        k2 = T3;
        T3 = T3 + 16 | 0;
        i2 = k2;
        h2 = d3 + 8 | 0;
        if (!(Vc(a3, c3, h2) | 0)) {
          j2 = 0;
          T3 = k2;
          return j2 | 0;
        }
        j2 = a3 + 8 | 0;
        a:
          do {
            if ((b[j2 >> 2] | 0) > 0) {
              g3 = a3 + 12 | 0;
              f3 = 0;
              while (1) {
                l2 = f3;
                f3 = f3 + 1 | 0;
                if (Vc((b[g3 >> 2] | 0) + (l2 << 3) | 0, c3 + (f3 << 5) | 0, h2) | 0) {
                  f3 = 0;
                  break;
                }
                if ((f3 | 0) >= (b[j2 >> 2] | 0)) {
                  break a;
                }
              }
              T3 = k2;
              return f3 | 0;
            }
          } while (0);
        if ($c(a3, c3, d3, e3) | 0) {
          l2 = 0;
          T3 = k2;
          return l2 | 0;
        }
        b[i2 >> 2] = b[d3 >> 2];
        b[i2 + 4 >> 2] = h2;
        f3 = b[j2 >> 2] | 0;
        b:
          do {
            if ((f3 | 0) > 0) {
              a3 = a3 + 12 | 0;
              h2 = 0;
              g3 = f3;
              while (1) {
                f3 = b[a3 >> 2] | 0;
                if ((b[f3 + (h2 << 3) >> 2] | 0) > 0) {
                  if (Vc(i2, e3, b[f3 + (h2 << 3) + 4 >> 2] | 0) | 0) {
                    f3 = 0;
                    break b;
                  }
                  f3 = h2 + 1 | 0;
                  if ($c((b[a3 >> 2] | 0) + (h2 << 3) | 0, c3 + (f3 << 5) | 0, d3, e3) | 0) {
                    f3 = 0;
                    break b;
                  }
                  g3 = b[j2 >> 2] | 0;
                } else {
                  f3 = h2 + 1 | 0;
                }
                if ((f3 | 0) < (g3 | 0)) {
                  h2 = f3;
                } else {
                  f3 = 1;
                  break;
                }
              }
            } else {
              f3 = 1;
            }
          } while (0);
        l2 = f3;
        T3 = k2;
        return l2 | 0;
      }
      function $c(a3, c3, d3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A3 = 0;
        y3 = T3;
        T3 = T3 + 176 | 0;
        u3 = y3 + 172 | 0;
        g3 = y3 + 168 | 0;
        v3 = y3;
        if (!(Da(c3, f3) | 0)) {
          a3 = 0;
          T3 = y3;
          return a3 | 0;
        }
        Ea(c3, f3, u3, g3);
        Wd(v3 | 0, d3 | 0, 168) | 0;
        if ((b[d3 >> 2] | 0) > 0) {
          c3 = 0;
          do {
            z3 = v3 + 8 + (c3 << 4) + 8 | 0;
            t3 = +kc(+e2[z3 >> 3], b[g3 >> 2] | 0);
            e2[z3 >> 3] = t3;
            c3 = c3 + 1 | 0;
          } while ((c3 | 0) < (b[d3 >> 2] | 0));
        }
        r3 = +e2[f3 >> 3];
        s3 = +e2[f3 + 8 >> 3];
        t3 = +kc(+e2[f3 + 16 >> 3], b[g3 >> 2] | 0);
        p3 = +kc(+e2[f3 + 24 >> 3], b[g3 >> 2] | 0);
        a:
          do {
            if ((b[a3 >> 2] | 0) > 0) {
              f3 = a3 + 4 | 0;
              g3 = b[v3 >> 2] | 0;
              if ((g3 | 0) <= 0) {
                c3 = 0;
                while (1) {
                  c3 = c3 + 1 | 0;
                  if ((c3 | 0) >= (b[a3 >> 2] | 0)) {
                    c3 = 0;
                    break a;
                  }
                }
              }
              d3 = 0;
              while (1) {
                c3 = b[f3 >> 2] | 0;
                o2 = +e2[c3 + (d3 << 4) >> 3];
                q3 = +kc(+e2[c3 + (d3 << 4) + 8 >> 3], b[u3 >> 2] | 0);
                c3 = b[f3 >> 2] | 0;
                d3 = d3 + 1 | 0;
                z3 = (d3 | 0) % (b[a3 >> 2] | 0) | 0;
                h2 = +e2[c3 + (z3 << 4) >> 3];
                i2 = +kc(+e2[c3 + (z3 << 4) + 8 >> 3], b[u3 >> 2] | 0);
                if (((!(o2 >= r3) | !(h2 >= r3) ? !(o2 <= s3) | !(h2 <= s3) : 0) ? !(q3 <= p3) | !(i2 <= p3) : 0) ? !(q3 >= t3) | !(i2 >= t3) : 0) {
                  n2 = h2 - o2;
                  l2 = i2 - q3;
                  c3 = 0;
                  do {
                    A3 = c3;
                    c3 = c3 + 1 | 0;
                    z3 = (c3 | 0) == (g3 | 0) ? 0 : c3;
                    h2 = +e2[v3 + 8 + (A3 << 4) + 8 >> 3];
                    i2 = +e2[v3 + 8 + (z3 << 4) + 8 >> 3] - h2;
                    j2 = +e2[v3 + 8 + (A3 << 4) >> 3];
                    k2 = +e2[v3 + 8 + (z3 << 4) >> 3] - j2;
                    m2 = n2 * i2 - l2 * k2;
                    if ((m2 != 0 ? (w5 = q3 - h2, x3 = o2 - j2, k2 = (w5 * k2 - i2 * x3) / m2, !(k2 < 0 | k2 > 1)) : 0) ? (m2 = (n2 * w5 - l2 * x3) / m2, m2 >= 0 & m2 <= 1) : 0) {
                      c3 = 1;
                      break a;
                    }
                  } while ((c3 | 0) < (g3 | 0));
                }
                if ((d3 | 0) >= (b[a3 >> 2] | 0)) {
                  c3 = 0;
                  break;
                }
              }
            } else {
              c3 = 0;
            }
          } while (0);
        A3 = c3;
        T3 = y3;
        return A3 | 0;
      }
      function ad(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        if ($c(a3, c3, d3, e3) | 0) {
          g3 = 1;
          return g3 | 0;
        }
        g3 = a3 + 8 | 0;
        if ((b[g3 >> 2] | 0) <= 0) {
          g3 = 0;
          return g3 | 0;
        }
        f3 = a3 + 12 | 0;
        a3 = 0;
        while (1) {
          h2 = a3;
          a3 = a3 + 1 | 0;
          if ($c((b[f3 >> 2] | 0) + (h2 << 3) | 0, c3 + (a3 << 5) | 0, d3, e3) | 0) {
            a3 = 1;
            f3 = 6;
            break;
          }
          if ((a3 | 0) >= (b[g3 >> 2] | 0)) {
            a3 = 0;
            f3 = 6;
            break;
          }
        }
        if ((f3 | 0) == 6) {
          return a3 | 0;
        }
        return 0;
      }
      function bd() {
        return 8;
      }
      function cd() {
        return 16;
      }
      function dd() {
        return 168;
      }
      function ed() {
        return 8;
      }
      function fd() {
        return 16;
      }
      function gd() {
        return 12;
      }
      function hd() {
        return 8;
      }
      function id(a3) {
        a3 = a3 | 0;
        return +(+((b[a3 >> 2] | 0) >>> 0) + 4294967296 * +(b[a3 + 4 >> 2] | 0));
      }
      function jd(a3) {
        a3 = a3 | 0;
        var b2 = 0, c3 = 0;
        c3 = +e2[a3 >> 3];
        b2 = +e2[a3 + 8 >> 3];
        return + +r2(+(c3 * c3 + b2 * b2));
      }
      function kd(a3, b2, c3, d3, f3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        k2 = +e2[a3 >> 3];
        j2 = +e2[b2 >> 3] - k2;
        i2 = +e2[a3 + 8 >> 3];
        h2 = +e2[b2 + 8 >> 3] - i2;
        m2 = +e2[c3 >> 3];
        g3 = +e2[d3 >> 3] - m2;
        n2 = +e2[c3 + 8 >> 3];
        l2 = +e2[d3 + 8 >> 3] - n2;
        g3 = (g3 * (i2 - n2) - (k2 - m2) * l2) / (j2 * l2 - h2 * g3);
        e2[f3 >> 3] = k2 + j2 * g3;
        e2[f3 + 8 >> 3] = i2 + h2 * g3;
        return;
      }
      function ld(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (!(+q2(+(+e2[a3 >> 3] - +e2[b2 >> 3])) < 11920928955078125e-23)) {
          b2 = 0;
          return b2 | 0;
        }
        b2 = +q2(+(+e2[a3 + 8 >> 3] - +e2[b2 + 8 >> 3])) < 11920928955078125e-23;
        return b2 | 0;
      }
      function md(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0;
        f3 = +e2[a3 >> 3] - +e2[b2 >> 3];
        d3 = +e2[a3 + 8 >> 3] - +e2[b2 + 8 >> 3];
        c3 = +e2[a3 + 16 >> 3] - +e2[b2 + 16 >> 3];
        return +(f3 * f3 + d3 * d3 + c3 * c3);
      }
      function nd(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, f3 = 0;
        c3 = +e2[a3 >> 3];
        d3 = +t2(+c3);
        c3 = +u2(+c3);
        e2[b2 + 16 >> 3] = c3;
        c3 = +e2[a3 + 8 >> 3];
        f3 = d3 * +t2(+c3);
        e2[b2 >> 3] = f3;
        c3 = d3 * +u2(+c3);
        e2[b2 + 8 >> 3] = c3;
        return;
      }
      function od(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0;
        g3 = T3;
        T3 = T3 + 16 | 0;
        f3 = g3;
        e3 = Hb(a3, c3) | 0;
        if ((d3 + -1 | 0) >>> 0 > 5) {
          f3 = -1;
          T3 = g3;
          return f3 | 0;
        }
        e3 = (e3 | 0) != 0;
        if ((d3 | 0) == 1 & e3) {
          f3 = -1;
          T3 = g3;
          return f3 | 0;
        }
        do {
          if (!(pd(a3, c3, f3) | 0)) {
            if (e3) {
              e3 = ((b[26352 + (d3 << 2) >> 2] | 0) + 5 - (b[f3 >> 2] | 0) | 0) % 5 | 0;
              break;
            } else {
              e3 = ((b[26384 + (d3 << 2) >> 2] | 0) + 6 - (b[f3 >> 2] | 0) | 0) % 6 | 0;
              break;
            }
          } else {
            e3 = -1;
          }
        } while (0);
        f3 = e3;
        T3 = g3;
        return f3 | 0;
      }
      function pd(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        k2 = T3;
        T3 = T3 + 32 | 0;
        h2 = k2 + 16 | 0;
        i2 = k2;
        e3 = Yb(a3, c3, h2) | 0;
        if (e3 | 0) {
          d3 = e3;
          T3 = k2;
          return d3 | 0;
        }
        g3 = Cb(a3, c3) | 0;
        j2 = Pb(a3, c3) | 0;
        sa(g3, i2);
        e3 = ta(g3, b[h2 >> 2] | 0) | 0;
        a:
          do {
            if (oa(g3) | 0) {
              do {
                switch (g3 | 0) {
                  case 4: {
                    a3 = 0;
                    break;
                  }
                  case 14: {
                    a3 = 1;
                    break;
                  }
                  case 24: {
                    a3 = 2;
                    break;
                  }
                  case 38: {
                    a3 = 3;
                    break;
                  }
                  case 49: {
                    a3 = 4;
                    break;
                  }
                  case 58: {
                    a3 = 5;
                    break;
                  }
                  case 63: {
                    a3 = 6;
                    break;
                  }
                  case 72: {
                    a3 = 7;
                    break;
                  }
                  case 83: {
                    a3 = 8;
                    break;
                  }
                  case 97: {
                    a3 = 9;
                    break;
                  }
                  case 107: {
                    a3 = 10;
                    break;
                  }
                  case 117: {
                    a3 = 11;
                    break;
                  }
                  default: {
                    e3 = 1;
                    break a;
                  }
                }
              } while (0);
              f3 = b[26416 + (a3 * 24 | 0) + 8 >> 2] | 0;
              c3 = b[26416 + (a3 * 24 | 0) + 16 >> 2] | 0;
              a3 = b[h2 >> 2] | 0;
              if ((a3 | 0) != (b[i2 >> 2] | 0)) {
                i2 = pa(g3) | 0;
                a3 = b[h2 >> 2] | 0;
                if (i2 | (a3 | 0) == (c3 | 0)) {
                  e3 = (e3 + 1 | 0) % 6 | 0;
                }
              }
              if ((j2 | 0) == 3 & (a3 | 0) == (c3 | 0)) {
                e3 = (e3 + 5 | 0) % 6 | 0;
                f3 = 22;
                break;
              }
              if ((j2 | 0) == 5 & (a3 | 0) == (f3 | 0)) {
                e3 = (e3 + 1 | 0) % 6 | 0;
                f3 = 22;
              } else {
                f3 = 22;
              }
            } else {
              f3 = 22;
            }
          } while (0);
        if ((f3 | 0) == 22) {
          b[d3 >> 2] = e3;
          e3 = 0;
        }
        d3 = e3;
        T3 = k2;
        return d3 | 0;
      }
      function qd(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0;
        u3 = T3;
        T3 = T3 + 32 | 0;
        t3 = u3 + 24 | 0;
        r3 = u3 + 20 | 0;
        p3 = u3 + 8 | 0;
        o2 = u3 + 16 | 0;
        n2 = u3;
        j2 = (Hb(a3, c3) | 0) == 0;
        j2 = j2 ? 6 : 5;
        l2 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        l2 = l2 & 15;
        if (j2 >>> 0 <= d3 >>> 0) {
          e3 = 2;
          T3 = u3;
          return e3 | 0;
        }
        m2 = (l2 | 0) == 0;
        if (!m2 ? (q3 = Rd(7, 0, (l2 ^ 15) * 3 | 0) | 0, (q3 & a3 | 0) == 0 & ((H() | 0) & c3 | 0) == 0) : 0) {
          f3 = d3;
        } else {
          g3 = 4;
        }
        a:
          do {
            if ((g3 | 0) == 4) {
              f3 = (Hb(a3, c3) | 0) != 0;
              if (((f3 ? 4 : 5) | 0) < (d3 | 0)) {
                e3 = 1;
                T3 = u3;
                return e3 | 0;
              }
              if (pd(a3, c3, t3) | 0) {
                e3 = 1;
                T3 = u3;
                return e3 | 0;
              }
              g3 = (b[t3 >> 2] | 0) + d3 | 0;
              if (f3) {
                f3 = 26704 + (((g3 | 0) % 5 | 0) << 2) | 0;
              } else {
                f3 = 26736 + (((g3 | 0) % 6 | 0) << 2) | 0;
              }
              q3 = b[f3 >> 2] | 0;
              if ((q3 | 0) == 7) {
                e3 = 1;
                T3 = u3;
                return e3 | 0;
              }
              b[r3 >> 2] = 0;
              f3 = ea(a3, c3, q3, r3, p3) | 0;
              do {
                if (!f3) {
                  i2 = p3;
                  k2 = b[i2 >> 2] | 0;
                  i2 = b[i2 + 4 >> 2] | 0;
                  h2 = i2 >>> 0 < c3 >>> 0 | (i2 | 0) == (c3 | 0) & k2 >>> 0 < a3 >>> 0;
                  g3 = h2 ? k2 : a3;
                  h2 = h2 ? i2 : c3;
                  if (!m2 ? (m2 = Rd(7, 0, (l2 ^ 15) * 3 | 0) | 0, (k2 & m2 | 0) == 0 & (i2 & (H() | 0) | 0) == 0) : 0) {
                    f3 = d3;
                  } else {
                    i2 = (d3 + -1 + j2 | 0) % (j2 | 0) | 0;
                    f3 = Hb(a3, c3) | 0;
                    if ((i2 | 0) < 0) {
                      I2(27795, 27797, 246, 27806);
                    }
                    j2 = (f3 | 0) != 0;
                    if (((j2 ? 4 : 5) | 0) < (i2 | 0)) {
                      I2(27795, 27797, 246, 27806);
                    }
                    if (pd(a3, c3, t3) | 0) {
                      I2(27795, 27797, 246, 27806);
                    }
                    f3 = (b[t3 >> 2] | 0) + i2 | 0;
                    if (j2) {
                      f3 = 26704 + (((f3 | 0) % 5 | 0) << 2) | 0;
                    } else {
                      f3 = 26736 + (((f3 | 0) % 6 | 0) << 2) | 0;
                    }
                    i2 = b[f3 >> 2] | 0;
                    if ((i2 | 0) == 7) {
                      I2(27795, 27797, 246, 27806);
                    }
                    b[o2 >> 2] = 0;
                    f3 = ea(a3, c3, i2, o2, n2) | 0;
                    if (f3 | 0) {
                      break;
                    }
                    k2 = n2;
                    j2 = b[k2 >> 2] | 0;
                    k2 = b[k2 + 4 >> 2] | 0;
                    do {
                      if (k2 >>> 0 < h2 >>> 0 | (k2 | 0) == (h2 | 0) & j2 >>> 0 < g3 >>> 0) {
                        if (!(Hb(j2, k2) | 0)) {
                          g3 = b[26800 + ((((b[o2 >> 2] | 0) + (b[26768 + (i2 << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                        } else {
                          g3 = ia(j2, k2, a3, c3) | 0;
                        }
                        f3 = Hb(j2, k2) | 0;
                        if ((g3 + -1 | 0) >>> 0 > 5) {
                          f3 = -1;
                          g3 = j2;
                          h2 = k2;
                          break;
                        }
                        f3 = (f3 | 0) != 0;
                        if ((g3 | 0) == 1 & f3) {
                          f3 = -1;
                          g3 = j2;
                          h2 = k2;
                          break;
                        }
                        do {
                          if (!(pd(j2, k2, t3) | 0)) {
                            if (f3) {
                              f3 = ((b[26352 + (g3 << 2) >> 2] | 0) + 5 - (b[t3 >> 2] | 0) | 0) % 5 | 0;
                              break;
                            } else {
                              f3 = ((b[26384 + (g3 << 2) >> 2] | 0) + 6 - (b[t3 >> 2] | 0) | 0) % 6 | 0;
                              break;
                            }
                          } else {
                            f3 = -1;
                          }
                        } while (0);
                        g3 = j2;
                        h2 = k2;
                      } else {
                        f3 = d3;
                      }
                    } while (0);
                    i2 = p3;
                    k2 = b[i2 >> 2] | 0;
                    i2 = b[i2 + 4 >> 2] | 0;
                  }
                  if ((g3 | 0) == (k2 | 0) & (h2 | 0) == (i2 | 0)) {
                    j2 = (Hb(k2, i2) | 0) != 0;
                    if (j2) {
                      a3 = ia(k2, i2, a3, c3) | 0;
                    } else {
                      a3 = b[26800 + ((((b[r3 >> 2] | 0) + (b[26768 + (q3 << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                    }
                    f3 = Hb(k2, i2) | 0;
                    if ((a3 + -1 | 0) >>> 0 <= 5 ? (s3 = (f3 | 0) != 0, !((a3 | 0) == 1 & s3)) : 0) {
                      do {
                        if (!(pd(k2, i2, t3) | 0)) {
                          if (s3) {
                            f3 = ((b[26352 + (a3 << 2) >> 2] | 0) + 5 - (b[t3 >> 2] | 0) | 0) % 5 | 0;
                            break;
                          } else {
                            f3 = ((b[26384 + (a3 << 2) >> 2] | 0) + 6 - (b[t3 >> 2] | 0) | 0) % 6 | 0;
                            break;
                          }
                        } else {
                          f3 = -1;
                        }
                      } while (0);
                    } else {
                      f3 = -1;
                    }
                    f3 = f3 + 1 | 0;
                    f3 = (f3 | 0) == 6 | j2 & (f3 | 0) == 5 ? 0 : f3;
                  }
                  c3 = h2;
                  a3 = g3;
                  break a;
                }
              } while (0);
              e3 = f3;
              T3 = u3;
              return e3 | 0;
            }
          } while (0);
        s3 = Rd(f3 | 0, 0, 56) | 0;
        t3 = H() | 0 | c3 & -2130706433 | 536870912;
        b[e3 >> 2] = s3 | a3;
        b[e3 + 4 >> 2] = t3;
        e3 = 0;
        T3 = u3;
        return e3 | 0;
      }
      function rd(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0;
        g3 = (Hb(a3, c3) | 0) == 0;
        e3 = qd(a3, c3, 0, d3) | 0;
        f3 = (e3 | 0) == 0;
        if (g3) {
          if (!f3) {
            g3 = e3;
            return g3 | 0;
          }
          e3 = qd(a3, c3, 1, d3 + 8 | 0) | 0;
          if (e3 | 0) {
            g3 = e3;
            return g3 | 0;
          }
          e3 = qd(a3, c3, 2, d3 + 16 | 0) | 0;
          if (e3 | 0) {
            g3 = e3;
            return g3 | 0;
          }
          e3 = qd(a3, c3, 3, d3 + 24 | 0) | 0;
          if (e3 | 0) {
            g3 = e3;
            return g3 | 0;
          }
          e3 = qd(a3, c3, 4, d3 + 32 | 0) | 0;
          if (!e3) {
            return qd(a3, c3, 5, d3 + 40 | 0) | 0;
          } else {
            g3 = e3;
            return g3 | 0;
          }
        }
        if (!f3) {
          g3 = e3;
          return g3 | 0;
        }
        e3 = qd(a3, c3, 1, d3 + 8 | 0) | 0;
        if (e3 | 0) {
          g3 = e3;
          return g3 | 0;
        }
        e3 = qd(a3, c3, 2, d3 + 16 | 0) | 0;
        if (e3 | 0) {
          g3 = e3;
          return g3 | 0;
        }
        e3 = qd(a3, c3, 3, d3 + 24 | 0) | 0;
        if (e3 | 0) {
          g3 = e3;
          return g3 | 0;
        }
        e3 = qd(a3, c3, 4, d3 + 32 | 0) | 0;
        if (e3 | 0) {
          g3 = e3;
          return g3 | 0;
        }
        g3 = d3 + 40 | 0;
        b[g3 >> 2] = 0;
        b[g3 + 4 >> 2] = 0;
        g3 = 0;
        return g3 | 0;
      }
      function sd(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T3;
        T3 = T3 + 192 | 0;
        f3 = j2;
        g3 = j2 + 168 | 0;
        h2 = Qd(a3 | 0, c3 | 0, 56) | 0;
        H() | 0;
        h2 = h2 & 7;
        i2 = c3 & -2130706433 | 134217728;
        e3 = Yb(a3, i2, g3) | 0;
        if (e3 | 0) {
          i2 = e3;
          T3 = j2;
          return i2 | 0;
        }
        c3 = Qd(a3 | 0, c3 | 0, 52) | 0;
        H() | 0;
        c3 = c3 & 15;
        if (!(Hb(a3, i2) | 0)) {
          zb(g3, c3, h2, 1, f3);
        } else {
          vb(g3, c3, h2, 1, f3);
        }
        i2 = f3 + 8 | 0;
        b[d3 >> 2] = b[i2 >> 2];
        b[d3 + 4 >> 2] = b[i2 + 4 >> 2];
        b[d3 + 8 >> 2] = b[i2 + 8 >> 2];
        b[d3 + 12 >> 2] = b[i2 + 12 >> 2];
        i2 = 0;
        T3 = j2;
        return i2 | 0;
      }
      function td(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, e3 = 0, f3 = 0, g3 = 0;
        f3 = T3;
        T3 = T3 + 16 | 0;
        d3 = f3;
        if (!(true & (c3 & 2013265920 | 0) == 536870912)) {
          e3 = 0;
          T3 = f3;
          return e3 | 0;
        }
        e3 = c3 & -2130706433 | 134217728;
        if (!(Db(a3, e3) | 0)) {
          e3 = 0;
          T3 = f3;
          return e3 | 0;
        }
        g3 = Qd(a3 | 0, c3 | 0, 56) | 0;
        H() | 0;
        g3 = (qd(a3, e3, g3 & 7, d3) | 0) == 0;
        e3 = d3;
        e3 = g3 & ((b[e3 >> 2] | 0) == (a3 | 0) ? (b[e3 + 4 >> 2] | 0) == (c3 | 0) : 0) & 1;
        T3 = f3;
        return e3 | 0;
      }
      function ud(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0;
        if ((c3 | 0) > 0) {
          e3 = Fd(c3, 4) | 0;
          b[a3 >> 2] = e3;
          if (!e3) {
            I2(27819, 27842, 40, 27856);
          }
        } else {
          b[a3 >> 2] = 0;
        }
        b[a3 + 4 >> 2] = c3;
        b[a3 + 8 >> 2] = 0;
        b[a3 + 12 >> 2] = d3;
        return;
      }
      function vd(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        g3 = a3 + 4 | 0;
        h2 = a3 + 12 | 0;
        i2 = a3 + 8 | 0;
        a:
          while (1) {
            d3 = b[g3 >> 2] | 0;
            c3 = 0;
            while (1) {
              if ((c3 | 0) >= (d3 | 0)) {
                break a;
              }
              f3 = b[a3 >> 2] | 0;
              j2 = b[f3 + (c3 << 2) >> 2] | 0;
              if (!j2) {
                c3 = c3 + 1 | 0;
              } else {
                break;
              }
            }
            c3 = f3 + (~~(+q2(+(+s2(10, + +(15 - (b[h2 >> 2] | 0) | 0)) * (+e2[j2 >> 3] + +e2[j2 + 8 >> 3]))) % +(d3 | 0)) >>> 0 << 2) | 0;
            d3 = b[c3 >> 2] | 0;
            b:
              do {
                if (d3 | 0) {
                  f3 = j2 + 32 | 0;
                  if ((d3 | 0) == (j2 | 0)) {
                    b[c3 >> 2] = b[f3 >> 2];
                  } else {
                    d3 = d3 + 32 | 0;
                    c3 = b[d3 >> 2] | 0;
                    if (!c3) {
                      break;
                    }
                    while (1) {
                      if ((c3 | 0) == (j2 | 0)) {
                        break;
                      }
                      d3 = c3 + 32 | 0;
                      c3 = b[d3 >> 2] | 0;
                      if (!c3) {
                        break b;
                      }
                    }
                    b[d3 >> 2] = b[f3 >> 2];
                  }
                  Ed(j2);
                  b[i2 >> 2] = (b[i2 >> 2] | 0) + -1;
                }
              } while (0);
          }
        Ed(b[a3 >> 2] | 0);
        return;
      }
      function wd(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0;
        e3 = b[a3 + 4 >> 2] | 0;
        d3 = 0;
        while (1) {
          if ((d3 | 0) >= (e3 | 0)) {
            c3 = 0;
            d3 = 4;
            break;
          }
          c3 = b[(b[a3 >> 2] | 0) + (d3 << 2) >> 2] | 0;
          if (!c3) {
            d3 = d3 + 1 | 0;
          } else {
            d3 = 4;
            break;
          }
        }
        if ((d3 | 0) == 4) {
          return c3 | 0;
        }
        return 0;
      }
      function xd(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0;
        d3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e2[c3 >> 3] + +e2[c3 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        d3 = (b[a3 >> 2] | 0) + (d3 << 2) | 0;
        f3 = b[d3 >> 2] | 0;
        if (!f3) {
          h2 = 1;
          return h2 | 0;
        }
        h2 = c3 + 32 | 0;
        do {
          if ((f3 | 0) != (c3 | 0)) {
            d3 = b[f3 + 32 >> 2] | 0;
            if (!d3) {
              h2 = 1;
              return h2 | 0;
            }
            g3 = d3;
            while (1) {
              if ((g3 | 0) == (c3 | 0)) {
                g3 = 8;
                break;
              }
              d3 = b[g3 + 32 >> 2] | 0;
              if (!d3) {
                d3 = 1;
                g3 = 10;
                break;
              } else {
                f3 = g3;
                g3 = d3;
              }
            }
            if ((g3 | 0) == 8) {
              b[f3 + 32 >> 2] = b[h2 >> 2];
              break;
            } else if ((g3 | 0) == 10) {
              return d3 | 0;
            }
          } else {
            b[d3 >> 2] = b[h2 >> 2];
          }
        } while (0);
        Ed(c3);
        h2 = a3 + 8 | 0;
        b[h2 >> 2] = (b[h2 >> 2] | 0) + -1;
        h2 = 0;
        return h2 | 0;
      }
      function yd(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = Dd(40) | 0;
        if (!h2) {
          I2(27872, 27842, 98, 27885);
        }
        b[h2 >> 2] = b[c3 >> 2];
        b[h2 + 4 >> 2] = b[c3 + 4 >> 2];
        b[h2 + 8 >> 2] = b[c3 + 8 >> 2];
        b[h2 + 12 >> 2] = b[c3 + 12 >> 2];
        g3 = h2 + 16 | 0;
        b[g3 >> 2] = b[d3 >> 2];
        b[g3 + 4 >> 2] = b[d3 + 4 >> 2];
        b[g3 + 8 >> 2] = b[d3 + 8 >> 2];
        b[g3 + 12 >> 2] = b[d3 + 12 >> 2];
        b[h2 + 32 >> 2] = 0;
        g3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e2[c3 >> 3] + +e2[c3 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        g3 = (b[a3 >> 2] | 0) + (g3 << 2) | 0;
        f3 = b[g3 >> 2] | 0;
        do {
          if (!f3) {
            b[g3 >> 2] = h2;
          } else {
            while (1) {
              if (jc(f3, c3) | 0 ? jc(f3 + 16 | 0, d3) | 0 : 0) {
                break;
              }
              g3 = b[f3 + 32 >> 2] | 0;
              f3 = (g3 | 0) == 0 ? f3 : g3;
              if (!(b[f3 + 32 >> 2] | 0)) {
                i2 = 10;
                break;
              }
            }
            if ((i2 | 0) == 10) {
              b[f3 + 32 >> 2] = h2;
              break;
            }
            Ed(h2);
            i2 = f3;
            return i2 | 0;
          }
        } while (0);
        i2 = a3 + 8 | 0;
        b[i2 >> 2] = (b[i2 >> 2] | 0) + 1;
        i2 = h2;
        return i2 | 0;
      }
      function zd(a3, c3, d3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0;
        g3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e2[c3 >> 3] + +e2[c3 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        g3 = b[(b[a3 >> 2] | 0) + (g3 << 2) >> 2] | 0;
        if (!g3) {
          d3 = 0;
          return d3 | 0;
        }
        if (!d3) {
          a3 = g3;
          while (1) {
            if (jc(a3, c3) | 0) {
              f3 = 10;
              break;
            }
            a3 = b[a3 + 32 >> 2] | 0;
            if (!a3) {
              a3 = 0;
              f3 = 10;
              break;
            }
          }
          if ((f3 | 0) == 10) {
            return a3 | 0;
          }
        }
        a3 = g3;
        while (1) {
          if (jc(a3, c3) | 0 ? jc(a3 + 16 | 0, d3) | 0 : 0) {
            f3 = 10;
            break;
          }
          a3 = b[a3 + 32 >> 2] | 0;
          if (!a3) {
            a3 = 0;
            f3 = 10;
            break;
          }
        }
        if ((f3 | 0) == 10) {
          return a3 | 0;
        }
        return 0;
      }
      function Ad(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0;
        d3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e2[c3 >> 3] + +e2[c3 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        a3 = b[(b[a3 >> 2] | 0) + (d3 << 2) >> 2] | 0;
        if (!a3) {
          d3 = 0;
          return d3 | 0;
        }
        while (1) {
          if (jc(a3, c3) | 0) {
            c3 = 5;
            break;
          }
          a3 = b[a3 + 32 >> 2] | 0;
          if (!a3) {
            a3 = 0;
            c3 = 5;
            break;
          }
        }
        if ((c3 | 0) == 5) {
          return a3 | 0;
        }
        return 0;
      }
      function Bd() {
        return 27904;
      }
      function Cd(a3) {
        a3 = +a3;
        return ~~+Yd(+a3) | 0;
      }
      function Dd(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t3 = 0, u3 = 0, v3 = 0, w5 = 0;
        w5 = T3;
        T3 = T3 + 16 | 0;
        n2 = w5;
        do {
          if (a3 >>> 0 < 245) {
            k2 = a3 >>> 0 < 11 ? 16 : a3 + 11 & -8;
            a3 = k2 >>> 3;
            m2 = b[6977] | 0;
            d3 = m2 >>> a3;
            if (d3 & 3 | 0) {
              c3 = (d3 & 1 ^ 1) + a3 | 0;
              a3 = 27948 + (c3 << 1 << 2) | 0;
              d3 = a3 + 8 | 0;
              e3 = b[d3 >> 2] | 0;
              f3 = e3 + 8 | 0;
              g3 = b[f3 >> 2] | 0;
              if ((g3 | 0) == (a3 | 0)) {
                b[6977] = m2 & ~(1 << c3);
              } else {
                b[g3 + 12 >> 2] = a3;
                b[d3 >> 2] = g3;
              }
              v3 = c3 << 3;
              b[e3 + 4 >> 2] = v3 | 3;
              v3 = e3 + v3 + 4 | 0;
              b[v3 >> 2] = b[v3 >> 2] | 1;
              v3 = f3;
              T3 = w5;
              return v3 | 0;
            }
            l2 = b[6979] | 0;
            if (k2 >>> 0 > l2 >>> 0) {
              if (d3 | 0) {
                c3 = 2 << a3;
                c3 = d3 << a3 & (c3 | 0 - c3);
                c3 = (c3 & 0 - c3) + -1 | 0;
                i2 = c3 >>> 12 & 16;
                c3 = c3 >>> i2;
                d3 = c3 >>> 5 & 8;
                c3 = c3 >>> d3;
                g3 = c3 >>> 2 & 4;
                c3 = c3 >>> g3;
                a3 = c3 >>> 1 & 2;
                c3 = c3 >>> a3;
                e3 = c3 >>> 1 & 1;
                e3 = (d3 | i2 | g3 | a3 | e3) + (c3 >>> e3) | 0;
                c3 = 27948 + (e3 << 1 << 2) | 0;
                a3 = c3 + 8 | 0;
                g3 = b[a3 >> 2] | 0;
                i2 = g3 + 8 | 0;
                d3 = b[i2 >> 2] | 0;
                if ((d3 | 0) == (c3 | 0)) {
                  a3 = m2 & ~(1 << e3);
                  b[6977] = a3;
                } else {
                  b[d3 + 12 >> 2] = c3;
                  b[a3 >> 2] = d3;
                  a3 = m2;
                }
                v3 = e3 << 3;
                h2 = v3 - k2 | 0;
                b[g3 + 4 >> 2] = k2 | 3;
                f3 = g3 + k2 | 0;
                b[f3 + 4 >> 2] = h2 | 1;
                b[g3 + v3 >> 2] = h2;
                if (l2 | 0) {
                  e3 = b[6982] | 0;
                  c3 = l2 >>> 3;
                  d3 = 27948 + (c3 << 1 << 2) | 0;
                  c3 = 1 << c3;
                  if (!(a3 & c3)) {
                    b[6977] = a3 | c3;
                    c3 = d3;
                    a3 = d3 + 8 | 0;
                  } else {
                    a3 = d3 + 8 | 0;
                    c3 = b[a3 >> 2] | 0;
                  }
                  b[a3 >> 2] = e3;
                  b[c3 + 12 >> 2] = e3;
                  b[e3 + 8 >> 2] = c3;
                  b[e3 + 12 >> 2] = d3;
                }
                b[6979] = h2;
                b[6982] = f3;
                v3 = i2;
                T3 = w5;
                return v3 | 0;
              }
              g3 = b[6978] | 0;
              if (g3) {
                d3 = (g3 & 0 - g3) + -1 | 0;
                f3 = d3 >>> 12 & 16;
                d3 = d3 >>> f3;
                e3 = d3 >>> 5 & 8;
                d3 = d3 >>> e3;
                h2 = d3 >>> 2 & 4;
                d3 = d3 >>> h2;
                i2 = d3 >>> 1 & 2;
                d3 = d3 >>> i2;
                j2 = d3 >>> 1 & 1;
                j2 = b[28212 + ((e3 | f3 | h2 | i2 | j2) + (d3 >>> j2) << 2) >> 2] | 0;
                d3 = j2;
                i2 = j2;
                j2 = (b[j2 + 4 >> 2] & -8) - k2 | 0;
                while (1) {
                  a3 = b[d3 + 16 >> 2] | 0;
                  if (!a3) {
                    a3 = b[d3 + 20 >> 2] | 0;
                    if (!a3) {
                      break;
                    }
                  }
                  h2 = (b[a3 + 4 >> 2] & -8) - k2 | 0;
                  f3 = h2 >>> 0 < j2 >>> 0;
                  d3 = a3;
                  i2 = f3 ? a3 : i2;
                  j2 = f3 ? h2 : j2;
                }
                h2 = i2 + k2 | 0;
                if (h2 >>> 0 > i2 >>> 0) {
                  f3 = b[i2 + 24 >> 2] | 0;
                  c3 = b[i2 + 12 >> 2] | 0;
                  do {
                    if ((c3 | 0) == (i2 | 0)) {
                      a3 = i2 + 20 | 0;
                      c3 = b[a3 >> 2] | 0;
                      if (!c3) {
                        a3 = i2 + 16 | 0;
                        c3 = b[a3 >> 2] | 0;
                        if (!c3) {
                          d3 = 0;
                          break;
                        }
                      }
                      while (1) {
                        e3 = c3 + 20 | 0;
                        d3 = b[e3 >> 2] | 0;
                        if (!d3) {
                          e3 = c3 + 16 | 0;
                          d3 = b[e3 >> 2] | 0;
                          if (!d3) {
                            break;
                          } else {
                            c3 = d3;
                            a3 = e3;
                          }
                        } else {
                          c3 = d3;
                          a3 = e3;
                        }
                      }
                      b[a3 >> 2] = 0;
                      d3 = c3;
                    } else {
                      d3 = b[i2 + 8 >> 2] | 0;
                      b[d3 + 12 >> 2] = c3;
                      b[c3 + 8 >> 2] = d3;
                      d3 = c3;
                    }
                  } while (0);
                  do {
                    if (f3 | 0) {
                      c3 = b[i2 + 28 >> 2] | 0;
                      a3 = 28212 + (c3 << 2) | 0;
                      if ((i2 | 0) == (b[a3 >> 2] | 0)) {
                        b[a3 >> 2] = d3;
                        if (!d3) {
                          b[6978] = g3 & ~(1 << c3);
                          break;
                        }
                      } else {
                        v3 = f3 + 16 | 0;
                        b[((b[v3 >> 2] | 0) == (i2 | 0) ? v3 : f3 + 20 | 0) >> 2] = d3;
                        if (!d3) {
                          break;
                        }
                      }
                      b[d3 + 24 >> 2] = f3;
                      c3 = b[i2 + 16 >> 2] | 0;
                      if (c3 | 0) {
                        b[d3 + 16 >> 2] = c3;
                        b[c3 + 24 >> 2] = d3;
                      }
                      c3 = b[i2 + 20 >> 2] | 0;
                      if (c3 | 0) {
                        b[d3 + 20 >> 2] = c3;
                        b[c3 + 24 >> 2] = d3;
                      }
                    }
                  } while (0);
                  if (j2 >>> 0 < 16) {
                    v3 = j2 + k2 | 0;
                    b[i2 + 4 >> 2] = v3 | 3;
                    v3 = i2 + v3 + 4 | 0;
                    b[v3 >> 2] = b[v3 >> 2] | 1;
                  } else {
                    b[i2 + 4 >> 2] = k2 | 3;
                    b[h2 + 4 >> 2] = j2 | 1;
                    b[h2 + j2 >> 2] = j2;
                    if (l2 | 0) {
                      e3 = b[6982] | 0;
                      c3 = l2 >>> 3;
                      d3 = 27948 + (c3 << 1 << 2) | 0;
                      c3 = 1 << c3;
                      if (!(c3 & m2)) {
                        b[6977] = c3 | m2;
                        c3 = d3;
                        a3 = d3 + 8 | 0;
                      } else {
                        a3 = d3 + 8 | 0;
                        c3 = b[a3 >> 2] | 0;
                      }
                      b[a3 >> 2] = e3;
                      b[c3 + 12 >> 2] = e3;
                      b[e3 + 8 >> 2] = c3;
                      b[e3 + 12 >> 2] = d3;
                    }
                    b[6979] = j2;
                    b[6982] = h2;
                  }
                  v3 = i2 + 8 | 0;
                  T3 = w5;
                  return v3 | 0;
                } else {
                  m2 = k2;
                }
              } else {
                m2 = k2;
              }
            } else {
              m2 = k2;
            }
          } else if (a3 >>> 0 <= 4294967231) {
            a3 = a3 + 11 | 0;
            k2 = a3 & -8;
            e3 = b[6978] | 0;
            if (e3) {
              f3 = 0 - k2 | 0;
              a3 = a3 >>> 8;
              if (a3) {
                if (k2 >>> 0 > 16777215) {
                  j2 = 31;
                } else {
                  m2 = (a3 + 1048320 | 0) >>> 16 & 8;
                  q3 = a3 << m2;
                  i2 = (q3 + 520192 | 0) >>> 16 & 4;
                  q3 = q3 << i2;
                  j2 = (q3 + 245760 | 0) >>> 16 & 2;
                  j2 = 14 - (i2 | m2 | j2) + (q3 << j2 >>> 15) | 0;
                  j2 = k2 >>> (j2 + 7 | 0) & 1 | j2 << 1;
                }
              } else {
                j2 = 0;
              }
              d3 = b[28212 + (j2 << 2) >> 2] | 0;
              a:
                do {
                  if (!d3) {
                    d3 = 0;
                    a3 = 0;
                    q3 = 61;
                  } else {
                    a3 = 0;
                    i2 = k2 << ((j2 | 0) == 31 ? 0 : 25 - (j2 >>> 1) | 0);
                    g3 = 0;
                    while (1) {
                      h2 = (b[d3 + 4 >> 2] & -8) - k2 | 0;
                      if (h2 >>> 0 < f3 >>> 0) {
                        if (!h2) {
                          a3 = d3;
                          f3 = 0;
                          q3 = 65;
                          break a;
                        } else {
                          a3 = d3;
                          f3 = h2;
                        }
                      }
                      q3 = b[d3 + 20 >> 2] | 0;
                      d3 = b[d3 + 16 + (i2 >>> 31 << 2) >> 2] | 0;
                      g3 = (q3 | 0) == 0 | (q3 | 0) == (d3 | 0) ? g3 : q3;
                      if (!d3) {
                        d3 = g3;
                        q3 = 61;
                        break;
                      } else {
                        i2 = i2 << 1;
                      }
                    }
                  }
                } while (0);
              if ((q3 | 0) == 61) {
                if ((d3 | 0) == 0 & (a3 | 0) == 0) {
                  a3 = 2 << j2;
                  a3 = (a3 | 0 - a3) & e3;
                  if (!a3) {
                    m2 = k2;
                    break;
                  }
                  m2 = (a3 & 0 - a3) + -1 | 0;
                  h2 = m2 >>> 12 & 16;
                  m2 = m2 >>> h2;
                  g3 = m2 >>> 5 & 8;
                  m2 = m2 >>> g3;
                  i2 = m2 >>> 2 & 4;
                  m2 = m2 >>> i2;
                  j2 = m2 >>> 1 & 2;
                  m2 = m2 >>> j2;
                  d3 = m2 >>> 1 & 1;
                  a3 = 0;
                  d3 = b[28212 + ((g3 | h2 | i2 | j2 | d3) + (m2 >>> d3) << 2) >> 2] | 0;
                }
                if (!d3) {
                  i2 = a3;
                  h2 = f3;
                } else {
                  q3 = 65;
                }
              }
              if ((q3 | 0) == 65) {
                g3 = d3;
                while (1) {
                  m2 = (b[g3 + 4 >> 2] & -8) - k2 | 0;
                  d3 = m2 >>> 0 < f3 >>> 0;
                  f3 = d3 ? m2 : f3;
                  a3 = d3 ? g3 : a3;
                  d3 = b[g3 + 16 >> 2] | 0;
                  if (!d3) {
                    d3 = b[g3 + 20 >> 2] | 0;
                  }
                  if (!d3) {
                    i2 = a3;
                    h2 = f3;
                    break;
                  } else {
                    g3 = d3;
                  }
                }
              }
              if (((i2 | 0) != 0 ? h2 >>> 0 < ((b[6979] | 0) - k2 | 0) >>> 0 : 0) ? (l2 = i2 + k2 | 0, l2 >>> 0 > i2 >>> 0) : 0) {
                g3 = b[i2 + 24 >> 2] | 0;
                c3 = b[i2 + 12 >> 2] | 0;
                do {
                  if ((c3 | 0) == (i2 | 0)) {
                    a3 = i2 + 20 | 0;
                    c3 = b[a3 >> 2] | 0;
                    if (!c3) {
                      a3 = i2 + 16 | 0;
                      c3 = b[a3 >> 2] | 0;
                      if (!c3) {
                        c3 = 0;
                        break;
                      }
                    }
                    while (1) {
                      f3 = c3 + 20 | 0;
                      d3 = b[f3 >> 2] | 0;
                      if (!d3) {
                        f3 = c3 + 16 | 0;
                        d3 = b[f3 >> 2] | 0;
                        if (!d3) {
                          break;
                        } else {
                          c3 = d3;
                          a3 = f3;
                        }
                      } else {
                        c3 = d3;
                        a3 = f3;
                      }
                    }
                    b[a3 >> 2] = 0;
                  } else {
                    v3 = b[i2 + 8 >> 2] | 0;
                    b[v3 + 12 >> 2] = c3;
                    b[c3 + 8 >> 2] = v3;
                  }
                } while (0);
                do {
                  if (g3) {
                    a3 = b[i2 + 28 >> 2] | 0;
                    d3 = 28212 + (a3 << 2) | 0;
                    if ((i2 | 0) == (b[d3 >> 2] | 0)) {
                      b[d3 >> 2] = c3;
                      if (!c3) {
                        e3 = e3 & ~(1 << a3);
                        b[6978] = e3;
                        break;
                      }
                    } else {
                      v3 = g3 + 16 | 0;
                      b[((b[v3 >> 2] | 0) == (i2 | 0) ? v3 : g3 + 20 | 0) >> 2] = c3;
                      if (!c3) {
                        break;
                      }
                    }
                    b[c3 + 24 >> 2] = g3;
                    a3 = b[i2 + 16 >> 2] | 0;
                    if (a3 | 0) {
                      b[c3 + 16 >> 2] = a3;
                      b[a3 + 24 >> 2] = c3;
                    }
                    a3 = b[i2 + 20 >> 2] | 0;
                    if (a3) {
                      b[c3 + 20 >> 2] = a3;
                      b[a3 + 24 >> 2] = c3;
                    }
                  }
                } while (0);
                b:
                  do {
                    if (h2 >>> 0 < 16) {
                      v3 = h2 + k2 | 0;
                      b[i2 + 4 >> 2] = v3 | 3;
                      v3 = i2 + v3 + 4 | 0;
                      b[v3 >> 2] = b[v3 >> 2] | 1;
                    } else {
                      b[i2 + 4 >> 2] = k2 | 3;
                      b[l2 + 4 >> 2] = h2 | 1;
                      b[l2 + h2 >> 2] = h2;
                      c3 = h2 >>> 3;
                      if (h2 >>> 0 < 256) {
                        d3 = 27948 + (c3 << 1 << 2) | 0;
                        a3 = b[6977] | 0;
                        c3 = 1 << c3;
                        if (!(a3 & c3)) {
                          b[6977] = a3 | c3;
                          c3 = d3;
                          a3 = d3 + 8 | 0;
                        } else {
                          a3 = d3 + 8 | 0;
                          c3 = b[a3 >> 2] | 0;
                        }
                        b[a3 >> 2] = l2;
                        b[c3 + 12 >> 2] = l2;
                        b[l2 + 8 >> 2] = c3;
                        b[l2 + 12 >> 2] = d3;
                        break;
                      }
                      c3 = h2 >>> 8;
                      if (c3) {
                        if (h2 >>> 0 > 16777215) {
                          d3 = 31;
                        } else {
                          u3 = (c3 + 1048320 | 0) >>> 16 & 8;
                          v3 = c3 << u3;
                          t3 = (v3 + 520192 | 0) >>> 16 & 4;
                          v3 = v3 << t3;
                          d3 = (v3 + 245760 | 0) >>> 16 & 2;
                          d3 = 14 - (t3 | u3 | d3) + (v3 << d3 >>> 15) | 0;
                          d3 = h2 >>> (d3 + 7 | 0) & 1 | d3 << 1;
                        }
                      } else {
                        d3 = 0;
                      }
                      c3 = 28212 + (d3 << 2) | 0;
                      b[l2 + 28 >> 2] = d3;
                      a3 = l2 + 16 | 0;
                      b[a3 + 4 >> 2] = 0;
                      b[a3 >> 2] = 0;
                      a3 = 1 << d3;
                      if (!(e3 & a3)) {
                        b[6978] = e3 | a3;
                        b[c3 >> 2] = l2;
                        b[l2 + 24 >> 2] = c3;
                        b[l2 + 12 >> 2] = l2;
                        b[l2 + 8 >> 2] = l2;
                        break;
                      }
                      c3 = b[c3 >> 2] | 0;
                      c:
                        do {
                          if ((b[c3 + 4 >> 2] & -8 | 0) != (h2 | 0)) {
                            e3 = h2 << ((d3 | 0) == 31 ? 0 : 25 - (d3 >>> 1) | 0);
                            while (1) {
                              d3 = c3 + 16 + (e3 >>> 31 << 2) | 0;
                              a3 = b[d3 >> 2] | 0;
                              if (!a3) {
                                break;
                              }
                              if ((b[a3 + 4 >> 2] & -8 | 0) == (h2 | 0)) {
                                c3 = a3;
                                break c;
                              } else {
                                e3 = e3 << 1;
                                c3 = a3;
                              }
                            }
                            b[d3 >> 2] = l2;
                            b[l2 + 24 >> 2] = c3;
                            b[l2 + 12 >> 2] = l2;
                            b[l2 + 8 >> 2] = l2;
                            break b;
                          }
                        } while (0);
                      u3 = c3 + 8 | 0;
                      v3 = b[u3 >> 2] | 0;
                      b[v3 + 12 >> 2] = l2;
                      b[u3 >> 2] = l2;
                      b[l2 + 8 >> 2] = v3;
                      b[l2 + 12 >> 2] = c3;
                      b[l2 + 24 >> 2] = 0;
                    }
                  } while (0);
                v3 = i2 + 8 | 0;
                T3 = w5;
                return v3 | 0;
              } else {
                m2 = k2;
              }
            } else {
              m2 = k2;
            }
          } else {
            m2 = -1;
          }
        } while (0);
        d3 = b[6979] | 0;
        if (d3 >>> 0 >= m2 >>> 0) {
          c3 = d3 - m2 | 0;
          a3 = b[6982] | 0;
          if (c3 >>> 0 > 15) {
            v3 = a3 + m2 | 0;
            b[6982] = v3;
            b[6979] = c3;
            b[v3 + 4 >> 2] = c3 | 1;
            b[a3 + d3 >> 2] = c3;
            b[a3 + 4 >> 2] = m2 | 3;
          } else {
            b[6979] = 0;
            b[6982] = 0;
            b[a3 + 4 >> 2] = d3 | 3;
            v3 = a3 + d3 + 4 | 0;
            b[v3 >> 2] = b[v3 >> 2] | 1;
          }
          v3 = a3 + 8 | 0;
          T3 = w5;
          return v3 | 0;
        }
        h2 = b[6980] | 0;
        if (h2 >>> 0 > m2 >>> 0) {
          t3 = h2 - m2 | 0;
          b[6980] = t3;
          v3 = b[6983] | 0;
          u3 = v3 + m2 | 0;
          b[6983] = u3;
          b[u3 + 4 >> 2] = t3 | 1;
          b[v3 + 4 >> 2] = m2 | 3;
          v3 = v3 + 8 | 0;
          T3 = w5;
          return v3 | 0;
        }
        if (!(b[7095] | 0)) {
          b[7097] = 4096;
          b[7096] = 4096;
          b[7098] = -1;
          b[7099] = -1;
          b[7100] = 0;
          b[7088] = 0;
          b[7095] = n2 & -16 ^ 1431655768;
          a3 = 4096;
        } else {
          a3 = b[7097] | 0;
        }
        i2 = m2 + 48 | 0;
        j2 = m2 + 47 | 0;
        g3 = a3 + j2 | 0;
        f3 = 0 - a3 | 0;
        k2 = g3 & f3;
        if (k2 >>> 0 <= m2 >>> 0) {
          v3 = 0;
          T3 = w5;
          return v3 | 0;
        }
        a3 = b[7087] | 0;
        if (a3 | 0 ? (l2 = b[7085] | 0, n2 = l2 + k2 | 0, n2 >>> 0 <= l2 >>> 0 | n2 >>> 0 > a3 >>> 0) : 0) {
          v3 = 0;
          T3 = w5;
          return v3 | 0;
        }
        d:
          do {
            if (!(b[7088] & 4)) {
              d3 = b[6983] | 0;
              e:
                do {
                  if (d3) {
                    e3 = 28356;
                    while (1) {
                      n2 = b[e3 >> 2] | 0;
                      if (n2 >>> 0 <= d3 >>> 0 ? (n2 + (b[e3 + 4 >> 2] | 0) | 0) >>> 0 > d3 >>> 0 : 0) {
                        break;
                      }
                      a3 = b[e3 + 8 >> 2] | 0;
                      if (!a3) {
                        q3 = 128;
                        break e;
                      } else {
                        e3 = a3;
                      }
                    }
                    c3 = g3 - h2 & f3;
                    if (c3 >>> 0 < 2147483647) {
                      a3 = Zd(c3 | 0) | 0;
                      if ((a3 | 0) == ((b[e3 >> 2] | 0) + (b[e3 + 4 >> 2] | 0) | 0)) {
                        if ((a3 | 0) != (-1 | 0)) {
                          h2 = c3;
                          g3 = a3;
                          q3 = 145;
                          break d;
                        }
                      } else {
                        e3 = a3;
                        q3 = 136;
                      }
                    } else {
                      c3 = 0;
                    }
                  } else {
                    q3 = 128;
                  }
                } while (0);
              do {
                if ((q3 | 0) == 128) {
                  d3 = Zd(0) | 0;
                  if ((d3 | 0) != (-1 | 0) ? (c3 = d3, o2 = b[7096] | 0, p3 = o2 + -1 | 0, c3 = ((p3 & c3 | 0) == 0 ? 0 : (p3 + c3 & 0 - o2) - c3 | 0) + k2 | 0, o2 = b[7085] | 0, p3 = c3 + o2 | 0, c3 >>> 0 > m2 >>> 0 & c3 >>> 0 < 2147483647) : 0) {
                    n2 = b[7087] | 0;
                    if (n2 | 0 ? p3 >>> 0 <= o2 >>> 0 | p3 >>> 0 > n2 >>> 0 : 0) {
                      c3 = 0;
                      break;
                    }
                    a3 = Zd(c3 | 0) | 0;
                    if ((a3 | 0) == (d3 | 0)) {
                      h2 = c3;
                      g3 = d3;
                      q3 = 145;
                      break d;
                    } else {
                      e3 = a3;
                      q3 = 136;
                    }
                  } else {
                    c3 = 0;
                  }
                }
              } while (0);
              do {
                if ((q3 | 0) == 136) {
                  d3 = 0 - c3 | 0;
                  if (!(i2 >>> 0 > c3 >>> 0 & (c3 >>> 0 < 2147483647 & (e3 | 0) != (-1 | 0)))) {
                    if ((e3 | 0) == (-1 | 0)) {
                      c3 = 0;
                      break;
                    } else {
                      h2 = c3;
                      g3 = e3;
                      q3 = 145;
                      break d;
                    }
                  }
                  a3 = b[7097] | 0;
                  a3 = j2 - c3 + a3 & 0 - a3;
                  if (a3 >>> 0 >= 2147483647) {
                    h2 = c3;
                    g3 = e3;
                    q3 = 145;
                    break d;
                  }
                  if ((Zd(a3 | 0) | 0) == (-1 | 0)) {
                    Zd(d3 | 0) | 0;
                    c3 = 0;
                    break;
                  } else {
                    h2 = a3 + c3 | 0;
                    g3 = e3;
                    q3 = 145;
                    break d;
                  }
                }
              } while (0);
              b[7088] = b[7088] | 4;
              q3 = 143;
            } else {
              c3 = 0;
              q3 = 143;
            }
          } while (0);
        if (((q3 | 0) == 143 ? k2 >>> 0 < 2147483647 : 0) ? (t3 = Zd(k2 | 0) | 0, p3 = Zd(0) | 0, r3 = p3 - t3 | 0, s3 = r3 >>> 0 > (m2 + 40 | 0) >>> 0, !((t3 | 0) == (-1 | 0) | s3 ^ 1 | t3 >>> 0 < p3 >>> 0 & ((t3 | 0) != (-1 | 0) & (p3 | 0) != (-1 | 0)) ^ 1)) : 0) {
          h2 = s3 ? r3 : c3;
          g3 = t3;
          q3 = 145;
        }
        if ((q3 | 0) == 145) {
          c3 = (b[7085] | 0) + h2 | 0;
          b[7085] = c3;
          if (c3 >>> 0 > (b[7086] | 0) >>> 0) {
            b[7086] = c3;
          }
          j2 = b[6983] | 0;
          f:
            do {
              if (j2) {
                c3 = 28356;
                while (1) {
                  a3 = b[c3 >> 2] | 0;
                  d3 = b[c3 + 4 >> 2] | 0;
                  if ((g3 | 0) == (a3 + d3 | 0)) {
                    q3 = 154;
                    break;
                  }
                  e3 = b[c3 + 8 >> 2] | 0;
                  if (!e3) {
                    break;
                  } else {
                    c3 = e3;
                  }
                }
                if (((q3 | 0) == 154 ? (u3 = c3 + 4 | 0, (b[c3 + 12 >> 2] & 8 | 0) == 0) : 0) ? g3 >>> 0 > j2 >>> 0 & a3 >>> 0 <= j2 >>> 0 : 0) {
                  b[u3 >> 2] = d3 + h2;
                  v3 = (b[6980] | 0) + h2 | 0;
                  t3 = j2 + 8 | 0;
                  t3 = (t3 & 7 | 0) == 0 ? 0 : 0 - t3 & 7;
                  u3 = j2 + t3 | 0;
                  t3 = v3 - t3 | 0;
                  b[6983] = u3;
                  b[6980] = t3;
                  b[u3 + 4 >> 2] = t3 | 1;
                  b[j2 + v3 + 4 >> 2] = 40;
                  b[6984] = b[7099];
                  break;
                }
                if (g3 >>> 0 < (b[6981] | 0) >>> 0) {
                  b[6981] = g3;
                }
                d3 = g3 + h2 | 0;
                c3 = 28356;
                while (1) {
                  if ((b[c3 >> 2] | 0) == (d3 | 0)) {
                    q3 = 162;
                    break;
                  }
                  a3 = b[c3 + 8 >> 2] | 0;
                  if (!a3) {
                    break;
                  } else {
                    c3 = a3;
                  }
                }
                if ((q3 | 0) == 162 ? (b[c3 + 12 >> 2] & 8 | 0) == 0 : 0) {
                  b[c3 >> 2] = g3;
                  l2 = c3 + 4 | 0;
                  b[l2 >> 2] = (b[l2 >> 2] | 0) + h2;
                  l2 = g3 + 8 | 0;
                  l2 = g3 + ((l2 & 7 | 0) == 0 ? 0 : 0 - l2 & 7) | 0;
                  c3 = d3 + 8 | 0;
                  c3 = d3 + ((c3 & 7 | 0) == 0 ? 0 : 0 - c3 & 7) | 0;
                  k2 = l2 + m2 | 0;
                  i2 = c3 - l2 - m2 | 0;
                  b[l2 + 4 >> 2] = m2 | 3;
                  g:
                    do {
                      if ((j2 | 0) == (c3 | 0)) {
                        v3 = (b[6980] | 0) + i2 | 0;
                        b[6980] = v3;
                        b[6983] = k2;
                        b[k2 + 4 >> 2] = v3 | 1;
                      } else {
                        if ((b[6982] | 0) == (c3 | 0)) {
                          v3 = (b[6979] | 0) + i2 | 0;
                          b[6979] = v3;
                          b[6982] = k2;
                          b[k2 + 4 >> 2] = v3 | 1;
                          b[k2 + v3 >> 2] = v3;
                          break;
                        }
                        a3 = b[c3 + 4 >> 2] | 0;
                        if ((a3 & 3 | 0) == 1) {
                          h2 = a3 & -8;
                          e3 = a3 >>> 3;
                          h:
                            do {
                              if (a3 >>> 0 < 256) {
                                a3 = b[c3 + 8 >> 2] | 0;
                                d3 = b[c3 + 12 >> 2] | 0;
                                if ((d3 | 0) == (a3 | 0)) {
                                  b[6977] = b[6977] & ~(1 << e3);
                                  break;
                                } else {
                                  b[a3 + 12 >> 2] = d3;
                                  b[d3 + 8 >> 2] = a3;
                                  break;
                                }
                              } else {
                                g3 = b[c3 + 24 >> 2] | 0;
                                a3 = b[c3 + 12 >> 2] | 0;
                                do {
                                  if ((a3 | 0) == (c3 | 0)) {
                                    d3 = c3 + 16 | 0;
                                    e3 = d3 + 4 | 0;
                                    a3 = b[e3 >> 2] | 0;
                                    if (!a3) {
                                      a3 = b[d3 >> 2] | 0;
                                      if (!a3) {
                                        a3 = 0;
                                        break;
                                      }
                                    } else {
                                      d3 = e3;
                                    }
                                    while (1) {
                                      f3 = a3 + 20 | 0;
                                      e3 = b[f3 >> 2] | 0;
                                      if (!e3) {
                                        f3 = a3 + 16 | 0;
                                        e3 = b[f3 >> 2] | 0;
                                        if (!e3) {
                                          break;
                                        } else {
                                          a3 = e3;
                                          d3 = f3;
                                        }
                                      } else {
                                        a3 = e3;
                                        d3 = f3;
                                      }
                                    }
                                    b[d3 >> 2] = 0;
                                  } else {
                                    v3 = b[c3 + 8 >> 2] | 0;
                                    b[v3 + 12 >> 2] = a3;
                                    b[a3 + 8 >> 2] = v3;
                                  }
                                } while (0);
                                if (!g3) {
                                  break;
                                }
                                d3 = b[c3 + 28 >> 2] | 0;
                                e3 = 28212 + (d3 << 2) | 0;
                                do {
                                  if ((b[e3 >> 2] | 0) != (c3 | 0)) {
                                    v3 = g3 + 16 | 0;
                                    b[((b[v3 >> 2] | 0) == (c3 | 0) ? v3 : g3 + 20 | 0) >> 2] = a3;
                                    if (!a3) {
                                      break h;
                                    }
                                  } else {
                                    b[e3 >> 2] = a3;
                                    if (a3 | 0) {
                                      break;
                                    }
                                    b[6978] = b[6978] & ~(1 << d3);
                                    break h;
                                  }
                                } while (0);
                                b[a3 + 24 >> 2] = g3;
                                d3 = c3 + 16 | 0;
                                e3 = b[d3 >> 2] | 0;
                                if (e3 | 0) {
                                  b[a3 + 16 >> 2] = e3;
                                  b[e3 + 24 >> 2] = a3;
                                }
                                d3 = b[d3 + 4 >> 2] | 0;
                                if (!d3) {
                                  break;
                                }
                                b[a3 + 20 >> 2] = d3;
                                b[d3 + 24 >> 2] = a3;
                              }
                            } while (0);
                          c3 = c3 + h2 | 0;
                          f3 = h2 + i2 | 0;
                        } else {
                          f3 = i2;
                        }
                        c3 = c3 + 4 | 0;
                        b[c3 >> 2] = b[c3 >> 2] & -2;
                        b[k2 + 4 >> 2] = f3 | 1;
                        b[k2 + f3 >> 2] = f3;
                        c3 = f3 >>> 3;
                        if (f3 >>> 0 < 256) {
                          d3 = 27948 + (c3 << 1 << 2) | 0;
                          a3 = b[6977] | 0;
                          c3 = 1 << c3;
                          if (!(a3 & c3)) {
                            b[6977] = a3 | c3;
                            c3 = d3;
                            a3 = d3 + 8 | 0;
                          } else {
                            a3 = d3 + 8 | 0;
                            c3 = b[a3 >> 2] | 0;
                          }
                          b[a3 >> 2] = k2;
                          b[c3 + 12 >> 2] = k2;
                          b[k2 + 8 >> 2] = c3;
                          b[k2 + 12 >> 2] = d3;
                          break;
                        }
                        c3 = f3 >>> 8;
                        do {
                          if (!c3) {
                            e3 = 0;
                          } else {
                            if (f3 >>> 0 > 16777215) {
                              e3 = 31;
                              break;
                            }
                            u3 = (c3 + 1048320 | 0) >>> 16 & 8;
                            v3 = c3 << u3;
                            t3 = (v3 + 520192 | 0) >>> 16 & 4;
                            v3 = v3 << t3;
                            e3 = (v3 + 245760 | 0) >>> 16 & 2;
                            e3 = 14 - (t3 | u3 | e3) + (v3 << e3 >>> 15) | 0;
                            e3 = f3 >>> (e3 + 7 | 0) & 1 | e3 << 1;
                          }
                        } while (0);
                        c3 = 28212 + (e3 << 2) | 0;
                        b[k2 + 28 >> 2] = e3;
                        a3 = k2 + 16 | 0;
                        b[a3 + 4 >> 2] = 0;
                        b[a3 >> 2] = 0;
                        a3 = b[6978] | 0;
                        d3 = 1 << e3;
                        if (!(a3 & d3)) {
                          b[6978] = a3 | d3;
                          b[c3 >> 2] = k2;
                          b[k2 + 24 >> 2] = c3;
                          b[k2 + 12 >> 2] = k2;
                          b[k2 + 8 >> 2] = k2;
                          break;
                        }
                        c3 = b[c3 >> 2] | 0;
                        i:
                          do {
                            if ((b[c3 + 4 >> 2] & -8 | 0) != (f3 | 0)) {
                              e3 = f3 << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                              while (1) {
                                d3 = c3 + 16 + (e3 >>> 31 << 2) | 0;
                                a3 = b[d3 >> 2] | 0;
                                if (!a3) {
                                  break;
                                }
                                if ((b[a3 + 4 >> 2] & -8 | 0) == (f3 | 0)) {
                                  c3 = a3;
                                  break i;
                                } else {
                                  e3 = e3 << 1;
                                  c3 = a3;
                                }
                              }
                              b[d3 >> 2] = k2;
                              b[k2 + 24 >> 2] = c3;
                              b[k2 + 12 >> 2] = k2;
                              b[k2 + 8 >> 2] = k2;
                              break g;
                            }
                          } while (0);
                        u3 = c3 + 8 | 0;
                        v3 = b[u3 >> 2] | 0;
                        b[v3 + 12 >> 2] = k2;
                        b[u3 >> 2] = k2;
                        b[k2 + 8 >> 2] = v3;
                        b[k2 + 12 >> 2] = c3;
                        b[k2 + 24 >> 2] = 0;
                      }
                    } while (0);
                  v3 = l2 + 8 | 0;
                  T3 = w5;
                  return v3 | 0;
                }
                c3 = 28356;
                while (1) {
                  a3 = b[c3 >> 2] | 0;
                  if (a3 >>> 0 <= j2 >>> 0 ? (v3 = a3 + (b[c3 + 4 >> 2] | 0) | 0, v3 >>> 0 > j2 >>> 0) : 0) {
                    break;
                  }
                  c3 = b[c3 + 8 >> 2] | 0;
                }
                f3 = v3 + -47 | 0;
                a3 = f3 + 8 | 0;
                a3 = f3 + ((a3 & 7 | 0) == 0 ? 0 : 0 - a3 & 7) | 0;
                f3 = j2 + 16 | 0;
                a3 = a3 >>> 0 < f3 >>> 0 ? j2 : a3;
                c3 = a3 + 8 | 0;
                d3 = h2 + -40 | 0;
                t3 = g3 + 8 | 0;
                t3 = (t3 & 7 | 0) == 0 ? 0 : 0 - t3 & 7;
                u3 = g3 + t3 | 0;
                t3 = d3 - t3 | 0;
                b[6983] = u3;
                b[6980] = t3;
                b[u3 + 4 >> 2] = t3 | 1;
                b[g3 + d3 + 4 >> 2] = 40;
                b[6984] = b[7099];
                d3 = a3 + 4 | 0;
                b[d3 >> 2] = 27;
                b[c3 >> 2] = b[7089];
                b[c3 + 4 >> 2] = b[7090];
                b[c3 + 8 >> 2] = b[7091];
                b[c3 + 12 >> 2] = b[7092];
                b[7089] = g3;
                b[7090] = h2;
                b[7092] = 0;
                b[7091] = c3;
                c3 = a3 + 24 | 0;
                do {
                  u3 = c3;
                  c3 = c3 + 4 | 0;
                  b[c3 >> 2] = 7;
                } while ((u3 + 8 | 0) >>> 0 < v3 >>> 0);
                if ((a3 | 0) != (j2 | 0)) {
                  g3 = a3 - j2 | 0;
                  b[d3 >> 2] = b[d3 >> 2] & -2;
                  b[j2 + 4 >> 2] = g3 | 1;
                  b[a3 >> 2] = g3;
                  c3 = g3 >>> 3;
                  if (g3 >>> 0 < 256) {
                    d3 = 27948 + (c3 << 1 << 2) | 0;
                    a3 = b[6977] | 0;
                    c3 = 1 << c3;
                    if (!(a3 & c3)) {
                      b[6977] = a3 | c3;
                      c3 = d3;
                      a3 = d3 + 8 | 0;
                    } else {
                      a3 = d3 + 8 | 0;
                      c3 = b[a3 >> 2] | 0;
                    }
                    b[a3 >> 2] = j2;
                    b[c3 + 12 >> 2] = j2;
                    b[j2 + 8 >> 2] = c3;
                    b[j2 + 12 >> 2] = d3;
                    break;
                  }
                  c3 = g3 >>> 8;
                  if (c3) {
                    if (g3 >>> 0 > 16777215) {
                      e3 = 31;
                    } else {
                      u3 = (c3 + 1048320 | 0) >>> 16 & 8;
                      v3 = c3 << u3;
                      t3 = (v3 + 520192 | 0) >>> 16 & 4;
                      v3 = v3 << t3;
                      e3 = (v3 + 245760 | 0) >>> 16 & 2;
                      e3 = 14 - (t3 | u3 | e3) + (v3 << e3 >>> 15) | 0;
                      e3 = g3 >>> (e3 + 7 | 0) & 1 | e3 << 1;
                    }
                  } else {
                    e3 = 0;
                  }
                  d3 = 28212 + (e3 << 2) | 0;
                  b[j2 + 28 >> 2] = e3;
                  b[j2 + 20 >> 2] = 0;
                  b[f3 >> 2] = 0;
                  c3 = b[6978] | 0;
                  a3 = 1 << e3;
                  if (!(c3 & a3)) {
                    b[6978] = c3 | a3;
                    b[d3 >> 2] = j2;
                    b[j2 + 24 >> 2] = d3;
                    b[j2 + 12 >> 2] = j2;
                    b[j2 + 8 >> 2] = j2;
                    break;
                  }
                  c3 = b[d3 >> 2] | 0;
                  j:
                    do {
                      if ((b[c3 + 4 >> 2] & -8 | 0) != (g3 | 0)) {
                        e3 = g3 << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                        while (1) {
                          d3 = c3 + 16 + (e3 >>> 31 << 2) | 0;
                          a3 = b[d3 >> 2] | 0;
                          if (!a3) {
                            break;
                          }
                          if ((b[a3 + 4 >> 2] & -8 | 0) == (g3 | 0)) {
                            c3 = a3;
                            break j;
                          } else {
                            e3 = e3 << 1;
                            c3 = a3;
                          }
                        }
                        b[d3 >> 2] = j2;
                        b[j2 + 24 >> 2] = c3;
                        b[j2 + 12 >> 2] = j2;
                        b[j2 + 8 >> 2] = j2;
                        break f;
                      }
                    } while (0);
                  u3 = c3 + 8 | 0;
                  v3 = b[u3 >> 2] | 0;
                  b[v3 + 12 >> 2] = j2;
                  b[u3 >> 2] = j2;
                  b[j2 + 8 >> 2] = v3;
                  b[j2 + 12 >> 2] = c3;
                  b[j2 + 24 >> 2] = 0;
                }
              } else {
                v3 = b[6981] | 0;
                if ((v3 | 0) == 0 | g3 >>> 0 < v3 >>> 0) {
                  b[6981] = g3;
                }
                b[7089] = g3;
                b[7090] = h2;
                b[7092] = 0;
                b[6986] = b[7095];
                b[6985] = -1;
                b[6990] = 27948;
                b[6989] = 27948;
                b[6992] = 27956;
                b[6991] = 27956;
                b[6994] = 27964;
                b[6993] = 27964;
                b[6996] = 27972;
                b[6995] = 27972;
                b[6998] = 27980;
                b[6997] = 27980;
                b[7e3] = 27988;
                b[6999] = 27988;
                b[7002] = 27996;
                b[7001] = 27996;
                b[7004] = 28004;
                b[7003] = 28004;
                b[7006] = 28012;
                b[7005] = 28012;
                b[7008] = 28020;
                b[7007] = 28020;
                b[7010] = 28028;
                b[7009] = 28028;
                b[7012] = 28036;
                b[7011] = 28036;
                b[7014] = 28044;
                b[7013] = 28044;
                b[7016] = 28052;
                b[7015] = 28052;
                b[7018] = 28060;
                b[7017] = 28060;
                b[7020] = 28068;
                b[7019] = 28068;
                b[7022] = 28076;
                b[7021] = 28076;
                b[7024] = 28084;
                b[7023] = 28084;
                b[7026] = 28092;
                b[7025] = 28092;
                b[7028] = 28100;
                b[7027] = 28100;
                b[7030] = 28108;
                b[7029] = 28108;
                b[7032] = 28116;
                b[7031] = 28116;
                b[7034] = 28124;
                b[7033] = 28124;
                b[7036] = 28132;
                b[7035] = 28132;
                b[7038] = 28140;
                b[7037] = 28140;
                b[7040] = 28148;
                b[7039] = 28148;
                b[7042] = 28156;
                b[7041] = 28156;
                b[7044] = 28164;
                b[7043] = 28164;
                b[7046] = 28172;
                b[7045] = 28172;
                b[7048] = 28180;
                b[7047] = 28180;
                b[7050] = 28188;
                b[7049] = 28188;
                b[7052] = 28196;
                b[7051] = 28196;
                v3 = h2 + -40 | 0;
                t3 = g3 + 8 | 0;
                t3 = (t3 & 7 | 0) == 0 ? 0 : 0 - t3 & 7;
                u3 = g3 + t3 | 0;
                t3 = v3 - t3 | 0;
                b[6983] = u3;
                b[6980] = t3;
                b[u3 + 4 >> 2] = t3 | 1;
                b[g3 + v3 + 4 >> 2] = 40;
                b[6984] = b[7099];
              }
            } while (0);
          c3 = b[6980] | 0;
          if (c3 >>> 0 > m2 >>> 0) {
            t3 = c3 - m2 | 0;
            b[6980] = t3;
            v3 = b[6983] | 0;
            u3 = v3 + m2 | 0;
            b[6983] = u3;
            b[u3 + 4 >> 2] = t3 | 1;
            b[v3 + 4 >> 2] = m2 | 3;
            v3 = v3 + 8 | 0;
            T3 = w5;
            return v3 | 0;
          }
        }
        v3 = Bd() | 0;
        b[v3 >> 2] = 12;
        v3 = 0;
        T3 = w5;
        return v3 | 0;
      }
      function Ed(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        if (!a3) {
          return;
        }
        d3 = a3 + -8 | 0;
        f3 = b[6981] | 0;
        a3 = b[a3 + -4 >> 2] | 0;
        c3 = a3 & -8;
        j2 = d3 + c3 | 0;
        do {
          if (!(a3 & 1)) {
            e3 = b[d3 >> 2] | 0;
            if (!(a3 & 3)) {
              return;
            }
            h2 = d3 + (0 - e3) | 0;
            g3 = e3 + c3 | 0;
            if (h2 >>> 0 < f3 >>> 0) {
              return;
            }
            if ((b[6982] | 0) == (h2 | 0)) {
              a3 = j2 + 4 | 0;
              c3 = b[a3 >> 2] | 0;
              if ((c3 & 3 | 0) != 3) {
                i2 = h2;
                c3 = g3;
                break;
              }
              b[6979] = g3;
              b[a3 >> 2] = c3 & -2;
              b[h2 + 4 >> 2] = g3 | 1;
              b[h2 + g3 >> 2] = g3;
              return;
            }
            d3 = e3 >>> 3;
            if (e3 >>> 0 < 256) {
              a3 = b[h2 + 8 >> 2] | 0;
              c3 = b[h2 + 12 >> 2] | 0;
              if ((c3 | 0) == (a3 | 0)) {
                b[6977] = b[6977] & ~(1 << d3);
                i2 = h2;
                c3 = g3;
                break;
              } else {
                b[a3 + 12 >> 2] = c3;
                b[c3 + 8 >> 2] = a3;
                i2 = h2;
                c3 = g3;
                break;
              }
            }
            f3 = b[h2 + 24 >> 2] | 0;
            a3 = b[h2 + 12 >> 2] | 0;
            do {
              if ((a3 | 0) == (h2 | 0)) {
                c3 = h2 + 16 | 0;
                d3 = c3 + 4 | 0;
                a3 = b[d3 >> 2] | 0;
                if (!a3) {
                  a3 = b[c3 >> 2] | 0;
                  if (!a3) {
                    a3 = 0;
                    break;
                  }
                } else {
                  c3 = d3;
                }
                while (1) {
                  e3 = a3 + 20 | 0;
                  d3 = b[e3 >> 2] | 0;
                  if (!d3) {
                    e3 = a3 + 16 | 0;
                    d3 = b[e3 >> 2] | 0;
                    if (!d3) {
                      break;
                    } else {
                      a3 = d3;
                      c3 = e3;
                    }
                  } else {
                    a3 = d3;
                    c3 = e3;
                  }
                }
                b[c3 >> 2] = 0;
              } else {
                i2 = b[h2 + 8 >> 2] | 0;
                b[i2 + 12 >> 2] = a3;
                b[a3 + 8 >> 2] = i2;
              }
            } while (0);
            if (f3) {
              c3 = b[h2 + 28 >> 2] | 0;
              d3 = 28212 + (c3 << 2) | 0;
              if ((b[d3 >> 2] | 0) == (h2 | 0)) {
                b[d3 >> 2] = a3;
                if (!a3) {
                  b[6978] = b[6978] & ~(1 << c3);
                  i2 = h2;
                  c3 = g3;
                  break;
                }
              } else {
                i2 = f3 + 16 | 0;
                b[((b[i2 >> 2] | 0) == (h2 | 0) ? i2 : f3 + 20 | 0) >> 2] = a3;
                if (!a3) {
                  i2 = h2;
                  c3 = g3;
                  break;
                }
              }
              b[a3 + 24 >> 2] = f3;
              c3 = h2 + 16 | 0;
              d3 = b[c3 >> 2] | 0;
              if (d3 | 0) {
                b[a3 + 16 >> 2] = d3;
                b[d3 + 24 >> 2] = a3;
              }
              c3 = b[c3 + 4 >> 2] | 0;
              if (c3) {
                b[a3 + 20 >> 2] = c3;
                b[c3 + 24 >> 2] = a3;
                i2 = h2;
                c3 = g3;
              } else {
                i2 = h2;
                c3 = g3;
              }
            } else {
              i2 = h2;
              c3 = g3;
            }
          } else {
            i2 = d3;
            h2 = d3;
          }
        } while (0);
        if (h2 >>> 0 >= j2 >>> 0) {
          return;
        }
        a3 = j2 + 4 | 0;
        e3 = b[a3 >> 2] | 0;
        if (!(e3 & 1)) {
          return;
        }
        if (!(e3 & 2)) {
          if ((b[6983] | 0) == (j2 | 0)) {
            j2 = (b[6980] | 0) + c3 | 0;
            b[6980] = j2;
            b[6983] = i2;
            b[i2 + 4 >> 2] = j2 | 1;
            if ((i2 | 0) != (b[6982] | 0)) {
              return;
            }
            b[6982] = 0;
            b[6979] = 0;
            return;
          }
          if ((b[6982] | 0) == (j2 | 0)) {
            j2 = (b[6979] | 0) + c3 | 0;
            b[6979] = j2;
            b[6982] = h2;
            b[i2 + 4 >> 2] = j2 | 1;
            b[h2 + j2 >> 2] = j2;
            return;
          }
          f3 = (e3 & -8) + c3 | 0;
          d3 = e3 >>> 3;
          do {
            if (e3 >>> 0 < 256) {
              c3 = b[j2 + 8 >> 2] | 0;
              a3 = b[j2 + 12 >> 2] | 0;
              if ((a3 | 0) == (c3 | 0)) {
                b[6977] = b[6977] & ~(1 << d3);
                break;
              } else {
                b[c3 + 12 >> 2] = a3;
                b[a3 + 8 >> 2] = c3;
                break;
              }
            } else {
              g3 = b[j2 + 24 >> 2] | 0;
              a3 = b[j2 + 12 >> 2] | 0;
              do {
                if ((a3 | 0) == (j2 | 0)) {
                  c3 = j2 + 16 | 0;
                  d3 = c3 + 4 | 0;
                  a3 = b[d3 >> 2] | 0;
                  if (!a3) {
                    a3 = b[c3 >> 2] | 0;
                    if (!a3) {
                      d3 = 0;
                      break;
                    }
                  } else {
                    c3 = d3;
                  }
                  while (1) {
                    e3 = a3 + 20 | 0;
                    d3 = b[e3 >> 2] | 0;
                    if (!d3) {
                      e3 = a3 + 16 | 0;
                      d3 = b[e3 >> 2] | 0;
                      if (!d3) {
                        break;
                      } else {
                        a3 = d3;
                        c3 = e3;
                      }
                    } else {
                      a3 = d3;
                      c3 = e3;
                    }
                  }
                  b[c3 >> 2] = 0;
                  d3 = a3;
                } else {
                  d3 = b[j2 + 8 >> 2] | 0;
                  b[d3 + 12 >> 2] = a3;
                  b[a3 + 8 >> 2] = d3;
                  d3 = a3;
                }
              } while (0);
              if (g3 | 0) {
                a3 = b[j2 + 28 >> 2] | 0;
                c3 = 28212 + (a3 << 2) | 0;
                if ((b[c3 >> 2] | 0) == (j2 | 0)) {
                  b[c3 >> 2] = d3;
                  if (!d3) {
                    b[6978] = b[6978] & ~(1 << a3);
                    break;
                  }
                } else {
                  e3 = g3 + 16 | 0;
                  b[((b[e3 >> 2] | 0) == (j2 | 0) ? e3 : g3 + 20 | 0) >> 2] = d3;
                  if (!d3) {
                    break;
                  }
                }
                b[d3 + 24 >> 2] = g3;
                a3 = j2 + 16 | 0;
                c3 = b[a3 >> 2] | 0;
                if (c3 | 0) {
                  b[d3 + 16 >> 2] = c3;
                  b[c3 + 24 >> 2] = d3;
                }
                a3 = b[a3 + 4 >> 2] | 0;
                if (a3 | 0) {
                  b[d3 + 20 >> 2] = a3;
                  b[a3 + 24 >> 2] = d3;
                }
              }
            }
          } while (0);
          b[i2 + 4 >> 2] = f3 | 1;
          b[h2 + f3 >> 2] = f3;
          if ((i2 | 0) == (b[6982] | 0)) {
            b[6979] = f3;
            return;
          }
        } else {
          b[a3 >> 2] = e3 & -2;
          b[i2 + 4 >> 2] = c3 | 1;
          b[h2 + c3 >> 2] = c3;
          f3 = c3;
        }
        a3 = f3 >>> 3;
        if (f3 >>> 0 < 256) {
          d3 = 27948 + (a3 << 1 << 2) | 0;
          c3 = b[6977] | 0;
          a3 = 1 << a3;
          if (!(c3 & a3)) {
            b[6977] = c3 | a3;
            a3 = d3;
            c3 = d3 + 8 | 0;
          } else {
            c3 = d3 + 8 | 0;
            a3 = b[c3 >> 2] | 0;
          }
          b[c3 >> 2] = i2;
          b[a3 + 12 >> 2] = i2;
          b[i2 + 8 >> 2] = a3;
          b[i2 + 12 >> 2] = d3;
          return;
        }
        a3 = f3 >>> 8;
        if (a3) {
          if (f3 >>> 0 > 16777215) {
            e3 = 31;
          } else {
            h2 = (a3 + 1048320 | 0) >>> 16 & 8;
            j2 = a3 << h2;
            g3 = (j2 + 520192 | 0) >>> 16 & 4;
            j2 = j2 << g3;
            e3 = (j2 + 245760 | 0) >>> 16 & 2;
            e3 = 14 - (g3 | h2 | e3) + (j2 << e3 >>> 15) | 0;
            e3 = f3 >>> (e3 + 7 | 0) & 1 | e3 << 1;
          }
        } else {
          e3 = 0;
        }
        a3 = 28212 + (e3 << 2) | 0;
        b[i2 + 28 >> 2] = e3;
        b[i2 + 20 >> 2] = 0;
        b[i2 + 16 >> 2] = 0;
        c3 = b[6978] | 0;
        d3 = 1 << e3;
        a:
          do {
            if (!(c3 & d3)) {
              b[6978] = c3 | d3;
              b[a3 >> 2] = i2;
              b[i2 + 24 >> 2] = a3;
              b[i2 + 12 >> 2] = i2;
              b[i2 + 8 >> 2] = i2;
            } else {
              a3 = b[a3 >> 2] | 0;
              b:
                do {
                  if ((b[a3 + 4 >> 2] & -8 | 0) != (f3 | 0)) {
                    e3 = f3 << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                    while (1) {
                      d3 = a3 + 16 + (e3 >>> 31 << 2) | 0;
                      c3 = b[d3 >> 2] | 0;
                      if (!c3) {
                        break;
                      }
                      if ((b[c3 + 4 >> 2] & -8 | 0) == (f3 | 0)) {
                        a3 = c3;
                        break b;
                      } else {
                        e3 = e3 << 1;
                        a3 = c3;
                      }
                    }
                    b[d3 >> 2] = i2;
                    b[i2 + 24 >> 2] = a3;
                    b[i2 + 12 >> 2] = i2;
                    b[i2 + 8 >> 2] = i2;
                    break a;
                  }
                } while (0);
              h2 = a3 + 8 | 0;
              j2 = b[h2 >> 2] | 0;
              b[j2 + 12 >> 2] = i2;
              b[h2 >> 2] = i2;
              b[i2 + 8 >> 2] = j2;
              b[i2 + 12 >> 2] = a3;
              b[i2 + 24 >> 2] = 0;
            }
          } while (0);
        j2 = (b[6985] | 0) + -1 | 0;
        b[6985] = j2;
        if (j2 | 0) {
          return;
        }
        a3 = 28364;
        while (1) {
          a3 = b[a3 >> 2] | 0;
          if (!a3) {
            break;
          } else {
            a3 = a3 + 8 | 0;
          }
        }
        b[6985] = -1;
        return;
      }
      function Fd(a3, c3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        var d3 = 0;
        if (a3) {
          d3 = B3(c3, a3) | 0;
          if ((c3 | a3) >>> 0 > 65535) {
            d3 = ((d3 >>> 0) / (a3 >>> 0) | 0 | 0) == (c3 | 0) ? d3 : -1;
          }
        } else {
          d3 = 0;
        }
        a3 = Dd(d3) | 0;
        if (!a3) {
          return a3 | 0;
        }
        if (!(b[a3 + -4 >> 2] & 3)) {
          return a3 | 0;
        }
        Xd(a3 | 0, 0, d3 | 0) | 0;
        return a3 | 0;
      }
      function Gd(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        c3 = a3 + c3 >>> 0;
        return (G2(b2 + d3 + (c3 >>> 0 < a3 >>> 0 | 0) >>> 0 | 0), c3 | 0) | 0;
      }
      function Hd(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        d3 = b2 - d3 - (c3 >>> 0 > a3 >>> 0 | 0) >>> 0;
        return (G2(d3 | 0), a3 - c3 >>> 0 | 0) | 0;
      }
      function Id(a3) {
        a3 = a3 | 0;
        return (a3 ? 31 - (E2(a3 ^ a3 - 1) | 0) | 0 : 32) | 0;
      }
      function Jd(a3, c3, d3, e3, f3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        l2 = a3;
        j2 = c3;
        k2 = j2;
        h2 = d3;
        n2 = e3;
        i2 = n2;
        if (!k2) {
          g3 = (f3 | 0) != 0;
          if (!i2) {
            if (g3) {
              b[f3 >> 2] = (l2 >>> 0) % (h2 >>> 0);
              b[f3 + 4 >> 2] = 0;
            }
            n2 = 0;
            f3 = (l2 >>> 0) / (h2 >>> 0) >>> 0;
            return (G2(n2 | 0), f3) | 0;
          } else {
            if (!g3) {
              n2 = 0;
              f3 = 0;
              return (G2(n2 | 0), f3) | 0;
            }
            b[f3 >> 2] = a3 | 0;
            b[f3 + 4 >> 2] = c3 & 0;
            n2 = 0;
            f3 = 0;
            return (G2(n2 | 0), f3) | 0;
          }
        }
        g3 = (i2 | 0) == 0;
        do {
          if (h2) {
            if (!g3) {
              g3 = (E2(i2 | 0) | 0) - (E2(k2 | 0) | 0) | 0;
              if (g3 >>> 0 <= 31) {
                m2 = g3 + 1 | 0;
                i2 = 31 - g3 | 0;
                c3 = g3 - 31 >> 31;
                h2 = m2;
                a3 = l2 >>> (m2 >>> 0) & c3 | k2 << i2;
                c3 = k2 >>> (m2 >>> 0) & c3;
                g3 = 0;
                i2 = l2 << i2;
                break;
              }
              if (!f3) {
                n2 = 0;
                f3 = 0;
                return (G2(n2 | 0), f3) | 0;
              }
              b[f3 >> 2] = a3 | 0;
              b[f3 + 4 >> 2] = j2 | c3 & 0;
              n2 = 0;
              f3 = 0;
              return (G2(n2 | 0), f3) | 0;
            }
            g3 = h2 - 1 | 0;
            if (g3 & h2 | 0) {
              i2 = (E2(h2 | 0) | 0) + 33 - (E2(k2 | 0) | 0) | 0;
              p3 = 64 - i2 | 0;
              m2 = 32 - i2 | 0;
              j2 = m2 >> 31;
              o2 = i2 - 32 | 0;
              c3 = o2 >> 31;
              h2 = i2;
              a3 = m2 - 1 >> 31 & k2 >>> (o2 >>> 0) | (k2 << m2 | l2 >>> (i2 >>> 0)) & c3;
              c3 = c3 & k2 >>> (i2 >>> 0);
              g3 = l2 << p3 & j2;
              i2 = (k2 << p3 | l2 >>> (o2 >>> 0)) & j2 | l2 << m2 & i2 - 33 >> 31;
              break;
            }
            if (f3 | 0) {
              b[f3 >> 2] = g3 & l2;
              b[f3 + 4 >> 2] = 0;
            }
            if ((h2 | 0) == 1) {
              o2 = j2 | c3 & 0;
              p3 = a3 | 0 | 0;
              return (G2(o2 | 0), p3) | 0;
            } else {
              p3 = Id(h2 | 0) | 0;
              o2 = k2 >>> (p3 >>> 0) | 0;
              p3 = k2 << 32 - p3 | l2 >>> (p3 >>> 0) | 0;
              return (G2(o2 | 0), p3) | 0;
            }
          } else {
            if (g3) {
              if (f3 | 0) {
                b[f3 >> 2] = (k2 >>> 0) % (h2 >>> 0);
                b[f3 + 4 >> 2] = 0;
              }
              o2 = 0;
              p3 = (k2 >>> 0) / (h2 >>> 0) >>> 0;
              return (G2(o2 | 0), p3) | 0;
            }
            if (!l2) {
              if (f3 | 0) {
                b[f3 >> 2] = 0;
                b[f3 + 4 >> 2] = (k2 >>> 0) % (i2 >>> 0);
              }
              o2 = 0;
              p3 = (k2 >>> 0) / (i2 >>> 0) >>> 0;
              return (G2(o2 | 0), p3) | 0;
            }
            g3 = i2 - 1 | 0;
            if (!(g3 & i2)) {
              if (f3 | 0) {
                b[f3 >> 2] = a3 | 0;
                b[f3 + 4 >> 2] = g3 & k2 | c3 & 0;
              }
              o2 = 0;
              p3 = k2 >>> ((Id(i2 | 0) | 0) >>> 0);
              return (G2(o2 | 0), p3) | 0;
            }
            g3 = (E2(i2 | 0) | 0) - (E2(k2 | 0) | 0) | 0;
            if (g3 >>> 0 <= 30) {
              c3 = g3 + 1 | 0;
              i2 = 31 - g3 | 0;
              h2 = c3;
              a3 = k2 << i2 | l2 >>> (c3 >>> 0);
              c3 = k2 >>> (c3 >>> 0);
              g3 = 0;
              i2 = l2 << i2;
              break;
            }
            if (!f3) {
              o2 = 0;
              p3 = 0;
              return (G2(o2 | 0), p3) | 0;
            }
            b[f3 >> 2] = a3 | 0;
            b[f3 + 4 >> 2] = j2 | c3 & 0;
            o2 = 0;
            p3 = 0;
            return (G2(o2 | 0), p3) | 0;
          }
        } while (0);
        if (!h2) {
          k2 = i2;
          j2 = 0;
          i2 = 0;
        } else {
          m2 = d3 | 0 | 0;
          l2 = n2 | e3 & 0;
          k2 = Gd(m2 | 0, l2 | 0, -1, -1) | 0;
          d3 = H() | 0;
          j2 = i2;
          i2 = 0;
          do {
            e3 = j2;
            j2 = g3 >>> 31 | j2 << 1;
            g3 = i2 | g3 << 1;
            e3 = a3 << 1 | e3 >>> 31 | 0;
            n2 = a3 >>> 31 | c3 << 1 | 0;
            Hd(k2 | 0, d3 | 0, e3 | 0, n2 | 0) | 0;
            p3 = H() | 0;
            o2 = p3 >> 31 | ((p3 | 0) < 0 ? -1 : 0) << 1;
            i2 = o2 & 1;
            a3 = Hd(e3 | 0, n2 | 0, o2 & m2 | 0, (((p3 | 0) < 0 ? -1 : 0) >> 31 | ((p3 | 0) < 0 ? -1 : 0) << 1) & l2 | 0) | 0;
            c3 = H() | 0;
            h2 = h2 - 1 | 0;
          } while ((h2 | 0) != 0);
          k2 = j2;
          j2 = 0;
        }
        h2 = 0;
        if (f3 | 0) {
          b[f3 >> 2] = a3;
          b[f3 + 4 >> 2] = c3;
        }
        o2 = (g3 | 0) >>> 31 | (k2 | h2) << 1 | (h2 << 1 | g3 >>> 31) & 0 | j2;
        p3 = (g3 << 1 | 0 >>> 31) & -2 | i2;
        return (G2(o2 | 0), p3) | 0;
      }
      function Kd(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = b2 >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
        i2 = ((b2 | 0) < 0 ? -1 : 0) >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
        f3 = d3 >> 31 | ((d3 | 0) < 0 ? -1 : 0) << 1;
        e3 = ((d3 | 0) < 0 ? -1 : 0) >> 31 | ((d3 | 0) < 0 ? -1 : 0) << 1;
        h2 = Hd(j2 ^ a3 | 0, i2 ^ b2 | 0, j2 | 0, i2 | 0) | 0;
        g3 = H() | 0;
        a3 = f3 ^ j2;
        b2 = e3 ^ i2;
        return Hd((Jd(h2, g3, Hd(f3 ^ c3 | 0, e3 ^ d3 | 0, f3 | 0, e3 | 0) | 0, H() | 0, 0) | 0) ^ a3 | 0, (H() | 0) ^ b2 | 0, a3 | 0, b2 | 0) | 0;
      }
      function Ld(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c3 = 0, d3 = 0, e3 = 0, f3 = 0;
        f3 = a3 & 65535;
        e3 = b2 & 65535;
        c3 = B3(e3, f3) | 0;
        d3 = a3 >>> 16;
        a3 = (c3 >>> 16) + (B3(e3, d3) | 0) | 0;
        e3 = b2 >>> 16;
        b2 = B3(e3, f3) | 0;
        return (G2((a3 >>> 16) + (B3(e3, d3) | 0) + (((a3 & 65535) + b2 | 0) >>> 16) | 0), a3 + b2 << 16 | c3 & 65535 | 0) | 0;
      }
      function Md(a3, b2, c3, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        var e3 = 0, f3 = 0;
        e3 = a3;
        f3 = c3;
        c3 = Ld(e3, f3) | 0;
        a3 = H() | 0;
        return (G2((B3(b2, f3) | 0) + (B3(d3, e3) | 0) + a3 | a3 & 0 | 0), c3 | 0 | 0) | 0;
      }
      function Nd(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        f3 = T3;
        T3 = T3 + 16 | 0;
        i2 = f3 | 0;
        h2 = c3 >> 31 | ((c3 | 0) < 0 ? -1 : 0) << 1;
        g3 = ((c3 | 0) < 0 ? -1 : 0) >> 31 | ((c3 | 0) < 0 ? -1 : 0) << 1;
        k2 = e3 >> 31 | ((e3 | 0) < 0 ? -1 : 0) << 1;
        j2 = ((e3 | 0) < 0 ? -1 : 0) >> 31 | ((e3 | 0) < 0 ? -1 : 0) << 1;
        a3 = Hd(h2 ^ a3 | 0, g3 ^ c3 | 0, h2 | 0, g3 | 0) | 0;
        c3 = H() | 0;
        Jd(a3, c3, Hd(k2 ^ d3 | 0, j2 ^ e3 | 0, k2 | 0, j2 | 0) | 0, H() | 0, i2) | 0;
        e3 = Hd(b[i2 >> 2] ^ h2 | 0, b[i2 + 4 >> 2] ^ g3 | 0, h2 | 0, g3 | 0) | 0;
        d3 = H() | 0;
        T3 = f3;
        return (G2(d3 | 0), e3) | 0;
      }
      function Od(a3, c3, d3, e3) {
        a3 = a3 | 0;
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0;
        g3 = T3;
        T3 = T3 + 16 | 0;
        f3 = g3 | 0;
        Jd(a3, c3, d3, e3, f3) | 0;
        T3 = g3;
        return (G2(b[f3 + 4 >> 2] | 0), b[f3 >> 2] | 0) | 0;
      }
      function Pd(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        if ((c3 | 0) < 32) {
          G2(b2 >> c3 | 0);
          return a3 >>> c3 | (b2 & (1 << c3) - 1) << 32 - c3;
        }
        G2(((b2 | 0) < 0 ? -1 : 0) | 0);
        return b2 >> c3 - 32 | 0;
      }
      function Qd(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        if ((c3 | 0) < 32) {
          G2(b2 >>> c3 | 0);
          return a3 >>> c3 | (b2 & (1 << c3) - 1) << 32 - c3;
        }
        G2(0);
        return b2 >>> c3 - 32 | 0;
      }
      function Rd(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        if ((c3 | 0) < 32) {
          G2(b2 << c3 | (a3 & (1 << c3) - 1 << 32 - c3) >>> 32 - c3 | 0);
          return a3 << c3;
        }
        G2(a3 << c3 - 32 | 0);
        return 0;
      }
      function Sd(a3, b2, c3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c3 = c3 | 0;
        b2 = E2(b2) | 0;
        if ((b2 | 0) == 32) {
          b2 = b2 + (E2(a3) | 0) | 0;
        }
        G2(0);
        return b2 | 0;
      }
      function Td(a3, b2) {
        a3 = +a3;
        b2 = +b2;
        if (a3 != a3) {
          return +b2;
        }
        if (b2 != b2) {
          return +a3;
        }
        return +D2(+a3, +b2);
      }
      function Ud(a3, b2) {
        a3 = +a3;
        b2 = +b2;
        if (a3 != a3) {
          return +b2;
        }
        if (b2 != b2) {
          return +a3;
        }
        return +C2(+a3, +b2);
      }
      function Vd(a3) {
        a3 = +a3;
        return a3 >= 0 ? +p2(a3 + 0.5) : +A2(a3 - 0.5);
      }
      function Wd(c3, d3, e3) {
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        if ((e3 | 0) >= 8192) {
          L2(c3 | 0, d3 | 0, e3 | 0) | 0;
          return c3 | 0;
        }
        h2 = c3 | 0;
        g3 = c3 + e3 | 0;
        if ((c3 & 3) == (d3 & 3)) {
          while (c3 & 3) {
            if (!e3) {
              return h2 | 0;
            }
            a2[c3 >> 0] = a2[d3 >> 0] | 0;
            c3 = c3 + 1 | 0;
            d3 = d3 + 1 | 0;
            e3 = e3 - 1 | 0;
          }
          e3 = g3 & -4 | 0;
          f3 = e3 - 64 | 0;
          while ((c3 | 0) <= (f3 | 0)) {
            b[c3 >> 2] = b[d3 >> 2];
            b[c3 + 4 >> 2] = b[d3 + 4 >> 2];
            b[c3 + 8 >> 2] = b[d3 + 8 >> 2];
            b[c3 + 12 >> 2] = b[d3 + 12 >> 2];
            b[c3 + 16 >> 2] = b[d3 + 16 >> 2];
            b[c3 + 20 >> 2] = b[d3 + 20 >> 2];
            b[c3 + 24 >> 2] = b[d3 + 24 >> 2];
            b[c3 + 28 >> 2] = b[d3 + 28 >> 2];
            b[c3 + 32 >> 2] = b[d3 + 32 >> 2];
            b[c3 + 36 >> 2] = b[d3 + 36 >> 2];
            b[c3 + 40 >> 2] = b[d3 + 40 >> 2];
            b[c3 + 44 >> 2] = b[d3 + 44 >> 2];
            b[c3 + 48 >> 2] = b[d3 + 48 >> 2];
            b[c3 + 52 >> 2] = b[d3 + 52 >> 2];
            b[c3 + 56 >> 2] = b[d3 + 56 >> 2];
            b[c3 + 60 >> 2] = b[d3 + 60 >> 2];
            c3 = c3 + 64 | 0;
            d3 = d3 + 64 | 0;
          }
          while ((c3 | 0) < (e3 | 0)) {
            b[c3 >> 2] = b[d3 >> 2];
            c3 = c3 + 4 | 0;
            d3 = d3 + 4 | 0;
          }
        } else {
          e3 = g3 - 4 | 0;
          while ((c3 | 0) < (e3 | 0)) {
            a2[c3 >> 0] = a2[d3 >> 0] | 0;
            a2[c3 + 1 >> 0] = a2[d3 + 1 >> 0] | 0;
            a2[c3 + 2 >> 0] = a2[d3 + 2 >> 0] | 0;
            a2[c3 + 3 >> 0] = a2[d3 + 3 >> 0] | 0;
            c3 = c3 + 4 | 0;
            d3 = d3 + 4 | 0;
          }
        }
        while ((c3 | 0) < (g3 | 0)) {
          a2[c3 >> 0] = a2[d3 >> 0] | 0;
          c3 = c3 + 1 | 0;
          d3 = d3 + 1 | 0;
        }
        return h2 | 0;
      }
      function Xd(c3, d3, e3) {
        c3 = c3 | 0;
        d3 = d3 | 0;
        e3 = e3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = c3 + e3 | 0;
        d3 = d3 & 255;
        if ((e3 | 0) >= 67) {
          while (c3 & 3) {
            a2[c3 >> 0] = d3;
            c3 = c3 + 1 | 0;
          }
          f3 = h2 & -4 | 0;
          i2 = d3 | d3 << 8 | d3 << 16 | d3 << 24;
          g3 = f3 - 64 | 0;
          while ((c3 | 0) <= (g3 | 0)) {
            b[c3 >> 2] = i2;
            b[c3 + 4 >> 2] = i2;
            b[c3 + 8 >> 2] = i2;
            b[c3 + 12 >> 2] = i2;
            b[c3 + 16 >> 2] = i2;
            b[c3 + 20 >> 2] = i2;
            b[c3 + 24 >> 2] = i2;
            b[c3 + 28 >> 2] = i2;
            b[c3 + 32 >> 2] = i2;
            b[c3 + 36 >> 2] = i2;
            b[c3 + 40 >> 2] = i2;
            b[c3 + 44 >> 2] = i2;
            b[c3 + 48 >> 2] = i2;
            b[c3 + 52 >> 2] = i2;
            b[c3 + 56 >> 2] = i2;
            b[c3 + 60 >> 2] = i2;
            c3 = c3 + 64 | 0;
          }
          while ((c3 | 0) < (f3 | 0)) {
            b[c3 >> 2] = i2;
            c3 = c3 + 4 | 0;
          }
        }
        while ((c3 | 0) < (h2 | 0)) {
          a2[c3 >> 0] = d3;
          c3 = c3 + 1 | 0;
        }
        return h2 - e3 | 0;
      }
      function Yd(a3) {
        a3 = +a3;
        return a3 >= 0 ? +p2(a3 + 0.5) : +A2(a3 - 0.5);
      }
      function Zd(a3) {
        a3 = a3 | 0;
        var c3 = 0, d3 = 0, e3 = 0;
        e3 = K2() | 0;
        d3 = b[g2 >> 2] | 0;
        c3 = d3 + a3 | 0;
        if ((a3 | 0) > 0 & (c3 | 0) < (d3 | 0) | (c3 | 0) < 0) {
          N3(c3 | 0) | 0;
          J(12);
          return -1;
        }
        if ((c3 | 0) > (e3 | 0)) {
          if (!(M2(c3 | 0) | 0)) {
            J(12);
            return -1;
          }
        }
        b[g2 >> 2] = c3;
        return d3 | 0;
      }
      return {
        ___divdi3: Kd,
        ___muldi3: Md,
        ___remdi3: Nd,
        ___uremdi3: Od,
        _areNeighborCells: ib,
        _bitshift64Ashr: Pd,
        _bitshift64Lshr: Qd,
        _bitshift64Shl: Rd,
        _calloc: Fd,
        _cellAreaKm2: xc,
        _cellAreaM2: yc,
        _cellAreaRads2: wc,
        _cellToBoundary: _b2,
        _cellToCenterChild: Kb,
        _cellToChildPos: dc,
        _cellToChildren: Ib,
        _cellToChildrenSize: Gb,
        _cellToLatLng: Zb,
        _cellToLocalIj: Jc,
        _cellToParent: Fb,
        _cellToVertex: qd,
        _cellToVertexes: rd,
        _cellsToDirectedEdge: jb,
        _cellsToLinkedMultiPolygon: na,
        _childPosToCell: ec,
        _compactCells: Lb,
        _destroyLinkedMultiPolygon: Ec,
        _directedEdgeToBoundary: pb,
        _directedEdgeToCells: nb,
        _edgeLengthKm: Ac,
        _edgeLengthM: Bc,
        _edgeLengthRads: zc,
        _emscripten_replace_memory: W,
        _free: Ed,
        _getBaseCellNumber: Cb,
        _getDirectedEdgeDestination: lb,
        _getDirectedEdgeOrigin: kb,
        _getHexagonAreaAvgKm2: qc,
        _getHexagonAreaAvgM2: rc,
        _getHexagonEdgeLengthAvgKm: sc,
        _getHexagonEdgeLengthAvgM: tc,
        _getIcosahedronFaces: ac,
        _getNumCells: uc,
        _getPentagons: cc,
        _getRes0Cells: ya,
        _getResolution: Bb,
        _greatCircleDistanceKm: mc,
        _greatCircleDistanceM: nc,
        _greatCircleDistanceRads: lc,
        _gridDisk: aa,
        _gridDiskDistances: ba,
        _gridDistance: Lc,
        _gridPathCells: Nc,
        _gridPathCellsSize: Mc,
        _gridRing: fa,
        _gridRingUnsafe: ga,
        _i64Add: Gd,
        _i64Subtract: Hd,
        _isPentagon: Hb,
        _isResClassIII: Ob,
        _isValidCell: Db,
        _isValidDirectedEdge: mb,
        _isValidVertex: td,
        _latLngToCell: Wb,
        _llvm_ctlz_i64: Sd,
        _llvm_maxnum_f64: Td,
        _llvm_minnum_f64: Ud,
        _llvm_round_f64: Vd,
        _localIjToCell: Kc,
        _malloc: Dd,
        _maxFaceCount: $b,
        _maxGridDiskSize: $2,
        _maxPolygonToCellsSize: ja,
        _maxPolygonToCellsSizeExperimental: Uc,
        _memcpy: Wd,
        _memset: Xd,
        _originToDirectedEdges: ob,
        _pentagonCount: bc,
        _polygonToCells: la,
        _polygonToCellsExperimental: Tc,
        _readInt64AsDoubleFromPointer: id,
        _res0CellCount: xa,
        _round: Yd,
        _sbrk: Zd,
        _sizeOfCellBoundary: dd,
        _sizeOfCoordIJ: hd,
        _sizeOfGeoLoop: ed,
        _sizeOfGeoPolygon: fd,
        _sizeOfH3Index: bd,
        _sizeOfLatLng: cd,
        _sizeOfLinkedGeoPolygon: gd,
        _uncompactCells: Mb,
        _uncompactCellsSize: Nb,
        _vertexToLatLng: sd,
        establishStackSpace: _2,
        stackAlloc: X,
        stackRestore: Z,
        stackSave: Y
      };
    }(asmGlobalArg, asmLibraryArg, buffer3)
  );
  var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
  var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
  var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
  var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
  var _areNeighborCells = Module["_areNeighborCells"] = asm["_areNeighborCells"];
  var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
  var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
  var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
  var _calloc = Module["_calloc"] = asm["_calloc"];
  var _cellAreaKm2 = Module["_cellAreaKm2"] = asm["_cellAreaKm2"];
  var _cellAreaM2 = Module["_cellAreaM2"] = asm["_cellAreaM2"];
  var _cellAreaRads2 = Module["_cellAreaRads2"] = asm["_cellAreaRads2"];
  var _cellToBoundary = Module["_cellToBoundary"] = asm["_cellToBoundary"];
  var _cellToCenterChild = Module["_cellToCenterChild"] = asm["_cellToCenterChild"];
  var _cellToChildPos = Module["_cellToChildPos"] = asm["_cellToChildPos"];
  var _cellToChildren = Module["_cellToChildren"] = asm["_cellToChildren"];
  var _cellToChildrenSize = Module["_cellToChildrenSize"] = asm["_cellToChildrenSize"];
  var _cellToLatLng = Module["_cellToLatLng"] = asm["_cellToLatLng"];
  var _cellToLocalIj = Module["_cellToLocalIj"] = asm["_cellToLocalIj"];
  var _cellToParent = Module["_cellToParent"] = asm["_cellToParent"];
  var _cellToVertex = Module["_cellToVertex"] = asm["_cellToVertex"];
  var _cellToVertexes = Module["_cellToVertexes"] = asm["_cellToVertexes"];
  var _cellsToDirectedEdge = Module["_cellsToDirectedEdge"] = asm["_cellsToDirectedEdge"];
  var _cellsToLinkedMultiPolygon = Module["_cellsToLinkedMultiPolygon"] = asm["_cellsToLinkedMultiPolygon"];
  var _childPosToCell = Module["_childPosToCell"] = asm["_childPosToCell"];
  var _compactCells = Module["_compactCells"] = asm["_compactCells"];
  var _destroyLinkedMultiPolygon = Module["_destroyLinkedMultiPolygon"] = asm["_destroyLinkedMultiPolygon"];
  var _directedEdgeToBoundary = Module["_directedEdgeToBoundary"] = asm["_directedEdgeToBoundary"];
  var _directedEdgeToCells = Module["_directedEdgeToCells"] = asm["_directedEdgeToCells"];
  var _edgeLengthKm = Module["_edgeLengthKm"] = asm["_edgeLengthKm"];
  var _edgeLengthM = Module["_edgeLengthM"] = asm["_edgeLengthM"];
  var _edgeLengthRads = Module["_edgeLengthRads"] = asm["_edgeLengthRads"];
  var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
  var _free = Module["_free"] = asm["_free"];
  var _getBaseCellNumber = Module["_getBaseCellNumber"] = asm["_getBaseCellNumber"];
  var _getDirectedEdgeDestination = Module["_getDirectedEdgeDestination"] = asm["_getDirectedEdgeDestination"];
  var _getDirectedEdgeOrigin = Module["_getDirectedEdgeOrigin"] = asm["_getDirectedEdgeOrigin"];
  var _getHexagonAreaAvgKm2 = Module["_getHexagonAreaAvgKm2"] = asm["_getHexagonAreaAvgKm2"];
  var _getHexagonAreaAvgM2 = Module["_getHexagonAreaAvgM2"] = asm["_getHexagonAreaAvgM2"];
  var _getHexagonEdgeLengthAvgKm = Module["_getHexagonEdgeLengthAvgKm"] = asm["_getHexagonEdgeLengthAvgKm"];
  var _getHexagonEdgeLengthAvgM = Module["_getHexagonEdgeLengthAvgM"] = asm["_getHexagonEdgeLengthAvgM"];
  var _getIcosahedronFaces = Module["_getIcosahedronFaces"] = asm["_getIcosahedronFaces"];
  var _getNumCells = Module["_getNumCells"] = asm["_getNumCells"];
  var _getPentagons = Module["_getPentagons"] = asm["_getPentagons"];
  var _getRes0Cells = Module["_getRes0Cells"] = asm["_getRes0Cells"];
  var _getResolution = Module["_getResolution"] = asm["_getResolution"];
  var _greatCircleDistanceKm = Module["_greatCircleDistanceKm"] = asm["_greatCircleDistanceKm"];
  var _greatCircleDistanceM = Module["_greatCircleDistanceM"] = asm["_greatCircleDistanceM"];
  var _greatCircleDistanceRads = Module["_greatCircleDistanceRads"] = asm["_greatCircleDistanceRads"];
  var _gridDisk = Module["_gridDisk"] = asm["_gridDisk"];
  var _gridDiskDistances = Module["_gridDiskDistances"] = asm["_gridDiskDistances"];
  var _gridDistance = Module["_gridDistance"] = asm["_gridDistance"];
  var _gridPathCells = Module["_gridPathCells"] = asm["_gridPathCells"];
  var _gridPathCellsSize = Module["_gridPathCellsSize"] = asm["_gridPathCellsSize"];
  var _gridRing = Module["_gridRing"] = asm["_gridRing"];
  var _gridRingUnsafe = Module["_gridRingUnsafe"] = asm["_gridRingUnsafe"];
  var _i64Add = Module["_i64Add"] = asm["_i64Add"];
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
  var _isPentagon = Module["_isPentagon"] = asm["_isPentagon"];
  var _isResClassIII = Module["_isResClassIII"] = asm["_isResClassIII"];
  var _isValidCell = Module["_isValidCell"] = asm["_isValidCell"];
  var _isValidDirectedEdge = Module["_isValidDirectedEdge"] = asm["_isValidDirectedEdge"];
  var _isValidVertex = Module["_isValidVertex"] = asm["_isValidVertex"];
  var _latLngToCell = Module["_latLngToCell"] = asm["_latLngToCell"];
  var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
  var _llvm_maxnum_f64 = Module["_llvm_maxnum_f64"] = asm["_llvm_maxnum_f64"];
  var _llvm_minnum_f64 = Module["_llvm_minnum_f64"] = asm["_llvm_minnum_f64"];
  var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
  var _localIjToCell = Module["_localIjToCell"] = asm["_localIjToCell"];
  var _malloc = Module["_malloc"] = asm["_malloc"];
  var _maxFaceCount = Module["_maxFaceCount"] = asm["_maxFaceCount"];
  var _maxGridDiskSize = Module["_maxGridDiskSize"] = asm["_maxGridDiskSize"];
  var _maxPolygonToCellsSize = Module["_maxPolygonToCellsSize"] = asm["_maxPolygonToCellsSize"];
  var _maxPolygonToCellsSizeExperimental = Module["_maxPolygonToCellsSizeExperimental"] = asm["_maxPolygonToCellsSizeExperimental"];
  var _memcpy = Module["_memcpy"] = asm["_memcpy"];
  var _memset = Module["_memset"] = asm["_memset"];
  var _originToDirectedEdges = Module["_originToDirectedEdges"] = asm["_originToDirectedEdges"];
  var _pentagonCount = Module["_pentagonCount"] = asm["_pentagonCount"];
  var _polygonToCells = Module["_polygonToCells"] = asm["_polygonToCells"];
  var _polygonToCellsExperimental = Module["_polygonToCellsExperimental"] = asm["_polygonToCellsExperimental"];
  var _readInt64AsDoubleFromPointer = Module["_readInt64AsDoubleFromPointer"] = asm["_readInt64AsDoubleFromPointer"];
  var _res0CellCount = Module["_res0CellCount"] = asm["_res0CellCount"];
  var _round = Module["_round"] = asm["_round"];
  var _sbrk = Module["_sbrk"] = asm["_sbrk"];
  var _sizeOfCellBoundary = Module["_sizeOfCellBoundary"] = asm["_sizeOfCellBoundary"];
  var _sizeOfCoordIJ = Module["_sizeOfCoordIJ"] = asm["_sizeOfCoordIJ"];
  var _sizeOfGeoLoop = Module["_sizeOfGeoLoop"] = asm["_sizeOfGeoLoop"];
  var _sizeOfGeoPolygon = Module["_sizeOfGeoPolygon"] = asm["_sizeOfGeoPolygon"];
  var _sizeOfH3Index = Module["_sizeOfH3Index"] = asm["_sizeOfH3Index"];
  var _sizeOfLatLng = Module["_sizeOfLatLng"] = asm["_sizeOfLatLng"];
  var _sizeOfLinkedGeoPolygon = Module["_sizeOfLinkedGeoPolygon"] = asm["_sizeOfLinkedGeoPolygon"];
  var _uncompactCells = Module["_uncompactCells"] = asm["_uncompactCells"];
  var _uncompactCellsSize = Module["_uncompactCellsSize"] = asm["_uncompactCellsSize"];
  var _vertexToLatLng = Module["_vertexToLatLng"] = asm["_vertexToLatLng"];
  var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
  var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
  var stackRestore = Module["stackRestore"] = asm["stackRestore"];
  var stackSave = Module["stackSave"] = asm["stackSave"];
  Module["asm"] = asm;
  Module["cwrap"] = cwrap;
  Module["setValue"] = setValue;
  Module["getValue"] = getValue;
  if (memoryInitializer) {
    if (!isDataURI(memoryInitializer)) {
      memoryInitializer = locateFile(memoryInitializer);
    }
    {
      addRunDependency("memory initializer");
      var applyMemoryInitializer = function(data) {
        if (data.byteLength) {
          data = new Uint8Array(data);
        }
        HEAPU8.set(data, GLOBAL_BASE);
        if (Module["memoryInitializerRequest"]) {
          delete Module["memoryInitializerRequest"].response;
        }
        removeRunDependency("memory initializer");
      };
      var doBrowserLoad = function() {
        readAsync(memoryInitializer, applyMemoryInitializer, function() {
          throw "could not load memory initializer " + memoryInitializer;
        });
      };
      var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
      if (memoryInitializerBytes) {
        applyMemoryInitializer(memoryInitializerBytes.buffer);
      } else if (Module["memoryInitializerRequest"]) {
        var useRequest = function() {
          var request = Module["memoryInitializerRequest"];
          var response = request.response;
          if (request.status !== 200 && request.status !== 0) {
            var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
            if (data) {
              response = data.buffer;
            } else {
              console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
              doBrowserLoad();
              return;
            }
          }
          applyMemoryInitializer(response);
        };
        if (Module["memoryInitializerRequest"].response) {
          setTimeout(useRequest, 0);
        } else {
          Module["memoryInitializerRequest"].addEventListener("load", useRequest);
        }
      } else {
        doBrowserLoad();
      }
    }
  }
  var calledRun;
  dependenciesFulfilled = function runCaller() {
    if (!calledRun) {
      run();
    }
    if (!calledRun) {
      dependenciesFulfilled = runCaller;
    }
  };
  function run(args) {
    args = args || arguments_;
    if (runDependencies > 0) {
      return;
    }
    preRun();
    if (runDependencies > 0) {
      return;
    }
    function doRun() {
      if (calledRun) {
        return;
      }
      calledRun = true;
      if (ABORT) {
        return;
      }
      initRuntime();
      preMain();
      if (Module["onRuntimeInitialized"]) {
        Module["onRuntimeInitialized"]();
      }
      postRun();
    }
    if (Module["setStatus"]) {
      Module["setStatus"]("Running...");
      setTimeout(function() {
        setTimeout(function() {
          Module["setStatus"]("");
        }, 1);
        doRun();
      }, 1);
    } else {
      doRun();
    }
  }
  Module["run"] = run;
  function abort(what) {
    if (Module["onAbort"]) {
      Module["onAbort"](what);
    }
    what += "";
    out(what);
    err(what);
    ABORT = true;
    throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
  }
  Module["abort"] = abort;
  if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function") {
      Module["preInit"] = [Module["preInit"]];
    }
    while (Module["preInit"].length > 0) {
      Module["preInit"].pop()();
    }
  }
  run();
  return libh32;
}(typeof libh3 === "object" ? libh3 : {});
var NUMBER = "number";
var H3_ERROR = NUMBER;
var BOOLEAN = NUMBER;
var H3_LOWER = NUMBER;
var H3_UPPER = NUMBER;
var RESOLUTION = NUMBER;
var POINTER = NUMBER;
var BINDINGS = [
  // The size functions are inserted via build/sizes.h
  ["sizeOfH3Index", NUMBER],
  ["sizeOfLatLng", NUMBER],
  ["sizeOfCellBoundary", NUMBER],
  ["sizeOfGeoLoop", NUMBER],
  ["sizeOfGeoPolygon", NUMBER],
  ["sizeOfLinkedGeoPolygon", NUMBER],
  ["sizeOfCoordIJ", NUMBER],
  ["readInt64AsDoubleFromPointer", NUMBER],
  // The remaining functions are defined in the core lib in h3Api.h
  ["isValidCell", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["latLngToCell", H3_ERROR, [NUMBER, NUMBER, RESOLUTION, POINTER]],
  ["cellToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["maxGridDiskSize", H3_ERROR, [NUMBER, POINTER]],
  ["gridDisk", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["gridDiskDistances", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER, POINTER]],
  ["gridRing", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["gridRingUnsafe", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["maxPolygonToCellsSize", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["polygonToCells", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["maxPolygonToCellsSizeExperimental", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["polygonToCellsExperimental", H3_ERROR, [POINTER, RESOLUTION, NUMBER, NUMBER, NUMBER, POINTER]],
  ["cellsToLinkedMultiPolygon", H3_ERROR, [POINTER, NUMBER, POINTER]],
  ["destroyLinkedMultiPolygon", null, [POINTER]],
  ["compactCells", H3_ERROR, [POINTER, POINTER, NUMBER, NUMBER]],
  ["uncompactCells", H3_ERROR, [POINTER, NUMBER, NUMBER, POINTER, NUMBER, RESOLUTION]],
  ["uncompactCellsSize", H3_ERROR, [POINTER, NUMBER, NUMBER, RESOLUTION, POINTER]],
  ["isPentagon", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["isResClassIII", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["getBaseCellNumber", NUMBER, [H3_LOWER, H3_UPPER]],
  ["getResolution", NUMBER, [H3_LOWER, H3_UPPER]],
  ["maxFaceCount", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getIcosahedronFaces", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellToParent", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildren", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToCenterChild", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildrenSize", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildPos", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["childPosToCell", H3_ERROR, [NUMBER, NUMBER, H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["areNeighborCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["cellsToDirectedEdge", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["getDirectedEdgeOrigin", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getDirectedEdgeDestination", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["isValidDirectedEdge", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["directedEdgeToCells", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["originToDirectedEdges", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["directedEdgeToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["gridDistance", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["gridPathCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["gridPathCellsSize", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["cellToLocalIj", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["localIjToCell", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER, NUMBER, POINTER]],
  ["getHexagonAreaAvgM2", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonAreaAvgKm2", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonEdgeLengthAvgM", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonEdgeLengthAvgKm", H3_ERROR, [RESOLUTION, POINTER]],
  ["greatCircleDistanceM", NUMBER, [POINTER, POINTER]],
  ["greatCircleDistanceKm", NUMBER, [POINTER, POINTER]],
  ["greatCircleDistanceRads", NUMBER, [POINTER, POINTER]],
  ["cellAreaM2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellAreaKm2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellAreaRads2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthM", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthKm", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthRads", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getNumCells", H3_ERROR, [RESOLUTION, POINTER]],
  ["getRes0Cells", H3_ERROR, [POINTER]],
  ["res0CellCount", NUMBER],
  ["getPentagons", H3_ERROR, [NUMBER, POINTER]],
  ["pentagonCount", NUMBER],
  ["cellToVertex", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["cellToVertexes", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["vertexToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["isValidVertex", BOOLEAN, [H3_LOWER, H3_UPPER]]
];
var E_SUCCESS = 0;
var E_FAILED = 1;
var E_DOMAIN = 2;
var E_LATLNG_DOMAIN = 3;
var E_RES_DOMAIN = 4;
var E_CELL_INVALID = 5;
var E_DIR_EDGE_INVALID = 6;
var E_UNDIR_EDGE_INVALID = 7;
var E_VERTEX_INVALID = 8;
var E_PENTAGON = 9;
var E_DUPLICATE_INPUT = 10;
var E_NOT_NEIGHBORS = 11;
var E_RES_MISMATCH = 12;
var E_MEMORY_ALLOC = 13;
var E_MEMORY_BOUNDS = 14;
var E_OPTION_INVALID = 15;
var H3_ERROR_MSGS = {};
H3_ERROR_MSGS[E_SUCCESS] = "Success";
H3_ERROR_MSGS[E_FAILED] = "The operation failed but a more specific error is not available";
H3_ERROR_MSGS[E_DOMAIN] = "Argument was outside of acceptable range";
H3_ERROR_MSGS[E_LATLNG_DOMAIN] = "Latitude or longitude arguments were outside of acceptable range";
H3_ERROR_MSGS[E_RES_DOMAIN] = "Resolution argument was outside of acceptable range";
H3_ERROR_MSGS[E_CELL_INVALID] = "Cell argument was not valid";
H3_ERROR_MSGS[E_DIR_EDGE_INVALID] = "Directed edge argument was not valid";
H3_ERROR_MSGS[E_UNDIR_EDGE_INVALID] = "Undirected edge argument was not valid";
H3_ERROR_MSGS[E_VERTEX_INVALID] = "Vertex argument was not valid";
H3_ERROR_MSGS[E_PENTAGON] = "Pentagon distortion was encountered";
H3_ERROR_MSGS[E_DUPLICATE_INPUT] = "Duplicate input";
H3_ERROR_MSGS[E_NOT_NEIGHBORS] = "Cell arguments were not neighbors";
H3_ERROR_MSGS[E_RES_MISMATCH] = "Cell arguments had incompatible resolutions";
H3_ERROR_MSGS[E_MEMORY_ALLOC] = "Memory allocation failed";
H3_ERROR_MSGS[E_MEMORY_BOUNDS] = "Bounds of provided memory were insufficient";
H3_ERROR_MSGS[E_OPTION_INVALID] = "Mode or flags argument was not valid";
var E_UNKNOWN_UNIT = 1e3;
var E_ARRAY_LENGTH = 1001;
var E_NULL_INDEX = 1002;
var JS_ERROR_MESSAGES = {};
JS_ERROR_MESSAGES[E_UNKNOWN_UNIT] = "Unknown unit";
JS_ERROR_MESSAGES[E_ARRAY_LENGTH] = "Array length out of bounds";
JS_ERROR_MESSAGES[E_NULL_INDEX] = "Got unexpected null value for H3 index";
var UNKNOWN_ERROR_MSG = "Unknown error";
function createError(messages, errCode, meta) {
  var hasValue = meta && "value" in meta;
  var err = new Error((messages[errCode] || UNKNOWN_ERROR_MSG) + " (code: " + errCode + (hasValue ? ", value: " + meta.value : "") + ")");
  err.code = errCode;
  return err;
}
function H3LibraryError(errCode, value) {
  var meta = arguments.length === 2 ? {
    value
  } : {};
  return createError(H3_ERROR_MSGS, errCode, meta);
}
function JSBindingError(errCode, value) {
  var meta = arguments.length === 2 ? {
    value
  } : {};
  return createError(JS_ERROR_MESSAGES, errCode, meta);
}
function throwIfError(errCode) {
  if (errCode !== 0) {
    throw H3LibraryError(errCode);
  }
}
var H3 = {};
BINDINGS.forEach(function bind(def) {
  H3[def[0]] = libh3.cwrap.apply(libh3, def);
});
var BASE_16 = 16;
var SZ_INT = 4;
var SZ_DBL = 8;
var SZ_INT64 = 8;
var SZ_H3INDEX = H3.sizeOfH3Index();
var SZ_LATLNG = H3.sizeOfLatLng();
var SZ_CELLBOUNDARY = H3.sizeOfCellBoundary();
var SZ_GEOPOLYGON = H3.sizeOfGeoPolygon();
var SZ_GEOLOOP = H3.sizeOfGeoLoop();
var SZ_LINKED_GEOPOLYGON = H3.sizeOfLinkedGeoPolygon();
var SZ_COORDIJ = H3.sizeOfCoordIJ();
function validateRes(res) {
  if (typeof res !== "number" || res < 0 || res > 15 || Math.floor(res) !== res) {
    throw H3LibraryError(E_RES_DOMAIN, res);
  }
  return res;
}
function validateH3Index(h3Index) {
  if (!h3Index) {
    throw JSBindingError(E_NULL_INDEX);
  }
  return h3Index;
}
var MAX_JS_ARRAY_LENGTH = Math.pow(2, 32) - 1;
function validateArrayLength(length3) {
  if (length3 > MAX_JS_ARRAY_LENGTH) {
    throw JSBindingError(E_ARRAY_LENGTH, length3);
  }
  return length3;
}
var INVALID_HEXIDECIMAL_CHAR = /[^0-9a-fA-F]/;
function h3IndexToSplitLong(h3Index) {
  if (Array.isArray(h3Index) && h3Index.length === 2 && Number.isInteger(h3Index[0]) && Number.isInteger(h3Index[1])) {
    return h3Index;
  }
  if (typeof h3Index !== "string" || INVALID_HEXIDECIMAL_CHAR.test(h3Index)) {
    return [0, 0];
  }
  var upper = parseInt(h3Index.substring(0, h3Index.length - 8), BASE_16);
  var lower = parseInt(h3Index.substring(h3Index.length - 8), BASE_16);
  return [lower, upper];
}
function hexFrom32Bit(num) {
  if (num >= 0) {
    return num.toString(BASE_16);
  }
  num = num & 2147483647;
  var tempStr = zeroPad(8, num.toString(BASE_16));
  var topNum = (parseInt(tempStr[0], BASE_16) + 8).toString(BASE_16);
  tempStr = topNum + tempStr.substring(1);
  return tempStr;
}
function splitLongToH3Index(lower, upper) {
  return hexFrom32Bit(upper) + zeroPad(8, hexFrom32Bit(lower));
}
function zeroPad(fullLen, numStr) {
  var numZeroes = fullLen - numStr.length;
  var outStr = "";
  for (var i2 = 0; i2 < numZeroes; i2++) {
    outStr += "0";
  }
  outStr = outStr + numStr;
  return outStr;
}
var UPPER_BIT_DIVISOR = Math.pow(2, 32);
function polygonArrayToGeoLoop(polygonArray, geoLoop, isGeoJson) {
  var numVerts = polygonArray.length;
  var geoCoordArray = libh3._calloc(numVerts, SZ_LATLNG);
  var latIndex = isGeoJson ? 1 : 0;
  var lngIndex = isGeoJson ? 0 : 1;
  for (var i2 = 0; i2 < numVerts * 2; i2 += 2) {
    libh3.HEAPF64.set([polygonArray[i2 / 2][latIndex], polygonArray[i2 / 2][lngIndex]].map(degsToRads), geoCoordArray / SZ_DBL + i2);
  }
  libh3.HEAPU32.set([numVerts, geoCoordArray], geoLoop / SZ_INT);
  return geoLoop;
}
function coordinatesToGeoPolygon(coordinates, isGeoJson) {
  var numHoles = coordinates.length - 1;
  var geoPolygon = libh3._calloc(SZ_GEOPOLYGON);
  var geoLoopOffset = 0;
  var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
  var holesOffset = numHolesOffset + SZ_INT;
  polygonArrayToGeoLoop(coordinates[0], geoPolygon + geoLoopOffset, isGeoJson);
  var holes;
  if (numHoles > 0) {
    holes = libh3._calloc(numHoles, SZ_GEOLOOP);
    for (var i2 = 0; i2 < numHoles; i2++) {
      polygonArrayToGeoLoop(coordinates[i2 + 1], holes + SZ_GEOLOOP * i2, isGeoJson);
    }
  }
  libh3.setValue(geoPolygon + numHolesOffset, numHoles, "i32");
  libh3.setValue(geoPolygon + holesOffset, holes, "i32");
  return geoPolygon;
}
function destroyGeoPolygon(geoPolygon) {
  var geoLoopOffset = 0;
  var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
  var holesOffset = numHolesOffset + SZ_INT;
  var geoLoopArrayOffset = SZ_INT;
  libh3._free(libh3.getValue(geoPolygon + geoLoopOffset + geoLoopArrayOffset, "i8*"));
  var numHoles = libh3.getValue(geoPolygon + numHolesOffset, "i32");
  if (numHoles > 0) {
    var holes = libh3.getValue(geoPolygon + holesOffset, "i32");
    for (var i2 = 0; i2 < numHoles; i2++) {
      libh3._free(libh3.getValue(holes + SZ_GEOLOOP * i2 + geoLoopArrayOffset, "i8*"));
    }
    libh3._free(holes);
  }
  libh3._free(geoPolygon);
}
function readH3IndexFromPointer(cAddress, offset) {
  if (offset === void 0)
    offset = 0;
  var lower = libh3.getValue(cAddress + SZ_H3INDEX * offset, "i32");
  var upper = libh3.getValue(cAddress + SZ_H3INDEX * offset + SZ_INT, "i32");
  return upper ? splitLongToH3Index(lower, upper) : null;
}
function readInt64AsDoubleFromPointer(cAddress) {
  return H3.readInt64AsDoubleFromPointer(cAddress);
}
function readArrayOfH3Indexes(cAddress, maxCount) {
  var out = [];
  for (var i2 = 0; i2 < maxCount; i2++) {
    var h3Index = readH3IndexFromPointer(cAddress, i2);
    if (h3Index !== null) {
      out.push(h3Index);
    }
  }
  return out;
}
function readSingleCoord(cAddress) {
  return radsToDegs(libh3.getValue(cAddress, "double"));
}
function readLatLng(cAddress) {
  return [readSingleCoord(cAddress), readSingleCoord(cAddress + SZ_DBL)];
}
function readLatLngGeoJson(cAddress) {
  return [readSingleCoord(cAddress + SZ_DBL), readSingleCoord(cAddress)];
}
function readCellBoundary(cellBoundary, geoJsonCoords, closedLoop) {
  var numVerts = libh3.getValue(cellBoundary, "i32");
  var vertsPos = cellBoundary + SZ_DBL;
  var out = [];
  var readCoord = geoJsonCoords ? readLatLngGeoJson : readLatLng;
  for (var i2 = 0; i2 < numVerts * 2; i2 += 2) {
    out.push(readCoord(vertsPos + SZ_DBL * i2));
  }
  if (closedLoop) {
    out.push(out[0]);
  }
  return out;
}
function latLngToCell(lat, lng, res) {
  var latLng = libh3._malloc(SZ_LATLNG);
  libh3.HEAPF64.set([lat, lng].map(degsToRads), latLng / SZ_DBL);
  var h3Index = libh3._malloc(SZ_H3INDEX);
  try {
    throwIfError(H3.latLngToCell(latLng, res, h3Index));
    return validateH3Index(readH3IndexFromPointer(h3Index));
  } finally {
    libh3._free(h3Index);
    libh3._free(latLng);
  }
}
function cellToLatLng(h3Index) {
  var latLng = libh3._malloc(SZ_LATLNG);
  var ref = h3IndexToSplitLong(h3Index);
  var lower = ref[0];
  var upper = ref[1];
  try {
    throwIfError(H3.cellToLatLng(lower, upper, latLng));
    return readLatLng(latLng);
  } finally {
    libh3._free(latLng);
  }
}
function cellToBoundary(h3Index, formatAsGeoJson) {
  var cellBoundary = libh3._malloc(SZ_CELLBOUNDARY);
  var ref = h3IndexToSplitLong(h3Index);
  var lower = ref[0];
  var upper = ref[1];
  try {
    throwIfError(H3.cellToBoundary(lower, upper, cellBoundary));
    return readCellBoundary(cellBoundary, formatAsGeoJson, formatAsGeoJson);
  } finally {
    libh3._free(cellBoundary);
  }
}
function polygonToCells(coordinates, res, isGeoJson) {
  validateRes(res);
  isGeoJson = Boolean(isGeoJson);
  if (coordinates.length === 0 || coordinates[0].length === 0) {
    return [];
  }
  var polygon = typeof coordinates[0][0] === "number" ? [coordinates] : coordinates;
  var geoPolygon = coordinatesToGeoPolygon(
    // @ts-expect-error - There's no way to convince TS that polygon is now number[][][]
    polygon,
    isGeoJson
  );
  var countPtr = libh3._malloc(SZ_INT64);
  try {
    throwIfError(H3.maxPolygonToCellsSize(geoPolygon, res, 0, countPtr));
    var count = validateArrayLength(readInt64AsDoubleFromPointer(countPtr));
    var hexagons = libh3._calloc(count, SZ_H3INDEX);
    try {
      throwIfError(H3.polygonToCells(geoPolygon, res, 0, hexagons));
      return readArrayOfH3Indexes(hexagons, count);
    } finally {
      libh3._free(hexagons);
    }
  } finally {
    libh3._free(countPtr);
    destroyGeoPolygon(geoPolygon);
  }
}
function degsToRads(deg) {
  return deg * Math.PI / 180;
}
function radsToDegs(rad) {
  return rad * 180 / Math.PI;
}

// node_modules/three/build/three.webgpu.js
var refreshUniforms = [
  "alphaMap",
  "alphaTest",
  "anisotropy",
  "anisotropyMap",
  "anisotropyRotation",
  "aoMap",
  "aoMapIntensity",
  "attenuationColor",
  "attenuationDistance",
  "bumpMap",
  "clearcoat",
  "clearcoatMap",
  "clearcoatNormalMap",
  "clearcoatNormalScale",
  "clearcoatRoughness",
  "color",
  "dispersion",
  "displacementMap",
  "emissive",
  "emissiveIntensity",
  "emissiveMap",
  "envMap",
  "envMapIntensity",
  "gradientMap",
  "ior",
  "iridescence",
  "iridescenceIOR",
  "iridescenceMap",
  "iridescenceThicknessMap",
  "lightMap",
  "lightMapIntensity",
  "map",
  "matcap",
  "metalness",
  "metalnessMap",
  "normalMap",
  "normalScale",
  "opacity",
  "roughness",
  "roughnessMap",
  "sheen",
  "sheenColor",
  "sheenColorMap",
  "sheenRoughnessMap",
  "shininess",
  "specular",
  "specularColor",
  "specularColorMap",
  "specularIntensity",
  "specularIntensityMap",
  "specularMap",
  "thickness",
  "transmission",
  "transmissionMap"
];
var _lightsCache = /* @__PURE__ */ new WeakMap();
var NodeMaterialObserver = class {
  /**
   * Constructs a new node material observer.
   *
   * @param {NodeBuilder} builder - The node builder.
   */
  constructor(builder) {
    this.renderObjects = /* @__PURE__ */ new WeakMap();
    this.hasNode = this.containsNode(builder);
    this.hasAnimation = builder.object.isSkinnedMesh === true;
    this.refreshUniforms = refreshUniforms;
    this.renderId = 0;
  }
  /**
   * Returns `true` if the given render object is verified for the first time of this observer.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {boolean} Whether the given render object is verified for the first time of this observer.
   */
  firstInitialization(renderObject) {
    const hasInitialized = this.renderObjects.has(renderObject);
    if (hasInitialized === false) {
      this.getRenderObjectData(renderObject);
      return true;
    }
    return false;
  }
  /**
   * Returns `true` if the current rendering produces motion vectors.
   *
   * @param {Renderer} renderer - The renderer.
   * @return {boolean} Whether the current rendering produces motion vectors or not.
   */
  needsVelocity(renderer3) {
    const mrt3 = renderer3.getMRT();
    return mrt3 !== null && mrt3.has("velocity");
  }
  /**
   * Returns monitoring data for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {Object} The monitoring data.
   */
  getRenderObjectData(renderObject) {
    let data = this.renderObjects.get(renderObject);
    if (data === void 0) {
      const { geometry, material, object } = renderObject;
      data = {
        material: this.getMaterialData(material),
        geometry: {
          id: geometry.id,
          attributes: this.getAttributesData(geometry.attributes),
          indexVersion: geometry.index ? geometry.index.version : null,
          drawRange: { start: geometry.drawRange.start, count: geometry.drawRange.count }
        },
        worldMatrix: object.matrixWorld.clone()
      };
      if (object.center) {
        data.center = object.center.clone();
      }
      if (object.morphTargetInfluences) {
        data.morphTargetInfluences = object.morphTargetInfluences.slice();
      }
      if (renderObject.bundle !== null) {
        data.version = renderObject.bundle.version;
      }
      if (data.material.transmission > 0) {
        const { width, height } = renderObject.context;
        data.bufferWidth = width;
        data.bufferHeight = height;
      }
      data.lights = this.getLightsData(renderObject.lightsNode.getLights());
      this.renderObjects.set(renderObject, data);
    }
    return data;
  }
  /**
   * Returns an attribute data structure holding the attributes versions for
   * monitoring.
   *
   * @param {Object} attributes - The geometry attributes.
   * @return {Object} An object for monitoring the versions of attributes.
   */
  getAttributesData(attributes) {
    const attributesData = {};
    for (const name in attributes) {
      const attribute3 = attributes[name];
      attributesData[name] = {
        version: attribute3.version
      };
    }
    return attributesData;
  }
  /**
   * Returns `true` if the node builder's material uses
   * node properties.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {boolean} Whether the node builder's material uses node properties or not.
   */
  containsNode(builder) {
    const material = builder.material;
    for (const property3 in material) {
      if (material[property3] && material[property3].isNode)
        return true;
    }
    if (builder.renderer.overrideNodes.modelViewMatrix !== null || builder.renderer.overrideNodes.modelNormalViewMatrix !== null)
      return true;
    return false;
  }
  /**
   * Returns a material data structure holding the material property values for
   * monitoring.
   *
   * @param {Material} material - The material.
   * @return {Object} An object for monitoring material properties.
   */
  getMaterialData(material) {
    const data = {};
    for (const property3 of this.refreshUniforms) {
      const value = material[property3];
      if (value === null || value === void 0)
        continue;
      if (typeof value === "object" && value.clone !== void 0) {
        if (value.isTexture === true) {
          data[property3] = { id: value.id, version: value.version };
        } else {
          data[property3] = value.clone();
        }
      } else {
        data[property3] = value;
      }
    }
    return data;
  }
  /**
   * Returns `true` if the given render object has not changed its state.
   *
   * @param {RenderObject} renderObject - The render object.
   * @param {Array<Light>} lightsData - The current material lights.
   * @return {boolean} Whether the given render object has changed its state or not.
   */
  equals(renderObject, lightsData) {
    const { object, material, geometry } = renderObject;
    const renderObjectData = this.getRenderObjectData(renderObject);
    if (renderObjectData.worldMatrix.equals(object.matrixWorld) !== true) {
      renderObjectData.worldMatrix.copy(object.matrixWorld);
      return false;
    }
    const materialData = renderObjectData.material;
    for (const property3 in materialData) {
      const value = materialData[property3];
      const mtlValue = material[property3];
      if (value.equals !== void 0) {
        if (value.equals(mtlValue) === false) {
          value.copy(mtlValue);
          return false;
        }
      } else if (mtlValue.isTexture === true) {
        if (value.id !== mtlValue.id || value.version !== mtlValue.version) {
          value.id = mtlValue.id;
          value.version = mtlValue.version;
          return false;
        }
      } else if (value !== mtlValue) {
        materialData[property3] = mtlValue;
        return false;
      }
    }
    if (materialData.transmission > 0) {
      const { width, height } = renderObject.context;
      if (renderObjectData.bufferWidth !== width || renderObjectData.bufferHeight !== height) {
        renderObjectData.bufferWidth = width;
        renderObjectData.bufferHeight = height;
        return false;
      }
    }
    const storedGeometryData = renderObjectData.geometry;
    const attributes = geometry.attributes;
    const storedAttributes = storedGeometryData.attributes;
    const storedAttributeNames = Object.keys(storedAttributes);
    const currentAttributeNames = Object.keys(attributes);
    if (storedGeometryData.id !== geometry.id) {
      storedGeometryData.id = geometry.id;
      return false;
    }
    if (storedAttributeNames.length !== currentAttributeNames.length) {
      renderObjectData.geometry.attributes = this.getAttributesData(attributes);
      return false;
    }
    for (const name of storedAttributeNames) {
      const storedAttributeData = storedAttributes[name];
      const attribute3 = attributes[name];
      if (attribute3 === void 0) {
        delete storedAttributes[name];
        return false;
      }
      if (storedAttributeData.version !== attribute3.version) {
        storedAttributeData.version = attribute3.version;
        return false;
      }
    }
    const index6 = geometry.index;
    const storedIndexVersion = storedGeometryData.indexVersion;
    const currentIndexVersion = index6 ? index6.version : null;
    if (storedIndexVersion !== currentIndexVersion) {
      storedGeometryData.indexVersion = currentIndexVersion;
      return false;
    }
    if (storedGeometryData.drawRange.start !== geometry.drawRange.start || storedGeometryData.drawRange.count !== geometry.drawRange.count) {
      storedGeometryData.drawRange.start = geometry.drawRange.start;
      storedGeometryData.drawRange.count = geometry.drawRange.count;
      return false;
    }
    if (renderObjectData.morphTargetInfluences) {
      let morphChanged = false;
      for (let i2 = 0; i2 < renderObjectData.morphTargetInfluences.length; i2++) {
        if (renderObjectData.morphTargetInfluences[i2] !== object.morphTargetInfluences[i2]) {
          morphChanged = true;
        }
      }
      if (morphChanged)
        return true;
    }
    if (renderObjectData.lights) {
      for (let i2 = 0; i2 < lightsData.length; i2++) {
        if (renderObjectData.lights[i2].map !== lightsData[i2].map) {
          return false;
        }
      }
    }
    if (renderObjectData.center) {
      if (renderObjectData.center.equals(object.center) === false) {
        renderObjectData.center.copy(object.center);
        return true;
      }
    }
    if (renderObject.bundle !== null) {
      renderObjectData.version = renderObject.bundle.version;
    }
    return true;
  }
  /**
   * Returns the lights data for the given material lights.
   *
   * @param {Array<Light>} materialLights - The material lights.
   * @return {Array<Object>} The lights data for the given material lights.
   */
  getLightsData(materialLights) {
    const lights3 = [];
    for (const light of materialLights) {
      if (light.isSpotLight === true && light.map !== null) {
        lights3.push({ map: light.map.version });
      }
    }
    return lights3;
  }
  /**
   * Returns the lights for the given lights node and render ID.
   *
   * @param {LightsNode} lightsNode - The lights node.
   * @param {number} renderId - The render ID.
   * @return {Array<Object>} The lights for the given lights node and render ID.
   */
  getLights(lightsNode, renderId) {
    if (_lightsCache.has(lightsNode)) {
      const cached = _lightsCache.get(lightsNode);
      if (cached.renderId === renderId) {
        return cached.lightsData;
      }
    }
    const lightsData = this.getLightsData(lightsNode.getLights());
    _lightsCache.set(lightsNode, { renderId, lightsData });
    return lightsData;
  }
  /**
   * Checks if the given render object requires a refresh.
   *
   * @param {RenderObject} renderObject - The render object.
   * @param {NodeFrame} nodeFrame - The current node frame.
   * @return {boolean} Whether the given render object requires a refresh or not.
   */
  needsRefresh(renderObject, nodeFrame) {
    if (this.hasNode || this.hasAnimation || this.firstInitialization(renderObject) || this.needsVelocity(nodeFrame.renderer))
      return true;
    const { renderId } = nodeFrame;
    if (this.renderId !== renderId) {
      this.renderId = renderId;
      return true;
    }
    const isStatic = renderObject.object.static === true;
    const isBundle = renderObject.bundle !== null && renderObject.bundle.static === true && this.getRenderObjectData(renderObject).version === renderObject.bundle.version;
    if (isStatic || isBundle)
      return false;
    const lightsData = this.getLights(renderObject.lightsNode, renderId);
    const notEqual3 = this.equals(renderObject, lightsData) !== true;
    return notEqual3;
  }
};
function cyrb53(value, seed = 0) {
  let h12 = 3735928559 ^ seed, h2 = 1103547991 ^ seed;
  if (value instanceof Array) {
    for (let i2 = 0, val; i2 < value.length; i2++) {
      val = value[i2];
      h12 = Math.imul(h12 ^ val, 2654435761);
      h2 = Math.imul(h2 ^ val, 1597334677);
    }
  } else {
    for (let i2 = 0, ch; i2 < value.length; i2++) {
      ch = value.charCodeAt(i2);
      h12 = Math.imul(h12 ^ ch, 2654435761);
      h2 = Math.imul(h2 ^ ch, 1597334677);
    }
  }
  h12 = Math.imul(h12 ^ h12 >>> 16, 2246822507);
  h12 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);
  h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);
  h2 ^= Math.imul(h12 ^ h12 >>> 13, 3266489909);
  return 4294967296 * (2097151 & h2) + (h12 >>> 0);
}
var hashString = (str) => cyrb53(str);
var hashArray = (array3) => cyrb53(array3);
var hash$1 = (...params) => cyrb53(params);
function getCacheKey$1(object, force = false) {
  const values = [];
  if (object.isNode === true) {
    values.push(object.id);
  }
  for (const { property: property3, childNode } of getNodeChildren(object)) {
    values.push(cyrb53(property3.slice(0, -4)), childNode.getCacheKey(force));
  }
  return cyrb53(values);
}
function* getNodeChildren(node, toJSON = false) {
  for (const property3 of Object.getOwnPropertyNames(node)) {
    if (property3.startsWith("_") === true)
      continue;
    const object = node[property3];
    if (Array.isArray(object) === true) {
      for (let i2 = 0; i2 < object.length; i2++) {
        const child = object[i2];
        if (child && (child.isNode === true || toJSON && typeof child.toJSON === "function")) {
          yield { property: property3, index: i2, childNode: child };
        }
      }
    } else if (object && object.isNode === true) {
      yield { property: property3, childNode: object };
    } else if (object && Object.getPrototypeOf(object) === Object.prototype) {
      for (const subProperty in object) {
        if (subProperty.startsWith("_") === true)
          continue;
        const child = object[subProperty];
        if (child && (child.isNode === true || toJSON && typeof child.toJSON === "function")) {
          yield { property: property3, index: subProperty, childNode: child };
        }
      }
    }
  }
}
var typeFromLength = /* @__PURE__ */ new Map([
  [1, "float"],
  [2, "vec2"],
  [3, "vec3"],
  [4, "vec4"],
  [9, "mat3"],
  [16, "mat4"]
]);
var dataFromObject = /* @__PURE__ */ new WeakMap();
function getTypeFromLength(length3) {
  return typeFromLength.get(length3);
}
function getTypedArrayFromType(type) {
  if (/[iu]?vec\d/.test(type)) {
    if (type.startsWith("ivec"))
      return Int32Array;
    if (type.startsWith("uvec"))
      return Uint32Array;
    return Float32Array;
  }
  if (/mat\d/.test(type))
    return Float32Array;
  if (/float/.test(type))
    return Float32Array;
  if (/uint/.test(type))
    return Uint32Array;
  if (/int/.test(type))
    return Int32Array;
  throw new Error(`THREE.NodeUtils: Unsupported type: ${type}`);
}
function getLengthFromType(type) {
  if (/float|int|uint/.test(type))
    return 1;
  if (/vec2/.test(type))
    return 2;
  if (/vec3/.test(type))
    return 3;
  if (/vec4/.test(type))
    return 4;
  if (/mat2/.test(type))
    return 4;
  if (/mat3/.test(type))
    return 9;
  if (/mat4/.test(type))
    return 16;
  console.error("THREE.TSL: Unsupported type:", type);
}
function getMemoryLengthFromType(type) {
  if (/float|int|uint/.test(type))
    return 1;
  if (/vec2/.test(type))
    return 2;
  if (/vec3/.test(type))
    return 3;
  if (/vec4/.test(type))
    return 4;
  if (/mat2/.test(type))
    return 4;
  if (/mat3/.test(type))
    return 12;
  if (/mat4/.test(type))
    return 16;
  console.error("THREE.TSL: Unsupported type:", type);
}
function getByteBoundaryFromType(type) {
  if (/float|int|uint/.test(type))
    return 4;
  if (/vec2/.test(type))
    return 8;
  if (/vec3/.test(type))
    return 16;
  if (/vec4/.test(type))
    return 16;
  if (/mat2/.test(type))
    return 8;
  if (/mat3/.test(type))
    return 48;
  if (/mat4/.test(type))
    return 64;
  console.error("THREE.TSL: Unsupported type:", type);
}
function getValueType(value) {
  if (value === void 0 || value === null)
    return null;
  const typeOf = typeof value;
  if (value.isNode === true) {
    return "node";
  } else if (typeOf === "number") {
    return "float";
  } else if (typeOf === "boolean") {
    return "bool";
  } else if (typeOf === "string") {
    return "string";
  } else if (typeOf === "function") {
    return "shader";
  } else if (value.isVector2 === true) {
    return "vec2";
  } else if (value.isVector3 === true) {
    return "vec3";
  } else if (value.isVector4 === true) {
    return "vec4";
  } else if (value.isMatrix2 === true) {
    return "mat2";
  } else if (value.isMatrix3 === true) {
    return "mat3";
  } else if (value.isMatrix4 === true) {
    return "mat4";
  } else if (value.isColor === true) {
    return "color";
  } else if (value instanceof ArrayBuffer) {
    return "ArrayBuffer";
  }
  return null;
}
function getValueFromType(type, ...params) {
  const last4 = type ? type.slice(-4) : void 0;
  if (params.length === 1) {
    if (last4 === "vec2")
      params = [params[0], params[0]];
    else if (last4 === "vec3")
      params = [params[0], params[0], params[0]];
    else if (last4 === "vec4")
      params = [params[0], params[0], params[0], params[0]];
  }
  if (type === "color") {
    return new Color(...params);
  } else if (last4 === "vec2") {
    return new Vector2(...params);
  } else if (last4 === "vec3") {
    return new Vector3(...params);
  } else if (last4 === "vec4") {
    return new Vector4(...params);
  } else if (last4 === "mat2") {
    return new Matrix2(...params);
  } else if (last4 === "mat3") {
    return new Matrix3(...params);
  } else if (last4 === "mat4") {
    return new Matrix4(...params);
  } else if (type === "bool") {
    return params[0] || false;
  } else if (type === "float" || type === "int" || type === "uint") {
    return params[0] || 0;
  } else if (type === "string") {
    return params[0] || "";
  } else if (type === "ArrayBuffer") {
    return base64ToArrayBuffer(params[0]);
  }
  return null;
}
function getDataFromObject(object) {
  let data = dataFromObject.get(object);
  if (data === void 0) {
    data = {};
    dataFromObject.set(object, data);
  }
  return data;
}
function arrayBufferToBase64(arrayBuffer3) {
  let chars = "";
  const array3 = new Uint8Array(arrayBuffer3);
  for (let i2 = 0; i2 < array3.length; i2++) {
    chars += String.fromCharCode(array3[i2]);
  }
  return btoa(chars);
}
function base64ToArrayBuffer(base64) {
  return Uint8Array.from(atob(base64), (c2) => c2.charCodeAt(0)).buffer;
}
var NodeUtils = Object.freeze({
  __proto__: null,
  arrayBufferToBase64,
  base64ToArrayBuffer,
  getByteBoundaryFromType,
  getCacheKey: getCacheKey$1,
  getDataFromObject,
  getLengthFromType,
  getMemoryLengthFromType,
  getNodeChildren,
  getTypeFromLength,
  getTypedArrayFromType,
  getValueFromType,
  getValueType,
  hash: hash$1,
  hashArray,
  hashString
});
var NodeShaderStage = {
  VERTEX: "vertex",
  FRAGMENT: "fragment"
};
var NodeUpdateType = {
  NONE: "none",
  FRAME: "frame",
  RENDER: "render",
  OBJECT: "object"
};
var NodeType = {
  BOOLEAN: "bool",
  INTEGER: "int",
  FLOAT: "float",
  VECTOR2: "vec2",
  VECTOR3: "vec3",
  VECTOR4: "vec4",
  MATRIX2: "mat2",
  MATRIX3: "mat3",
  MATRIX4: "mat4"
};
var NodeAccess = {
  READ_ONLY: "readOnly",
  WRITE_ONLY: "writeOnly",
  READ_WRITE: "readWrite"
};
var defaultShaderStages = ["fragment", "vertex"];
var defaultBuildStages = ["setup", "analyze", "generate"];
var shaderStages = [...defaultShaderStages, "compute"];
var vectorComponents = ["x", "y", "z", "w"];
var _parentBuildStage = {
  analyze: "setup",
  generate: "analyze"
};
var _nodeId = 0;
var Node = class extends EventDispatcher {
  static get type() {
    return "Node";
  }
  /**
   * Constructs a new node.
   *
   * @param {?string} nodeType - The node type.
   */
  constructor(nodeType = null) {
    super();
    this.nodeType = nodeType;
    this.updateType = NodeUpdateType.NONE;
    this.updateBeforeType = NodeUpdateType.NONE;
    this.updateAfterType = NodeUpdateType.NONE;
    this.uuid = MathUtils.generateUUID();
    this.version = 0;
    this.global = false;
    this.parents = false;
    this.isNode = true;
    this._cacheKey = null;
    this._cacheKeyVersion = 0;
    Object.defineProperty(this, "id", { value: _nodeId++ });
  }
  /**
   * Set this property to `true` when the node should be regenerated.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(value) {
    if (value === true) {
      this.version++;
    }
  }
  /**
   * The type of the class. The value is usually the constructor name.
   *
   * @type {string}
  	 * @readonly
   */
  get type() {
    return this.constructor.type;
  }
  /**
   * Convenient method for defining {@link Node#update}.
   *
   * @param {Function} callback - The update method.
   * @param {string} updateType - The update type.
   * @return {Node} A reference to this node.
   */
  onUpdate(callback, updateType) {
    this.updateType = updateType;
    this.update = callback.bind(this);
    return this;
  }
  /**
   * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but
   * this method automatically sets the update type to `FRAME`.
   *
   * @param {Function} callback - The update method.
   * @return {Node} A reference to this node.
   */
  onFrameUpdate(callback) {
    return this.onUpdate(callback, NodeUpdateType.FRAME);
  }
  /**
   * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but
   * this method automatically sets the update type to `RENDER`.
   *
   * @param {Function} callback - The update method.
   * @return {Node} A reference to this node.
   */
  onRenderUpdate(callback) {
    return this.onUpdate(callback, NodeUpdateType.RENDER);
  }
  /**
   * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but
   * this method automatically sets the update type to `OBJECT`.
   *
   * @param {Function} callback - The update method.
   * @return {Node} A reference to this node.
   */
  onObjectUpdate(callback) {
    return this.onUpdate(callback, NodeUpdateType.OBJECT);
  }
  /**
   * Convenient method for defining {@link Node#updateReference}.
   *
   * @param {Function} callback - The update method.
   * @return {Node} A reference to this node.
   */
  onReference(callback) {
    this.updateReference = callback.bind(this);
    return this;
  }
  /**
   * Nodes might refer to other objects like materials. This method allows to dynamically update the reference
   * to such objects based on a given state (e.g. the current node frame or builder).
   *
   * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.
   * @return {any} The updated reference.
   */
  updateReference() {
    return this;
  }
  /**
   * By default this method returns the value of the {@link Node#global} flag. This method
   * can be overwritten in derived classes if an analytical way is required to determine the
   * global cache referring to the current shader-stage.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {boolean} Whether this node is global or not.
   */
  isGlobal() {
    return this.global;
  }
  /**
   * Generator function that can be used to iterate over the child nodes.
   *
   * @generator
   * @yields {Node} A child node.
   */
  *getChildren() {
    for (const { childNode } of getNodeChildren(this)) {
      yield childNode;
    }
  }
  /**
   * Calling this method dispatches the `dispose` event. This event can be used
   * to register event listeners for clean up tasks.
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Callback for {@link Node#traverse}.
   *
   * @callback traverseCallback
   * @param {Node} node - The current node.
   */
  /**
   * Can be used to traverse through the node's hierarchy.
   *
   * @param {traverseCallback} callback - A callback that is executed per node.
   */
  traverse(callback) {
    callback(this);
    for (const childNode of this.getChildren()) {
      childNode.traverse(callback);
    }
  }
  /**
   * Returns the cache key for this node.
   *
   * @param {boolean} [force=false] - When set to `true`, a recomputation of the cache key is forced.
   * @return {number} The cache key of the node.
   */
  getCacheKey(force = false) {
    force = force || this.version !== this._cacheKeyVersion;
    if (force === true || this._cacheKey === null) {
      this._cacheKey = hash$1(getCacheKey$1(this, force), this.customCacheKey());
      this._cacheKeyVersion = this.version;
    }
    return this._cacheKey;
  }
  /**
   * Generate a custom cache key for this node.
   *
   * @return {number} The cache key of the node.
   */
  customCacheKey() {
    return 0;
  }
  /**
   * Returns the references to this node which is by default `this`.
   *
   * @return {Node} A reference to this node.
   */
  getScope() {
    return this;
  }
  /**
   * Returns the hash of the node which is used to identify the node. By default it's
   * the {@link Node#uuid} however derived node classes might have to overwrite this method
   * depending on their implementation.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The hash.
   */
  getHash() {
    return this.uuid;
  }
  /**
   * Returns the update type of {@link Node#update}.
   *
   * @return {NodeUpdateType} The update type.
   */
  getUpdateType() {
    return this.updateType;
  }
  /**
   * Returns the update type of {@link Node#updateBefore}.
   *
   * @return {NodeUpdateType} The update type.
   */
  getUpdateBeforeType() {
    return this.updateBeforeType;
  }
  /**
   * Returns the update type of {@link Node#updateAfter}.
   *
   * @return {NodeUpdateType} The update type.
   */
  getUpdateAfterType() {
    return this.updateAfterType;
  }
  /**
   * Certain types are composed of multiple elements. For example a `vec3`
   * is composed of three `float` values. This method returns the type of
   * these elements.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The type of the node.
   */
  getElementType(builder) {
    const type = this.getNodeType(builder);
    const elementType = builder.getElementType(type);
    return elementType;
  }
  /**
   * Returns the node member type for the given name.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} name - The name of the member.
   * @return {string} The type of the node.
   */
  getMemberType() {
    return "void";
  }
  /**
   * Returns the node's type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The type of the node.
   */
  getNodeType(builder) {
    const nodeProperties = builder.getNodeProperties(this);
    if (nodeProperties.outputNode) {
      return nodeProperties.outputNode.getNodeType(builder);
    }
    return this.nodeType;
  }
  /**
   * This method is used during the build process of a node and ensures
   * equal nodes are not built multiple times but just once. For example if
   * `attribute( 'uv' )` is used multiple times by the user, the build
   * process makes sure to process just the first node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node} The shared node if possible. Otherwise `this` is returned.
   */
  getShared(builder) {
    const hash3 = this.getHash(builder);
    const nodeFromHash = builder.getNodeFromHash(hash3);
    return nodeFromHash || this;
  }
  /**
   * Returns the number of elements in the node array.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {?number} The number of elements in the node array.
   */
  getArrayCount() {
    return null;
  }
  /**
   * Represents the setup stage which is the first step of the build process, see {@link Node#build} method.
   * This method is often overwritten in derived modules to prepare the node which is used as a node's output/result.
   * If an output node is prepared, then it must be returned in the `return` statement of the derived module's setup function.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {?Node} The output node.
   */
  setup(builder) {
    const nodeProperties = builder.getNodeProperties(this);
    let index6 = 0;
    for (const childNode of this.getChildren()) {
      nodeProperties["node" + index6++] = childNode;
    }
    return nodeProperties.outputNode || null;
  }
  /**
   * Represents the analyze stage which is the second step of the build process, see {@link Node#build} method.
   * This stage analyzes the node hierarchy and ensures descendent nodes are built.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {?Node} output - The target output node.
   */
  analyze(builder, output3 = null) {
    const usageCount = builder.increaseUsage(this);
    if (this.parents === true) {
      const nodeData = builder.getDataFromNode(this, "any");
      nodeData.stages = nodeData.stages || {};
      nodeData.stages[builder.shaderStage] = nodeData.stages[builder.shaderStage] || [];
      nodeData.stages[builder.shaderStage].push(output3);
    }
    if (usageCount === 1) {
      const nodeProperties = builder.getNodeProperties(this);
      for (const childNode of Object.values(nodeProperties)) {
        if (childNode && childNode.isNode === true) {
          childNode.build(builder, this);
        }
      }
    }
  }
  /**
   * Represents the generate stage which is the third step of the build process, see {@link Node#build} method.
   * This state builds the output node and returns the resulting shader string.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {?string} [output] - Can be used to define the output type.
   * @return {?string} The generated shader string.
   */
  generate(builder, output3) {
    const { outputNode } = builder.getNodeProperties(this);
    if (outputNode && outputNode.isNode === true) {
      return outputNode.build(builder, output3);
    }
  }
  /**
   * The method can be implemented to update the node's internal state before it is used to render an object.
   * The {@link Node#updateBeforeType} property defines how often the update is executed.
   *
   * @abstract
   * @param {NodeFrame} frame - A reference to the current node frame.
   * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).
   */
  updateBefore() {
    console.warn("Abstract function.");
  }
  /**
   * The method can be implemented to update the node's internal state after it was used to render an object.
   * The {@link Node#updateAfterType} property defines how often the update is executed.
   *
   * @abstract
   * @param {NodeFrame} frame - A reference to the current node frame.
   * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).
   */
  updateAfter() {
    console.warn("Abstract function.");
  }
  /**
   * The method can be implemented to update the node's internal state when it is used to render an object.
   * The {@link Node#updateType} property defines how often the update is executed.
   *
   * @abstract
   * @param {NodeFrame} frame - A reference to the current node frame.
   * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).
   */
  update() {
    console.warn("Abstract function.");
  }
  /**
   * This method performs the build of a node. The behavior and return value depend on the current build stage:
   * - **setup**: Prepares the node and its children for the build process. This process can also create new nodes. Returns the node itself or a variant.
   * - **analyze**: Analyzes the node hierarchy for optimizations in the code generation stage. Returns `null`.
   * - **generate**: Generates the shader code for the node. Returns the generated shader string.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {?(string|Node)} [output=null] - Can be used to define the output type.
   * @return {?(Node|string)} The result of the build process, depending on the build stage.
   */
  build(builder, output3 = null) {
    const refNode = this.getShared(builder);
    if (this !== refNode) {
      return refNode.build(builder, output3);
    }
    const nodeData = builder.getDataFromNode(this);
    nodeData.buildStages = nodeData.buildStages || {};
    nodeData.buildStages[builder.buildStage] = true;
    const parentBuildStage = _parentBuildStage[builder.buildStage];
    if (parentBuildStage && nodeData.buildStages[parentBuildStage] !== true) {
      const previousBuildStage = builder.getBuildStage();
      builder.setBuildStage(parentBuildStage);
      this.build(builder);
      builder.setBuildStage(previousBuildStage);
    }
    builder.addNode(this);
    builder.addChain(this);
    let result = null;
    const buildStage = builder.getBuildStage();
    if (buildStage === "setup") {
      this.updateReference(builder);
      const properties = builder.getNodeProperties(this);
      if (properties.initialized !== true) {
        properties.initialized = true;
        properties.outputNode = this.setup(builder) || properties.outputNode || null;
        for (const childNode of Object.values(properties)) {
          if (childNode && childNode.isNode === true) {
            if (childNode.parents === true) {
              const childProperties = builder.getNodeProperties(childNode);
              childProperties.parents = childProperties.parents || [];
              childProperties.parents.push(this);
            }
            childNode.build(builder);
          }
        }
      }
      result = properties.outputNode;
    } else if (buildStage === "analyze") {
      this.analyze(builder, output3);
    } else if (buildStage === "generate") {
      const isGenerateOnce = this.generate.length === 1;
      if (isGenerateOnce) {
        const type = this.getNodeType(builder);
        const nodeData2 = builder.getDataFromNode(this);
        result = nodeData2.snippet;
        if (result === void 0) {
          if (nodeData2.generated === void 0) {
            nodeData2.generated = true;
            result = this.generate(builder) || "";
            nodeData2.snippet = result;
          } else {
            console.warn("THREE.Node: Recursion detected.", this);
            result = "/* Recursion detected. */";
          }
        } else if (nodeData2.flowCodes !== void 0 && builder.context.nodeBlock !== void 0) {
          builder.addFlowCodeHierarchy(this, builder.context.nodeBlock);
        }
        result = builder.format(result, type, output3);
      } else {
        result = this.generate(builder, output3) || "";
      }
      if (result === "" && output3 !== null && output3 !== "void" && output3 !== "OutputType") {
        console.error(`THREE.TSL: Invalid generated code, expected a "${output3}".`);
        result = builder.generateConst(output3);
      }
    }
    builder.removeChain(this);
    builder.addSequentialNode(this);
    return result;
  }
  /**
   * Returns the child nodes as a JSON object.
   *
   * @return {Generator<Object>} An iterable list of serialized child objects as JSON.
   */
  getSerializeChildren() {
    return getNodeChildren(this);
  }
  /**
   * Serializes the node to JSON.
   *
   * @param {Object} json - The output JSON object.
   */
  serialize(json) {
    const nodeChildren = this.getSerializeChildren();
    const inputNodes = {};
    for (const { property: property3, index: index6, childNode } of nodeChildren) {
      if (index6 !== void 0) {
        if (inputNodes[property3] === void 0) {
          inputNodes[property3] = Number.isInteger(index6) ? [] : {};
        }
        inputNodes[property3][index6] = childNode.toJSON(json.meta).uuid;
      } else {
        inputNodes[property3] = childNode.toJSON(json.meta).uuid;
      }
    }
    if (Object.keys(inputNodes).length > 0) {
      json.inputNodes = inputNodes;
    }
  }
  /**
   * Deserializes the node from the given JSON.
   *
   * @param {Object} json - The JSON object.
   */
  deserialize(json) {
    if (json.inputNodes !== void 0) {
      const nodes = json.meta.nodes;
      for (const property3 in json.inputNodes) {
        if (Array.isArray(json.inputNodes[property3])) {
          const inputArray = [];
          for (const uuid of json.inputNodes[property3]) {
            inputArray.push(nodes[uuid]);
          }
          this[property3] = inputArray;
        } else if (typeof json.inputNodes[property3] === "object") {
          const inputObject = {};
          for (const subProperty in json.inputNodes[property3]) {
            const uuid = json.inputNodes[property3][subProperty];
            inputObject[subProperty] = nodes[uuid];
          }
          this[property3] = inputObject;
        } else {
          const uuid = json.inputNodes[property3];
          this[property3] = nodes[uuid];
        }
      }
    }
  }
  /**
   * Serializes the node into the three.js JSON Object/Scene format.
   *
   * @param {?Object} meta - An optional JSON object that already holds serialized data from other scene objects.
   * @return {Object} The serialized node.
   */
  toJSON(meta) {
    const { uuid, type } = this;
    const isRoot = meta === void 0 || typeof meta === "string";
    if (isRoot) {
      meta = {
        textures: {},
        images: {},
        nodes: {}
      };
    }
    let data = meta.nodes[uuid];
    if (data === void 0) {
      data = {
        uuid,
        type,
        meta,
        metadata: {
          version: 4.7,
          type: "Node",
          generator: "Node.toJSON"
        }
      };
      if (isRoot !== true)
        meta.nodes[data.uuid] = data;
      this.serialize(data);
      delete data.meta;
    }
    function extractFromCache(cache3) {
      const values = [];
      for (const key in cache3) {
        const data2 = cache3[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRoot) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const nodes = extractFromCache(meta.nodes);
      if (textures.length > 0)
        data.textures = textures;
      if (images.length > 0)
        data.images = images;
      if (nodes.length > 0)
        data.nodes = nodes;
    }
    return data;
  }
};
var ArrayElementNode = class extends Node {
  // @TODO: If extending from TempNode it breaks webgpu_compute
  static get type() {
    return "ArrayElementNode";
  }
  /**
   * Constructs an array element node.
   *
   * @param {Node} node - The array-like node.
   * @param {Node} indexNode - The index node that defines the element access.
   */
  constructor(node, indexNode) {
    super();
    this.node = node;
    this.indexNode = indexNode;
    this.isArrayElementNode = true;
  }
  /**
   * This method is overwritten since the node type is inferred from the array-like node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return this.node.getElementType(builder);
  }
  generate(builder) {
    const indexType = this.indexNode.getNodeType(builder);
    const nodeSnippet = this.node.build(builder);
    const indexSnippet = this.indexNode.build(builder, !builder.isVector(indexType) && builder.isInteger(indexType) ? indexType : "uint");
    return `${nodeSnippet}[ ${indexSnippet} ]`;
  }
};
var ConvertNode = class extends Node {
  static get type() {
    return "ConvertNode";
  }
  /**
   * Constructs a new convert node.
   *
   * @param {Node} node - The node which type should be converted.
   * @param {string} convertTo - The target node type. Multiple types can be defined by separating them with a `|` sign.
   */
  constructor(node, convertTo) {
    super();
    this.node = node;
    this.convertTo = convertTo;
  }
  /**
   * This method is overwritten since the implementation tries to infer the best
   * matching type from the {@link ConvertNode#convertTo} property.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    const requestType = this.node.getNodeType(builder);
    let convertTo = null;
    for (const overloadingType of this.convertTo.split("|")) {
      if (convertTo === null || builder.getTypeLength(requestType) === builder.getTypeLength(overloadingType)) {
        convertTo = overloadingType;
      }
    }
    return convertTo;
  }
  serialize(data) {
    super.serialize(data);
    data.convertTo = this.convertTo;
  }
  deserialize(data) {
    super.deserialize(data);
    this.convertTo = data.convertTo;
  }
  generate(builder, output3) {
    const node = this.node;
    const type = this.getNodeType(builder);
    const snippet = node.build(builder, type);
    return builder.format(snippet, type, output3);
  }
};
var TempNode = class extends Node {
  static get type() {
    return "TempNode";
  }
  /**
   * Constructs a temp node.
   *
   * @param {?string} nodeType - The node type.
   */
  constructor(nodeType = null) {
    super(nodeType);
    this.isTempNode = true;
  }
  /**
   * Whether this node is used more than once in context of other nodes.
   *
   * @param {NodeBuilder} builder - The node builder.
   * @return {boolean} A flag that indicates if there is more than one dependency to other nodes.
   */
  hasDependencies(builder) {
    return builder.getDataFromNode(this).usageCount > 1;
  }
  build(builder, output3) {
    const buildStage = builder.getBuildStage();
    if (buildStage === "generate") {
      const type = builder.getVectorType(this.getNodeType(builder, output3));
      const nodeData = builder.getDataFromNode(this);
      if (nodeData.propertyName !== void 0) {
        return builder.format(nodeData.propertyName, type, output3);
      } else if (type !== "void" && output3 !== "void" && this.hasDependencies(builder)) {
        const snippet = super.build(builder, type);
        const nodeVar = builder.getVarFromNode(this, null, type);
        const propertyName = builder.getPropertyName(nodeVar);
        builder.addLineFlowCode(`${propertyName} = ${snippet}`, this);
        nodeData.snippet = snippet;
        nodeData.propertyName = propertyName;
        return builder.format(nodeData.propertyName, type, output3);
      }
    }
    return super.build(builder, output3);
  }
};
var JoinNode = class extends TempNode {
  static get type() {
    return "JoinNode";
  }
  /**
   * Constructs a new join node.
   *
   * @param {Array<Node>} nodes - An array of nodes that should be joined.
   * @param {?string} [nodeType=null] - The node type.
   */
  constructor(nodes = [], nodeType = null) {
    super(nodeType);
    this.nodes = nodes;
  }
  /**
   * This method is overwritten since the node type must be inferred from the
   * joined data length if not explicitly defined.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    if (this.nodeType !== null) {
      return builder.getVectorType(this.nodeType);
    }
    return builder.getTypeFromLength(this.nodes.reduce((count, cur) => count + builder.getTypeLength(cur.getNodeType(builder)), 0));
  }
  generate(builder, output3) {
    const type = this.getNodeType(builder);
    const maxLength = builder.getTypeLength(type);
    const nodes = this.nodes;
    const primitiveType = builder.getComponentType(type);
    const snippetValues = [];
    let length3 = 0;
    for (const input of nodes) {
      if (length3 >= maxLength) {
        console.error(`THREE.TSL: Length of parameters exceeds maximum length of function '${type}()' type.`);
        break;
      }
      let inputType = input.getNodeType(builder);
      let inputTypeLength = builder.getTypeLength(inputType);
      let inputSnippet;
      if (length3 + inputTypeLength > maxLength) {
        console.error(`THREE.TSL: Length of '${type}()' data exceeds maximum length of output type.`);
        inputTypeLength = maxLength - length3;
        inputType = builder.getTypeFromLength(inputTypeLength);
      }
      length3 += inputTypeLength;
      inputSnippet = input.build(builder, inputType);
      const inputPrimitiveType = builder.getComponentType(inputType);
      if (inputPrimitiveType !== primitiveType) {
        const targetType = builder.getTypeFromLength(inputTypeLength, primitiveType);
        inputSnippet = builder.format(inputSnippet, inputType, targetType);
      }
      snippetValues.push(inputSnippet);
    }
    const snippet = `${builder.getType(type)}( ${snippetValues.join(", ")} )`;
    return builder.format(snippet, type, output3);
  }
};
var _stringVectorComponents = vectorComponents.join("");
var SplitNode = class extends Node {
  static get type() {
    return "SplitNode";
  }
  /**
   * Constructs a new split node.
   *
   * @param {Node} node - The node that should be accessed.
   * @param {string} [components='x'] - The components that should be accessed.
   */
  constructor(node, components = "x") {
    super();
    this.node = node;
    this.components = components;
    this.isSplitNode = true;
  }
  /**
   * Returns the vector length which is computed based on the requested components.
   *
   * @return {number} The vector length.
   */
  getVectorLength() {
    let vectorLength = this.components.length;
    for (const c2 of this.components) {
      vectorLength = Math.max(vectorComponents.indexOf(c2) + 1, vectorLength);
    }
    return vectorLength;
  }
  /**
   * Returns the component type of the node's type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The component type.
   */
  getComponentType(builder) {
    return builder.getComponentType(this.node.getNodeType(builder));
  }
  /**
   * This method is overwritten since the node type is inferred from requested components.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return builder.getTypeFromLength(this.components.length, this.getComponentType(builder));
  }
  /**
   * Returns the scope of the node.
   *
   * @return {Node} The scope of the node.
   */
  getScope() {
    return this.node.getScope();
  }
  generate(builder, output3) {
    const node = this.node;
    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));
    let snippet = null;
    if (nodeTypeLength > 1) {
      let type = null;
      const componentsLength = this.getVectorLength();
      if (componentsLength >= nodeTypeLength) {
        type = builder.getTypeFromLength(this.getVectorLength(), this.getComponentType(builder));
      }
      const nodeSnippet = node.build(builder, type);
      if (this.components.length === nodeTypeLength && this.components === _stringVectorComponents.slice(0, this.components.length)) {
        snippet = builder.format(nodeSnippet, type, output3);
      } else {
        snippet = builder.format(`${nodeSnippet}.${this.components}`, this.getNodeType(builder), output3);
      }
    } else {
      snippet = node.build(builder, output3);
    }
    return snippet;
  }
  serialize(data) {
    super.serialize(data);
    data.components = this.components;
  }
  deserialize(data) {
    super.deserialize(data);
    this.components = data.components;
  }
};
var SetNode = class extends TempNode {
  static get type() {
    return "SetNode";
  }
  /**
   * Constructs a new set node.
   *
   * @param {Node} sourceNode - The node that should be updated.
   * @param {string} components - The components that should be updated.
   * @param {Node} targetNode - The value node.
   */
  constructor(sourceNode, components, targetNode) {
    super();
    this.sourceNode = sourceNode;
    this.components = components;
    this.targetNode = targetNode;
  }
  /**
   * This method is overwritten since the node type is inferred from {@link SetNode#sourceNode}.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return this.sourceNode.getNodeType(builder);
  }
  generate(builder) {
    const { sourceNode, components, targetNode } = this;
    const sourceType = this.getNodeType(builder);
    const componentType = builder.getComponentType(targetNode.getNodeType(builder));
    const targetType = builder.getTypeFromLength(components.length, componentType);
    const targetSnippet = targetNode.build(builder, targetType);
    const sourceSnippet = sourceNode.build(builder, sourceType);
    const length3 = builder.getTypeLength(sourceType);
    const snippetValues = [];
    for (let i2 = 0; i2 < length3; i2++) {
      const component = vectorComponents[i2];
      if (component === components[0]) {
        snippetValues.push(targetSnippet);
        i2 += components.length - 1;
      } else {
        snippetValues.push(sourceSnippet + "." + component);
      }
    }
    return `${builder.getType(sourceType)}( ${snippetValues.join(", ")} )`;
  }
};
var FlipNode = class extends TempNode {
  static get type() {
    return "FlipNode";
  }
  /**
   * Constructs a new flip node.
   *
   * @param {Node} sourceNode - The node which component(s) should be flipped.
   * @param {string} components - The components that should be flipped e.g. `'x'` or `'xy'`.
   */
  constructor(sourceNode, components) {
    super();
    this.sourceNode = sourceNode;
    this.components = components;
  }
  /**
   * This method is overwritten since the node type is inferred from the source node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return this.sourceNode.getNodeType(builder);
  }
  generate(builder) {
    const { components, sourceNode } = this;
    const sourceType = this.getNodeType(builder);
    const sourceSnippet = sourceNode.build(builder);
    const sourceCache = builder.getVarFromNode(this);
    const sourceProperty = builder.getPropertyName(sourceCache);
    builder.addLineFlowCode(sourceProperty + " = " + sourceSnippet, this);
    const length3 = builder.getTypeLength(sourceType);
    const snippetValues = [];
    let componentIndex = 0;
    for (let i2 = 0; i2 < length3; i2++) {
      const component = vectorComponents[i2];
      if (component === components[componentIndex]) {
        snippetValues.push("1.0 - " + (sourceProperty + "." + component));
        componentIndex++;
      } else {
        snippetValues.push(sourceProperty + "." + component);
      }
    }
    return `${builder.getType(sourceType)}( ${snippetValues.join(", ")} )`;
  }
};
var InputNode = class extends Node {
  static get type() {
    return "InputNode";
  }
  /**
   * Constructs a new input node.
   *
   * @param {any} value - The value of this node. This can be any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).
   * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.
   */
  constructor(value, nodeType = null) {
    super(nodeType);
    this.isInputNode = true;
    this.value = value;
    this.precision = null;
  }
  getNodeType() {
    if (this.nodeType === null) {
      return getValueType(this.value);
    }
    return this.nodeType;
  }
  /**
   * Returns the input type of the node which is by default the node type. Derived modules
   * might overwrite this method and use a fixed type or compute one analytically.
   *
   * A typical example for different input and node types are textures. The input type of a
   * normal RGBA texture is `texture` whereas its node type is `vec4`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType(builder) {
    return this.getNodeType(builder);
  }
  /**
   * Sets the precision to the given value. The method can be
   * overwritten in derived classes if the final precision must be computed
   * analytically.
   *
   * @param {('low'|'medium'|'high')} precision - The precision of the input value in the shader.
   * @return {InputNode} A reference to this node.
   */
  setPrecision(precision) {
    this.precision = precision;
    return this;
  }
  serialize(data) {
    super.serialize(data);
    data.value = this.value;
    if (this.value && this.value.toArray)
      data.value = this.value.toArray();
    data.valueType = getValueType(this.value);
    data.nodeType = this.nodeType;
    if (data.valueType === "ArrayBuffer")
      data.value = arrayBufferToBase64(data.value);
    data.precision = this.precision;
  }
  deserialize(data) {
    super.deserialize(data);
    this.nodeType = data.nodeType;
    this.value = Array.isArray(data.value) ? getValueFromType(data.valueType, ...data.value) : data.value;
    this.precision = data.precision || null;
    if (this.value && this.value.fromArray)
      this.value = this.value.fromArray(data.value);
  }
  generate() {
    console.warn("Abstract function.");
  }
};
var _regNum = /float|u?int/;
var ConstNode = class extends InputNode {
  static get type() {
    return "ConstNode";
  }
  /**
   * Constructs a new input node.
   *
   * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color).
   * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.
   */
  constructor(value, nodeType = null) {
    super(value, nodeType);
    this.isConstNode = true;
  }
  /**
   * Generates the shader string of the value with the current node builder.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The generated value as a shader string.
   */
  generateConst(builder) {
    return builder.generateConst(this.getNodeType(builder), this.value);
  }
  generate(builder, output3) {
    const type = this.getNodeType(builder);
    if (_regNum.test(type) && _regNum.test(output3)) {
      return builder.generateConst(output3, this.value);
    }
    return builder.format(this.generateConst(builder), type, output3);
  }
};
var MemberNode = class extends Node {
  static get type() {
    return "MemberNode";
  }
  /**
   * Constructs a member node.
   *
   * @param {Node} structNode - The struct node.
   * @param {string} property - The property name.
   */
  constructor(structNode, property3) {
    super();
    this.structNode = structNode;
    this.property = property3;
    this.isMemberNode = true;
  }
  hasMember(builder) {
    if (this.structNode.isMemberNode) {
      if (this.structNode.hasMember(builder) === false) {
        return false;
      }
    }
    return this.structNode.getMemberType(builder, this.property) !== "void";
  }
  getNodeType(builder) {
    if (this.hasMember(builder) === false) {
      return "float";
    }
    return this.structNode.getMemberType(builder, this.property);
  }
  getMemberType(builder, name) {
    if (this.hasMember(builder) === false) {
      return "float";
    }
    const type = this.getNodeType(builder);
    const struct3 = builder.getStructTypeNode(type);
    return struct3.getMemberType(builder, name);
  }
  generate(builder) {
    if (this.hasMember(builder) === false) {
      console.warn(`THREE.TSL: Member "${this.property}" does not exist in struct.`);
      const type = this.getNodeType(builder);
      return builder.generateConst(type);
    }
    const propertyName = this.structNode.build(builder);
    return propertyName + "." + this.property;
  }
};
var currentStack = null;
var NodeElements = /* @__PURE__ */ new Map();
function addMethodChaining(name, nodeElement) {
  if (NodeElements.has(name)) {
    console.warn(`THREE.TSL: Redefinition of method chaining '${name}'.`);
    return;
  }
  if (typeof nodeElement !== "function")
    throw new Error(`THREE.TSL: Node element ${name} is not a function`);
  NodeElements.set(name, nodeElement);
  if (name !== "assign") {
    Node.prototype[name] = function(...params) {
      return this.isStackNode ? this.add(nodeElement(...params)) : nodeElement(this, ...params);
    };
    Node.prototype[name + "Assign"] = function(...params) {
      return this.isStackNode ? this.assign(params[0], nodeElement(...params)) : this.assign(nodeElement(this, ...params));
    };
  }
}
var parseSwizzle = (props) => props.replace(/r|s/g, "x").replace(/g|t/g, "y").replace(/b|p/g, "z").replace(/a|q/g, "w");
var parseSwizzleAndSort = (props) => parseSwizzle(props).split("").sort().join("");
Node.prototype.assign = function(...params) {
  if (this.isStackNode !== true) {
    if (currentStack !== null) {
      currentStack.assign(this, ...params);
    } else {
      console.error("THREE.TSL: No stack defined for assign operation. Make sure the assign is inside a Fn().");
    }
    return this;
  } else {
    const nodeElement = NodeElements.get("assign");
    return this.add(nodeElement(...params));
  }
};
Node.prototype.toVarIntent = function() {
  return this;
};
Node.prototype.get = function(value) {
  return new MemberNode(this, value);
};
var proto = {};
function setProtoSwizzle(property3, altA, altB) {
  proto[property3] = proto[altA] = proto[altB] = {
    get() {
      this._cache = this._cache || {};
      let split3 = this._cache[property3];
      if (split3 === void 0) {
        split3 = new SplitNode(this, property3);
        this._cache[property3] = split3;
      }
      return split3;
    },
    set(value) {
      this[property3].assign(nodeObject(value));
    }
  };
  const propUpper = property3.toUpperCase();
  const altAUpper = altA.toUpperCase();
  const altBUpper = altB.toUpperCase();
  Node.prototype["set" + propUpper] = Node.prototype["set" + altAUpper] = Node.prototype["set" + altBUpper] = function(value) {
    const swizzle = parseSwizzleAndSort(property3);
    return new SetNode(this, swizzle, nodeObject(value));
  };
  Node.prototype["flip" + propUpper] = Node.prototype["flip" + altAUpper] = Node.prototype["flip" + altBUpper] = function() {
    const swizzle = parseSwizzleAndSort(property3);
    return new FlipNode(this, swizzle);
  };
}
var swizzleA = ["x", "y", "z", "w"];
var swizzleB = ["r", "g", "b", "a"];
var swizzleC = ["s", "t", "p", "q"];
for (let a2 = 0; a2 < 4; a2++) {
  let prop = swizzleA[a2];
  let altA = swizzleB[a2];
  let altB = swizzleC[a2];
  setProtoSwizzle(prop, altA, altB);
  for (let b = 0; b < 4; b++) {
    prop = swizzleA[a2] + swizzleA[b];
    altA = swizzleB[a2] + swizzleB[b];
    altB = swizzleC[a2] + swizzleC[b];
    setProtoSwizzle(prop, altA, altB);
    for (let c2 = 0; c2 < 4; c2++) {
      prop = swizzleA[a2] + swizzleA[b] + swizzleA[c2];
      altA = swizzleB[a2] + swizzleB[b] + swizzleB[c2];
      altB = swizzleC[a2] + swizzleC[b] + swizzleC[c2];
      setProtoSwizzle(prop, altA, altB);
      for (let d2 = 0; d2 < 4; d2++) {
        prop = swizzleA[a2] + swizzleA[b] + swizzleA[c2] + swizzleA[d2];
        altA = swizzleB[a2] + swizzleB[b] + swizzleB[c2] + swizzleB[d2];
        altB = swizzleC[a2] + swizzleC[b] + swizzleC[c2] + swizzleC[d2];
        setProtoSwizzle(prop, altA, altB);
      }
    }
  }
}
for (let i2 = 0; i2 < 32; i2++) {
  proto[i2] = {
    get() {
      this._cache = this._cache || {};
      let element3 = this._cache[i2];
      if (element3 === void 0) {
        element3 = new ArrayElementNode(this, new ConstNode(i2, "uint"));
        this._cache[i2] = element3;
      }
      return element3;
    },
    set(value) {
      this[i2].assign(nodeObject(value));
    }
  };
}
Object.defineProperties(Node.prototype, proto);
var nodeBuilderFunctionsCacheMap = /* @__PURE__ */ new WeakMap();
var ShaderNodeObject = function(obj, altType = null) {
  const type = getValueType(obj);
  if (type === "node") {
    return obj;
  } else if (altType === null && (type === "float" || type === "boolean") || type && type !== "shader" && type !== "string") {
    return nodeObject(getConstNode(obj, altType));
  } else if (type === "shader") {
    return obj.isFn ? obj : Fn(obj);
  }
  return obj;
};
var ShaderNodeObjects = function(objects, altType = null) {
  for (const name in objects) {
    objects[name] = nodeObject(objects[name], altType);
  }
  return objects;
};
var ShaderNodeArray = function(array3, altType = null) {
  const len = array3.length;
  for (let i2 = 0; i2 < len; i2++) {
    array3[i2] = nodeObject(array3[i2], altType);
  }
  return array3;
};
var ShaderNodeProxy = function(NodeClass, scope = null, factor = null, settings = null) {
  function assignNode(node) {
    if (settings !== null) {
      node = nodeObject(Object.assign(node, settings));
      if (settings.intent === true) {
        node = node.toVarIntent();
      }
    } else {
      node = nodeObject(node);
    }
    return node;
  }
  let fn, name = scope, minParams, maxParams;
  function verifyParamsLimit(params) {
    let tslName;
    if (name)
      tslName = /[a-z]/i.test(name) ? name + "()" : name;
    else
      tslName = NodeClass.type;
    if (minParams !== void 0 && params.length < minParams) {
      console.error(`THREE.TSL: "${tslName}" parameter length is less than minimum required.`);
      return params.concat(new Array(minParams - params.length).fill(0));
    } else if (maxParams !== void 0 && params.length > maxParams) {
      console.error(`THREE.TSL: "${tslName}" parameter length exceeds limit.`);
      return params.slice(0, maxParams);
    }
    return params;
  }
  if (scope === null) {
    fn = (...params) => {
      return assignNode(new NodeClass(...nodeArray(verifyParamsLimit(params))));
    };
  } else if (factor !== null) {
    factor = nodeObject(factor);
    fn = (...params) => {
      return assignNode(new NodeClass(scope, ...nodeArray(verifyParamsLimit(params)), factor));
    };
  } else {
    fn = (...params) => {
      return assignNode(new NodeClass(scope, ...nodeArray(verifyParamsLimit(params))));
    };
  }
  fn.setParameterLength = (...params) => {
    if (params.length === 1)
      minParams = maxParams = params[0];
    else if (params.length === 2)
      [minParams, maxParams] = params;
    return fn;
  };
  fn.setName = (value) => {
    name = value;
    return fn;
  };
  return fn;
};
var ShaderNodeImmutable = function(NodeClass, ...params) {
  return nodeObject(new NodeClass(...nodeArray(params)));
};
var ShaderCallNodeInternal = class extends Node {
  constructor(shaderNode, rawInputs) {
    super();
    this.shaderNode = shaderNode;
    this.rawInputs = rawInputs;
    this.isShaderCallNodeInternal = true;
  }
  getNodeType(builder) {
    return this.shaderNode.nodeType || this.getOutputNode(builder).getNodeType(builder);
  }
  getMemberType(builder, name) {
    return this.getOutputNode(builder).getMemberType(builder, name);
  }
  call(builder) {
    const { shaderNode, rawInputs } = this;
    const properties = builder.getNodeProperties(shaderNode);
    const subBuild3 = builder.getClosestSubBuild(shaderNode.subBuilds) || "";
    const subBuildProperty = subBuild3 || "default";
    if (properties[subBuildProperty]) {
      return properties[subBuildProperty];
    }
    const previousSubBuildFn = builder.subBuildFn;
    builder.subBuildFn = subBuild3;
    let result = null;
    if (shaderNode.layout) {
      let functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get(builder.constructor);
      if (functionNodesCacheMap === void 0) {
        functionNodesCacheMap = /* @__PURE__ */ new WeakMap();
        nodeBuilderFunctionsCacheMap.set(builder.constructor, functionNodesCacheMap);
      }
      let functionNode = functionNodesCacheMap.get(shaderNode);
      if (functionNode === void 0) {
        functionNode = nodeObject(builder.buildFunctionNode(shaderNode));
        functionNodesCacheMap.set(shaderNode, functionNode);
      }
      builder.addInclude(functionNode);
      const inputs = rawInputs ? getLayoutParameters(rawInputs) : null;
      result = nodeObject(functionNode.call(inputs));
    } else {
      const secureNodeBuilder = new Proxy(builder, {
        get: (target, property3, receiver) => {
          let value;
          if (Symbol.iterator === property3) {
            value = function* () {
              yield void 0;
            };
          } else {
            value = Reflect.get(target, property3, receiver);
          }
          return value;
        }
      });
      const inputs = rawInputs ? getProxyParameters(rawInputs) : null;
      const hasParameters = Array.isArray(rawInputs) ? rawInputs.length > 0 : rawInputs !== null;
      const jsFunc = shaderNode.jsFunc;
      const outputNode = hasParameters || jsFunc.length > 1 ? jsFunc(inputs, secureNodeBuilder) : jsFunc(secureNodeBuilder);
      result = nodeObject(outputNode);
    }
    builder.subBuildFn = previousSubBuildFn;
    if (shaderNode.once) {
      properties[subBuildProperty] = result;
    }
    return result;
  }
  setupOutput(builder) {
    builder.addStack();
    builder.stack.outputNode = this.call(builder);
    return builder.removeStack();
  }
  getOutputNode(builder) {
    const properties = builder.getNodeProperties(this);
    const subBuildOutput = builder.getSubBuildOutput(this);
    properties[subBuildOutput] = properties[subBuildOutput] || this.setupOutput(builder);
    properties[subBuildOutput].subBuild = builder.getClosestSubBuild(this);
    return properties[subBuildOutput];
  }
  build(builder, output3 = null) {
    let result = null;
    const buildStage = builder.getBuildStage();
    const properties = builder.getNodeProperties(this);
    const subBuildOutput = builder.getSubBuildOutput(this);
    const outputNode = this.getOutputNode(builder);
    if (buildStage === "setup") {
      const subBuildInitialized = builder.getSubBuildProperty("initialized", this);
      if (properties[subBuildInitialized] !== true) {
        properties[subBuildInitialized] = true;
        properties[subBuildOutput] = this.getOutputNode(builder);
        properties[subBuildOutput].build(builder);
        if (this.shaderNode.subBuilds) {
          for (const node of builder.chaining) {
            const nodeData = builder.getDataFromNode(node, "any");
            nodeData.subBuilds = nodeData.subBuilds || /* @__PURE__ */ new Set();
            for (const subBuild3 of this.shaderNode.subBuilds) {
              nodeData.subBuilds.add(subBuild3);
            }
          }
        }
      }
      result = properties[subBuildOutput];
    } else if (buildStage === "analyze") {
      outputNode.build(builder, output3);
    } else if (buildStage === "generate") {
      result = outputNode.build(builder, output3) || "";
    }
    return result;
  }
};
function getLayoutParameters(params) {
  let output3;
  nodeObjects(params);
  const isArrayAsParameter = params[0] && (params[0].isNode || Object.getPrototypeOf(params[0]) !== Object.prototype);
  if (isArrayAsParameter) {
    output3 = [...params];
  } else {
    output3 = params[0];
  }
  return output3;
}
function getProxyParameters(params) {
  let index6 = 0;
  nodeObjects(params);
  return new Proxy(params, {
    get: (target, property3, receiver) => {
      let value;
      if (property3 === "length") {
        value = params.length;
        return value;
      }
      if (Symbol.iterator === property3) {
        value = function* () {
          for (const inputNode of params) {
            yield nodeObject(inputNode);
          }
        };
      } else {
        if (params.length > 0) {
          if (Object.getPrototypeOf(params[0]) === Object.prototype) {
            const objectTarget = params[0];
            if (objectTarget[property3] === void 0) {
              value = objectTarget[index6++];
            } else {
              value = Reflect.get(objectTarget, property3, receiver);
            }
          } else if (params[0] instanceof Node) {
            if (params[property3] === void 0) {
              value = params[index6++];
            } else {
              value = Reflect.get(params, property3, receiver);
            }
          }
        } else {
          value = Reflect.get(target, property3, receiver);
        }
        value = nodeObject(value);
      }
      return value;
    }
  });
}
var ShaderNodeInternal = class extends Node {
  constructor(jsFunc, nodeType) {
    super(nodeType);
    this.jsFunc = jsFunc;
    this.layout = null;
    this.global = true;
    this.once = false;
  }
  setLayout(layout) {
    this.layout = layout;
    return this;
  }
  call(rawInputs = null) {
    return nodeObject(new ShaderCallNodeInternal(this, rawInputs));
  }
  setup() {
    return this.call();
  }
};
var bools = [false, true];
var uints = [0, 1, 2, 3];
var ints = [-1, -2];
var floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];
var boolsCacheMap = /* @__PURE__ */ new Map();
for (const bool3 of bools)
  boolsCacheMap.set(bool3, new ConstNode(bool3));
var uintsCacheMap = /* @__PURE__ */ new Map();
for (const uint3 of uints)
  uintsCacheMap.set(uint3, new ConstNode(uint3, "uint"));
var intsCacheMap = new Map([...uintsCacheMap].map((el) => new ConstNode(el.value, "int")));
for (const int3 of ints)
  intsCacheMap.set(int3, new ConstNode(int3, "int"));
var floatsCacheMap = new Map([...intsCacheMap].map((el) => new ConstNode(el.value)));
for (const float3 of floats)
  floatsCacheMap.set(float3, new ConstNode(float3));
for (const float3 of floats)
  floatsCacheMap.set(-float3, new ConstNode(-float3));
var cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };
var constNodesCacheMap = new Map([...boolsCacheMap, ...floatsCacheMap]);
var getConstNode = (value, type) => {
  if (constNodesCacheMap.has(value)) {
    return constNodesCacheMap.get(value);
  } else if (value.isNode === true) {
    return value;
  } else {
    return new ConstNode(value, type);
  }
};
var ConvertType = function(type, cacheMap = null) {
  return (...params) => {
    for (const param of params) {
      if (param === void 0) {
        console.error(`THREE.TSL: Invalid parameter for the type "${type}".`);
        return nodeObject(new ConstNode(0, type));
      }
    }
    if (params.length === 0 || !["bool", "float", "int", "uint"].includes(type) && params.every((param) => {
      const paramType = typeof param;
      return paramType !== "object" && paramType !== "function";
    })) {
      params = [getValueFromType(type, ...params)];
    }
    if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {
      return nodeObjectIntent(cacheMap.get(params[0]));
    }
    if (params.length === 1) {
      const node = getConstNode(params[0], type);
      if (node.nodeType === type)
        return nodeObjectIntent(node);
      return nodeObjectIntent(new ConvertNode(node, type));
    }
    const nodes = params.map((param) => getConstNode(param));
    return nodeObjectIntent(new JoinNode(nodes, type));
  };
};
var defined = (v2) => typeof v2 === "object" && v2 !== null ? v2.value : v2;
var getConstNodeType = (value) => value !== void 0 && value !== null ? value.nodeType || value.convertTo || (typeof value === "string" ? value : null) : null;
function ShaderNode(jsFunc, nodeType) {
  return new ShaderNodeInternal(jsFunc, nodeType);
}
var nodeObject = (val, altType = null) => (
  /* new */
  ShaderNodeObject(val, altType)
);
var nodeObjectIntent = (val, altType = null) => (
  /* new */
  nodeObject(val, altType).toVarIntent()
);
var nodeObjects = (val, altType = null) => new ShaderNodeObjects(val, altType);
var nodeArray = (val, altType = null) => new ShaderNodeArray(val, altType);
var nodeProxy = (NodeClass, scope = null, factor = null, settings = null) => new ShaderNodeProxy(NodeClass, scope, factor, settings);
var nodeImmutable = (NodeClass, ...params) => new ShaderNodeImmutable(NodeClass, ...params);
var nodeProxyIntent = (NodeClass, scope = null, factor = null, settings = {}) => new ShaderNodeProxy(NodeClass, scope, factor, { intent: true, ...settings });
var fnId = 0;
var FnNode = class extends Node {
  constructor(jsFunc, layout = null) {
    super();
    let nodeType = null;
    if (layout !== null) {
      if (typeof layout === "object") {
        nodeType = layout.return;
      } else {
        if (typeof layout === "string") {
          nodeType = layout;
        } else {
          console.error("THREE.TSL: Invalid layout type.");
        }
        layout = null;
      }
    }
    this.shaderNode = new ShaderNode(jsFunc, nodeType);
    if (layout !== null) {
      this.setLayout(layout);
    }
    this.isFn = true;
  }
  setLayout(layout) {
    const nodeType = this.shaderNode.nodeType;
    if (typeof layout.inputs !== "object") {
      const fullLayout = {
        name: "fn" + fnId++,
        type: nodeType,
        inputs: []
      };
      for (const name in layout) {
        if (name === "return")
          continue;
        fullLayout.inputs.push({
          name,
          type: layout[name]
        });
      }
      layout = fullLayout;
    }
    this.shaderNode.setLayout(layout);
    return this;
  }
  getNodeType(builder) {
    return this.shaderNode.getNodeType(builder) || "float";
  }
  call(...params) {
    const fnCall = this.shaderNode.call(params);
    if (this.shaderNode.nodeType === "void")
      fnCall.toStack();
    return fnCall.toVarIntent();
  }
  once(subBuilds = null) {
    this.shaderNode.once = true;
    this.shaderNode.subBuilds = subBuilds;
    return this;
  }
  generate(builder) {
    const type = this.getNodeType(builder);
    console.error('THREE.TSL: "Fn()" was declared but not invoked. Try calling it like "Fn()( ...params )".');
    return builder.generateConst(type);
  }
};
function Fn(jsFunc, layout = null) {
  const instance3 = new FnNode(jsFunc, layout);
  return new Proxy(() => {
  }, {
    apply(target, thisArg, params) {
      return instance3.call(...params);
    },
    get(target, prop, receiver) {
      return Reflect.get(instance3, prop, receiver);
    },
    set(target, prop, value, receiver) {
      return Reflect.set(instance3, prop, value, receiver);
    }
  });
}
var setCurrentStack = (stack3) => {
  currentStack = stack3;
};
var getCurrentStack = () => currentStack;
var If = (...params) => currentStack.If(...params);
var Switch = (...params) => currentStack.Switch(...params);
function Stack(node) {
  if (currentStack)
    currentStack.add(node);
  return node;
}
addMethodChaining("toStack", Stack);
var color2 = new ConvertType("color");
var float = new ConvertType("float", cacheMaps.float);
var int = new ConvertType("int", cacheMaps.ints);
var uint = new ConvertType("uint", cacheMaps.uint);
var bool = new ConvertType("bool", cacheMaps.bool);
var vec2 = new ConvertType("vec2");
var ivec2 = new ConvertType("ivec2");
var uvec2 = new ConvertType("uvec2");
var bvec2 = new ConvertType("bvec2");
var vec3 = new ConvertType("vec3");
var ivec3 = new ConvertType("ivec3");
var uvec3 = new ConvertType("uvec3");
var bvec3 = new ConvertType("bvec3");
var vec4 = new ConvertType("vec4");
var ivec4 = new ConvertType("ivec4");
var uvec4 = new ConvertType("uvec4");
var bvec4 = new ConvertType("bvec4");
var mat2 = new ConvertType("mat2");
var mat3 = new ConvertType("mat3");
var mat4 = new ConvertType("mat4");
var string = (value = "") => nodeObject(new ConstNode(value, "string"));
var arrayBuffer = (value) => nodeObject(new ConstNode(value, "ArrayBuffer"));
addMethodChaining("toColor", color2);
addMethodChaining("toFloat", float);
addMethodChaining("toInt", int);
addMethodChaining("toUint", uint);
addMethodChaining("toBool", bool);
addMethodChaining("toVec2", vec2);
addMethodChaining("toIVec2", ivec2);
addMethodChaining("toUVec2", uvec2);
addMethodChaining("toBVec2", bvec2);
addMethodChaining("toVec3", vec3);
addMethodChaining("toIVec3", ivec3);
addMethodChaining("toUVec3", uvec3);
addMethodChaining("toBVec3", bvec3);
addMethodChaining("toVec4", vec4);
addMethodChaining("toIVec4", ivec4);
addMethodChaining("toUVec4", uvec4);
addMethodChaining("toBVec4", bvec4);
addMethodChaining("toMat2", mat2);
addMethodChaining("toMat3", mat3);
addMethodChaining("toMat4", mat4);
var element = nodeProxy(ArrayElementNode).setParameterLength(2);
var convert = (node, types) => nodeObject(new ConvertNode(nodeObject(node), types));
var split = (node, channels) => nodeObject(new SplitNode(nodeObject(node), channels));
addMethodChaining("element", element);
addMethodChaining("convert", convert);
var append = (node) => {
  console.warn("THREE.TSL: append() has been renamed to Stack().");
  return Stack(node);
};
addMethodChaining("append", (node) => {
  console.warn("THREE.TSL: .append() has been renamed to .toStack().");
  return Stack(node);
});
var PropertyNode = class extends Node {
  static get type() {
    return "PropertyNode";
  }
  /**
   * Constructs a new property node.
   *
   * @param {string} nodeType - The type of the node.
   * @param {?string} [name=null] - The name of the property in the shader.
   * @param {boolean} [varying=false] - Whether this property is a varying or not.
   */
  constructor(nodeType, name = null, varying3 = false) {
    super(nodeType);
    this.name = name;
    this.varying = varying3;
    this.isPropertyNode = true;
    this.global = true;
  }
  getHash(builder) {
    return this.name || super.getHash(builder);
  }
  generate(builder) {
    let nodeVar;
    if (this.varying === true) {
      nodeVar = builder.getVaryingFromNode(this, this.name);
      nodeVar.needsInterpolation = true;
    } else {
      nodeVar = builder.getVarFromNode(this, this.name);
    }
    return builder.getPropertyName(nodeVar);
  }
};
var property = (type, name) => nodeObject(new PropertyNode(type, name));
var varyingProperty = (type, name) => nodeObject(new PropertyNode(type, name, true));
var diffuseColor = nodeImmutable(PropertyNode, "vec4", "DiffuseColor");
var emissive = nodeImmutable(PropertyNode, "vec3", "EmissiveColor");
var roughness = nodeImmutable(PropertyNode, "float", "Roughness");
var metalness = nodeImmutable(PropertyNode, "float", "Metalness");
var clearcoat = nodeImmutable(PropertyNode, "float", "Clearcoat");
var clearcoatRoughness = nodeImmutable(PropertyNode, "float", "ClearcoatRoughness");
var sheen = nodeImmutable(PropertyNode, "vec3", "Sheen");
var sheenRoughness = nodeImmutable(PropertyNode, "float", "SheenRoughness");
var iridescence = nodeImmutable(PropertyNode, "float", "Iridescence");
var iridescenceIOR = nodeImmutable(PropertyNode, "float", "IridescenceIOR");
var iridescenceThickness = nodeImmutable(PropertyNode, "float", "IridescenceThickness");
var alphaT = nodeImmutable(PropertyNode, "float", "AlphaT");
var anisotropy = nodeImmutable(PropertyNode, "float", "Anisotropy");
var anisotropyT = nodeImmutable(PropertyNode, "vec3", "AnisotropyT");
var anisotropyB = nodeImmutable(PropertyNode, "vec3", "AnisotropyB");
var specularColor = nodeImmutable(PropertyNode, "color", "SpecularColor");
var specularF90 = nodeImmutable(PropertyNode, "float", "SpecularF90");
var shininess = nodeImmutable(PropertyNode, "float", "Shininess");
var output = nodeImmutable(PropertyNode, "vec4", "Output");
var dashSize = nodeImmutable(PropertyNode, "float", "dashSize");
var gapSize = nodeImmutable(PropertyNode, "float", "gapSize");
var pointWidth = nodeImmutable(PropertyNode, "float", "pointWidth");
var ior = nodeImmutable(PropertyNode, "float", "IOR");
var transmission = nodeImmutable(PropertyNode, "float", "Transmission");
var thickness = nodeImmutable(PropertyNode, "float", "Thickness");
var attenuationDistance = nodeImmutable(PropertyNode, "float", "AttenuationDistance");
var attenuationColor = nodeImmutable(PropertyNode, "color", "AttenuationColor");
var dispersion = nodeImmutable(PropertyNode, "float", "Dispersion");
var UniformGroupNode = class extends Node {
  static get type() {
    return "UniformGroupNode";
  }
  /**
   * Constructs a new uniform group node.
   *
   * @param {string} name - The name of the uniform group node.
   * @param {boolean} [shared=false] - Whether this uniform group node is shared or not.
   * @param {number} [order=1] - Influences the internal sorting.
   */
  constructor(name, shared = false, order = 1) {
    super("string");
    this.name = name;
    this.shared = shared;
    this.order = order;
    this.isUniformGroup = true;
  }
  serialize(data) {
    super.serialize(data);
    data.name = this.name;
    data.version = this.version;
    data.shared = this.shared;
  }
  deserialize(data) {
    super.deserialize(data);
    this.name = data.name;
    this.version = data.version;
    this.shared = data.shared;
  }
};
var uniformGroup = (name) => new UniformGroupNode(name);
var sharedUniformGroup = (name, order = 0) => new UniformGroupNode(name, true, order);
var frameGroup = sharedUniformGroup("frame");
var renderGroup = sharedUniformGroup("render");
var objectGroup = uniformGroup("object");
var UniformNode = class extends InputNode {
  static get type() {
    return "UniformNode";
  }
  /**
   * Constructs a new uniform node.
   *
   * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).
   * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.
   */
  constructor(value, nodeType = null) {
    super(value, nodeType);
    this.isUniformNode = true;
    this.name = "";
    this.groupNode = objectGroup;
  }
  /**
   * Sets the {@link UniformNode#name} property.
   *
   * @param {string} name - The name of the uniform.
   * @return {UniformNode} A reference to this node.
   */
  setName(name) {
    this.name = name;
    return this;
  }
  /**
   * Sets the {@link UniformNode#name} property.
   *
   * @deprecated
   * @param {string} name - The name of the uniform.
   * @return {UniformNode} A reference to this node.
   */
  label(name) {
    console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.');
    return this.setName(name);
  }
  /**
   * Sets the {@link UniformNode#groupNode} property.
   *
   * @param {UniformGroupNode} group - The uniform group.
   * @return {UniformNode} A reference to this node.
   */
  setGroup(group) {
    this.groupNode = group;
    return this;
  }
  /**
   * Returns the {@link UniformNode#groupNode}.
   *
   * @return {UniformGroupNode} The uniform group.
   */
  getGroup() {
    return this.groupNode;
  }
  /**
   * By default, this method returns the result of {@link Node#getHash} but derived
   * classes might overwrite this method with a different implementation.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The uniform hash.
   */
  getUniformHash(builder) {
    return this.getHash(builder);
  }
  onUpdate(callback, updateType) {
    callback = callback.bind(this);
    return super.onUpdate((frame) => {
      const value = callback(frame, this);
      if (value !== void 0) {
        this.value = value;
      }
    }, updateType);
  }
  getInputType(builder) {
    let type = super.getInputType(builder);
    if (type === "bool") {
      type = "uint";
    }
    return type;
  }
  generate(builder, output3) {
    const type = this.getNodeType(builder);
    const hash3 = this.getUniformHash(builder);
    let sharedNode = builder.getNodeFromHash(hash3);
    if (sharedNode === void 0) {
      builder.setHashNode(this, hash3);
      sharedNode = this;
    }
    const sharedNodeType = sharedNode.getInputType(builder);
    const nodeUniform = builder.getUniformFromNode(sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.nodeName);
    const uniformName = builder.getPropertyName(nodeUniform);
    if (builder.context.nodeName !== void 0)
      delete builder.context.nodeName;
    let snippet = uniformName;
    if (type === "bool") {
      const nodeData = builder.getDataFromNode(this);
      let propertyName = nodeData.propertyName;
      if (propertyName === void 0) {
        const nodeVar = builder.getVarFromNode(this, null, "bool");
        propertyName = builder.getPropertyName(nodeVar);
        nodeData.propertyName = propertyName;
        snippet = builder.format(uniformName, sharedNodeType, type);
        builder.addLineFlowCode(`${propertyName} = ${snippet}`, this);
      }
      snippet = propertyName;
    }
    return builder.format(snippet, type, output3);
  }
};
var uniform = (value, type) => {
  const nodeType = getConstNodeType(type || value);
  if (nodeType === value) {
    value = getValueFromType(nodeType);
  }
  value = value && value.isNode === true ? value.node && value.node.value || value.value : value;
  return nodeObject(new UniformNode(value, nodeType));
};
var ArrayNode = class extends TempNode {
  static get type() {
    return "ArrayNode";
  }
  /**
   * Constructs a new array node.
   *
   * @param {?string} nodeType - The data type of the elements.
   * @param {number} count - Size of the array.
   * @param {?Array<Node>} [values=null] - Array default values.
   */
  constructor(nodeType, count, values = null) {
    super(nodeType);
    this.count = count;
    this.values = values;
    this.isArrayNode = true;
  }
  /**
   * Returns the number of elements in the node array.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {number} The number of elements in the node array.
   */
  getArrayCount() {
    return this.count;
  }
  /**
   * Returns the node's type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The type of the node.
   */
  getNodeType(builder) {
    if (this.nodeType === null) {
      this.nodeType = this.values[0].getNodeType(builder);
    }
    return this.nodeType;
  }
  /**
   * Returns the node's type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The type of the node.
   */
  getElementType(builder) {
    return this.getNodeType(builder);
  }
  /**
   * This method builds the output node and returns the resulting array as a shader string.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The generated shader string.
   */
  generate(builder) {
    const type = this.getNodeType(builder);
    return builder.generateArray(type, this.count, this.values);
  }
};
var array = (...params) => {
  let node;
  if (params.length === 1) {
    const values = params[0];
    node = new ArrayNode(null, values.length, values);
  } else {
    const nodeType = params[0];
    const count = params[1];
    node = new ArrayNode(nodeType, count);
  }
  return nodeObject(node);
};
addMethodChaining("toArray", (node, count) => array(Array(count).fill(node)));
var AssignNode = class extends TempNode {
  static get type() {
    return "AssignNode";
  }
  /**
   * Constructs a new assign node.
   *
   * @param {Node} targetNode - The target node.
   * @param {Node} sourceNode - The source type.
   */
  constructor(targetNode, sourceNode) {
    super();
    this.targetNode = targetNode;
    this.sourceNode = sourceNode;
    this.isAssignNode = true;
  }
  /**
   * Whether this node is used more than once in context of other nodes. This method
   * is overwritten since it always returns `false` (assigns are unique).
   *
   * @return {boolean} A flag that indicates if there is more than one dependency to other nodes. Always `false`.
   */
  hasDependencies() {
    return false;
  }
  getNodeType(builder, output3) {
    return output3 !== "void" ? this.targetNode.getNodeType(builder) : "void";
  }
  /**
   * Whether a split is required when assigning source to target. This can happen when the component length of
   * target and source data type does not match.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {boolean} Whether a split is required when assigning source to target.
   */
  needsSplitAssign(builder) {
    const { targetNode } = this;
    if (builder.isAvailable("swizzleAssign") === false && targetNode.isSplitNode && targetNode.components.length > 1) {
      const targetLength = builder.getTypeLength(targetNode.node.getNodeType(builder));
      const assignDifferentVector = vectorComponents.join("").slice(0, targetLength) !== targetNode.components;
      return assignDifferentVector;
    }
    return false;
  }
  setup(builder) {
    const { targetNode, sourceNode } = this;
    const scope = targetNode.getScope();
    const targetProperties = builder.getNodeProperties(scope);
    targetProperties.assign = true;
    const properties = builder.getNodeProperties(this);
    properties.sourceNode = sourceNode;
    properties.targetNode = targetNode.context({ assign: true });
  }
  generate(builder, output3) {
    const { targetNode, sourceNode } = builder.getNodeProperties(this);
    const needsSplitAssign = this.needsSplitAssign(builder);
    const target = targetNode.build(builder);
    const targetType = targetNode.getNodeType(builder);
    const source = sourceNode.build(builder, targetType);
    const sourceType = sourceNode.getNodeType(builder);
    const nodeData = builder.getDataFromNode(this);
    let snippet;
    if (nodeData.initialized === true) {
      if (output3 !== "void") {
        snippet = target;
      }
    } else if (needsSplitAssign) {
      const sourceVar = builder.getVarFromNode(this, null, targetType);
      const sourceProperty = builder.getPropertyName(sourceVar);
      builder.addLineFlowCode(`${sourceProperty} = ${source}`, this);
      const splitNode = targetNode.node;
      const splitTargetNode = splitNode.node.context({ assign: true });
      const targetRoot = splitTargetNode.build(builder);
      for (let i2 = 0; i2 < splitNode.components.length; i2++) {
        const component = splitNode.components[i2];
        builder.addLineFlowCode(`${targetRoot}.${component} = ${sourceProperty}[ ${i2} ]`, this);
      }
      if (output3 !== "void") {
        snippet = target;
      }
    } else {
      snippet = `${target} = ${source}`;
      if (output3 === "void" || sourceType === "void") {
        builder.addLineFlowCode(snippet, this);
        if (output3 !== "void") {
          snippet = target;
        }
      }
    }
    nodeData.initialized = true;
    return builder.format(snippet, targetType, output3);
  }
};
var assign = nodeProxy(AssignNode).setParameterLength(2);
addMethodChaining("assign", assign);
var FunctionCallNode = class extends TempNode {
  static get type() {
    return "FunctionCallNode";
  }
  /**
   * Constructs a new function call node.
   *
   * @param {?FunctionNode} functionNode - The function node.
   * @param {Object<string, Node>} [parameters={}] - The parameters for the function call.
   */
  constructor(functionNode = null, parameters = {}) {
    super();
    this.functionNode = functionNode;
    this.parameters = parameters;
  }
  /**
   * Sets the parameters of the function call node.
   *
   * @param {Object<string, Node>} parameters - The parameters to set.
   * @return {FunctionCallNode} A reference to this node.
   */
  setParameters(parameters) {
    this.parameters = parameters;
    return this;
  }
  /**
   * Returns the parameters of the function call node.
   *
   * @return {Object<string, Node>} The parameters of this node.
   */
  getParameters() {
    return this.parameters;
  }
  /**
   * Returns the type of this function call node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @returns {string} The type of this node.
   */
  getNodeType(builder) {
    return this.functionNode.getNodeType(builder);
  }
  /**
   * Returns the function node of this function call node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} [name] - The name of the member.
   * @returns {string} The type of the member.
   */
  getMemberType(builder, name) {
    return this.functionNode.getMemberType(builder, name);
  }
  generate(builder) {
    const params = [];
    const functionNode = this.functionNode;
    const inputs = functionNode.getInputs(builder);
    const parameters = this.parameters;
    const generateInput = (node, inputNode) => {
      const type = inputNode.type;
      const pointer = type === "pointer";
      let output3;
      if (pointer)
        output3 = "&" + node.build(builder);
      else
        output3 = node.build(builder, type);
      return output3;
    };
    if (Array.isArray(parameters)) {
      if (parameters.length > inputs.length) {
        console.error("THREE.TSL: The number of provided parameters exceeds the expected number of inputs in 'Fn()'.");
        parameters.length = inputs.length;
      } else if (parameters.length < inputs.length) {
        console.error("THREE.TSL: The number of provided parameters is less than the expected number of inputs in 'Fn()'.");
        while (parameters.length < inputs.length) {
          parameters.push(float(0));
        }
      }
      for (let i2 = 0; i2 < parameters.length; i2++) {
        params.push(generateInput(parameters[i2], inputs[i2]));
      }
    } else {
      for (const inputNode of inputs) {
        const node = parameters[inputNode.name];
        if (node !== void 0) {
          params.push(generateInput(node, inputNode));
        } else {
          console.error(`THREE.TSL: Input '${inputNode.name}' not found in 'Fn()'.`);
          params.push(generateInput(float(0), inputNode));
        }
      }
    }
    const functionName = functionNode.build(builder, "property");
    return `${functionName}( ${params.join(", ")} )`;
  }
};
var call = (func, ...params) => {
  params = params.length > 1 || params[0] && params[0].isNode === true ? nodeArray(params) : nodeObjects(params[0]);
  return nodeObject(new FunctionCallNode(nodeObject(func), params));
};
addMethodChaining("call", call);
var _vectorOperators = {
  "==": "equal",
  "!=": "notEqual",
  "<": "lessThan",
  ">": "greaterThan",
  "<=": "lessThanEqual",
  ">=": "greaterThanEqual",
  "%": "mod"
};
var OperatorNode = class _OperatorNode extends TempNode {
  static get type() {
    return "OperatorNode";
  }
  /**
   * Constructs a new operator node.
   *
   * @param {string} op - The operator.
   * @param {Node} aNode - The first input.
   * @param {Node} bNode - The second input.
   * @param {...Node} params - Additional input parameters.
   */
  constructor(op, aNode, bNode, ...params) {
    super();
    if (params.length > 0) {
      let finalOp = new _OperatorNode(op, aNode, bNode);
      for (let i2 = 0; i2 < params.length - 1; i2++) {
        finalOp = new _OperatorNode(op, finalOp, params[i2]);
      }
      aNode = finalOp;
      bNode = params[params.length - 1];
    }
    this.op = op;
    this.aNode = aNode;
    this.bNode = bNode;
    this.isOperatorNode = true;
  }
  /**
   * Returns the operator method name.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} output - The output type.
   * @returns {string} The operator method name.
   */
  getOperatorMethod(builder, output3) {
    return builder.getMethod(_vectorOperators[this.op], output3);
  }
  /**
   * This method is overwritten since the node type is inferred from the operator
   * and the input node types.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {?string} [output=null] - The output type.
   * @return {string} The node type.
   */
  getNodeType(builder, output3 = null) {
    const op = this.op;
    const aNode = this.aNode;
    const bNode = this.bNode;
    const typeA = aNode.getNodeType(builder);
    const typeB = bNode ? bNode.getNodeType(builder) : null;
    if (typeA === "void" || typeB === "void") {
      return output3 || "void";
    } else if (op === "%") {
      return typeA;
    } else if (op === "~" || op === "&" || op === "|" || op === "^" || op === ">>" || op === "<<") {
      return builder.getIntegerType(typeA);
    } else if (op === "!" || op === "&&" || op === "||" || op === "^^") {
      return "bool";
    } else if (op === "==" || op === "!=" || op === "<" || op === ">" || op === "<=" || op === ">=") {
      const typeLength = Math.max(builder.getTypeLength(typeA), builder.getTypeLength(typeB));
      return typeLength > 1 ? `bvec${typeLength}` : "bool";
    } else {
      if (builder.isMatrix(typeA)) {
        if (typeB === "float") {
          return typeA;
        } else if (builder.isVector(typeB)) {
          return builder.getVectorFromMatrix(typeA);
        } else if (builder.isMatrix(typeB)) {
          return typeA;
        }
      } else if (builder.isMatrix(typeB)) {
        if (typeA === "float") {
          return typeB;
        } else if (builder.isVector(typeA)) {
          return builder.getVectorFromMatrix(typeB);
        }
      }
      if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {
        return typeB;
      }
      return typeA;
    }
  }
  generate(builder, output3) {
    const op = this.op;
    const { aNode, bNode } = this;
    const type = this.getNodeType(builder, output3);
    let typeA = null;
    let typeB = null;
    if (type !== "void") {
      typeA = aNode.getNodeType(builder);
      typeB = bNode ? bNode.getNodeType(builder) : null;
      if (op === "<" || op === ">" || op === "<=" || op === ">=" || op === "==" || op === "!=") {
        if (builder.isVector(typeA)) {
          typeB = typeA;
        } else if (builder.isVector(typeB)) {
          typeA = typeB;
        } else if (typeA !== typeB) {
          typeA = typeB = "float";
        }
      } else if (op === ">>" || op === "<<") {
        typeA = type;
        typeB = builder.changeComponentType(typeB, "uint");
      } else if (op === "%") {
        typeA = type;
        typeB = builder.isInteger(typeA) && builder.isInteger(typeB) ? typeB : typeA;
      } else if (builder.isMatrix(typeA)) {
        if (typeB === "float") {
          typeB = "float";
        } else if (builder.isVector(typeB)) {
          typeB = builder.getVectorFromMatrix(typeA);
        } else if (builder.isMatrix(typeB))
          ;
        else {
          typeA = typeB = type;
        }
      } else if (builder.isMatrix(typeB)) {
        if (typeA === "float") {
          typeA = "float";
        } else if (builder.isVector(typeA)) {
          typeA = builder.getVectorFromMatrix(typeB);
        } else {
          typeA = typeB = type;
        }
      } else {
        typeA = typeB = type;
      }
    } else {
      typeA = typeB = type;
    }
    const a2 = aNode.build(builder, typeA);
    const b = bNode ? bNode.build(builder, typeB) : null;
    const fnOpSnippet = builder.getFunctionOperator(op);
    if (output3 !== "void") {
      const isGLSL = builder.renderer.coordinateSystem === WebGLCoordinateSystem;
      if (op === "==" || op === "!=" || op === "<" || op === ">" || op === "<=" || op === ">=") {
        if (isGLSL) {
          if (builder.isVector(typeA)) {
            return builder.format(`${this.getOperatorMethod(builder, output3)}( ${a2}, ${b} )`, type, output3);
          } else {
            return builder.format(`( ${a2} ${op} ${b} )`, type, output3);
          }
        } else {
          return builder.format(`( ${a2} ${op} ${b} )`, type, output3);
        }
      } else if (op === "%") {
        if (builder.isInteger(typeB)) {
          return builder.format(`( ${a2} % ${b} )`, type, output3);
        } else {
          return builder.format(`${this.getOperatorMethod(builder, type)}( ${a2}, ${b} )`, type, output3);
        }
      } else if (op === "!" || op === "~") {
        return builder.format(`(${op}${a2})`, typeA, output3);
      } else if (fnOpSnippet) {
        return builder.format(`${fnOpSnippet}( ${a2}, ${b} )`, type, output3);
      } else {
        if (builder.isMatrix(typeA) && typeB === "float") {
          return builder.format(`( ${b} ${op} ${a2} )`, type, output3);
        } else if (typeA === "float" && builder.isMatrix(typeB)) {
          return builder.format(`${a2} ${op} ${b}`, type, output3);
        } else {
          let snippet = `( ${a2} ${op} ${b} )`;
          if (!isGLSL && type === "bool" && builder.isVector(typeA) && builder.isVector(typeB)) {
            snippet = `all${snippet}`;
          }
          return builder.format(snippet, type, output3);
        }
      }
    } else if (typeA !== "void") {
      if (fnOpSnippet) {
        return builder.format(`${fnOpSnippet}( ${a2}, ${b} )`, type, output3);
      } else {
        if (builder.isMatrix(typeA) && typeB === "float") {
          return builder.format(`${b} ${op} ${a2}`, type, output3);
        } else {
          return builder.format(`${a2} ${op} ${b}`, type, output3);
        }
      }
    }
  }
  serialize(data) {
    super.serialize(data);
    data.op = this.op;
  }
  deserialize(data) {
    super.deserialize(data);
    this.op = data.op;
  }
};
var add3 = nodeProxyIntent(OperatorNode, "+").setParameterLength(2, Infinity).setName("add");
var sub = nodeProxyIntent(OperatorNode, "-").setParameterLength(2, Infinity).setName("sub");
var mul = nodeProxyIntent(OperatorNode, "*").setParameterLength(2, Infinity).setName("mul");
var div = nodeProxyIntent(OperatorNode, "/").setParameterLength(2, Infinity).setName("div");
var mod = nodeProxyIntent(OperatorNode, "%").setParameterLength(2).setName("mod");
var equal = nodeProxyIntent(OperatorNode, "==").setParameterLength(2).setName("equal");
var notEqual = nodeProxyIntent(OperatorNode, "!=").setParameterLength(2).setName("notEqual");
var lessThan = nodeProxyIntent(OperatorNode, "<").setParameterLength(2).setName("lessThan");
var greaterThan = nodeProxyIntent(OperatorNode, ">").setParameterLength(2).setName("greaterThan");
var lessThanEqual = nodeProxyIntent(OperatorNode, "<=").setParameterLength(2).setName("lessThanEqual");
var greaterThanEqual = nodeProxyIntent(OperatorNode, ">=").setParameterLength(2).setName("greaterThanEqual");
var and = nodeProxyIntent(OperatorNode, "&&").setParameterLength(2, Infinity).setName("and");
var or = nodeProxyIntent(OperatorNode, "||").setParameterLength(2, Infinity).setName("or");
var not = nodeProxyIntent(OperatorNode, "!").setParameterLength(1).setName("not");
var xor = nodeProxyIntent(OperatorNode, "^^").setParameterLength(2).setName("xor");
var bitAnd = nodeProxyIntent(OperatorNode, "&").setParameterLength(2).setName("bitAnd");
var bitNot = nodeProxyIntent(OperatorNode, "~").setParameterLength(2).setName("bitNot");
var bitOr = nodeProxyIntent(OperatorNode, "|").setParameterLength(2).setName("bitOr");
var bitXor = nodeProxyIntent(OperatorNode, "^").setParameterLength(2).setName("bitXor");
var shiftLeft = nodeProxyIntent(OperatorNode, "<<").setParameterLength(2).setName("shiftLeft");
var shiftRight = nodeProxyIntent(OperatorNode, ">>").setParameterLength(2).setName("shiftRight");
var incrementBefore = Fn(([a2]) => {
  a2.addAssign(1);
  return a2;
});
var decrementBefore = Fn(([a2]) => {
  a2.subAssign(1);
  return a2;
});
var increment = Fn(([a2]) => {
  const temp = int(a2).toConst();
  a2.addAssign(1);
  return temp;
});
var decrement = Fn(([a2]) => {
  const temp = int(a2).toConst();
  a2.subAssign(1);
  return temp;
});
addMethodChaining("add", add3);
addMethodChaining("sub", sub);
addMethodChaining("mul", mul);
addMethodChaining("div", div);
addMethodChaining("mod", mod);
addMethodChaining("equal", equal);
addMethodChaining("notEqual", notEqual);
addMethodChaining("lessThan", lessThan);
addMethodChaining("greaterThan", greaterThan);
addMethodChaining("lessThanEqual", lessThanEqual);
addMethodChaining("greaterThanEqual", greaterThanEqual);
addMethodChaining("and", and);
addMethodChaining("or", or);
addMethodChaining("not", not);
addMethodChaining("xor", xor);
addMethodChaining("bitAnd", bitAnd);
addMethodChaining("bitNot", bitNot);
addMethodChaining("bitOr", bitOr);
addMethodChaining("bitXor", bitXor);
addMethodChaining("shiftLeft", shiftLeft);
addMethodChaining("shiftRight", shiftRight);
addMethodChaining("incrementBefore", incrementBefore);
addMethodChaining("decrementBefore", decrementBefore);
addMethodChaining("increment", increment);
addMethodChaining("decrement", decrement);
var modInt = (a2, b) => {
  console.warn('THREE.TSL: "modInt()" is deprecated. Use "mod( int( ... ) )" instead.');
  return mod(int(a2), int(b));
};
addMethodChaining("modInt", modInt);
var MathNode = class _MathNode extends TempNode {
  static get type() {
    return "MathNode";
  }
  /**
   * Constructs a new math node.
   *
   * @param {string} method - The method name.
   * @param {Node} aNode - The first input.
   * @param {?Node} [bNode=null] - The second input.
   * @param {?Node} [cNode=null] - The third input.
   */
  constructor(method, aNode, bNode = null, cNode = null) {
    super();
    if ((method === _MathNode.MAX || method === _MathNode.MIN) && arguments.length > 3) {
      let finalOp = new _MathNode(method, aNode, bNode);
      for (let i2 = 2; i2 < arguments.length - 1; i2++) {
        finalOp = new _MathNode(method, finalOp, arguments[i2]);
      }
      aNode = finalOp;
      bNode = arguments[arguments.length - 1];
      cNode = null;
    }
    this.method = method;
    this.aNode = aNode;
    this.bNode = bNode;
    this.cNode = cNode;
    this.isMathNode = true;
  }
  /**
   * The input type is inferred from the node types of the input nodes.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType(builder) {
    const aType = this.aNode.getNodeType(builder);
    const bType = this.bNode ? this.bNode.getNodeType(builder) : null;
    const cType = this.cNode ? this.cNode.getNodeType(builder) : null;
    const aLen = builder.isMatrix(aType) ? 0 : builder.getTypeLength(aType);
    const bLen = builder.isMatrix(bType) ? 0 : builder.getTypeLength(bType);
    const cLen = builder.isMatrix(cType) ? 0 : builder.getTypeLength(cType);
    if (aLen > bLen && aLen > cLen) {
      return aType;
    } else if (bLen > cLen) {
      return bType;
    } else if (cLen > aLen) {
      return cType;
    }
    return aType;
  }
  /**
   * The selected method as well as the input type determine the node type of this node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    const method = this.method;
    if (method === _MathNode.LENGTH || method === _MathNode.DISTANCE || method === _MathNode.DOT) {
      return "float";
    } else if (method === _MathNode.CROSS) {
      return "vec3";
    } else if (method === _MathNode.ALL || method === _MathNode.ANY) {
      return "bool";
    } else if (method === _MathNode.EQUALS) {
      return builder.changeComponentType(this.aNode.getNodeType(builder), "bool");
    } else {
      return this.getInputType(builder);
    }
  }
  setup(builder) {
    const { aNode, bNode, method } = this;
    let outputNode = null;
    if (method === _MathNode.ONE_MINUS) {
      outputNode = sub(1, aNode);
    } else if (method === _MathNode.RECIPROCAL) {
      outputNode = div(1, aNode);
    } else if (method === _MathNode.DIFFERENCE) {
      outputNode = abs(sub(aNode, bNode));
    } else if (method === _MathNode.TRANSFORM_DIRECTION) {
      let tA = aNode;
      let tB = bNode;
      if (builder.isMatrix(tA.getNodeType(builder))) {
        tB = vec4(vec3(tB), 0);
      } else {
        tA = vec4(vec3(tA), 0);
      }
      const mulNode = mul(tA, tB).xyz;
      outputNode = normalize(mulNode);
    }
    if (outputNode !== null) {
      return outputNode;
    } else {
      return super.setup(builder);
    }
  }
  generate(builder, output3) {
    const properties = builder.getNodeProperties(this);
    if (properties.outputNode) {
      return super.generate(builder, output3);
    }
    let method = this.method;
    const type = this.getNodeType(builder);
    const inputType = this.getInputType(builder);
    const a2 = this.aNode;
    const b = this.bNode;
    const c2 = this.cNode;
    const coordinateSystem = builder.renderer.coordinateSystem;
    if (method === _MathNode.NEGATE) {
      return builder.format("( - " + a2.build(builder, inputType) + " )", type, output3);
    } else {
      const params = [];
      if (method === _MathNode.CROSS) {
        params.push(
          a2.build(builder, type),
          b.build(builder, type)
        );
      } else if (coordinateSystem === WebGLCoordinateSystem && method === _MathNode.STEP) {
        params.push(
          a2.build(builder, builder.getTypeLength(a2.getNodeType(builder)) === 1 ? "float" : inputType),
          b.build(builder, inputType)
        );
      } else if (coordinateSystem === WebGLCoordinateSystem && (method === _MathNode.MIN || method === _MathNode.MAX)) {
        params.push(
          a2.build(builder, inputType),
          b.build(builder, builder.getTypeLength(b.getNodeType(builder)) === 1 ? "float" : inputType)
        );
      } else if (method === _MathNode.REFRACT) {
        params.push(
          a2.build(builder, inputType),
          b.build(builder, inputType),
          c2.build(builder, "float")
        );
      } else if (method === _MathNode.MIX) {
        params.push(
          a2.build(builder, inputType),
          b.build(builder, inputType),
          c2.build(builder, builder.getTypeLength(c2.getNodeType(builder)) === 1 ? "float" : inputType)
        );
      } else {
        if (coordinateSystem === WebGPUCoordinateSystem && method === _MathNode.ATAN && b !== null) {
          method = "atan2";
        }
        if (builder.shaderStage !== "fragment" && (method === _MathNode.DFDX || method === _MathNode.DFDY)) {
          console.warn(`THREE.TSL: '${method}' is not supported in the ${builder.shaderStage} stage.`);
          method = "/*" + method + "*/";
        }
        params.push(a2.build(builder, inputType));
        if (b !== null)
          params.push(b.build(builder, inputType));
        if (c2 !== null)
          params.push(c2.build(builder, inputType));
      }
      return builder.format(`${builder.getMethod(method, type)}( ${params.join(", ")} )`, type, output3);
    }
  }
  serialize(data) {
    super.serialize(data);
    data.method = this.method;
  }
  deserialize(data) {
    super.deserialize(data);
    this.method = data.method;
  }
};
MathNode.ALL = "all";
MathNode.ANY = "any";
MathNode.RADIANS = "radians";
MathNode.DEGREES = "degrees";
MathNode.EXP = "exp";
MathNode.EXP2 = "exp2";
MathNode.LOG = "log";
MathNode.LOG2 = "log2";
MathNode.SQRT = "sqrt";
MathNode.INVERSE_SQRT = "inversesqrt";
MathNode.FLOOR = "floor";
MathNode.CEIL = "ceil";
MathNode.NORMALIZE = "normalize";
MathNode.FRACT = "fract";
MathNode.SIN = "sin";
MathNode.COS = "cos";
MathNode.TAN = "tan";
MathNode.ASIN = "asin";
MathNode.ACOS = "acos";
MathNode.ATAN = "atan";
MathNode.ABS = "abs";
MathNode.SIGN = "sign";
MathNode.LENGTH = "length";
MathNode.NEGATE = "negate";
MathNode.ONE_MINUS = "oneMinus";
MathNode.DFDX = "dFdx";
MathNode.DFDY = "dFdy";
MathNode.ROUND = "round";
MathNode.RECIPROCAL = "reciprocal";
MathNode.TRUNC = "trunc";
MathNode.FWIDTH = "fwidth";
MathNode.TRANSPOSE = "transpose";
MathNode.DETERMINANT = "determinant";
MathNode.INVERSE = "inverse";
MathNode.EQUALS = "equals";
MathNode.MIN = "min";
MathNode.MAX = "max";
MathNode.STEP = "step";
MathNode.REFLECT = "reflect";
MathNode.DISTANCE = "distance";
MathNode.DIFFERENCE = "difference";
MathNode.DOT = "dot";
MathNode.CROSS = "cross";
MathNode.POW = "pow";
MathNode.TRANSFORM_DIRECTION = "transformDirection";
MathNode.MIX = "mix";
MathNode.CLAMP = "clamp";
MathNode.REFRACT = "refract";
MathNode.SMOOTHSTEP = "smoothstep";
MathNode.FACEFORWARD = "faceforward";
var EPSILON = float(1e-6);
var INFINITY = float(1e6);
var PI = float(Math.PI);
var PI2 = float(Math.PI * 2);
var all = nodeProxyIntent(MathNode, MathNode.ALL).setParameterLength(1);
var any = nodeProxyIntent(MathNode, MathNode.ANY).setParameterLength(1);
var radians2 = nodeProxyIntent(MathNode, MathNode.RADIANS).setParameterLength(1);
var degrees2 = nodeProxyIntent(MathNode, MathNode.DEGREES).setParameterLength(1);
var exp = nodeProxyIntent(MathNode, MathNode.EXP).setParameterLength(1);
var exp2 = nodeProxyIntent(MathNode, MathNode.EXP2).setParameterLength(1);
var log = nodeProxyIntent(MathNode, MathNode.LOG).setParameterLength(1);
var log2 = nodeProxyIntent(MathNode, MathNode.LOG2).setParameterLength(1);
var sqrt2 = nodeProxyIntent(MathNode, MathNode.SQRT).setParameterLength(1);
var inverseSqrt = nodeProxyIntent(MathNode, MathNode.INVERSE_SQRT).setParameterLength(1);
var floor = nodeProxyIntent(MathNode, MathNode.FLOOR).setParameterLength(1);
var ceil = nodeProxyIntent(MathNode, MathNode.CEIL).setParameterLength(1);
var normalize = nodeProxyIntent(MathNode, MathNode.NORMALIZE).setParameterLength(1);
var fract = nodeProxyIntent(MathNode, MathNode.FRACT).setParameterLength(1);
var sin2 = nodeProxyIntent(MathNode, MathNode.SIN).setParameterLength(1);
var cos2 = nodeProxyIntent(MathNode, MathNode.COS).setParameterLength(1);
var tan = nodeProxyIntent(MathNode, MathNode.TAN).setParameterLength(1);
var asin2 = nodeProxyIntent(MathNode, MathNode.ASIN).setParameterLength(1);
var acos = nodeProxyIntent(MathNode, MathNode.ACOS).setParameterLength(1);
var atan = nodeProxyIntent(MathNode, MathNode.ATAN).setParameterLength(1, 2);
var abs = nodeProxyIntent(MathNode, MathNode.ABS).setParameterLength(1);
var sign3 = nodeProxyIntent(MathNode, MathNode.SIGN).setParameterLength(1);
var length = nodeProxyIntent(MathNode, MathNode.LENGTH).setParameterLength(1);
var negate = nodeProxyIntent(MathNode, MathNode.NEGATE).setParameterLength(1);
var oneMinus = nodeProxyIntent(MathNode, MathNode.ONE_MINUS).setParameterLength(1);
var dFdx = nodeProxyIntent(MathNode, MathNode.DFDX).setParameterLength(1);
var dFdy = nodeProxyIntent(MathNode, MathNode.DFDY).setParameterLength(1);
var round = nodeProxyIntent(MathNode, MathNode.ROUND).setParameterLength(1);
var reciprocal = nodeProxyIntent(MathNode, MathNode.RECIPROCAL).setParameterLength(1);
var trunc = nodeProxyIntent(MathNode, MathNode.TRUNC).setParameterLength(1);
var fwidth = nodeProxyIntent(MathNode, MathNode.FWIDTH).setParameterLength(1);
var transpose = nodeProxyIntent(MathNode, MathNode.TRANSPOSE).setParameterLength(1);
var determinant = nodeProxyIntent(MathNode, MathNode.DETERMINANT).setParameterLength(1);
var inverse = nodeProxyIntent(MathNode, MathNode.INVERSE).setParameterLength(1);
var equals2 = (x2, y2) => {
  console.warn('THREE.TSL: "equals" is deprecated. Use "equal" inside a vector instead, like: "bvec*( equal( ... ) )"');
  return equal(x2, y2);
};
var min$1 = nodeProxyIntent(MathNode, MathNode.MIN).setParameterLength(2, Infinity);
var max$1 = nodeProxyIntent(MathNode, MathNode.MAX).setParameterLength(2, Infinity);
var step = nodeProxyIntent(MathNode, MathNode.STEP).setParameterLength(2);
var reflect = nodeProxyIntent(MathNode, MathNode.REFLECT).setParameterLength(2);
var distance2 = nodeProxyIntent(MathNode, MathNode.DISTANCE).setParameterLength(2);
var difference = nodeProxyIntent(MathNode, MathNode.DIFFERENCE).setParameterLength(2);
var dot = nodeProxyIntent(MathNode, MathNode.DOT).setParameterLength(2);
var cross = nodeProxyIntent(MathNode, MathNode.CROSS).setParameterLength(2);
var pow = nodeProxyIntent(MathNode, MathNode.POW).setParameterLength(2);
var pow2 = (x2) => mul(x2, x2);
var pow3 = (x2) => mul(x2, x2, x2);
var pow4 = (x2) => mul(x2, x2, x2, x2);
var transformDirection = nodeProxyIntent(MathNode, MathNode.TRANSFORM_DIRECTION).setParameterLength(2);
var cbrt = (a2) => mul(sign3(a2), pow(abs(a2), 1 / 3));
var lengthSq = (a2) => dot(a2, a2);
var mix = nodeProxyIntent(MathNode, MathNode.MIX).setParameterLength(3);
var clamp = (value, low = 0, high = 1) => nodeObject(new MathNode(MathNode.CLAMP, nodeObject(value), nodeObject(low), nodeObject(high)));
var saturate2 = (value) => clamp(value);
var refract = nodeProxyIntent(MathNode, MathNode.REFRACT).setParameterLength(3);
var smoothstep = nodeProxyIntent(MathNode, MathNode.SMOOTHSTEP).setParameterLength(3);
var faceForward = nodeProxyIntent(MathNode, MathNode.FACEFORWARD).setParameterLength(3);
var rand = Fn(([uv3]) => {
  const a2 = 12.9898, b = 78.233, c2 = 43758.5453;
  const dt = dot(uv3.xy, vec2(a2, b)), sn = mod(dt, PI);
  return fract(sin2(sn).mul(c2));
});
var mixElement = (t2, e1, e2) => mix(e1, e2, t2);
var smoothstepElement = (x2, low, high) => smoothstep(low, high, x2);
var stepElement = (x2, edge) => step(edge, x2);
var atan22 = (y2, x2) => {
  console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.');
  return atan(y2, x2);
};
var faceforward = faceForward;
var inversesqrt = inverseSqrt;
addMethodChaining("all", all);
addMethodChaining("any", any);
addMethodChaining("equals", equals2);
addMethodChaining("radians", radians2);
addMethodChaining("degrees", degrees2);
addMethodChaining("exp", exp);
addMethodChaining("exp2", exp2);
addMethodChaining("log", log);
addMethodChaining("log2", log2);
addMethodChaining("sqrt", sqrt2);
addMethodChaining("inverseSqrt", inverseSqrt);
addMethodChaining("floor", floor);
addMethodChaining("ceil", ceil);
addMethodChaining("normalize", normalize);
addMethodChaining("fract", fract);
addMethodChaining("sin", sin2);
addMethodChaining("cos", cos2);
addMethodChaining("tan", tan);
addMethodChaining("asin", asin2);
addMethodChaining("acos", acos);
addMethodChaining("atan", atan);
addMethodChaining("abs", abs);
addMethodChaining("sign", sign3);
addMethodChaining("length", length);
addMethodChaining("lengthSq", lengthSq);
addMethodChaining("negate", negate);
addMethodChaining("oneMinus", oneMinus);
addMethodChaining("dFdx", dFdx);
addMethodChaining("dFdy", dFdy);
addMethodChaining("round", round);
addMethodChaining("reciprocal", reciprocal);
addMethodChaining("trunc", trunc);
addMethodChaining("fwidth", fwidth);
addMethodChaining("atan2", atan22);
addMethodChaining("min", min$1);
addMethodChaining("max", max$1);
addMethodChaining("step", stepElement);
addMethodChaining("reflect", reflect);
addMethodChaining("distance", distance2);
addMethodChaining("dot", dot);
addMethodChaining("cross", cross);
addMethodChaining("pow", pow);
addMethodChaining("pow2", pow2);
addMethodChaining("pow3", pow3);
addMethodChaining("pow4", pow4);
addMethodChaining("transformDirection", transformDirection);
addMethodChaining("mix", mixElement);
addMethodChaining("clamp", clamp);
addMethodChaining("refract", refract);
addMethodChaining("smoothstep", smoothstepElement);
addMethodChaining("faceForward", faceForward);
addMethodChaining("difference", difference);
addMethodChaining("saturate", saturate2);
addMethodChaining("cbrt", cbrt);
addMethodChaining("transpose", transpose);
addMethodChaining("determinant", determinant);
addMethodChaining("inverse", inverse);
addMethodChaining("rand", rand);
var ConditionalNode = class extends Node {
  static get type() {
    return "ConditionalNode";
  }
  /**
   * Constructs a new conditional node.
   *
   * @param {Node} condNode - The node that defines the condition.
   * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.
   * @param {?Node} [elseNode=null] - The node that is evaluate when the condition ends up `false`.
   */
  constructor(condNode, ifNode, elseNode = null) {
    super();
    this.condNode = condNode;
    this.ifNode = ifNode;
    this.elseNode = elseNode;
  }
  /**
   * This method is overwritten since the node type is inferred from the if/else
   * nodes.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    const { ifNode, elseNode } = builder.getNodeProperties(this);
    if (ifNode === void 0) {
      builder.flowBuildStage(this, "setup");
      return this.getNodeType(builder);
    }
    const ifType = ifNode.getNodeType(builder);
    if (elseNode !== null) {
      const elseType = elseNode.getNodeType(builder);
      if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {
        return elseType;
      }
    }
    return ifType;
  }
  setup(builder) {
    const condNode = this.condNode.cache();
    const ifNode = this.ifNode.cache();
    const elseNode = this.elseNode ? this.elseNode.cache() : null;
    const currentNodeBlock = builder.context.nodeBlock;
    builder.getDataFromNode(ifNode).parentNodeBlock = currentNodeBlock;
    if (elseNode !== null)
      builder.getDataFromNode(elseNode).parentNodeBlock = currentNodeBlock;
    const isUniformFlow = builder.context.uniformFlow;
    const properties = builder.getNodeProperties(this);
    properties.condNode = condNode;
    properties.ifNode = isUniformFlow ? ifNode : ifNode.context({ nodeBlock: ifNode });
    properties.elseNode = elseNode ? isUniformFlow ? elseNode : elseNode.context({ nodeBlock: elseNode }) : null;
  }
  generate(builder, output3) {
    const type = this.getNodeType(builder);
    const nodeData = builder.getDataFromNode(this);
    if (nodeData.nodeProperty !== void 0) {
      return nodeData.nodeProperty;
    }
    const { condNode, ifNode, elseNode } = builder.getNodeProperties(this);
    const functionNode = builder.currentFunctionNode;
    const needsOutput = output3 !== "void";
    const nodeProperty = needsOutput ? property(type).build(builder) : "";
    nodeData.nodeProperty = nodeProperty;
    const nodeSnippet = condNode.build(builder, "bool");
    const isUniformFlow = builder.context.uniformFlow;
    if (isUniformFlow && elseNode !== null) {
      const ifSnippet2 = ifNode.build(builder, type);
      const elseSnippet = elseNode.build(builder, type);
      const mathSnippet = builder.getTernary(nodeSnippet, ifSnippet2, elseSnippet);
      return builder.format(mathSnippet, type, output3);
    }
    builder.addFlowCode(`
${builder.tab}if ( ${nodeSnippet} ) {

`).addFlowTab();
    let ifSnippet = ifNode.build(builder, type);
    if (ifSnippet) {
      if (needsOutput) {
        ifSnippet = nodeProperty + " = " + ifSnippet + ";";
      } else {
        ifSnippet = "return " + ifSnippet + ";";
        if (functionNode === null) {
          console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values.");
          ifSnippet = "// " + ifSnippet;
        }
      }
    }
    builder.removeFlowTab().addFlowCode(builder.tab + "	" + ifSnippet + "\n\n" + builder.tab + "}");
    if (elseNode !== null) {
      builder.addFlowCode(" else {\n\n").addFlowTab();
      let elseSnippet = elseNode.build(builder, type);
      if (elseSnippet) {
        if (needsOutput) {
          elseSnippet = nodeProperty + " = " + elseSnippet + ";";
        } else {
          elseSnippet = "return " + elseSnippet + ";";
          if (functionNode === null) {
            console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values.");
            elseSnippet = "// " + elseSnippet;
          }
        }
      }
      builder.removeFlowTab().addFlowCode(builder.tab + "	" + elseSnippet + "\n\n" + builder.tab + "}\n\n");
    } else {
      builder.addFlowCode("\n\n");
    }
    return builder.format(nodeProperty, type, output3);
  }
};
var select = nodeProxy(ConditionalNode).setParameterLength(2, 3);
addMethodChaining("select", select);
var ContextNode = class extends Node {
  static get type() {
    return "ContextNode";
  }
  /**
   * Constructs a new context node.
   *
   * @param {Node} node - The node whose context should be modified.
   * @param {Object} [value={}] - The modified context data.
   */
  constructor(node, value = {}) {
    super();
    this.isContextNode = true;
    this.node = node;
    this.value = value;
  }
  /**
   * This method is overwritten to ensure it returns the reference to {@link ContextNode#node}.
   *
   * @return {Node} A reference to {@link ContextNode#node}.
   */
  getScope() {
    return this.node.getScope();
  }
  /**
   * This method is overwritten to ensure it returns the type of {@link ContextNode#node}.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  /**
   * This method is overwritten to ensure it returns the member type of {@link ContextNode#node}.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} name - The member name.
   * @returns {string} The member type.
   */
  getMemberType(builder, name) {
    return this.node.getMemberType(builder, name);
  }
  analyze(builder) {
    const previousContext = builder.getContext();
    builder.setContext({ ...builder.context, ...this.value });
    this.node.build(builder);
    builder.setContext(previousContext);
  }
  setup(builder) {
    const previousContext = builder.getContext();
    builder.setContext({ ...builder.context, ...this.value });
    this.node.build(builder);
    builder.setContext(previousContext);
  }
  generate(builder, output3) {
    const previousContext = builder.getContext();
    builder.setContext({ ...builder.context, ...this.value });
    const snippet = this.node.build(builder, output3);
    builder.setContext(previousContext);
    return snippet;
  }
};
var context = nodeProxy(ContextNode).setParameterLength(1, 2);
var uniformFlow = (node) => context(node, { uniformFlow: true });
var setName = (node, name) => context(node, { nodeName: name });
function label(node, name) {
  console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.');
  return setName(node, name);
}
addMethodChaining("context", context);
addMethodChaining("label", label);
addMethodChaining("uniformFlow", uniformFlow);
addMethodChaining("setName", setName);
var VarNode = class extends Node {
  static get type() {
    return "VarNode";
  }
  /**
   * Constructs a new variable node.
   *
   * @param {Node} node - The node for which a variable should be created.
   * @param {?string} [name=null] - The name of the variable in the shader.
   * @param {boolean} [readOnly=false] - The read-only flag.
   */
  constructor(node, name = null, readOnly = false) {
    super();
    this.node = node;
    this.name = name;
    this.global = true;
    this.isVarNode = true;
    this.readOnly = readOnly;
    this.parents = true;
    this.intent = false;
  }
  /**
   * Sets the intent flag for this node.
   *
   * This flag is used to indicate that this node is used for intent
   * and should not be built directly. Instead, it is used to indicate that
   * the node should be treated as a variable intent.
   *
   * It's useful for assigning variables without needing creating a new variable node.
   *
   * @param {boolean} value - The value to set for the intent flag.
   * @returns {VarNode} This node.
   */
  setIntent(value) {
    this.intent = value;
    return this;
  }
  /**
   * Returns the intent flag of this node.
   *
   * @return {boolean} The intent flag.
   */
  getIntent() {
    return this.intent;
  }
  getMemberType(builder, name) {
    return this.node.getMemberType(builder, name);
  }
  getElementType(builder) {
    return this.node.getElementType(builder);
  }
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  getArrayCount(builder) {
    return this.node.getArrayCount(builder);
  }
  build(...params) {
    if (this.intent === true) {
      const builder = params[0];
      const properties = builder.getNodeProperties(this);
      if (properties.assign !== true) {
        return this.node.build(...params);
      }
    }
    return super.build(...params);
  }
  generate(builder) {
    const { node, name, readOnly } = this;
    const { renderer: renderer3 } = builder;
    const isWebGPUBackend = renderer3.backend.isWebGPUBackend === true;
    let isDeterministic = false;
    let shouldTreatAsReadOnly = false;
    if (readOnly) {
      isDeterministic = builder.isDeterministic(node);
      shouldTreatAsReadOnly = isWebGPUBackend ? readOnly : isDeterministic;
    }
    const vectorType = builder.getVectorType(this.getNodeType(builder));
    const snippet = node.build(builder, vectorType);
    const nodeVar = builder.getVarFromNode(this, name, vectorType, void 0, shouldTreatAsReadOnly);
    const propertyName = builder.getPropertyName(nodeVar);
    let declarationPrefix = propertyName;
    if (shouldTreatAsReadOnly) {
      if (isWebGPUBackend) {
        declarationPrefix = isDeterministic ? `const ${propertyName}` : `let ${propertyName}`;
      } else {
        const count = node.getArrayCount(builder);
        declarationPrefix = `const ${builder.getVar(nodeVar.type, propertyName, count)}`;
      }
    }
    builder.addLineFlowCode(`${declarationPrefix} = ${snippet}`, this);
    return propertyName;
  }
};
var createVar = nodeProxy(VarNode);
var Var = (node, name = null) => createVar(node, name).toStack();
var Const = (node, name = null) => createVar(node, name, true).toStack();
var VarIntent = (node) => {
  if (getCurrentStack() === null) {
    return node;
  }
  return createVar(node).setIntent(true).toStack();
};
addMethodChaining("toVar", Var);
addMethodChaining("toConst", Const);
addMethodChaining("toVarIntent", VarIntent);
var SubBuildNode = class extends Node {
  static get type() {
    return "SubBuild";
  }
  constructor(node, name, nodeType = null) {
    super(nodeType);
    this.node = node;
    this.name = name;
    this.isSubBuildNode = true;
  }
  getNodeType(builder) {
    if (this.nodeType !== null)
      return this.nodeType;
    builder.addSubBuild(this.name);
    const nodeType = this.node.getNodeType(builder);
    builder.removeSubBuild();
    return nodeType;
  }
  build(builder, ...params) {
    builder.addSubBuild(this.name);
    const data = this.node.build(builder, ...params);
    builder.removeSubBuild();
    return data;
  }
};
var subBuild = (node, name, type = null) => nodeObject(new SubBuildNode(nodeObject(node), name, type));
var VaryingNode = class extends Node {
  static get type() {
    return "VaryingNode";
  }
  /**
   * Constructs a new varying node.
   *
   * @param {Node} node - The node for which a varying should be created.
   * @param {?string} name - The name of the varying in the shader.
   */
  constructor(node, name = null) {
    super();
    this.node = node;
    this.name = name;
    this.isVaryingNode = true;
    this.interpolationType = null;
    this.interpolationSampling = null;
    this.global = true;
  }
  /**
   * Defines the interpolation type of the varying.
   *
   * @param {string} type - The interpolation type.
   * @param {?string} sampling - The interpolation sampling type
   * @return {VaryingNode} A reference to this node.
   */
  setInterpolation(type, sampling = null) {
    this.interpolationType = type;
    this.interpolationSampling = sampling;
    return this;
  }
  getHash(builder) {
    return this.name || super.getHash(builder);
  }
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  /**
   * This method performs the setup of a varying node with the current node builder.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {NodeVarying} The node varying from the node builder.
   */
  setupVarying(builder) {
    const properties = builder.getNodeProperties(this);
    let varying3 = properties.varying;
    if (varying3 === void 0) {
      const name = this.name;
      const type = this.getNodeType(builder);
      const interpolationType = this.interpolationType;
      const interpolationSampling = this.interpolationSampling;
      properties.varying = varying3 = builder.getVaryingFromNode(this, name, type, interpolationType, interpolationSampling);
      properties.node = subBuild(this.node, "VERTEX");
    }
    varying3.needsInterpolation || (varying3.needsInterpolation = builder.shaderStage === "fragment");
    return varying3;
  }
  setup(builder) {
    this.setupVarying(builder);
    builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, this.node);
  }
  analyze(builder) {
    this.setupVarying(builder);
    builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, this.node);
  }
  generate(builder) {
    const propertyKey = builder.getSubBuildProperty("property", builder.currentStack);
    const properties = builder.getNodeProperties(this);
    const varying3 = this.setupVarying(builder);
    if (properties[propertyKey] === void 0) {
      const type = this.getNodeType(builder);
      const propertyName = builder.getPropertyName(varying3, NodeShaderStage.VERTEX);
      builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, properties.node, type, propertyName);
      properties[propertyKey] = propertyName;
    }
    return builder.getPropertyName(varying3);
  }
};
var varying = nodeProxy(VaryingNode).setParameterLength(1, 2);
var vertexStage = (node) => varying(node);
addMethodChaining("toVarying", varying);
addMethodChaining("toVertexStage", vertexStage);
addMethodChaining("varying", (...params) => {
  console.warn("THREE.TSL: .varying() has been renamed to .toVarying().");
  return varying(...params);
});
addMethodChaining("vertexStage", (...params) => {
  console.warn("THREE.TSL: .vertexStage() has been renamed to .toVertexStage().");
  return varying(...params);
});
var sRGBTransferEOTF = Fn(([color4]) => {
  const a2 = color4.mul(0.9478672986).add(0.0521327014).pow(2.4);
  const b = color4.mul(0.0773993808);
  const factor = color4.lessThanEqual(0.04045);
  const rgbResult = mix(a2, b, factor);
  return rgbResult;
}).setLayout({
  name: "sRGBTransferEOTF",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" }
  ]
});
var sRGBTransferOETF = Fn(([color4]) => {
  const a2 = color4.pow(0.41666).mul(1.055).sub(0.055);
  const b = color4.mul(12.92);
  const factor = color4.lessThanEqual(31308e-7);
  const rgbResult = mix(a2, b, factor);
  return rgbResult;
}).setLayout({
  name: "sRGBTransferOETF",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" }
  ]
});
var WORKING_COLOR_SPACE = "WorkingColorSpace";
var OUTPUT_COLOR_SPACE = "OutputColorSpace";
var ColorSpaceNode = class extends TempNode {
  static get type() {
    return "ColorSpaceNode";
  }
  /**
   * Constructs a new color space node.
   *
   * @param {Node} colorNode - Represents the color to convert.
   * @param {string} source - The source color space.
   * @param {string} target - The target color space.
   */
  constructor(colorNode, source, target) {
    super("vec4");
    this.colorNode = colorNode;
    this.source = source;
    this.target = target;
  }
  /**
   * This method resolves the constants `WORKING_COLOR_SPACE` and
   * `OUTPUT_COLOR_SPACE` based on the current configuration of the
   * color management and renderer.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} colorSpace - The color space to resolve.
   * @return {string} The resolved color space.
   */
  resolveColorSpace(builder, colorSpace) {
    if (colorSpace === WORKING_COLOR_SPACE) {
      return ColorManagement.workingColorSpace;
    } else if (colorSpace === OUTPUT_COLOR_SPACE) {
      return builder.context.outputColorSpace || builder.renderer.outputColorSpace;
    }
    return colorSpace;
  }
  setup(builder) {
    const { colorNode } = this;
    const source = this.resolveColorSpace(builder, this.source);
    const target = this.resolveColorSpace(builder, this.target);
    let outputNode = colorNode;
    if (ColorManagement.enabled === false || source === target || !source || !target) {
      return outputNode;
    }
    if (ColorManagement.getTransfer(source) === SRGBTransfer) {
      outputNode = vec4(sRGBTransferEOTF(outputNode.rgb), outputNode.a);
    }
    if (ColorManagement.getPrimaries(source) !== ColorManagement.getPrimaries(target)) {
      outputNode = vec4(
        mat3(ColorManagement._getMatrix(new Matrix3(), source, target)).mul(outputNode.rgb),
        outputNode.a
      );
    }
    if (ColorManagement.getTransfer(target) === SRGBTransfer) {
      outputNode = vec4(sRGBTransferOETF(outputNode.rgb), outputNode.a);
    }
    return outputNode;
  }
};
var workingToColorSpace = (node, targetColorSpace) => nodeObject(new ColorSpaceNode(nodeObject(node), WORKING_COLOR_SPACE, targetColorSpace));
var colorSpaceToWorking = (node, sourceColorSpace) => nodeObject(new ColorSpaceNode(nodeObject(node), sourceColorSpace, WORKING_COLOR_SPACE));
var convertColorSpace = (node, sourceColorSpace, targetColorSpace) => nodeObject(new ColorSpaceNode(nodeObject(node), sourceColorSpace, targetColorSpace));
addMethodChaining("workingToColorSpace", workingToColorSpace);
addMethodChaining("colorSpaceToWorking", colorSpaceToWorking);
var ReferenceElementNode$1 = class ReferenceElementNode extends ArrayElementNode {
  static get type() {
    return "ReferenceElementNode";
  }
  /**
   * Constructs a new reference element node.
   *
   * @param {ReferenceBaseNode} referenceNode - The reference node.
   * @param {Node} indexNode - The index node that defines the element access.
   */
  constructor(referenceNode, indexNode) {
    super(referenceNode, indexNode);
    this.referenceNode = referenceNode;
    this.isReferenceElementNode = true;
  }
  /**
   * This method is overwritten since the node type is inferred from
   * the uniform type of the reference node.
   *
   * @return {string} The node type.
   */
  getNodeType() {
    return this.referenceNode.uniformType;
  }
  generate(builder) {
    const snippet = super.generate(builder);
    const arrayType = this.referenceNode.getNodeType();
    const elementType = this.getNodeType();
    return builder.format(snippet, arrayType, elementType);
  }
};
var ReferenceBaseNode = class extends Node {
  static get type() {
    return "ReferenceBaseNode";
  }
  /**
   * Constructs a new reference base node.
   *
   * @param {string} property - The name of the property the node refers to.
   * @param {string} uniformType - The uniform type that should be used to represent the property value.
   * @param {?Object} [object=null] - The object the property belongs to.
   * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.
   */
  constructor(property3, uniformType, object = null, count = null) {
    super();
    this.property = property3;
    this.uniformType = uniformType;
    this.object = object;
    this.count = count;
    this.properties = property3.split(".");
    this.reference = object;
    this.node = null;
    this.group = null;
    this.updateType = NodeUpdateType.OBJECT;
  }
  /**
   * Sets the uniform group for this reference node.
   *
   * @param {UniformGroupNode} group - The uniform group to set.
   * @return {ReferenceBaseNode} A reference to this node.
   */
  setGroup(group) {
    this.group = group;
    return this;
  }
  /**
   * When the referred property is array-like, this method can be used
   * to access elements via an index node.
   *
   * @param {IndexNode} indexNode - indexNode.
   * @return {ReferenceElementNode} A reference to an element.
   */
  element(indexNode) {
    return nodeObject(new ReferenceElementNode$1(this, nodeObject(indexNode)));
  }
  /**
   * Sets the node type which automatically defines the internal
   * uniform type.
   *
   * @param {string} uniformType - The type to set.
   */
  setNodeType(uniformType) {
    const node = uniform(null, uniformType);
    if (this.group !== null) {
      node.setGroup(this.group);
    }
    this.node = node;
  }
  /**
   * This method is overwritten since the node type is inferred from
   * the type of the reference node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    if (this.node === null) {
      this.updateReference(builder);
      this.updateValue();
    }
    return this.node.getNodeType(builder);
  }
  /**
   * Returns the property value from the given referred object.
   *
   * @param {Object} [object=this.reference] - The object to retrieve the property value from.
   * @return {any} The value.
   */
  getValueFromReference(object = this.reference) {
    const { properties } = this;
    let value = object[properties[0]];
    for (let i2 = 1; i2 < properties.length; i2++) {
      value = value[properties[i2]];
    }
    return value;
  }
  /**
   * Allows to update the reference based on the given state. The state is only
   * evaluated {@link ReferenceBaseNode#object} is not set.
   *
   * @param {(NodeFrame|NodeBuilder)} state - The current state.
   * @return {Object} The updated reference.
   */
  updateReference(state) {
    this.reference = this.object !== null ? this.object : state.object;
    return this.reference;
  }
  /**
   * The output of the reference node is the internal uniform node.
   *
   * @return {UniformNode} The output node.
   */
  setup() {
    this.updateValue();
    return this.node;
  }
  /**
   * Overwritten to update the internal uniform value.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update() {
    this.updateValue();
  }
  /**
   * Retrieves the value from the referred object property and uses it
   * to updated the internal uniform.
   */
  updateValue() {
    if (this.node === null)
      this.setNodeType(this.uniformType);
    const value = this.getValueFromReference();
    if (Array.isArray(value)) {
      this.node.array = value;
    } else {
      this.node.value = value;
    }
  }
};
var reference$1 = (name, type, object) => nodeObject(new ReferenceBaseNode(name, type, object));
var RendererReferenceNode = class extends ReferenceBaseNode {
  static get type() {
    return "RendererReferenceNode";
  }
  /**
   * Constructs a new renderer reference node.
   *
   * @param {string} property - The name of the property the node refers to.
   * @param {string} inputType - The uniform type that should be used to represent the property value.
   * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,
   * the node refers to the renderer of the current state.
   */
  constructor(property3, inputType, renderer3 = null) {
    super(property3, inputType, renderer3);
    this.renderer = renderer3;
    this.setGroup(renderGroup);
  }
  /**
   * Updates the reference based on the given state. The state is only evaluated
   * {@link RendererReferenceNode#renderer} is not set.
   *
   * @param {(NodeFrame|NodeBuilder)} state - The current state.
   * @return {Object} The updated reference.
   */
  updateReference(state) {
    this.reference = this.renderer !== null ? this.renderer : state.renderer;
    return this.reference;
  }
};
var rendererReference = (name, type, renderer3 = null) => nodeObject(new RendererReferenceNode(name, type, renderer3));
var ToneMappingNode = class extends TempNode {
  static get type() {
    return "ToneMappingNode";
  }
  /**
   * Constructs a new tone mapping node.
   *
   * @param {number} toneMapping - The tone mapping type.
   * @param {Node} exposureNode - The tone mapping exposure.
   * @param {Node} [colorNode=null] - The color node to process.
   */
  constructor(toneMapping3, exposureNode = toneMappingExposure, colorNode = null) {
    super("vec3");
    this.toneMapping = toneMapping3;
    this.exposureNode = exposureNode;
    this.colorNode = colorNode;
  }
  /**
   * Overwrites the default `customCacheKey()` implementation by including the tone
   * mapping type into the cache key.
   *
   * @return {number} The hash.
   */
  customCacheKey() {
    return hash$1(this.toneMapping);
  }
  setup(builder) {
    const colorNode = this.colorNode || builder.context.color;
    const toneMapping3 = this.toneMapping;
    if (toneMapping3 === NoToneMapping)
      return colorNode;
    let outputNode = null;
    const toneMappingFn = builder.renderer.library.getToneMappingFunction(toneMapping3);
    if (toneMappingFn !== null) {
      outputNode = vec4(toneMappingFn(colorNode.rgb, this.exposureNode), colorNode.a);
    } else {
      console.error("ToneMappingNode: Unsupported Tone Mapping configuration.", toneMapping3);
      outputNode = colorNode;
    }
    return outputNode;
  }
};
var toneMapping = (mapping, exposure, color4) => nodeObject(new ToneMappingNode(mapping, nodeObject(exposure), nodeObject(color4)));
var toneMappingExposure = rendererReference("toneMappingExposure", "float");
addMethodChaining("toneMapping", (color4, mapping, exposure) => toneMapping(mapping, exposure, color4));
var BufferAttributeNode = class extends InputNode {
  static get type() {
    return "BufferAttributeNode";
  }
  /**
   * Constructs a new buffer attribute node.
   *
   * @param {BufferAttribute|InterleavedBuffer|TypedArray} value - The attribute data.
   * @param {?string} [bufferType=null] - The buffer type (e.g. `'vec3'`).
   * @param {number} [bufferStride=0] - The buffer stride.
   * @param {number} [bufferOffset=0] - The buffer offset.
   */
  constructor(value, bufferType = null, bufferStride = 0, bufferOffset = 0) {
    super(value, bufferType);
    this.isBufferNode = true;
    this.bufferType = bufferType;
    this.bufferStride = bufferStride;
    this.bufferOffset = bufferOffset;
    this.usage = StaticDrawUsage;
    this.instanced = false;
    this.attribute = null;
    this.global = true;
    if (value && value.isBufferAttribute === true) {
      this.attribute = value;
      this.usage = value.usage;
      this.instanced = value.isInstancedBufferAttribute;
    }
  }
  /**
   * This method is overwritten since the attribute data might be shared
   * and thus the hash should be shared as well.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The hash.
   */
  getHash(builder) {
    if (this.bufferStride === 0 && this.bufferOffset === 0) {
      let bufferData = builder.globalCache.getData(this.value);
      if (bufferData === void 0) {
        bufferData = {
          node: this
        };
        builder.globalCache.setData(this.value, bufferData);
      }
      return bufferData.node.uuid;
    }
    return this.uuid;
  }
  /**
   * This method is overwritten since the node type is inferred from
   * the buffer attribute.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    if (this.bufferType === null) {
      this.bufferType = builder.getTypeFromAttribute(this.attribute);
    }
    return this.bufferType;
  }
  /**
   * Depending on which value was passed to the node, `setup()` behaves
   * differently. If no instance of `BufferAttribute` was passed, the method
   * creates an internal attribute and configures it respectively.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setup(builder) {
    if (this.attribute !== null)
      return;
    const type = this.getNodeType(builder);
    const array3 = this.value;
    const itemSize = builder.getTypeLength(type);
    const stride = this.bufferStride || itemSize;
    const offset = this.bufferOffset;
    const buffer3 = array3.isInterleavedBuffer === true ? array3 : new InterleavedBuffer(array3, stride);
    const bufferAttribute3 = new InterleavedBufferAttribute(buffer3, itemSize, offset);
    buffer3.setUsage(this.usage);
    this.attribute = bufferAttribute3;
    this.attribute.isInstancedBufferAttribute = this.instanced;
  }
  /**
   * Generates the code snippet of the buffer attribute node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The generated code snippet.
   */
  generate(builder) {
    const nodeType = this.getNodeType(builder);
    const nodeAttribute = builder.getBufferAttributeFromNode(this, nodeType);
    const propertyName = builder.getPropertyName(nodeAttribute);
    let output3 = null;
    if (builder.shaderStage === "vertex" || builder.shaderStage === "compute") {
      this.name = propertyName;
      output3 = propertyName;
    } else {
      const nodeVarying = varying(this);
      output3 = nodeVarying.build(builder, nodeType);
    }
    return output3;
  }
  /**
   * Overwrites the default implementation to return a fixed value `'bufferAttribute'`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return "bufferAttribute";
  }
  /**
   * Sets the `usage` property to the given value.
   *
   * @param {number} value - The usage to set.
   * @return {BufferAttributeNode} A reference to this node.
   */
  setUsage(value) {
    this.usage = value;
    if (this.attribute && this.attribute.isBufferAttribute === true) {
      this.attribute.usage = value;
    }
    return this;
  }
  /**
   * Sets the `instanced` property to the given value.
   *
   * @param {boolean} value - The value to set.
   * @return {BufferAttributeNode} A reference to this node.
   */
  setInstanced(value) {
    this.instanced = value;
    return this;
  }
};
var bufferAttribute = (array3, type = null, stride = 0, offset = 0) => nodeObject(new BufferAttributeNode(array3, type, stride, offset));
var dynamicBufferAttribute = (array3, type = null, stride = 0, offset = 0) => bufferAttribute(array3, type, stride, offset).setUsage(DynamicDrawUsage);
var instancedBufferAttribute = (array3, type = null, stride = 0, offset = 0) => bufferAttribute(array3, type, stride, offset).setInstanced(true);
var instancedDynamicBufferAttribute = (array3, type = null, stride = 0, offset = 0) => dynamicBufferAttribute(array3, type, stride, offset).setInstanced(true);
addMethodChaining("toAttribute", (bufferNode) => bufferAttribute(bufferNode.value));
var ComputeNode = class extends Node {
  static get type() {
    return "ComputeNode";
  }
  /**
   * Constructs a new compute node.
   *
   * @param {Node} computeNode - TODO
   * @param {Array<number>} workgroupSize - TODO.
   */
  constructor(computeNode, workgroupSize) {
    super("void");
    this.isComputeNode = true;
    this.computeNode = computeNode;
    this.workgroupSize = workgroupSize;
    this.count = null;
    this.version = 1;
    this.name = "";
    this.updateBeforeType = NodeUpdateType.OBJECT;
    this.onInitFunction = null;
  }
  setCount(count) {
    this.count = count;
    return this;
  }
  getCount() {
    return this.count;
  }
  /**
   * Executes the `dispose` event for this node.
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Sets the {@link ComputeNode#name} property.
   *
   * @param {string} name - The name of the uniform.
   * @return {ComputeNode} A reference to this node.
   */
  setName(name) {
    this.name = name;
    return this;
  }
  /**
   * Sets the {@link ComputeNode#name} property.
   *
   * @deprecated
   * @param {string} name - The name of the uniform.
   * @return {ComputeNode} A reference to this node.
   */
  label(name) {
    console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.');
    return this.setName(name);
  }
  /**
   * TODO
   *
   * @param {Function} callback - TODO.
   * @return {ComputeNode} A reference to this node.
   */
  onInit(callback) {
    this.onInitFunction = callback;
    return this;
  }
  /**
   * The method execute the compute for this node.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  updateBefore({ renderer: renderer3 }) {
    renderer3.compute(this);
  }
  setup(builder) {
    const result = this.computeNode.build(builder);
    if (result) {
      const properties = builder.getNodeProperties(this);
      properties.outputComputeNode = result.outputNode;
      result.outputNode = null;
    }
    return result;
  }
  generate(builder, output3) {
    const { shaderStage } = builder;
    if (shaderStage === "compute") {
      const snippet = this.computeNode.build(builder, "void");
      if (snippet !== "") {
        builder.addLineFlowCode(snippet, this);
      }
    } else {
      const properties = builder.getNodeProperties(this);
      const outputComputeNode = properties.outputComputeNode;
      if (outputComputeNode) {
        return outputComputeNode.build(builder, output3);
      }
    }
  }
};
var computeKernel = (node, workgroupSize = [64]) => {
  if (workgroupSize.length === 0 || workgroupSize.length > 3) {
    console.error("THREE.TSL: compute() workgroupSize must have 1, 2, or 3 elements");
  }
  for (let i2 = 0; i2 < workgroupSize.length; i2++) {
    const val = workgroupSize[i2];
    if (typeof val !== "number" || val <= 0 || !Number.isInteger(val)) {
      console.error(`THREE.TSL: compute() workgroupSize element at index [ ${i2} ] must be a positive integer`);
    }
  }
  while (workgroupSize.length < 3)
    workgroupSize.push(1);
  return nodeObject(new ComputeNode(nodeObject(node), workgroupSize));
};
var compute = (node, count, workgroupSize) => computeKernel(node, workgroupSize).setCount(count);
addMethodChaining("compute", compute);
addMethodChaining("computeKernel", computeKernel);
var CacheNode = class extends Node {
  static get type() {
    return "CacheNode";
  }
  /**
   * Constructs a new cache node.
   *
   * @param {Node} node - The node that should be cached.
   * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.
   */
  constructor(node, parent = true) {
    super();
    this.node = node;
    this.parent = parent;
    this.isCacheNode = true;
  }
  getNodeType(builder) {
    const previousCache = builder.getCache();
    const cache3 = builder.getCacheFromNode(this, this.parent);
    builder.setCache(cache3);
    const nodeType = this.node.getNodeType(builder);
    builder.setCache(previousCache);
    return nodeType;
  }
  build(builder, ...params) {
    const previousCache = builder.getCache();
    const cache3 = builder.getCacheFromNode(this, this.parent);
    builder.setCache(cache3);
    const data = this.node.build(builder, ...params);
    builder.setCache(previousCache);
    return data;
  }
};
var cache = (node, parent) => nodeObject(new CacheNode(nodeObject(node), parent));
addMethodChaining("cache", cache);
var BypassNode = class extends Node {
  static get type() {
    return "BypassNode";
  }
  /**
   * Constructs a new bypass node.
   *
   * @param {Node} outputNode - The output node.
   * @param {Node} callNode - The call node.
   */
  constructor(outputNode, callNode) {
    super();
    this.isBypassNode = true;
    this.outputNode = outputNode;
    this.callNode = callNode;
  }
  getNodeType(builder) {
    return this.outputNode.getNodeType(builder);
  }
  generate(builder) {
    const snippet = this.callNode.build(builder, "void");
    if (snippet !== "") {
      builder.addLineFlowCode(snippet, this);
    }
    return this.outputNode.build(builder);
  }
};
var bypass = nodeProxy(BypassNode).setParameterLength(2);
addMethodChaining("bypass", bypass);
var RemapNode = class extends Node {
  static get type() {
    return "RemapNode";
  }
  /**
   * Constructs a new remap node.
   *
   * @param {Node} node - The node that should be remapped.
   * @param {Node} inLowNode - The source or current lower bound of the range.
   * @param {Node} inHighNode - The source or current upper bound of the range.
   * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.
   * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.
   */
  constructor(node, inLowNode, inHighNode, outLowNode = float(0), outHighNode = float(1)) {
    super();
    this.node = node;
    this.inLowNode = inLowNode;
    this.inHighNode = inHighNode;
    this.outLowNode = outLowNode;
    this.outHighNode = outHighNode;
    this.doClamp = true;
  }
  setup() {
    const { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;
    let t2 = node.sub(inLowNode).div(inHighNode.sub(inLowNode));
    if (doClamp === true)
      t2 = t2.clamp();
    return t2.mul(outHighNode.sub(outLowNode)).add(outLowNode);
  }
};
var remap = nodeProxy(RemapNode, null, null, { doClamp: false }).setParameterLength(3, 5);
var remapClamp = nodeProxy(RemapNode).setParameterLength(3, 5);
addMethodChaining("remap", remap);
addMethodChaining("remapClamp", remapClamp);
var ExpressionNode = class extends Node {
  static get type() {
    return "ExpressionNode";
  }
  /**
   * Constructs a new expression node.
   *
   * @param {string} [snippet=''] - The native code snippet.
   * @param {string} [nodeType='void'] - The node type.
   */
  constructor(snippet = "", nodeType = "void") {
    super(nodeType);
    this.snippet = snippet;
  }
  generate(builder, output3) {
    const type = this.getNodeType(builder);
    const snippet = this.snippet;
    if (type === "void") {
      builder.addLineFlowCode(snippet, this);
    } else {
      return builder.format(snippet, type, output3);
    }
  }
};
var expression = nodeProxy(ExpressionNode).setParameterLength(1, 2);
var Discard = (conditional) => (conditional ? select(conditional, expression("discard")) : expression("discard")).toStack();
var Return = () => expression("return").toStack();
addMethodChaining("discard", Discard);
var RenderOutputNode = class extends TempNode {
  static get type() {
    return "RenderOutputNode";
  }
  /**
   * Constructs a new render output node.
   *
   * @param {Node} colorNode - The color node to process.
   * @param {?number} toneMapping - The tone mapping type.
   * @param {?string} outputColorSpace - The output color space.
   */
  constructor(colorNode, toneMapping3, outputColorSpace) {
    super("vec4");
    this.colorNode = colorNode;
    this.toneMapping = toneMapping3;
    this.outputColorSpace = outputColorSpace;
    this.isRenderOutputNode = true;
  }
  setup({ context: context3 }) {
    let outputNode = this.colorNode || context3.color;
    const toneMapping3 = (this.toneMapping !== null ? this.toneMapping : context3.toneMapping) || NoToneMapping;
    const outputColorSpace = (this.outputColorSpace !== null ? this.outputColorSpace : context3.outputColorSpace) || NoColorSpace;
    if (toneMapping3 !== NoToneMapping) {
      outputNode = outputNode.toneMapping(toneMapping3);
    }
    if (outputColorSpace !== NoColorSpace && outputColorSpace !== ColorManagement.workingColorSpace) {
      outputNode = outputNode.workingToColorSpace(outputColorSpace);
    }
    return outputNode;
  }
};
var renderOutput = (color4, toneMapping3 = null, outputColorSpace = null) => nodeObject(new RenderOutputNode(nodeObject(color4), toneMapping3, outputColorSpace));
addMethodChaining("renderOutput", renderOutput);
var DebugNode = class extends TempNode {
  static get type() {
    return "DebugNode";
  }
  constructor(node, callback = null) {
    super();
    this.node = node;
    this.callback = callback;
  }
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  setup(builder) {
    return this.node.build(builder);
  }
  analyze(builder) {
    return this.node.build(builder);
  }
  generate(builder) {
    const callback = this.callback;
    const snippet = this.node.build(builder);
    const title = "--- TSL debug - " + builder.shaderStage + " shader ---";
    const border = "-".repeat(title.length);
    let code3 = "";
    code3 += "// #" + title + "#\n";
    code3 += builder.flow.code.replace(/^\t/mg, "") + "\n";
    code3 += "/* ... */ " + snippet + " /* ... */\n";
    code3 += "// #" + border + "#\n";
    if (callback !== null) {
      callback(builder, code3);
    } else {
      console.log(code3);
    }
    return snippet;
  }
};
var debug = (node, callback = null) => nodeObject(new DebugNode(nodeObject(node), callback)).toStack();
addMethodChaining("debug", debug);
function addNodeElement(name) {
  console.warn("THREE.TSL: AddNodeElement has been removed in favor of tree-shaking. Trying add", name);
}
var AttributeNode = class extends Node {
  static get type() {
    return "AttributeNode";
  }
  /**
   * Constructs a new attribute node.
   *
   * @param {string} attributeName - The name of the attribute.
   * @param {?string} nodeType - The node type.
   */
  constructor(attributeName, nodeType = null) {
    super(nodeType);
    this.global = true;
    this._attributeName = attributeName;
  }
  getHash(builder) {
    return this.getAttributeName(builder);
  }
  getNodeType(builder) {
    let nodeType = this.nodeType;
    if (nodeType === null) {
      const attributeName = this.getAttributeName(builder);
      if (builder.hasGeometryAttribute(attributeName)) {
        const attribute3 = builder.geometry.getAttribute(attributeName);
        nodeType = builder.getTypeFromAttribute(attribute3);
      } else {
        nodeType = "float";
      }
    }
    return nodeType;
  }
  /**
   * Sets the attribute name to the given value. The method can be
   * overwritten in derived classes if the final name must be computed
   * analytically.
   *
   * @param {string} attributeName - The name of the attribute.
   * @return {AttributeNode} A reference to this node.
   */
  setAttributeName(attributeName) {
    this._attributeName = attributeName;
    return this;
  }
  /**
   * Returns the attribute name of this node. The method can be
   * overwritten in derived classes if the final name must be computed
   * analytically.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The attribute name.
   */
  getAttributeName() {
    return this._attributeName;
  }
  generate(builder) {
    const attributeName = this.getAttributeName(builder);
    const nodeType = this.getNodeType(builder);
    const geometryAttribute = builder.hasGeometryAttribute(attributeName);
    if (geometryAttribute === true) {
      const attribute3 = builder.geometry.getAttribute(attributeName);
      const attributeType = builder.getTypeFromAttribute(attribute3);
      const nodeAttribute = builder.getAttribute(attributeName, attributeType);
      if (builder.shaderStage === "vertex") {
        return builder.format(nodeAttribute.name, attributeType, nodeType);
      } else {
        const nodeVarying = varying(this);
        return nodeVarying.build(builder, nodeType);
      }
    } else {
      console.warn(`AttributeNode: Vertex attribute "${attributeName}" not found on geometry.`);
      return builder.generateConst(nodeType);
    }
  }
  serialize(data) {
    super.serialize(data);
    data.global = this.global;
    data._attributeName = this._attributeName;
  }
  deserialize(data) {
    super.deserialize(data);
    this.global = data.global;
    this._attributeName = data._attributeName;
  }
};
var attribute = (name, nodeType = null) => nodeObject(new AttributeNode(name, nodeType));
var uv$1 = (index6 = 0) => attribute("uv" + (index6 > 0 ? index6 : ""), "vec2");
var TextureSizeNode = class extends Node {
  static get type() {
    return "TextureSizeNode";
  }
  /**
   * Constructs a new texture size node.
   *
   * @param {TextureNode} textureNode - A texture node which size should be retrieved.
   * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.
   */
  constructor(textureNode, levelNode = null) {
    super("uvec2");
    this.isTextureSizeNode = true;
    this.textureNode = textureNode;
    this.levelNode = levelNode;
  }
  generate(builder, output3) {
    const textureProperty = this.textureNode.build(builder, "property");
    const level = this.levelNode === null ? "0" : this.levelNode.build(builder, "int");
    return builder.format(`${builder.getMethod("textureDimensions")}( ${textureProperty}, ${level} )`, this.getNodeType(builder), output3);
  }
};
var textureSize = nodeProxy(TextureSizeNode).setParameterLength(1, 2);
var MaxMipLevelNode = class extends UniformNode {
  static get type() {
    return "MaxMipLevelNode";
  }
  /**
   * Constructs a new max mip level node.
   *
   * @param {TextureNode} textureNode - The texture node to compute the max mip level for.
   */
  constructor(textureNode) {
    super(0);
    this._textureNode = textureNode;
    this.updateType = NodeUpdateType.FRAME;
  }
  /**
   * The texture node to compute the max mip level for.
   *
   * @readonly
   * @type {TextureNode}
   */
  get textureNode() {
    return this._textureNode;
  }
  /**
   * The texture.
   *
   * @readonly
   * @type {Texture}
   */
  get texture() {
    return this._textureNode.value;
  }
  update() {
    const texture3 = this.texture;
    const images = texture3.images;
    const image = images && images.length > 0 ? images[0] && images[0].image || images[0] : texture3.image;
    if (image && image.width !== void 0) {
      const { width, height } = image;
      this.value = Math.log2(Math.max(width, height));
    }
  }
};
var maxMipLevel = nodeProxy(MaxMipLevelNode).setParameterLength(1);
var EmptyTexture$1 = new Texture();
var TextureNode = class extends UniformNode {
  static get type() {
    return "TextureNode";
  }
  /**
   * Constructs a new texture node.
   *
   * @param {Texture} [value=EmptyTexture] - The texture.
   * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.
   * @param {?Node<int>} [levelNode=null] - The level node.
   * @param {?Node<float>} [biasNode=null] - The bias node.
   */
  constructor(value = EmptyTexture$1, uvNode = null, levelNode = null, biasNode = null) {
    super(value);
    this.isTextureNode = true;
    this.uvNode = uvNode;
    this.levelNode = levelNode;
    this.biasNode = biasNode;
    this.compareNode = null;
    this.depthNode = null;
    this.gradNode = null;
    this.offsetNode = null;
    this.sampler = true;
    this.updateMatrix = false;
    this.updateType = NodeUpdateType.NONE;
    this.referenceNode = null;
    this._value = value;
    this._matrixUniform = null;
    this.setUpdateMatrix(uvNode === null);
  }
  set value(value) {
    if (this.referenceNode) {
      this.referenceNode.value = value;
    } else {
      this._value = value;
    }
  }
  /**
   * The texture value.
   *
   * @type {Texture}
   */
  get value() {
    return this.referenceNode ? this.referenceNode.value : this._value;
  }
  /**
   * Overwritten since the uniform hash is defined by the texture's UUID.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The uniform hash.
   */
  getUniformHash() {
    return this.value.uuid;
  }
  /**
   * Overwritten since the node type is inferred from the texture type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType() {
    if (this.value.isDepthTexture === true)
      return "float";
    if (this.value.type === UnsignedIntType) {
      return "uvec4";
    } else if (this.value.type === IntType) {
      return "ivec4";
    }
    return "vec4";
  }
  /**
   * Overwrites the default implementation to return a fixed value `'texture'`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return "texture";
  }
  /**
   * Returns a default uvs based on the current texture's channel.
   *
   * @return {AttributeNode<vec2>} The default uvs.
   */
  getDefaultUV() {
    return uv$1(this.value.channel);
  }
  /**
   * Overwritten to always return the texture reference of the node.
   *
   * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.
   * @return {Texture} The texture reference.
   */
  updateReference() {
    return this.value;
  }
  /**
   * Transforms the given uv node with the texture transformation matrix.
   *
   * @param {Node} uvNode - The uv node to transform.
   * @return {Node} The transformed uv node.
   */
  getTransformedUV(uvNode) {
    if (this._matrixUniform === null)
      this._matrixUniform = uniform(this.value.matrix);
    return this._matrixUniform.mul(vec3(uvNode, 1)).xy;
  }
  /**
   * Defines whether the uv transformation matrix should automatically be updated or not.
   *
   * @param {boolean} value - The update toggle.
   * @return {TextureNode} A reference to this node.
   */
  setUpdateMatrix(value) {
    this.updateMatrix = value;
    this.updateType = value ? NodeUpdateType.OBJECT : NodeUpdateType.NONE;
    return this;
  }
  /**
   * Setups the uv node. Depending on the backend as well as texture's image and type, it might be necessary
   * to modify the uv node for correct sampling.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} uvNode - The uv node to setup.
   * @return {Node} The updated uv node.
   */
  setupUV(builder, uvNode) {
    const texture3 = this.value;
    if (builder.isFlipY() && (texture3.image instanceof ImageBitmap && texture3.flipY === true || texture3.isRenderTargetTexture === true || texture3.isFramebufferTexture === true || texture3.isDepthTexture === true)) {
      if (this.sampler) {
        uvNode = uvNode.flipY();
      } else {
        uvNode = uvNode.setY(int(textureSize(this, this.levelNode).y).sub(uvNode.y).sub(1));
      }
    }
    return uvNode;
  }
  /**
   * Setups texture node by preparing the internal nodes for code generation.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setup(builder) {
    const properties = builder.getNodeProperties(this);
    properties.referenceNode = this.referenceNode;
    const texture3 = this.value;
    if (!texture3 || texture3.isTexture !== true) {
      throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");
    }
    let uvNode = this.uvNode;
    if ((uvNode === null || builder.context.forceUVContext === true) && builder.context.getUV) {
      uvNode = builder.context.getUV(this, builder);
    }
    if (!uvNode)
      uvNode = this.getDefaultUV();
    if (this.updateMatrix === true) {
      uvNode = this.getTransformedUV(uvNode);
    }
    uvNode = this.setupUV(builder, uvNode);
    let levelNode = this.levelNode;
    if (levelNode === null && builder.context.getTextureLevel) {
      levelNode = builder.context.getTextureLevel(this);
    }
    properties.uvNode = uvNode;
    properties.levelNode = levelNode;
    properties.biasNode = this.biasNode;
    properties.compareNode = this.compareNode;
    properties.gradNode = this.gradNode;
    properties.depthNode = this.depthNode;
    properties.offsetNode = this.offsetNode;
  }
  /**
   * Generates the uv code snippet.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} uvNode - The uv node to generate code for.
   * @return {string} The generated code snippet.
   */
  generateUV(builder, uvNode) {
    return uvNode.build(builder, this.sampler === true ? "vec2" : "ivec2");
  }
  /**
   * Generates the offset code snippet.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} offsetNode - The offset node to generate code for.
   * @return {string} The generated code snippet.
   */
  generateOffset(builder, offsetNode) {
    return offsetNode.build(builder, "ivec2");
  }
  /**
   * Generates the snippet for the texture sampling.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} textureProperty - The texture property.
   * @param {string} uvSnippet - The uv snippet.
   * @param {?string} levelSnippet - The level snippet.
   * @param {?string} biasSnippet - The bias snippet.
   * @param {?string} depthSnippet - The depth snippet.
   * @param {?string} compareSnippet - The compare snippet.
   * @param {?Array<string>} gradSnippet - The grad snippet.
   * @param {?string} offsetSnippet - The offset snippet.
   * @return {string} The generated code snippet.
   */
  generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet, offsetSnippet) {
    const texture3 = this.value;
    let snippet;
    if (levelSnippet) {
      snippet = builder.generateTextureLevel(texture3, textureProperty, uvSnippet, levelSnippet, depthSnippet, offsetSnippet);
    } else if (biasSnippet) {
      snippet = builder.generateTextureBias(texture3, textureProperty, uvSnippet, biasSnippet, depthSnippet, offsetSnippet);
    } else if (gradSnippet) {
      snippet = builder.generateTextureGrad(texture3, textureProperty, uvSnippet, gradSnippet, depthSnippet, offsetSnippet);
    } else if (compareSnippet) {
      snippet = builder.generateTextureCompare(texture3, textureProperty, uvSnippet, compareSnippet, depthSnippet, offsetSnippet);
    } else if (this.sampler === false) {
      snippet = builder.generateTextureLoad(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet);
    } else {
      snippet = builder.generateTexture(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet);
    }
    return snippet;
  }
  /**
   * Generates the code snippet of the texture node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} output - The current output.
   * @return {string} The generated code snippet.
   */
  generate(builder, output3) {
    const texture3 = this.value;
    const properties = builder.getNodeProperties(this);
    const textureProperty = super.generate(builder, "property");
    if (/^sampler/.test(output3)) {
      return textureProperty + "_sampler";
    } else if (builder.isReference(output3)) {
      return textureProperty;
    } else {
      const nodeData = builder.getDataFromNode(this);
      let propertyName = nodeData.propertyName;
      if (propertyName === void 0) {
        const { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode, offsetNode } = properties;
        const uvSnippet = this.generateUV(builder, uvNode);
        const levelSnippet = levelNode ? levelNode.build(builder, "float") : null;
        const biasSnippet = biasNode ? biasNode.build(builder, "float") : null;
        const depthSnippet = depthNode ? depthNode.build(builder, "int") : null;
        const compareSnippet = compareNode ? compareNode.build(builder, "float") : null;
        const gradSnippet = gradNode ? [gradNode[0].build(builder, "vec2"), gradNode[1].build(builder, "vec2")] : null;
        const offsetSnippet = offsetNode ? this.generateOffset(builder, offsetNode) : null;
        const nodeVar = builder.getVarFromNode(this);
        propertyName = builder.getPropertyName(nodeVar);
        const snippet2 = this.generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet, offsetSnippet);
        builder.addLineFlowCode(`${propertyName} = ${snippet2}`, this);
        nodeData.snippet = snippet2;
        nodeData.propertyName = propertyName;
      }
      let snippet = propertyName;
      const nodeType = this.getNodeType(builder);
      if (builder.needsToWorkingColorSpace(texture3)) {
        snippet = colorSpaceToWorking(expression(snippet, nodeType), texture3.colorSpace).setup(builder).build(builder, nodeType);
      }
      return builder.format(snippet, nodeType, output3);
    }
  }
  /**
   * Sets the sampler value.
   *
   * @param {boolean} value - The sampler value to set.
   * @return {TextureNode} A reference to this texture node.
   */
  setSampler(value) {
    this.sampler = value;
    return this;
  }
  /**
   * Returns the sampler value.
   *
   * @return {boolean} The sampler value.
   */
  getSampler() {
    return this.sampler;
  }
  // @TODO: Move to TSL
  /**
   * @function
   * @deprecated since r172. Use {@link TextureNode#sample} instead.
   *
   * @param {Node} uvNode - The uv node.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  uv(uvNode) {
    console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead.");
    return this.sample(uvNode);
  }
  /**
   * Samples the texture with the given uv node.
   *
   * @param {Node} uvNode - The uv node.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  sample(uvNode) {
    const textureNode = this.clone();
    textureNode.uvNode = nodeObject(uvNode);
    textureNode.referenceNode = this.getBase();
    return nodeObject(textureNode);
  }
  /**
   * TSL function for creating a texture node that fetches/loads texels without interpolation.
   *
   * @param {Node<uvec2>} uvNode - The uv node.
   * @returns {TextureNode} A texture node representing the texture load.
   */
  load(uvNode) {
    return this.sample(uvNode).setSampler(false);
  }
  /**
   * Samples a blurred version of the texture by defining an internal bias.
   *
   * @param {Node<float>} amountNode - How blurred the texture should be.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  blur(amountNode) {
    const textureNode = this.clone();
    textureNode.biasNode = nodeObject(amountNode).mul(maxMipLevel(textureNode));
    textureNode.referenceNode = this.getBase();
    const map = textureNode.value;
    if (textureNode.generateMipmaps === false && (map && map.generateMipmaps === false || map.minFilter === NearestFilter || map.magFilter === NearestFilter)) {
      console.warn("THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture.");
      textureNode.biasNode = null;
    }
    return nodeObject(textureNode);
  }
  /**
   * Samples a specific mip of the texture.
   *
   * @param {Node<int>} levelNode - The mip level to sample.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  level(levelNode) {
    const textureNode = this.clone();
    textureNode.levelNode = nodeObject(levelNode);
    textureNode.referenceNode = this.getBase();
    return nodeObject(textureNode);
  }
  /**
   * Returns the texture size of the requested level.
   *
   * @param {Node<int>} levelNode - The level to compute the size for.
   * @return {TextureSizeNode} The texture size.
   */
  size(levelNode) {
    return textureSize(this, levelNode);
  }
  /**
   * Samples the texture with the given bias.
   *
   * @param {Node<float>} biasNode - The bias node.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  bias(biasNode) {
    const textureNode = this.clone();
    textureNode.biasNode = nodeObject(biasNode);
    textureNode.referenceNode = this.getBase();
    return nodeObject(textureNode);
  }
  /**
   * Returns the base texture of this node.
   * @return {TextureNode} The base texture node.
   */
  getBase() {
    return this.referenceNode ? this.referenceNode.getBase() : this;
  }
  /**
   * Samples the texture by executing a compare operation.
   *
   * @param {Node<float>} compareNode - The node that defines the compare value.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  compare(compareNode) {
    const textureNode = this.clone();
    textureNode.compareNode = nodeObject(compareNode);
    textureNode.referenceNode = this.getBase();
    return nodeObject(textureNode);
  }
  /**
   * Samples the texture using an explicit gradient.
   *
   * @param {Node<vec2>} gradNodeX - The gradX node.
   * @param {Node<vec2>} gradNodeY - The gradY node.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  grad(gradNodeX, gradNodeY) {
    const textureNode = this.clone();
    textureNode.gradNode = [nodeObject(gradNodeX), nodeObject(gradNodeY)];
    textureNode.referenceNode = this.getBase();
    return nodeObject(textureNode);
  }
  /**
   * Samples the texture by defining a depth node.
   *
   * @param {Node<int>} depthNode - The depth node.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  depth(depthNode) {
    const textureNode = this.clone();
    textureNode.depthNode = nodeObject(depthNode);
    textureNode.referenceNode = this.getBase();
    return nodeObject(textureNode);
  }
  /**
   * Samples the texture by defining an offset node.
   *
   * @param {Node<ivec2>} offsetNode - The offset node.
   * @return {TextureNode} A texture node representing the texture sample.
   */
  offset(offsetNode) {
    const textureNode = this.clone();
    textureNode.offsetNode = nodeObject(offsetNode);
    textureNode.referenceNode = this.getBase();
    return nodeObject(textureNode);
  }
  // --
  serialize(data) {
    super.serialize(data);
    data.value = this.value.toJSON(data.meta).uuid;
    data.sampler = this.sampler;
    data.updateMatrix = this.updateMatrix;
    data.updateType = this.updateType;
  }
  deserialize(data) {
    super.deserialize(data);
    this.value = data.meta.textures[data.value];
    this.sampler = data.sampler;
    this.updateMatrix = data.updateMatrix;
    this.updateType = data.updateType;
  }
  /**
   * The update is used to implement the update of the uv transformation matrix.
   */
  update() {
    const texture3 = this.value;
    const matrixUniform = this._matrixUniform;
    if (matrixUniform !== null)
      matrixUniform.value = texture3.matrix;
    if (texture3.matrixAutoUpdate === true) {
      texture3.updateMatrix();
    }
  }
  /**
   * Clones the texture node.
   *
   * @return {TextureNode} The cloned texture node.
   */
  clone() {
    const newNode = new this.constructor(this.value, this.uvNode, this.levelNode, this.biasNode);
    newNode.sampler = this.sampler;
    newNode.depthNode = this.depthNode;
    newNode.compareNode = this.compareNode;
    newNode.gradNode = this.gradNode;
    newNode.offsetNode = this.offsetNode;
    return newNode;
  }
};
var textureBase = nodeProxy(TextureNode).setParameterLength(1, 4).setName("texture");
var texture = (value = EmptyTexture$1, uvNode = null, levelNode = null, biasNode = null) => {
  let textureNode;
  if (value && value.isTextureNode === true) {
    textureNode = nodeObject(value.clone());
    textureNode.referenceNode = value.getBase();
    if (uvNode !== null)
      textureNode.uvNode = nodeObject(uvNode);
    if (levelNode !== null)
      textureNode.levelNode = nodeObject(levelNode);
    if (biasNode !== null)
      textureNode.biasNode = nodeObject(biasNode);
  } else {
    textureNode = textureBase(value, uvNode, levelNode, biasNode);
  }
  return textureNode;
};
var uniformTexture = (value = EmptyTexture$1) => texture(value);
var textureLoad = (...params) => texture(...params).setSampler(false);
var sampler = (value) => (value.isNode === true ? value : texture(value)).convert("sampler");
var samplerComparison = (value) => (value.isNode === true ? value : texture(value)).convert("samplerComparison");
var BufferNode = class extends UniformNode {
  static get type() {
    return "BufferNode";
  }
  /**
   * Constructs a new buffer node.
   *
   * @param {Array<number>} value - Array-like buffer data.
   * @param {string} bufferType - The data type of the buffer.
   * @param {number} [bufferCount=0] - The count of buffer elements.
   */
  constructor(value, bufferType, bufferCount = 0) {
    super(value, bufferType);
    this.isBufferNode = true;
    this.bufferType = bufferType;
    this.bufferCount = bufferCount;
  }
  /**
   * The data type of the buffer elements.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The element type.
   */
  getElementType(builder) {
    return this.getNodeType(builder);
  }
  /**
   * Overwrites the default implementation to return a fixed value `'buffer'`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return "buffer";
  }
};
var buffer = (value, type, count) => nodeObject(new BufferNode(value, type, count));
var UniformArrayElementNode = class extends ArrayElementNode {
  static get type() {
    return "UniformArrayElementNode";
  }
  /**
   * Constructs a new buffer node.
   *
   * @param {UniformArrayNode} uniformArrayNode - The uniform array node to access.
   * @param {IndexNode} indexNode - The index data that define the position of the accessed element in the array.
   */
  constructor(uniformArrayNode, indexNode) {
    super(uniformArrayNode, indexNode);
    this.isArrayBufferElementNode = true;
  }
  generate(builder) {
    const snippet = super.generate(builder);
    const type = this.getNodeType();
    const paddedType = this.node.getPaddedType();
    return builder.format(snippet, paddedType, type);
  }
};
var UniformArrayNode = class extends BufferNode {
  static get type() {
    return "UniformArrayNode";
  }
  /**
   * Constructs a new uniform array node.
   *
   * @param {Array<any>} value - Array holding the buffer data.
   * @param {?string} [elementType=null] - The data type of a buffer element.
   */
  constructor(value, elementType = null) {
    super(null);
    this.array = value;
    this.elementType = elementType === null ? getValueType(value[0]) : elementType;
    this.paddedType = this.getPaddedType();
    this.updateType = NodeUpdateType.RENDER;
    this.isArrayBufferNode = true;
  }
  /**
   * This method is overwritten since the node type is inferred from the
   * {@link UniformArrayNode#paddedType}.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType() {
    return this.paddedType;
  }
  /**
   * The data type of the array elements.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The element type.
   */
  getElementType() {
    return this.elementType;
  }
  /**
   * Returns the padded type based on the element type.
   *
   * @return {string} The padded type.
   */
  getPaddedType() {
    const elementType = this.elementType;
    let paddedType = "vec4";
    if (elementType === "mat2") {
      paddedType = "mat2";
    } else if (/mat/.test(elementType) === true) {
      paddedType = "mat4";
    } else if (elementType.charAt(0) === "i") {
      paddedType = "ivec4";
    } else if (elementType.charAt(0) === "u") {
      paddedType = "uvec4";
    }
    return paddedType;
  }
  /**
   * The update makes sure to correctly transfer the data from the (complex) objects
   * in the array to the internal, correctly padded value buffer.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update() {
    const { array: array3, value } = this;
    const elementType = this.elementType;
    if (elementType === "float" || elementType === "int" || elementType === "uint") {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index6 = i2 * 4;
        value[index6] = array3[i2];
      }
    } else if (elementType === "color") {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index6 = i2 * 4;
        const vector = array3[i2];
        value[index6] = vector.r;
        value[index6 + 1] = vector.g;
        value[index6 + 2] = vector.b || 0;
      }
    } else if (elementType === "mat2") {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index6 = i2 * 4;
        const matrix = array3[i2];
        value[index6] = matrix.elements[0];
        value[index6 + 1] = matrix.elements[1];
        value[index6 + 2] = matrix.elements[2];
        value[index6 + 3] = matrix.elements[3];
      }
    } else if (elementType === "mat3") {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index6 = i2 * 16;
        const matrix = array3[i2];
        value[index6] = matrix.elements[0];
        value[index6 + 1] = matrix.elements[1];
        value[index6 + 2] = matrix.elements[2];
        value[index6 + 4] = matrix.elements[3];
        value[index6 + 5] = matrix.elements[4];
        value[index6 + 6] = matrix.elements[5];
        value[index6 + 8] = matrix.elements[6];
        value[index6 + 9] = matrix.elements[7];
        value[index6 + 10] = matrix.elements[8];
        value[index6 + 15] = 1;
      }
    } else if (elementType === "mat4") {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index6 = i2 * 16;
        const matrix = array3[i2];
        for (let i3 = 0; i3 < matrix.elements.length; i3++) {
          value[index6 + i3] = matrix.elements[i3];
        }
      }
    } else {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index6 = i2 * 4;
        const vector = array3[i2];
        value[index6] = vector.x;
        value[index6 + 1] = vector.y;
        value[index6 + 2] = vector.z || 0;
        value[index6 + 3] = vector.w || 0;
      }
    }
  }
  /**
   * Implement the value buffer creation based on the array data.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @return {null}
   */
  setup(builder) {
    const length3 = this.array.length;
    const elementType = this.elementType;
    let arrayType = Float32Array;
    const paddedType = this.paddedType;
    const paddedElementLength = builder.getTypeLength(paddedType);
    if (elementType.charAt(0) === "i")
      arrayType = Int32Array;
    if (elementType.charAt(0) === "u")
      arrayType = Uint32Array;
    this.value = new arrayType(length3 * paddedElementLength);
    this.bufferCount = length3;
    this.bufferType = paddedType;
    return super.setup(builder);
  }
  /**
   * Overwrites the default `element()` method to provide element access
   * based on {@link UniformArrayNode}.
   *
   * @param {IndexNode} indexNode - The index node.
   * @return {UniformArrayElementNode}
   */
  element(indexNode) {
    return nodeObject(new UniformArrayElementNode(this, nodeObject(indexNode)));
  }
};
var uniformArray = (values, nodeType) => nodeObject(new UniformArrayNode(values, nodeType));
var BuiltinNode = class extends Node {
  /**
   * Constructs a new builtin node.
   *
   * @param {string} name - The name of the built-in shader variable.
   */
  constructor(name) {
    super("float");
    this.name = name;
    this.isBuiltinNode = true;
  }
  /**
   * Generates the code snippet of the builtin node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The generated code snippet.
   */
  generate() {
    return this.name;
  }
};
var builtin = nodeProxy(BuiltinNode).setParameterLength(1);
var _screenSizeVec;
var _viewportVec;
var ScreenNode = class _ScreenNode extends Node {
  static get type() {
    return "ScreenNode";
  }
  /**
   * Constructs a new screen node.
   *
   * @param {('coordinate'|'viewport'|'size'|'uv'|'dpr')} scope - The node's scope.
   */
  constructor(scope) {
    super();
    this.scope = scope;
    this._output = null;
    this.isViewportNode = true;
  }
  /**
   * This method is overwritten since the node type depends on the selected scope.
   *
   * @return {('float'|'vec2'|'vec4')} The node type.
   */
  getNodeType() {
    if (this.scope === _ScreenNode.DPR)
      return "float";
    if (this.scope === _ScreenNode.VIEWPORT)
      return "vec4";
    else
      return "vec2";
  }
  /**
   * This method is overwritten since the node's update type depends on the selected scope.
   *
   * @return {NodeUpdateType} The update type.
   */
  getUpdateType() {
    let updateType = NodeUpdateType.NONE;
    if (this.scope === _ScreenNode.SIZE || this.scope === _ScreenNode.VIEWPORT || this.scope === _ScreenNode.DPR) {
      updateType = NodeUpdateType.RENDER;
    }
    this.updateType = updateType;
    return updateType;
  }
  /**
   * `ScreenNode` implements {@link Node#update} to retrieve viewport and size information
   * from the current renderer.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update({ renderer: renderer3 }) {
    const renderTarget = renderer3.getRenderTarget();
    if (this.scope === _ScreenNode.VIEWPORT) {
      if (renderTarget !== null) {
        _viewportVec.copy(renderTarget.viewport);
      } else {
        renderer3.getViewport(_viewportVec);
        _viewportVec.multiplyScalar(renderer3.getPixelRatio());
      }
    } else if (this.scope === _ScreenNode.DPR) {
      this._output.value = renderer3.getPixelRatio();
    } else {
      if (renderTarget !== null) {
        _screenSizeVec.width = renderTarget.width;
        _screenSizeVec.height = renderTarget.height;
      } else {
        renderer3.getDrawingBufferSize(_screenSizeVec);
      }
    }
  }
  setup() {
    const scope = this.scope;
    let output3 = null;
    if (scope === _ScreenNode.SIZE) {
      output3 = uniform(_screenSizeVec || (_screenSizeVec = new Vector2()));
    } else if (scope === _ScreenNode.VIEWPORT) {
      output3 = uniform(_viewportVec || (_viewportVec = new Vector4()));
    } else if (scope === _ScreenNode.DPR) {
      output3 = uniform(1);
    } else {
      output3 = vec2(screenCoordinate.div(screenSize));
    }
    this._output = output3;
    return output3;
  }
  generate(builder) {
    if (this.scope === _ScreenNode.COORDINATE) {
      let coord = builder.getFragCoord();
      if (builder.isFlipY()) {
        const size = builder.getNodeProperties(screenSize).outputNode.build(builder);
        coord = `${builder.getType("vec2")}( ${coord}.x, ${size}.y - ${coord}.y )`;
      }
      return coord;
    }
    return super.generate(builder);
  }
};
ScreenNode.COORDINATE = "coordinate";
ScreenNode.VIEWPORT = "viewport";
ScreenNode.SIZE = "size";
ScreenNode.UV = "uv";
ScreenNode.DPR = "dpr";
var screenDPR = nodeImmutable(ScreenNode, ScreenNode.DPR);
var screenUV = nodeImmutable(ScreenNode, ScreenNode.UV);
var screenSize = nodeImmutable(ScreenNode, ScreenNode.SIZE);
var screenCoordinate = nodeImmutable(ScreenNode, ScreenNode.COORDINATE);
var viewport = nodeImmutable(ScreenNode, ScreenNode.VIEWPORT);
var viewportSize = viewport.zw;
var viewportCoordinate = screenCoordinate.sub(viewport.xy);
var viewportUV = viewportCoordinate.div(viewportSize);
var viewportResolution = Fn(() => {
  console.warn('THREE.TSL: "viewportResolution" is deprecated. Use "screenSize" instead.');
  return screenSize;
}, "vec2").once()();
var cameraIndex = uniform(0, "uint").setName("u_cameraIndex").setGroup(sharedUniformGroup("cameraIndex")).toVarying("v_cameraIndex");
var cameraNear = uniform("float").setName("cameraNear").setGroup(renderGroup).onRenderUpdate(({ camera: camera3 }) => camera3.near);
var cameraFar = uniform("float").setName("cameraFar").setGroup(renderGroup).onRenderUpdate(({ camera: camera3 }) => camera3.far);
var cameraProjectionMatrix = Fn(({ camera: camera3 }) => {
  let cameraProjectionMatrix3;
  if (camera3.isArrayCamera && camera3.cameras.length > 0) {
    const matrices = [];
    for (const subCamera of camera3.cameras) {
      matrices.push(subCamera.projectionMatrix);
    }
    const cameraProjectionMatrices = uniformArray(matrices).setGroup(renderGroup).setName("cameraProjectionMatrices");
    cameraProjectionMatrix3 = cameraProjectionMatrices.element(camera3.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toConst("cameraProjectionMatrix");
  } else {
    cameraProjectionMatrix3 = uniform("mat4").setName("cameraProjectionMatrix").setGroup(renderGroup).onRenderUpdate(({ camera: camera4 }) => camera4.projectionMatrix);
  }
  return cameraProjectionMatrix3;
}).once()();
var cameraProjectionMatrixInverse = Fn(({ camera: camera3 }) => {
  let cameraProjectionMatrixInverse3;
  if (camera3.isArrayCamera && camera3.cameras.length > 0) {
    const matrices = [];
    for (const subCamera of camera3.cameras) {
      matrices.push(subCamera.projectionMatrixInverse);
    }
    const cameraProjectionMatricesInverse = uniformArray(matrices).setGroup(renderGroup).setName("cameraProjectionMatricesInverse");
    cameraProjectionMatrixInverse3 = cameraProjectionMatricesInverse.element(camera3.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toConst("cameraProjectionMatrixInverse");
  } else {
    cameraProjectionMatrixInverse3 = uniform("mat4").setName("cameraProjectionMatrixInverse").setGroup(renderGroup).onRenderUpdate(({ camera: camera4 }) => camera4.projectionMatrixInverse);
  }
  return cameraProjectionMatrixInverse3;
}).once()();
var cameraViewMatrix = Fn(({ camera: camera3 }) => {
  let cameraViewMatrix3;
  if (camera3.isArrayCamera && camera3.cameras.length > 0) {
    const matrices = [];
    for (const subCamera of camera3.cameras) {
      matrices.push(subCamera.matrixWorldInverse);
    }
    const cameraViewMatrices = uniformArray(matrices).setGroup(renderGroup).setName("cameraViewMatrices");
    cameraViewMatrix3 = cameraViewMatrices.element(camera3.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toConst("cameraViewMatrix");
  } else {
    cameraViewMatrix3 = uniform("mat4").setName("cameraViewMatrix").setGroup(renderGroup).onRenderUpdate(({ camera: camera4 }) => camera4.matrixWorldInverse);
  }
  return cameraViewMatrix3;
}).once()();
var cameraWorldMatrix = Fn(({ camera: camera3 }) => {
  let cameraWorldMatrix3;
  if (camera3.isArrayCamera && camera3.cameras.length > 0) {
    const matrices = [];
    for (const subCamera of camera3.cameras) {
      matrices.push(subCamera.matrixWorld);
    }
    const cameraWorldMatrices = uniformArray(matrices).setGroup(renderGroup).setName("cameraWorldMatrices");
    cameraWorldMatrix3 = cameraWorldMatrices.element(camera3.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toConst("cameraWorldMatrix");
  } else {
    cameraWorldMatrix3 = uniform("mat4").setName("cameraWorldMatrix").setGroup(renderGroup).onRenderUpdate(({ camera: camera4 }) => camera4.matrixWorld);
  }
  return cameraWorldMatrix3;
}).once()();
var cameraNormalMatrix = Fn(({ camera: camera3 }) => {
  let cameraNormalMatrix3;
  if (camera3.isArrayCamera && camera3.cameras.length > 0) {
    const matrices = [];
    for (const subCamera of camera3.cameras) {
      matrices.push(subCamera.normalMatrix);
    }
    const cameraNormalMatrices = uniformArray(matrices).setGroup(renderGroup).setName("cameraNormalMatrices");
    cameraNormalMatrix3 = cameraNormalMatrices.element(camera3.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toConst("cameraNormalMatrix");
  } else {
    cameraNormalMatrix3 = uniform("mat3").setName("cameraNormalMatrix").setGroup(renderGroup).onRenderUpdate(({ camera: camera4 }) => camera4.normalMatrix);
  }
  return cameraNormalMatrix3;
}).once()();
var cameraPosition = Fn(({ camera: camera3 }) => {
  let cameraPosition4;
  if (camera3.isArrayCamera && camera3.cameras.length > 0) {
    const positions = [];
    for (let i2 = 0, l2 = camera3.cameras.length; i2 < l2; i2++) {
      positions.push(new Vector3());
    }
    const cameraPositions = uniformArray(positions).setGroup(renderGroup).setName("cameraPositions").onRenderUpdate(({ camera: camera4 }, self2) => {
      const subCameras = camera4.cameras;
      const array3 = self2.array;
      for (let i2 = 0, l2 = subCameras.length; i2 < l2; i2++) {
        array3[i2].setFromMatrixPosition(subCameras[i2].matrixWorld);
      }
    });
    cameraPosition4 = cameraPositions.element(camera3.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toConst("cameraPosition");
  } else {
    cameraPosition4 = uniform(new Vector3()).setName("cameraPosition").setGroup(renderGroup).onRenderUpdate(({ camera: camera4 }, self2) => self2.value.setFromMatrixPosition(camera4.matrixWorld));
  }
  return cameraPosition4;
}).once()();
var cameraViewport = Fn(({ camera: camera3 }) => {
  let cameraViewport3;
  if (camera3.isArrayCamera && camera3.cameras.length > 0) {
    const viewports = [];
    for (const subCamera of camera3.cameras) {
      viewports.push(subCamera.viewport);
    }
    const cameraViewports = uniformArray(viewports, "vec4").setGroup(renderGroup).setName("cameraViewports");
    cameraViewport3 = cameraViewports.element(cameraIndex).toConst("cameraViewport");
  } else {
    cameraViewport3 = vec4(0, 0, screenSize.x, screenSize.y).toConst("cameraViewport");
  }
  return cameraViewport3;
}).once()();
var _sphere = new Sphere();
var Object3DNode = class _Object3DNode extends Node {
  static get type() {
    return "Object3DNode";
  }
  /**
   * Constructs a new object 3D node.
   *
   * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.
   * @param {?Object3D} [object3d=null] - The 3D object.
   */
  constructor(scope, object3d = null) {
    super();
    this.scope = scope;
    this.object3d = object3d;
    this.updateType = NodeUpdateType.OBJECT;
    this.uniformNode = new UniformNode(null);
  }
  /**
   * Overwritten since the node type is inferred from the scope.
   *
   * @return {('mat4'|'vec3'|'float')} The node type.
   */
  getNodeType() {
    const scope = this.scope;
    if (scope === _Object3DNode.WORLD_MATRIX) {
      return "mat4";
    } else if (scope === _Object3DNode.POSITION || scope === _Object3DNode.VIEW_POSITION || scope === _Object3DNode.DIRECTION || scope === _Object3DNode.SCALE) {
      return "vec3";
    } else if (scope === _Object3DNode.RADIUS) {
      return "float";
    }
  }
  /**
   * Updates the uniform value depending on the scope.
   *
   * @param {NodeFrame} frame - The current node frame.
   */
  update(frame) {
    const object = this.object3d;
    const uniformNode = this.uniformNode;
    const scope = this.scope;
    if (scope === _Object3DNode.WORLD_MATRIX) {
      uniformNode.value = object.matrixWorld;
    } else if (scope === _Object3DNode.POSITION) {
      uniformNode.value = uniformNode.value || new Vector3();
      uniformNode.value.setFromMatrixPosition(object.matrixWorld);
    } else if (scope === _Object3DNode.SCALE) {
      uniformNode.value = uniformNode.value || new Vector3();
      uniformNode.value.setFromMatrixScale(object.matrixWorld);
    } else if (scope === _Object3DNode.DIRECTION) {
      uniformNode.value = uniformNode.value || new Vector3();
      object.getWorldDirection(uniformNode.value);
    } else if (scope === _Object3DNode.VIEW_POSITION) {
      const camera3 = frame.camera;
      uniformNode.value = uniformNode.value || new Vector3();
      uniformNode.value.setFromMatrixPosition(object.matrixWorld);
      uniformNode.value.applyMatrix4(camera3.matrixWorldInverse);
    } else if (scope === _Object3DNode.RADIUS) {
      const geometry = frame.object.geometry;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      uniformNode.value = _sphere.radius;
    }
  }
  /**
   * Generates the code snippet of the uniform node. The node type of the uniform
   * node also depends on the selected scope.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The generated code snippet.
   */
  generate(builder) {
    const scope = this.scope;
    if (scope === _Object3DNode.WORLD_MATRIX) {
      this.uniformNode.nodeType = "mat4";
    } else if (scope === _Object3DNode.POSITION || scope === _Object3DNode.VIEW_POSITION || scope === _Object3DNode.DIRECTION || scope === _Object3DNode.SCALE) {
      this.uniformNode.nodeType = "vec3";
    } else if (scope === _Object3DNode.RADIUS) {
      this.uniformNode.nodeType = "float";
    }
    return this.uniformNode.build(builder);
  }
  serialize(data) {
    super.serialize(data);
    data.scope = this.scope;
  }
  deserialize(data) {
    super.deserialize(data);
    this.scope = data.scope;
  }
};
Object3DNode.WORLD_MATRIX = "worldMatrix";
Object3DNode.POSITION = "position";
Object3DNode.SCALE = "scale";
Object3DNode.VIEW_POSITION = "viewPosition";
Object3DNode.DIRECTION = "direction";
Object3DNode.RADIUS = "radius";
var objectDirection = nodeProxy(Object3DNode, Object3DNode.DIRECTION).setParameterLength(1);
var objectWorldMatrix = nodeProxy(Object3DNode, Object3DNode.WORLD_MATRIX).setParameterLength(1);
var objectPosition = nodeProxy(Object3DNode, Object3DNode.POSITION).setParameterLength(1);
var objectScale = nodeProxy(Object3DNode, Object3DNode.SCALE).setParameterLength(1);
var objectViewPosition = nodeProxy(Object3DNode, Object3DNode.VIEW_POSITION).setParameterLength(1);
var objectRadius = nodeProxy(Object3DNode, Object3DNode.RADIUS).setParameterLength(1);
var ModelNode = class extends Object3DNode {
  static get type() {
    return "ModelNode";
  }
  /**
   * Constructs a new object model node.
   *
   * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.
   */
  constructor(scope) {
    super(scope);
  }
  /**
   * Extracts the model reference from the frame state and then
   * updates the uniform value depending on the scope.
   *
   * @param {NodeFrame} frame - The current node frame.
   */
  update(frame) {
    this.object3d = frame.object;
    super.update(frame);
  }
};
var modelDirection = nodeImmutable(ModelNode, ModelNode.DIRECTION);
var modelWorldMatrix = nodeImmutable(ModelNode, ModelNode.WORLD_MATRIX);
var modelPosition = nodeImmutable(ModelNode, ModelNode.POSITION);
var modelScale = nodeImmutable(ModelNode, ModelNode.SCALE);
var modelViewPosition = nodeImmutable(ModelNode, ModelNode.VIEW_POSITION);
var modelRadius = nodeImmutable(ModelNode, ModelNode.RADIUS);
var modelNormalMatrix = uniform(new Matrix3()).onObjectUpdate(({ object }, self2) => self2.value.getNormalMatrix(object.matrixWorld));
var modelWorldMatrixInverse = uniform(new Matrix4()).onObjectUpdate(({ object }, self2) => self2.value.copy(object.matrixWorld).invert());
var modelViewMatrix = Fn((builder) => {
  return builder.renderer.overrideNodes.modelViewMatrix || mediumpModelViewMatrix;
}).once()().toVar("modelViewMatrix");
var mediumpModelViewMatrix = cameraViewMatrix.mul(modelWorldMatrix);
var highpModelViewMatrix = Fn((builder) => {
  builder.context.isHighPrecisionModelViewMatrix = true;
  return uniform("mat4").onObjectUpdate(({ object, camera: camera3 }) => {
    return object.modelViewMatrix.multiplyMatrices(camera3.matrixWorldInverse, object.matrixWorld);
  });
}).once()().toVar("highpModelViewMatrix");
var highpModelNormalViewMatrix = Fn((builder) => {
  const isHighPrecisionModelViewMatrix = builder.context.isHighPrecisionModelViewMatrix;
  return uniform("mat3").onObjectUpdate(({ object, camera: camera3 }) => {
    if (isHighPrecisionModelViewMatrix !== true) {
      object.modelViewMatrix.multiplyMatrices(camera3.matrixWorldInverse, object.matrixWorld);
    }
    return object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
  });
}).once()().toVar("highpModelNormalViewMatrix");
var positionGeometry = attribute("position", "vec3");
var positionLocal = positionGeometry.toVarying("positionLocal");
var positionPrevious = positionGeometry.toVarying("positionPrevious");
var positionWorld = Fn((builder) => {
  return modelWorldMatrix.mul(positionLocal).xyz.toVarying(builder.getSubBuildProperty("v_positionWorld"));
}, "vec3").once(["POSITION"])();
var positionWorldDirection = Fn(() => {
  const vertexPWD = positionLocal.transformDirection(modelWorldMatrix).toVarying("v_positionWorldDirection");
  return vertexPWD.normalize().toVar("positionWorldDirection");
}, "vec3").once(["POSITION"])();
var positionView = Fn((builder) => {
  return builder.context.setupPositionView().toVarying("v_positionView");
}, "vec3").once(["POSITION"])();
var positionViewDirection = positionView.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");
var FrontFacingNode = class extends Node {
  static get type() {
    return "FrontFacingNode";
  }
  /**
   * Constructs a new front facing node.
   */
  constructor() {
    super("bool");
    this.isFrontFacingNode = true;
  }
  generate(builder) {
    if (builder.shaderStage !== "fragment")
      return "true";
    const { material } = builder;
    if (material.side === BackSide) {
      return "false";
    }
    return builder.getFrontFacing();
  }
};
var frontFacing = nodeImmutable(FrontFacingNode);
var faceDirection = float(frontFacing).mul(2).sub(1);
var directionToFaceDirection = Fn(([direction], { material }) => {
  const side = material.side;
  if (side === BackSide) {
    direction = direction.mul(-1);
  } else if (side === DoubleSide) {
    direction = direction.mul(faceDirection);
  }
  return direction;
});
var normalGeometry = attribute("normal", "vec3");
var normalLocal = Fn((builder) => {
  if (builder.geometry.hasAttribute("normal") === false) {
    console.warn('THREE.TSL: Vertex attribute "normal" not found on geometry.');
    return vec3(0, 1, 0);
  }
  return normalGeometry;
}, "vec3").once()().toVar("normalLocal");
var normalFlat = positionView.dFdx().cross(positionView.dFdy()).normalize().toVar("normalFlat");
var normalViewGeometry = Fn((builder) => {
  let node;
  if (builder.material.flatShading === true) {
    node = normalFlat;
  } else {
    node = transformNormalToView(normalLocal).toVarying("v_normalViewGeometry").normalize();
  }
  return node;
}, "vec3").once()().toVar("normalViewGeometry");
var normalWorldGeometry = Fn((builder) => {
  let normal2 = normalViewGeometry.transformDirection(cameraViewMatrix);
  if (builder.material.flatShading !== true) {
    normal2 = normal2.toVarying("v_normalWorldGeometry");
  }
  return normal2.normalize().toVar("normalWorldGeometry");
}, "vec3").once()();
var normalView = Fn(({ subBuildFn, material, context: context3 }) => {
  let node;
  if (subBuildFn === "NORMAL" || subBuildFn === "VERTEX") {
    node = normalViewGeometry;
    if (material.flatShading !== true) {
      node = directionToFaceDirection(node);
    }
  } else {
    node = context3.setupNormal().context({ getUV: null });
  }
  return node;
}, "vec3").once(["NORMAL", "VERTEX"])().toVar("normalView");
var normalWorld = normalView.transformDirection(cameraViewMatrix).toVar("normalWorld");
var clearcoatNormalView = Fn(({ subBuildFn, context: context3 }) => {
  let node;
  if (subBuildFn === "NORMAL" || subBuildFn === "VERTEX") {
    node = normalView;
  } else {
    node = context3.setupClearcoatNormal().context({ getUV: null });
  }
  return node;
}, "vec3").once(["NORMAL", "VERTEX"])().toVar("clearcoatNormalView");
var transformNormal = Fn(([normal2, matrix = modelWorldMatrix]) => {
  const m2 = mat3(matrix);
  const transformedNormal = normal2.div(vec3(m2[0].dot(m2[0]), m2[1].dot(m2[1]), m2[2].dot(m2[2])));
  return m2.mul(transformedNormal).xyz;
});
var transformNormalToView = Fn(([normal2], builder) => {
  const modelNormalViewMatrix = builder.renderer.overrideNodes.modelNormalViewMatrix;
  if (modelNormalViewMatrix !== null) {
    return modelNormalViewMatrix.transformDirection(normal2);
  }
  const transformedNormal = modelNormalMatrix.mul(normal2);
  return cameraViewMatrix.transformDirection(transformedNormal);
});
var transformedNormalView = Fn(() => {
  console.warn('THREE.TSL: "transformedNormalView" is deprecated. Use "normalView" instead.');
  return normalView;
}).once(["NORMAL", "VERTEX"])();
var transformedNormalWorld = Fn(() => {
  console.warn('THREE.TSL: "transformedNormalWorld" is deprecated. Use "normalWorld" instead.');
  return normalWorld;
}).once(["NORMAL", "VERTEX"])();
var transformedClearcoatNormalView = Fn(() => {
  console.warn('THREE.TSL: "transformedClearcoatNormalView" is deprecated. Use "clearcoatNormalView" instead.');
  return clearcoatNormalView;
}).once(["NORMAL", "VERTEX"])();
var _e1$1 = new Euler();
var _m1$1 = new Matrix4();
var materialRefractionRatio = uniform(0).onReference(({ material }) => material).onObjectUpdate(({ material }) => material.refractionRatio);
var materialEnvIntensity = uniform(1).onReference(({ material }) => material).onObjectUpdate(function({ material, scene: scene3 }) {
  return material.envMap ? material.envMapIntensity : scene3.environmentIntensity;
});
var materialEnvRotation = uniform(new Matrix4()).onReference(function(frame) {
  return frame.material;
}).onObjectUpdate(function({ material, scene: scene3 }) {
  const rotation = scene3.environment !== null && material.envMap === null ? scene3.environmentRotation : material.envMapRotation;
  if (rotation) {
    _e1$1.copy(rotation);
    _m1$1.makeRotationFromEuler(_e1$1);
  } else {
    _m1$1.identity();
  }
  return _m1$1;
});
var reflectView = positionViewDirection.negate().reflect(normalView);
var refractView = positionViewDirection.negate().refract(normalView, materialRefractionRatio);
var reflectVector = reflectView.transformDirection(cameraViewMatrix).toVar("reflectVector");
var refractVector = refractView.transformDirection(cameraViewMatrix).toVar("reflectVector");
var EmptyTexture = new CubeTexture();
var CubeTextureNode = class extends TextureNode {
  static get type() {
    return "CubeTextureNode";
  }
  /**
   * Constructs a new cube texture node.
   *
   * @param {CubeTexture} value - The cube texture.
   * @param {?Node<vec3>} [uvNode=null] - The uv node.
   * @param {?Node<int>} [levelNode=null] - The level node.
   * @param {?Node<float>} [biasNode=null] - The bias node.
   */
  constructor(value, uvNode = null, levelNode = null, biasNode = null) {
    super(value, uvNode, levelNode, biasNode);
    this.isCubeTextureNode = true;
  }
  /**
   * Overwrites the default implementation to return a fixed value `'cubeTexture'`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return "cubeTexture";
  }
  /**
   * Returns a default uvs based on the mapping type of the cube texture.
   *
   * @return {Node<vec3>} The default uv attribute.
   */
  getDefaultUV() {
    const texture3 = this.value;
    if (texture3.mapping === CubeReflectionMapping) {
      return reflectVector;
    } else if (texture3.mapping === CubeRefractionMapping) {
      return refractVector;
    } else {
      console.error('THREE.CubeTextureNode: Mapping "%s" not supported.', texture3.mapping);
      return vec3(0, 0, 0);
    }
  }
  /**
   * Overwritten with an empty implementation since the `updateMatrix` flag is ignored
   * for cube textures. The uv transformation matrix is not applied to cube textures.
   *
   * @param {boolean} value - The update toggle.
   */
  setUpdateMatrix() {
  }
  // Ignore .updateMatrix for CubeTextureNode
  /**
   * Setups the uv node. Depending on the backend as well as the texture type, it might be necessary
   * to modify the uv node for correct sampling.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} uvNode - The uv node to setup.
   * @return {Node} The updated uv node.
   */
  setupUV(builder, uvNode) {
    const texture3 = this.value;
    if (builder.renderer.coordinateSystem === WebGPUCoordinateSystem || !texture3.isRenderTargetTexture) {
      uvNode = vec3(uvNode.x.negate(), uvNode.yz);
    }
    return materialEnvRotation.mul(uvNode);
  }
  /**
   * Generates the uv code snippet.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} cubeUV - The uv node to generate code for.
   * @return {string} The generated code snippet.
   */
  generateUV(builder, cubeUV) {
    return cubeUV.build(builder, "vec3");
  }
};
var cubeTextureBase = nodeProxy(CubeTextureNode).setParameterLength(1, 4).setName("cubeTexture");
var cubeTexture = (value = EmptyTexture, uvNode = null, levelNode = null, biasNode = null) => {
  let textureNode;
  if (value && value.isCubeTextureNode === true) {
    textureNode = nodeObject(value.clone());
    textureNode.referenceNode = value;
    if (uvNode !== null)
      textureNode.uvNode = nodeObject(uvNode);
    if (levelNode !== null)
      textureNode.levelNode = nodeObject(levelNode);
    if (biasNode !== null)
      textureNode.biasNode = nodeObject(biasNode);
  } else {
    textureNode = cubeTextureBase(value, uvNode, levelNode, biasNode);
  }
  return textureNode;
};
var uniformCubeTexture = (value = EmptyTexture) => cubeTextureBase(value);
var ReferenceElementNode2 = class extends ArrayElementNode {
  static get type() {
    return "ReferenceElementNode";
  }
  /**
   * Constructs a new reference element node.
   *
   * @param {?ReferenceNode} referenceNode - The reference node.
   * @param {Node} indexNode - The index node that defines the element access.
   */
  constructor(referenceNode, indexNode) {
    super(referenceNode, indexNode);
    this.referenceNode = referenceNode;
    this.isReferenceElementNode = true;
  }
  /**
   * This method is overwritten since the node type is inferred from
   * the uniform type of the reference node.
   *
   * @return {string} The node type.
   */
  getNodeType() {
    return this.referenceNode.uniformType;
  }
  generate(builder) {
    const snippet = super.generate(builder);
    const arrayType = this.referenceNode.getNodeType();
    const elementType = this.getNodeType();
    return builder.format(snippet, arrayType, elementType);
  }
};
var ReferenceNode = class extends Node {
  static get type() {
    return "ReferenceNode";
  }
  /**
   * Constructs a new reference node.
   *
   * @param {string} property - The name of the property the node refers to.
   * @param {string} uniformType - The uniform type that should be used to represent the property value.
   * @param {?Object} [object=null] - The object the property belongs to.
   * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.
   */
  constructor(property3, uniformType, object = null, count = null) {
    super();
    this.property = property3;
    this.uniformType = uniformType;
    this.object = object;
    this.count = count;
    this.properties = property3.split(".");
    this.reference = object;
    this.node = null;
    this.group = null;
    this.name = null;
    this.updateType = NodeUpdateType.OBJECT;
  }
  /**
   * When the referred property is array-like, this method can be used
   * to access elements via an index node.
   *
   * @param {IndexNode} indexNode - indexNode.
   * @return {ReferenceElementNode} A reference to an element.
   */
  element(indexNode) {
    return nodeObject(new ReferenceElementNode2(this, nodeObject(indexNode)));
  }
  /**
   * Sets the uniform group for this reference node.
   *
   * @param {UniformGroupNode} group - The uniform group to set.
   * @return {ReferenceNode} A reference to this node.
   */
  setGroup(group) {
    this.group = group;
    return this;
  }
  /**
   * Sets the name for the internal uniform.
   *
   * @param {string} name - The label to set.
   * @return {ReferenceNode} A reference to this node.
   */
  setName(name) {
    this.name = name;
    return this;
  }
  /**
   * Sets the label for the internal uniform.
   *
   * @deprecated
   * @param {string} name - The label to set.
   * @return {ReferenceNode} A reference to this node.
   */
  label(name) {
    console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.');
    return this.setName(name);
  }
  /**
   * Sets the node type which automatically defines the internal
   * uniform type.
   *
   * @param {string} uniformType - The type to set.
   */
  setNodeType(uniformType) {
    let node = null;
    if (this.count !== null) {
      node = buffer(null, uniformType, this.count);
    } else if (Array.isArray(this.getValueFromReference())) {
      node = uniformArray(null, uniformType);
    } else if (uniformType === "texture") {
      node = texture(null);
    } else if (uniformType === "cubeTexture") {
      node = cubeTexture(null);
    } else {
      node = uniform(null, uniformType);
    }
    if (this.group !== null) {
      node.setGroup(this.group);
    }
    if (this.name !== null)
      node.setName(this.name);
    this.node = node;
  }
  /**
   * This method is overwritten since the node type is inferred from
   * the type of the reference node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    if (this.node === null) {
      this.updateReference(builder);
      this.updateValue();
    }
    return this.node.getNodeType(builder);
  }
  /**
   * Returns the property value from the given referred object.
   *
   * @param {Object} [object=this.reference] - The object to retrieve the property value from.
   * @return {any} The value.
   */
  getValueFromReference(object = this.reference) {
    const { properties } = this;
    let value = object[properties[0]];
    for (let i2 = 1; i2 < properties.length; i2++) {
      value = value[properties[i2]];
    }
    return value;
  }
  /**
   * Allows to update the reference based on the given state. The state is only
   * evaluated {@link ReferenceNode#object} is not set.
   *
   * @param {(NodeFrame|NodeBuilder)} state - The current state.
   * @return {Object} The updated reference.
   */
  updateReference(state) {
    this.reference = this.object !== null ? this.object : state.object;
    return this.reference;
  }
  /**
   * The output of the reference node is the internal uniform node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {UniformNode} The output node.
   */
  setup() {
    this.updateValue();
    return this.node;
  }
  /**
   * Overwritten to update the internal uniform value.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update() {
    this.updateValue();
  }
  /**
   * Retrieves the value from the referred object property and uses it
   * to updated the internal uniform.
   */
  updateValue() {
    if (this.node === null)
      this.setNodeType(this.uniformType);
    const value = this.getValueFromReference();
    if (Array.isArray(value)) {
      this.node.array = value;
    } else {
      this.node.value = value;
    }
  }
};
var reference = (name, type, object) => nodeObject(new ReferenceNode(name, type, object));
var referenceBuffer = (name, type, count, object) => nodeObject(new ReferenceNode(name, type, object, count));
var MaterialReferenceNode = class extends ReferenceNode {
  static get type() {
    return "MaterialReferenceNode";
  }
  /**
   * Constructs a new material reference node.
   *
   * @param {string} property - The name of the property the node refers to.
   * @param {string} inputType - The uniform type that should be used to represent the property value.
   * @param {?Material} [material=null] - The material the property belongs to. When no material is set,
   * the node refers to the material of the current rendered object.
   */
  constructor(property3, inputType, material = null) {
    super(property3, inputType, material);
    this.material = material;
    this.isMaterialReferenceNode = true;
  }
  /**
   * Updates the reference based on the given state. The state is only evaluated
   * {@link MaterialReferenceNode#material} is not set.
   *
   * @param {(NodeFrame|NodeBuilder)} state - The current state.
   * @return {Object} The updated reference.
   */
  updateReference(state) {
    this.reference = this.material !== null ? this.material : state.material;
    return this.reference;
  }
};
var materialReference = (name, type, material = null) => nodeObject(new MaterialReferenceNode(name, type, material));
var uv = uv$1();
var q0 = positionView.dFdx();
var q1 = positionView.dFdy();
var st0 = uv.dFdx();
var st1 = uv.dFdy();
var N = normalView;
var q1perp = q1.cross(N);
var q0perp = N.cross(q0);
var T = q1perp.mul(st0.x).add(q0perp.mul(st1.x));
var B = q1perp.mul(st0.y).add(q0perp.mul(st1.y));
var det = T.dot(T).max(B.dot(B));
var scale$1 = det.equal(0).select(0, det.inverseSqrt());
var tangentViewFrame = T.mul(scale$1).toVar("tangentViewFrame");
var bitangentViewFrame = B.mul(scale$1).toVar("bitangentViewFrame");
var tangentGeometry = Fn((builder) => {
  if (builder.geometry.hasAttribute("tangent") === false) {
    builder.geometry.computeTangents();
  }
  return attribute("tangent", "vec4");
})();
var tangentLocal = tangentGeometry.xyz.toVar("tangentLocal");
var tangentView = Fn(({ subBuildFn, geometry, material }) => {
  let node;
  if (subBuildFn === "VERTEX" || geometry.hasAttribute("tangent")) {
    node = modelViewMatrix.mul(vec4(tangentLocal, 0)).xyz.toVarying("v_tangentView").normalize();
  } else {
    node = tangentViewFrame;
  }
  if (material.flatShading !== true) {
    node = directionToFaceDirection(node);
  }
  return node;
}, "vec3").once(["NORMAL", "VERTEX"])().toVar("tangentView");
var tangentWorld = tangentView.transformDirection(cameraViewMatrix).toVarying("v_tangentWorld").normalize().toVar("tangentWorld");
var getBitangent = Fn(([crossNormalTangent, varyingName], { subBuildFn, material }) => {
  let bitangent = crossNormalTangent.mul(tangentGeometry.w).xyz;
  if (subBuildFn === "NORMAL" && material.flatShading !== true) {
    bitangent = bitangent.toVarying(varyingName);
  }
  return bitangent;
}).once(["NORMAL"]);
var bitangentGeometry = getBitangent(normalGeometry.cross(tangentGeometry), "v_bitangentGeometry").normalize().toVar("bitangentGeometry");
var bitangentLocal = getBitangent(normalLocal.cross(tangentLocal), "v_bitangentLocal").normalize().toVar("bitangentLocal");
var bitangentView = Fn(({ subBuildFn, geometry, material }) => {
  let node;
  if (subBuildFn === "VERTEX" || geometry.hasAttribute("tangent")) {
    node = getBitangent(normalView.cross(tangentView), "v_bitangentView").normalize();
  } else {
    node = bitangentViewFrame;
  }
  if (material.flatShading !== true) {
    node = directionToFaceDirection(node);
  }
  return node;
}, "vec3").once(["NORMAL", "VERTEX"])().toVar("bitangentView");
var bitangentWorld = getBitangent(normalWorld.cross(tangentWorld), "v_bitangentWorld").normalize().toVar("bitangentWorld");
var TBNViewMatrix = mat3(tangentView, bitangentView, normalView).toVar("TBNViewMatrix");
var parallaxDirection = positionViewDirection.mul(TBNViewMatrix);
var parallaxUV = (uv3, scale2) => uv3.sub(parallaxDirection.mul(scale2));
var bentNormalView = Fn(() => {
  let bentNormal = anisotropyB.cross(positionViewDirection);
  bentNormal = bentNormal.cross(anisotropyB).normalize();
  bentNormal = mix(bentNormal, normalView, anisotropy.mul(roughness.oneMinus()).oneMinus().pow2().pow2()).normalize();
  return bentNormal;
}).once()();
var NormalMapNode = class extends TempNode {
  static get type() {
    return "NormalMapNode";
  }
  /**
   * Constructs a new normal map node.
   *
   * @param {Node<vec3>} node - Represents the normal map data.
   * @param {?Node<vec2>} [scaleNode=null] - Controls the intensity of the effect.
   */
  constructor(node, scaleNode = null) {
    super("vec3");
    this.node = node;
    this.scaleNode = scaleNode;
    this.normalMapType = TangentSpaceNormalMap;
  }
  setup({ material }) {
    const { normalMapType, scaleNode } = this;
    let normalMap3 = this.node.mul(2).sub(1);
    if (scaleNode !== null) {
      let scale2 = scaleNode;
      if (material.flatShading === true) {
        scale2 = directionToFaceDirection(scale2);
      }
      normalMap3 = vec3(normalMap3.xy.mul(scale2), normalMap3.z);
    }
    let output3 = null;
    if (normalMapType === ObjectSpaceNormalMap) {
      output3 = transformNormalToView(normalMap3);
    } else if (normalMapType === TangentSpaceNormalMap) {
      output3 = TBNViewMatrix.mul(normalMap3).normalize();
    } else {
      console.error(`THREE.NodeMaterial: Unsupported normal map type: ${normalMapType}`);
      output3 = normalView;
    }
    return output3;
  }
};
var normalMap = nodeProxy(NormalMapNode).setParameterLength(1, 2);
var dHdxy_fwd = Fn(({ textureNode, bumpScale }) => {
  const sampleTexture = (callback) => textureNode.cache().context({ getUV: (texNode) => callback(texNode.uvNode || uv$1()), forceUVContext: true });
  const Hll = float(sampleTexture((uvNode) => uvNode));
  return vec2(
    float(sampleTexture((uvNode) => uvNode.add(uvNode.dFdx()))).sub(Hll),
    float(sampleTexture((uvNode) => uvNode.add(uvNode.dFdy()))).sub(Hll)
  ).mul(bumpScale);
});
var perturbNormalArb = Fn((inputs) => {
  const { surf_pos, surf_norm, dHdxy } = inputs;
  const vSigmaX = surf_pos.dFdx().normalize();
  const vSigmaY = surf_pos.dFdy().normalize();
  const vN = surf_norm;
  const R1 = vSigmaY.cross(vN);
  const R2 = vN.cross(vSigmaX);
  const fDet = vSigmaX.dot(R1).mul(faceDirection);
  const vGrad = fDet.sign().mul(dHdxy.x.mul(R1).add(dHdxy.y.mul(R2)));
  return fDet.abs().mul(surf_norm).sub(vGrad).normalize();
});
var BumpMapNode = class extends TempNode {
  static get type() {
    return "BumpMapNode";
  }
  /**
   * Constructs a new bump map node.
   *
   * @param {Node<float>} textureNode - Represents the bump map data.
   * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.
   */
  constructor(textureNode, scaleNode = null) {
    super("vec3");
    this.textureNode = textureNode;
    this.scaleNode = scaleNode;
  }
  setup() {
    const bumpScale = this.scaleNode !== null ? this.scaleNode : 1;
    const dHdxy = dHdxy_fwd({ textureNode: this.textureNode, bumpScale });
    return perturbNormalArb({
      surf_pos: positionView,
      surf_norm: normalView,
      dHdxy
    });
  }
};
var bumpMap = nodeProxy(BumpMapNode).setParameterLength(1, 2);
var _propertyCache = /* @__PURE__ */ new Map();
var MaterialNode = class _MaterialNode extends Node {
  static get type() {
    return "MaterialNode";
  }
  /**
   * Constructs a new material node.
   *
   * @param {string} scope - The scope defines what kind of material property is referred by the node.
   */
  constructor(scope) {
    super();
    this.scope = scope;
  }
  /**
   * Returns a cached reference node for the given property and type.
   *
   * @param {string} property - The name of the material property.
   * @param {string} type - The uniform type of the property.
   * @return {MaterialReferenceNode} A material reference node representing the property access.
   */
  getCache(property3, type) {
    let node = _propertyCache.get(property3);
    if (node === void 0) {
      node = materialReference(property3, type);
      _propertyCache.set(property3, node);
    }
    return node;
  }
  /**
   * Returns a float-typed material reference node for the given property name.
   *
   * @param {string} property - The name of the material property.
   * @return {MaterialReferenceNode<float>} A material reference node representing the property access.
   */
  getFloat(property3) {
    return this.getCache(property3, "float");
  }
  /**
   * Returns a color-typed material reference node for the given property name.
   *
   * @param {string} property - The name of the material property.
   * @return {MaterialReferenceNode<color>} A material reference node representing the property access.
   */
  getColor(property3) {
    return this.getCache(property3, "color");
  }
  /**
   * Returns a texture-typed material reference node for the given property name.
   *
   * @param {string} property - The name of the material property.
   * @return {MaterialReferenceNode} A material reference node representing the property access.
   */
  getTexture(property3) {
    return this.getCache(property3 === "map" ? "map" : property3 + "Map", "texture");
  }
  /**
   * The node setup is done depending on the selected scope. Multiple material properties
   * might be grouped into a single node composition if they logically belong together.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node} The node representing the selected scope.
   */
  setup(builder) {
    const material = builder.context.material;
    const scope = this.scope;
    let node = null;
    if (scope === _MaterialNode.COLOR) {
      const colorNode = material.color !== void 0 ? this.getColor(scope) : vec3();
      if (material.map && material.map.isTexture === true) {
        node = colorNode.mul(this.getTexture("map"));
      } else {
        node = colorNode;
      }
    } else if (scope === _MaterialNode.OPACITY) {
      const opacityNode = this.getFloat(scope);
      if (material.alphaMap && material.alphaMap.isTexture === true) {
        node = opacityNode.mul(this.getTexture("alpha"));
      } else {
        node = opacityNode;
      }
    } else if (scope === _MaterialNode.SPECULAR_STRENGTH) {
      if (material.specularMap && material.specularMap.isTexture === true) {
        node = this.getTexture("specular").r;
      } else {
        node = float(1);
      }
    } else if (scope === _MaterialNode.SPECULAR_INTENSITY) {
      const specularIntensityNode = this.getFloat(scope);
      if (material.specularIntensityMap && material.specularIntensityMap.isTexture === true) {
        node = specularIntensityNode.mul(this.getTexture(scope).a);
      } else {
        node = specularIntensityNode;
      }
    } else if (scope === _MaterialNode.SPECULAR_COLOR) {
      const specularColorNode = this.getColor(scope);
      if (material.specularColorMap && material.specularColorMap.isTexture === true) {
        node = specularColorNode.mul(this.getTexture(scope).rgb);
      } else {
        node = specularColorNode;
      }
    } else if (scope === _MaterialNode.ROUGHNESS) {
      const roughnessNode = this.getFloat(scope);
      if (material.roughnessMap && material.roughnessMap.isTexture === true) {
        node = roughnessNode.mul(this.getTexture(scope).g);
      } else {
        node = roughnessNode;
      }
    } else if (scope === _MaterialNode.METALNESS) {
      const metalnessNode = this.getFloat(scope);
      if (material.metalnessMap && material.metalnessMap.isTexture === true) {
        node = metalnessNode.mul(this.getTexture(scope).b);
      } else {
        node = metalnessNode;
      }
    } else if (scope === _MaterialNode.EMISSIVE) {
      const emissiveIntensityNode = this.getFloat("emissiveIntensity");
      const emissiveNode = this.getColor(scope).mul(emissiveIntensityNode);
      if (material.emissiveMap && material.emissiveMap.isTexture === true) {
        node = emissiveNode.mul(this.getTexture(scope));
      } else {
        node = emissiveNode;
      }
    } else if (scope === _MaterialNode.NORMAL) {
      if (material.normalMap) {
        node = normalMap(this.getTexture("normal"), this.getCache("normalScale", "vec2"));
        node.normalMapType = material.normalMapType;
      } else if (material.bumpMap) {
        node = bumpMap(this.getTexture("bump").r, this.getFloat("bumpScale"));
      } else {
        node = normalView;
      }
    } else if (scope === _MaterialNode.CLEARCOAT) {
      const clearcoatNode = this.getFloat(scope);
      if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {
        node = clearcoatNode.mul(this.getTexture(scope).r);
      } else {
        node = clearcoatNode;
      }
    } else if (scope === _MaterialNode.CLEARCOAT_ROUGHNESS) {
      const clearcoatRoughnessNode = this.getFloat(scope);
      if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {
        node = clearcoatRoughnessNode.mul(this.getTexture(scope).r);
      } else {
        node = clearcoatRoughnessNode;
      }
    } else if (scope === _MaterialNode.CLEARCOAT_NORMAL) {
      if (material.clearcoatNormalMap) {
        node = normalMap(this.getTexture(scope), this.getCache(scope + "Scale", "vec2"));
      } else {
        node = normalView;
      }
    } else if (scope === _MaterialNode.SHEEN) {
      const sheenNode = this.getColor("sheenColor").mul(this.getFloat("sheen"));
      if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {
        node = sheenNode.mul(this.getTexture("sheenColor").rgb);
      } else {
        node = sheenNode;
      }
    } else if (scope === _MaterialNode.SHEEN_ROUGHNESS) {
      const sheenRoughnessNode = this.getFloat(scope);
      if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {
        node = sheenRoughnessNode.mul(this.getTexture(scope).a);
      } else {
        node = sheenRoughnessNode;
      }
      node = node.clamp(0.07, 1);
    } else if (scope === _MaterialNode.ANISOTROPY) {
      if (material.anisotropyMap && material.anisotropyMap.isTexture === true) {
        const anisotropyPolar = this.getTexture(scope);
        const anisotropyMat = mat2(materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x);
        node = anisotropyMat.mul(anisotropyPolar.rg.mul(2).sub(vec2(1)).normalize().mul(anisotropyPolar.b));
      } else {
        node = materialAnisotropyVector;
      }
    } else if (scope === _MaterialNode.IRIDESCENCE_THICKNESS) {
      const iridescenceThicknessMaximum = reference("1", "float", material.iridescenceThicknessRange);
      if (material.iridescenceThicknessMap) {
        const iridescenceThicknessMinimum = reference("0", "float", material.iridescenceThicknessRange);
        node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture(scope).g).add(iridescenceThicknessMinimum);
      } else {
        node = iridescenceThicknessMaximum;
      }
    } else if (scope === _MaterialNode.TRANSMISSION) {
      const transmissionNode = this.getFloat(scope);
      if (material.transmissionMap) {
        node = transmissionNode.mul(this.getTexture(scope).r);
      } else {
        node = transmissionNode;
      }
    } else if (scope === _MaterialNode.THICKNESS) {
      const thicknessNode = this.getFloat(scope);
      if (material.thicknessMap) {
        node = thicknessNode.mul(this.getTexture(scope).g);
      } else {
        node = thicknessNode;
      }
    } else if (scope === _MaterialNode.IOR) {
      node = this.getFloat(scope);
    } else if (scope === _MaterialNode.LIGHT_MAP) {
      node = this.getTexture(scope).rgb.mul(this.getFloat("lightMapIntensity"));
    } else if (scope === _MaterialNode.AO) {
      node = this.getTexture(scope).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);
    } else if (scope === _MaterialNode.LINE_DASH_OFFSET) {
      node = material.dashOffset ? this.getFloat(scope) : float(0);
    } else {
      const outputType = this.getNodeType(builder);
      node = this.getCache(scope, outputType);
    }
    return node;
  }
};
MaterialNode.ALPHA_TEST = "alphaTest";
MaterialNode.COLOR = "color";
MaterialNode.OPACITY = "opacity";
MaterialNode.SHININESS = "shininess";
MaterialNode.SPECULAR = "specular";
MaterialNode.SPECULAR_STRENGTH = "specularStrength";
MaterialNode.SPECULAR_INTENSITY = "specularIntensity";
MaterialNode.SPECULAR_COLOR = "specularColor";
MaterialNode.REFLECTIVITY = "reflectivity";
MaterialNode.ROUGHNESS = "roughness";
MaterialNode.METALNESS = "metalness";
MaterialNode.NORMAL = "normal";
MaterialNode.CLEARCOAT = "clearcoat";
MaterialNode.CLEARCOAT_ROUGHNESS = "clearcoatRoughness";
MaterialNode.CLEARCOAT_NORMAL = "clearcoatNormal";
MaterialNode.EMISSIVE = "emissive";
MaterialNode.ROTATION = "rotation";
MaterialNode.SHEEN = "sheen";
MaterialNode.SHEEN_ROUGHNESS = "sheenRoughness";
MaterialNode.ANISOTROPY = "anisotropy";
MaterialNode.IRIDESCENCE = "iridescence";
MaterialNode.IRIDESCENCE_IOR = "iridescenceIOR";
MaterialNode.IRIDESCENCE_THICKNESS = "iridescenceThickness";
MaterialNode.IOR = "ior";
MaterialNode.TRANSMISSION = "transmission";
MaterialNode.THICKNESS = "thickness";
MaterialNode.ATTENUATION_DISTANCE = "attenuationDistance";
MaterialNode.ATTENUATION_COLOR = "attenuationColor";
MaterialNode.LINE_SCALE = "scale";
MaterialNode.LINE_DASH_SIZE = "dashSize";
MaterialNode.LINE_GAP_SIZE = "gapSize";
MaterialNode.LINE_WIDTH = "linewidth";
MaterialNode.LINE_DASH_OFFSET = "dashOffset";
MaterialNode.POINT_SIZE = "size";
MaterialNode.DISPERSION = "dispersion";
MaterialNode.LIGHT_MAP = "light";
MaterialNode.AO = "ao";
var materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);
var materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);
var materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);
var materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);
var materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);
var materialSpecular = nodeImmutable(MaterialNode, MaterialNode.SPECULAR);
var materialSpecularIntensity = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_INTENSITY);
var materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);
var materialSpecularStrength = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);
var materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);
var materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);
var materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);
var materialNormal = nodeImmutable(MaterialNode, MaterialNode.NORMAL);
var materialClearcoat = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);
var materialClearcoatRoughness = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);
var materialClearcoatNormal = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_NORMAL);
var materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);
var materialSheen = nodeImmutable(MaterialNode, MaterialNode.SHEEN);
var materialSheenRoughness = nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);
var materialAnisotropy = nodeImmutable(MaterialNode, MaterialNode.ANISOTROPY);
var materialIridescence = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);
var materialIridescenceIOR = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);
var materialIridescenceThickness = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);
var materialTransmission = nodeImmutable(MaterialNode, MaterialNode.TRANSMISSION);
var materialThickness = nodeImmutable(MaterialNode, MaterialNode.THICKNESS);
var materialIOR = nodeImmutable(MaterialNode, MaterialNode.IOR);
var materialAttenuationDistance = nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_DISTANCE);
var materialAttenuationColor = nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_COLOR);
var materialLineScale = nodeImmutable(MaterialNode, MaterialNode.LINE_SCALE);
var materialLineDashSize = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_SIZE);
var materialLineGapSize = nodeImmutable(MaterialNode, MaterialNode.LINE_GAP_SIZE);
var materialLineWidth = nodeImmutable(MaterialNode, MaterialNode.LINE_WIDTH);
var materialLineDashOffset = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_OFFSET);
var materialPointSize = nodeImmutable(MaterialNode, MaterialNode.POINT_SIZE);
var materialDispersion = nodeImmutable(MaterialNode, MaterialNode.DISPERSION);
var materialLightMap = nodeImmutable(MaterialNode, MaterialNode.LIGHT_MAP);
var materialAO = nodeImmutable(MaterialNode, MaterialNode.AO);
var materialAnisotropyVector = uniform(new Vector2()).onReference(function(frame) {
  return frame.material;
}).onRenderUpdate(function({ material }) {
  this.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
});
var modelViewProjection = Fn((builder) => {
  return builder.context.setupModelViewProjection();
}, "vec4").once()().toVarying("v_modelViewProjection");
var IndexNode = class _IndexNode extends Node {
  static get type() {
    return "IndexNode";
  }
  /**
   * Constructs a new index node.
   *
   * @param {('vertex'|'instance'|'subgroup'|'invocationLocal'|'invocationSubgroup'|'draw')} scope - The scope of the index node.
   */
  constructor(scope) {
    super("uint");
    this.scope = scope;
    this.isIndexNode = true;
  }
  generate(builder) {
    const nodeType = this.getNodeType(builder);
    const scope = this.scope;
    let propertyName;
    if (scope === _IndexNode.VERTEX) {
      propertyName = builder.getVertexIndex();
    } else if (scope === _IndexNode.INSTANCE) {
      propertyName = builder.getInstanceIndex();
    } else if (scope === _IndexNode.DRAW) {
      propertyName = builder.getDrawIndex();
    } else if (scope === _IndexNode.INVOCATION_LOCAL) {
      propertyName = builder.getInvocationLocalIndex();
    } else if (scope === _IndexNode.INVOCATION_SUBGROUP) {
      propertyName = builder.getInvocationSubgroupIndex();
    } else if (scope === _IndexNode.SUBGROUP) {
      propertyName = builder.getSubgroupIndex();
    } else {
      throw new Error("THREE.IndexNode: Unknown scope: " + scope);
    }
    let output3;
    if (builder.shaderStage === "vertex" || builder.shaderStage === "compute") {
      output3 = propertyName;
    } else {
      const nodeVarying = varying(this);
      output3 = nodeVarying.build(builder, nodeType);
    }
    return output3;
  }
};
IndexNode.VERTEX = "vertex";
IndexNode.INSTANCE = "instance";
IndexNode.SUBGROUP = "subgroup";
IndexNode.INVOCATION_LOCAL = "invocationLocal";
IndexNode.INVOCATION_SUBGROUP = "invocationSubgroup";
IndexNode.DRAW = "draw";
var vertexIndex = nodeImmutable(IndexNode, IndexNode.VERTEX);
var instanceIndex = nodeImmutable(IndexNode, IndexNode.INSTANCE);
var subgroupIndex = nodeImmutable(IndexNode, IndexNode.SUBGROUP);
var invocationSubgroupIndex = nodeImmutable(IndexNode, IndexNode.INVOCATION_SUBGROUP);
var invocationLocalIndex = nodeImmutable(IndexNode, IndexNode.INVOCATION_LOCAL);
var drawIndex = nodeImmutable(IndexNode, IndexNode.DRAW);
var InstanceNode = class extends Node {
  static get type() {
    return "InstanceNode";
  }
  /**
   * Constructs a new instance node.
   *
   * @param {number} count - The number of instances.
   * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.
   * @param {?InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.
   */
  constructor(count, instanceMatrix, instanceColor = null) {
    super("void");
    this.count = count;
    this.instanceMatrix = instanceMatrix;
    this.instanceColor = instanceColor;
    this.instanceMatrixNode = null;
    this.instanceColorNode = null;
    this.updateType = NodeUpdateType.FRAME;
    this.buffer = null;
    this.bufferColor = null;
  }
  /**
   * Setups the internal buffers and nodes and assigns the transformed vertex data
   * to predefined node variables for accumulation. That follows the same patterns
   * like with morph and skinning nodes.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setup(builder) {
    const { instanceMatrix, instanceColor } = this;
    const { count } = instanceMatrix;
    let { instanceMatrixNode, instanceColorNode } = this;
    if (instanceMatrixNode === null) {
      if (count <= 1e3) {
        instanceMatrixNode = buffer(instanceMatrix.array, "mat4", Math.max(count, 1)).element(instanceIndex);
      } else {
        const buffer3 = new InstancedInterleavedBuffer(instanceMatrix.array, 16, 1);
        this.buffer = buffer3;
        const bufferFn = instanceMatrix.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;
        const instanceBuffers = [
          // F.Signature -> bufferAttribute( array, type, stride, offset )
          bufferFn(buffer3, "vec4", 16, 0),
          bufferFn(buffer3, "vec4", 16, 4),
          bufferFn(buffer3, "vec4", 16, 8),
          bufferFn(buffer3, "vec4", 16, 12)
        ];
        instanceMatrixNode = mat4(...instanceBuffers);
      }
      this.instanceMatrixNode = instanceMatrixNode;
    }
    if (instanceColor && instanceColorNode === null) {
      const buffer3 = new InstancedBufferAttribute(instanceColor.array, 3);
      const bufferFn = instanceColor.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;
      this.bufferColor = buffer3;
      instanceColorNode = vec3(bufferFn(buffer3, "vec3", 3, 0));
      this.instanceColorNode = instanceColorNode;
    }
    const instancePosition = instanceMatrixNode.mul(positionLocal).xyz;
    positionLocal.assign(instancePosition);
    if (builder.hasGeometryAttribute("normal")) {
      const instanceNormal = transformNormal(normalLocal, instanceMatrixNode);
      normalLocal.assign(instanceNormal);
    }
    if (this.instanceColorNode !== null) {
      varyingProperty("vec3", "vInstanceColor").assign(this.instanceColorNode);
    }
  }
  /**
   * Checks if the internal buffers required an update.
   *
   * @param {NodeFrame} frame - The current node frame.
   */
  update() {
    if (this.instanceMatrix.usage !== DynamicDrawUsage && this.buffer !== null && this.instanceMatrix.version !== this.buffer.version) {
      this.buffer.version = this.instanceMatrix.version;
    }
    if (this.instanceColor && this.instanceColor.usage !== DynamicDrawUsage && this.bufferColor !== null && this.instanceColor.version !== this.bufferColor.version) {
      this.bufferColor.version = this.instanceColor.version;
    }
  }
};
var instance = nodeProxy(InstanceNode).setParameterLength(2, 3);
var InstancedMeshNode = class extends InstanceNode {
  static get type() {
    return "InstancedMeshNode";
  }
  /**
   * Constructs a new instanced mesh node.
   *
   * @param {InstancedMesh} instancedMesh - The instanced mesh.
   */
  constructor(instancedMesh3) {
    const { count, instanceMatrix, instanceColor } = instancedMesh3;
    super(count, instanceMatrix, instanceColor);
    this.instancedMesh = instancedMesh3;
  }
};
var instancedMesh = nodeProxy(InstancedMeshNode).setParameterLength(1);
var BatchNode = class extends Node {
  static get type() {
    return "BatchNode";
  }
  /**
   * Constructs a new batch node.
   *
   * @param {BatchedMesh} batchMesh - A reference to batched mesh.
   */
  constructor(batchMesh) {
    super("void");
    this.batchMesh = batchMesh;
    this.batchingIdNode = null;
  }
  /**
   * Setups the internal buffers and nodes and assigns the transformed vertex data
   * to predefined node variables for accumulation. That follows the same patterns
   * like with morph and skinning nodes.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setup(builder) {
    if (this.batchingIdNode === null) {
      if (builder.getDrawIndex() === null) {
        this.batchingIdNode = instanceIndex;
      } else {
        this.batchingIdNode = drawIndex;
      }
    }
    const getIndirectIndex = Fn(([id]) => {
      const size2 = int(textureSize(textureLoad(this.batchMesh._indirectTexture), 0).x);
      const x3 = int(id).mod(size2);
      const y3 = int(id).div(size2);
      return textureLoad(this.batchMesh._indirectTexture, ivec2(x3, y3)).x;
    }).setLayout({
      name: "getIndirectIndex",
      type: "uint",
      inputs: [
        { name: "id", type: "int" }
      ]
    });
    const indirectId = getIndirectIndex(int(this.batchingIdNode));
    const matricesTexture = this.batchMesh._matricesTexture;
    const size = int(textureSize(textureLoad(matricesTexture), 0).x);
    const j2 = float(indirectId).mul(4).toInt().toVar();
    const x2 = j2.mod(size);
    const y2 = j2.div(size);
    const batchingMatrix = mat4(
      textureLoad(matricesTexture, ivec2(x2, y2)),
      textureLoad(matricesTexture, ivec2(x2.add(1), y2)),
      textureLoad(matricesTexture, ivec2(x2.add(2), y2)),
      textureLoad(matricesTexture, ivec2(x2.add(3), y2))
    );
    const colorsTexture = this.batchMesh._colorsTexture;
    if (colorsTexture !== null) {
      const getBatchingColor = Fn(([id]) => {
        const size2 = int(textureSize(textureLoad(colorsTexture), 0).x);
        const j3 = id;
        const x3 = j3.mod(size2);
        const y3 = j3.div(size2);
        return textureLoad(colorsTexture, ivec2(x3, y3)).rgb;
      }).setLayout({
        name: "getBatchingColor",
        type: "vec3",
        inputs: [
          { name: "id", type: "int" }
        ]
      });
      const color4 = getBatchingColor(indirectId);
      varyingProperty("vec3", "vBatchColor").assign(color4);
    }
    const bm = mat3(batchingMatrix);
    positionLocal.assign(batchingMatrix.mul(positionLocal));
    const transformedNormal = normalLocal.div(vec3(bm[0].dot(bm[0]), bm[1].dot(bm[1]), bm[2].dot(bm[2])));
    const batchingNormal = bm.mul(transformedNormal).xyz;
    normalLocal.assign(batchingNormal);
    if (builder.hasGeometryAttribute("tangent")) {
      tangentLocal.mulAssign(bm);
    }
  }
};
var batch = nodeProxy(BatchNode).setParameterLength(1);
var StorageArrayElementNode = class extends ArrayElementNode {
  static get type() {
    return "StorageArrayElementNode";
  }
  /**
   * Constructs storage buffer element node.
   *
   * @param {StorageBufferNode} storageBufferNode - The storage buffer node.
   * @param {Node} indexNode - The index node that defines the element access.
   */
  constructor(storageBufferNode, indexNode) {
    super(storageBufferNode, indexNode);
    this.isStorageArrayElementNode = true;
  }
  /**
   * The storage buffer node.
   *
   * @param {Node} value
   * @type {StorageBufferNode}
   */
  set storageBufferNode(value) {
    this.node = value;
  }
  get storageBufferNode() {
    return this.node;
  }
  getMemberType(builder, name) {
    const structTypeNode = this.storageBufferNode.structTypeNode;
    if (structTypeNode) {
      return structTypeNode.getMemberType(builder, name);
    }
    return "void";
  }
  setup(builder) {
    if (builder.isAvailable("storageBuffer") === false) {
      if (this.node.isPBO === true) {
        builder.setupPBO(this.node);
      }
    }
    return super.setup(builder);
  }
  generate(builder, output3) {
    let snippet;
    const isAssignContext = builder.context.assign;
    if (builder.isAvailable("storageBuffer") === false) {
      if (this.node.isPBO === true && isAssignContext !== true && (this.node.value.isInstancedBufferAttribute || builder.shaderStage !== "compute")) {
        snippet = builder.generatePBO(this);
      } else {
        snippet = this.node.build(builder);
      }
    } else {
      snippet = super.generate(builder);
    }
    if (isAssignContext !== true) {
      const type = this.getNodeType(builder);
      snippet = builder.format(snippet, type, output3);
    }
    return snippet;
  }
};
var storageElement = nodeProxy(StorageArrayElementNode).setParameterLength(2);
var StorageBufferNode = class extends BufferNode {
  static get type() {
    return "StorageBufferNode";
  }
  /**
   * Constructs a new storage buffer node.
   *
   * @param {StorageBufferAttribute|StorageInstancedBufferAttribute|BufferAttribute} value - The buffer data.
   * @param {?(string|Struct)} [bufferType=null] - The buffer type (e.g. `'vec3'`).
   * @param {number} [bufferCount=0] - The buffer count.
   */
  constructor(value, bufferType = null, bufferCount = 0) {
    let nodeType, structTypeNode = null;
    if (bufferType && bufferType.isStruct) {
      nodeType = "struct";
      structTypeNode = bufferType.layout;
      if (value.isStorageBufferAttribute || value.isStorageInstancedBufferAttribute) {
        bufferCount = value.count;
      }
    } else if (bufferType === null && (value.isStorageBufferAttribute || value.isStorageInstancedBufferAttribute)) {
      nodeType = getTypeFromLength(value.itemSize);
      bufferCount = value.count;
    } else {
      nodeType = bufferType;
    }
    super(value, nodeType, bufferCount);
    this.isStorageBufferNode = true;
    this.structTypeNode = structTypeNode;
    this.access = NodeAccess.READ_WRITE;
    this.isAtomic = false;
    this.isPBO = false;
    this._attribute = null;
    this._varying = null;
    this.global = true;
    if (value.isStorageBufferAttribute !== true && value.isStorageInstancedBufferAttribute !== true) {
      if (value.isInstancedBufferAttribute)
        value.isStorageInstancedBufferAttribute = true;
      else
        value.isStorageBufferAttribute = true;
    }
  }
  /**
   * This method is overwritten since the buffer data might be shared
   * and thus the hash should be shared as well.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The hash.
   */
  getHash(builder) {
    if (this.bufferCount === 0) {
      let bufferData = builder.globalCache.getData(this.value);
      if (bufferData === void 0) {
        bufferData = {
          node: this
        };
        builder.globalCache.setData(this.value, bufferData);
      }
      return bufferData.node.uuid;
    }
    return this.uuid;
  }
  /**
   * Overwrites the default implementation to return a fixed value `'indirectStorageBuffer'` or `'storageBuffer'`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return this.value.isIndirectStorageBufferAttribute ? "indirectStorageBuffer" : "storageBuffer";
  }
  /**
   * Enables element access with the given index node.
   *
   * @param {IndexNode} indexNode - The index node.
   * @return {StorageArrayElementNode} A node representing the element access.
   */
  element(indexNode) {
    return storageElement(this, indexNode);
  }
  /**
   * Defines whether this node is a PBO or not. Only relevant for WebGL.
   *
   * @param {boolean} value - The value so set.
   * @return {StorageBufferNode} A reference to this node.
   */
  setPBO(value) {
    this.isPBO = value;
    return this;
  }
  /**
   * Returns the `isPBO` value.
   *
   * @return {boolean} Whether the node represents a PBO or not.
   */
  getPBO() {
    return this.isPBO;
  }
  /**
   * Defines the node access.
   *
   * @param {string} value - The node access.
   * @return {StorageBufferNode} A reference to this node.
   */
  setAccess(value) {
    this.access = value;
    return this;
  }
  /**
   * Convenience method for configuring a read-only node access.
   *
   * @return {StorageBufferNode} A reference to this node.
   */
  toReadOnly() {
    return this.setAccess(NodeAccess.READ_ONLY);
  }
  /**
   * Defines whether the node is atomic or not.
   *
   * @param {boolean} value - The atomic flag.
   * @return {StorageBufferNode} A reference to this node.
   */
  setAtomic(value) {
    this.isAtomic = value;
    return this;
  }
  /**
   * Convenience method for making this node atomic.
   *
   * @return {StorageBufferNode} A reference to this node.
   */
  toAtomic() {
    return this.setAtomic(true);
  }
  /**
   * Returns attribute data for this storage buffer node.
   *
   * @return {{attribute: BufferAttributeNode, varying: VaryingNode}} The attribute data.
   */
  getAttributeData() {
    if (this._attribute === null) {
      this._attribute = bufferAttribute(this.value);
      this._varying = varying(this._attribute);
    }
    return {
      attribute: this._attribute,
      varying: this._varying
    };
  }
  /**
   * This method is overwritten since the node type from the availability of storage buffers
   * and the attribute data.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    if (this.structTypeNode !== null) {
      return this.structTypeNode.getNodeType(builder);
    }
    if (builder.isAvailable("storageBuffer") || builder.isAvailable("indirectStorageBuffer")) {
      return super.getNodeType(builder);
    }
    const { attribute: attribute3 } = this.getAttributeData();
    return attribute3.getNodeType(builder);
  }
  /**
   * Returns the type of a member of the struct.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} name - The name of the member.
   * @return {string} The type of the member.
   */
  getMemberType(builder, name) {
    if (this.structTypeNode !== null) {
      return this.structTypeNode.getMemberType(builder, name);
    }
    return "void";
  }
  /**
   * Generates the code snippet of the storage buffer node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The generated code snippet.
   */
  generate(builder) {
    if (this.structTypeNode !== null)
      this.structTypeNode.build(builder);
    if (builder.isAvailable("storageBuffer") || builder.isAvailable("indirectStorageBuffer")) {
      return super.generate(builder);
    }
    const { attribute: attribute3, varying: varying3 } = this.getAttributeData();
    const output3 = varying3.build(builder);
    builder.registerTransform(output3, attribute3);
    return output3;
  }
};
var storage = (value, type = null, count = 0) => nodeObject(new StorageBufferNode(value, type, count));
var storageObject = (value, type, count) => {
  console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.');
  return storage(value, type, count).setPBO(true);
};
var _frameId = /* @__PURE__ */ new WeakMap();
var SkinningNode = class extends Node {
  static get type() {
    return "SkinningNode";
  }
  /**
   * Constructs a new skinning node.
   *
   * @param {SkinnedMesh} skinnedMesh - The skinned mesh.
   */
  constructor(skinnedMesh) {
    super("void");
    this.skinnedMesh = skinnedMesh;
    this.updateType = NodeUpdateType.OBJECT;
    this.skinIndexNode = attribute("skinIndex", "uvec4");
    this.skinWeightNode = attribute("skinWeight", "vec4");
    this.bindMatrixNode = reference("bindMatrix", "mat4");
    this.bindMatrixInverseNode = reference("bindMatrixInverse", "mat4");
    this.boneMatricesNode = referenceBuffer("skeleton.boneMatrices", "mat4", skinnedMesh.skeleton.bones.length);
    this.positionNode = positionLocal;
    this.toPositionNode = positionLocal;
    this.previousBoneMatricesNode = null;
  }
  /**
   * Transforms the given vertex position via skinning.
   *
   * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices
   * @param {Node<vec3>} [position=this.positionNode] - The vertex position in local space.
   * @return {Node<vec3>} The transformed vertex position.
   */
  getSkinnedPosition(boneMatrices = this.boneMatricesNode, position = this.positionNode) {
    const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;
    const boneMatX = boneMatrices.element(skinIndexNode.x);
    const boneMatY = boneMatrices.element(skinIndexNode.y);
    const boneMatZ = boneMatrices.element(skinIndexNode.z);
    const boneMatW = boneMatrices.element(skinIndexNode.w);
    const skinVertex = bindMatrixNode.mul(position);
    const skinned = add3(
      boneMatX.mul(skinWeightNode.x).mul(skinVertex),
      boneMatY.mul(skinWeightNode.y).mul(skinVertex),
      boneMatZ.mul(skinWeightNode.z).mul(skinVertex),
      boneMatW.mul(skinWeightNode.w).mul(skinVertex)
    );
    return bindMatrixInverseNode.mul(skinned).xyz;
  }
  /**
   * Transforms the given vertex normal via skinning.
   *
   * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices
   * @param {Node<vec3>} [normal=normalLocal] - The vertex normal in local space.
   * @return {Node<vec3>} The transformed vertex normal.
   */
  getSkinnedNormal(boneMatrices = this.boneMatricesNode, normal2 = normalLocal) {
    const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;
    const boneMatX = boneMatrices.element(skinIndexNode.x);
    const boneMatY = boneMatrices.element(skinIndexNode.y);
    const boneMatZ = boneMatrices.element(skinIndexNode.z);
    const boneMatW = boneMatrices.element(skinIndexNode.w);
    let skinMatrix = add3(
      skinWeightNode.x.mul(boneMatX),
      skinWeightNode.y.mul(boneMatY),
      skinWeightNode.z.mul(boneMatZ),
      skinWeightNode.w.mul(boneMatW)
    );
    skinMatrix = bindMatrixInverseNode.mul(skinMatrix).mul(bindMatrixNode);
    return skinMatrix.transformDirection(normal2).xyz;
  }
  /**
   * Computes the transformed/skinned vertex position of the previous frame.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec3>} The skinned position from the previous frame.
   */
  getPreviousSkinnedPosition(builder) {
    const skinnedMesh = builder.object;
    if (this.previousBoneMatricesNode === null) {
      skinnedMesh.skeleton.previousBoneMatrices = new Float32Array(skinnedMesh.skeleton.boneMatrices);
      this.previousBoneMatricesNode = referenceBuffer("skeleton.previousBoneMatrices", "mat4", skinnedMesh.skeleton.bones.length);
    }
    return this.getSkinnedPosition(this.previousBoneMatricesNode, positionPrevious);
  }
  /**
   * Returns `true` if bone matrices from the previous frame are required. Relevant
   * when computing motion vectors with {@link VelocityNode}.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {boolean} Whether bone matrices from the previous frame are required or not.
   */
  needsPreviousBoneMatrices(builder) {
    const mrt3 = builder.renderer.getMRT();
    return mrt3 && mrt3.has("velocity") || getDataFromObject(builder.object).useVelocity === true;
  }
  /**
   * Setups the skinning node by assigning the transformed vertex data to predefined node variables.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec3>} The transformed vertex position.
   */
  setup(builder) {
    if (this.needsPreviousBoneMatrices(builder)) {
      positionPrevious.assign(this.getPreviousSkinnedPosition(builder));
    }
    const skinPosition = this.getSkinnedPosition();
    if (this.toPositionNode)
      this.toPositionNode.assign(skinPosition);
    if (builder.hasGeometryAttribute("normal")) {
      const skinNormal = this.getSkinnedNormal();
      normalLocal.assign(skinNormal);
      if (builder.hasGeometryAttribute("tangent")) {
        tangentLocal.assign(skinNormal);
      }
    }
    return skinPosition;
  }
  /**
   * Generates the code snippet of the skinning node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} output - The current output.
   * @return {string} The generated code snippet.
   */
  generate(builder, output3) {
    if (output3 !== "void") {
      return super.generate(builder, output3);
    }
  }
  /**
   * Updates the state of the skinned mesh by updating the skeleton once per frame.
   *
   * @param {NodeFrame} frame - The current node frame.
   */
  update(frame) {
    const skeleton = frame.object && frame.object.skeleton ? frame.object.skeleton : this.skinnedMesh.skeleton;
    if (_frameId.get(skeleton) === frame.frameId)
      return;
    _frameId.set(skeleton, frame.frameId);
    if (this.previousBoneMatricesNode !== null)
      skeleton.previousBoneMatrices.set(skeleton.boneMatrices);
    skeleton.update();
  }
};
var skinning = (skinnedMesh) => nodeObject(new SkinningNode(skinnedMesh));
var computeSkinning = (skinnedMesh, toPosition = null) => {
  const node = new SkinningNode(skinnedMesh);
  node.positionNode = storage(new InstancedBufferAttribute(skinnedMesh.geometry.getAttribute("position").array, 3), "vec3").setPBO(true).toReadOnly().element(instanceIndex).toVar();
  node.skinIndexNode = storage(new InstancedBufferAttribute(new Uint32Array(skinnedMesh.geometry.getAttribute("skinIndex").array), 4), "uvec4").setPBO(true).toReadOnly().element(instanceIndex).toVar();
  node.skinWeightNode = storage(new InstancedBufferAttribute(skinnedMesh.geometry.getAttribute("skinWeight").array, 4), "vec4").setPBO(true).toReadOnly().element(instanceIndex).toVar();
  node.bindMatrixNode = uniform(skinnedMesh.bindMatrix, "mat4");
  node.bindMatrixInverseNode = uniform(skinnedMesh.bindMatrixInverse, "mat4");
  node.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, "mat4", skinnedMesh.skeleton.bones.length);
  node.toPositionNode = toPosition;
  return nodeObject(node);
};
var LoopNode = class extends Node {
  static get type() {
    return "LoopNode";
  }
  /**
   * Constructs a new loop node.
   *
   * @param {Array<any>} params - Depending on the loop type, array holds different parameterization values for the loop.
   */
  constructor(params = []) {
    super();
    this.params = params;
  }
  /**
   * Returns a loop variable name based on an index. The pattern is
   * `0` = `i`, `1`= `j`, `2`= `k` and so on.
   *
   * @param {number} index - The index.
   * @return {string} The loop variable name.
   */
  getVarName(index6) {
    return String.fromCharCode("i".charCodeAt(0) + index6);
  }
  /**
   * Returns properties about this node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Object} The node properties.
   */
  getProperties(builder) {
    const properties = builder.getNodeProperties(this);
    if (properties.stackNode !== void 0)
      return properties;
    const inputs = {};
    for (let i2 = 0, l2 = this.params.length - 1; i2 < l2; i2++) {
      const param = this.params[i2];
      const name = param.isNode !== true && param.name || this.getVarName(i2);
      const type = param.isNode !== true && param.type || "int";
      inputs[name] = expression(name, type);
    }
    const stack3 = builder.addStack();
    properties.returnsNode = this.params[this.params.length - 1](inputs, builder);
    properties.stackNode = stack3;
    const baseParam = this.params[0];
    if (baseParam.isNode !== true && typeof baseParam.update === "function") {
      properties.updateNode = Fn(this.params[0].update)(inputs);
    }
    builder.removeStack();
    return properties;
  }
  /**
   * This method is overwritten since the node type is inferred based on the loop configuration.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    const { returnsNode } = this.getProperties(builder);
    return returnsNode ? returnsNode.getNodeType(builder) : "void";
  }
  setup(builder) {
    this.getProperties(builder);
  }
  generate(builder) {
    const properties = this.getProperties(builder);
    const params = this.params;
    const stackNode = properties.stackNode;
    for (let i2 = 0, l2 = params.length - 1; i2 < l2; i2++) {
      const param = params[i2];
      let isWhile = false, start = null, end = null, name = null, type = null, condition = null, update20 = null;
      if (param.isNode) {
        if (param.getNodeType(builder) === "bool") {
          isWhile = true;
          type = "bool";
          end = param.build(builder, type);
        } else {
          type = "int";
          name = this.getVarName(i2);
          start = "0";
          end = param.build(builder, type);
          condition = "<";
        }
      } else {
        type = param.type || "int";
        name = param.name || this.getVarName(i2);
        start = param.start;
        end = param.end;
        condition = param.condition;
        update20 = param.update;
        if (typeof start === "number")
          start = builder.generateConst(type, start);
        else if (start && start.isNode)
          start = start.build(builder, type);
        if (typeof end === "number")
          end = builder.generateConst(type, end);
        else if (end && end.isNode)
          end = end.build(builder, type);
        if (start !== void 0 && end === void 0) {
          start = start + " - 1";
          end = "0";
          condition = ">=";
        } else if (end !== void 0 && start === void 0) {
          start = "0";
          condition = "<";
        }
        if (condition === void 0) {
          if (Number(start) > Number(end)) {
            condition = ">=";
          } else {
            condition = "<";
          }
        }
      }
      let loopSnippet;
      if (isWhile) {
        loopSnippet = `while ( ${end} )`;
      } else {
        const internalParam = { start, end };
        const startSnippet = internalParam.start;
        const endSnippet = internalParam.end;
        let updateSnippet;
        const deltaOperator = () => condition.includes("<") ? "+=" : "-=";
        if (update20 !== void 0 && update20 !== null) {
          switch (typeof update20) {
            case "function":
              const flow = builder.flowStagesNode(properties.updateNode, "void");
              const snippet = flow.code.replace(/\t|;/g, "");
              updateSnippet = snippet;
              break;
            case "number":
              updateSnippet = name + " " + deltaOperator() + " " + builder.generateConst(type, update20);
              break;
            case "string":
              updateSnippet = name + " " + update20;
              break;
            default:
              if (update20.isNode) {
                updateSnippet = name + " " + deltaOperator() + " " + update20.build(builder);
              } else {
                console.error("THREE.TSL: 'Loop( { update: ... } )' is not a function, string or number.");
                updateSnippet = "break /* invalid update */";
              }
          }
        } else {
          if (type === "int" || type === "uint") {
            update20 = condition.includes("<") ? "++" : "--";
          } else {
            update20 = deltaOperator() + " 1.";
          }
          updateSnippet = name + " " + update20;
        }
        const declarationSnippet = builder.getVar(type, name) + " = " + startSnippet;
        const conditionalSnippet = name + " " + condition + " " + endSnippet;
        loopSnippet = `for ( ${declarationSnippet}; ${conditionalSnippet}; ${updateSnippet} )`;
      }
      builder.addFlowCode((i2 === 0 ? "\n" : "") + builder.tab + loopSnippet + " {\n\n").addFlowTab();
    }
    const stackSnippet = stackNode.build(builder, "void");
    const returnsSnippet = properties.returnsNode ? properties.returnsNode.build(builder) : "";
    builder.removeFlowTab().addFlowCode("\n" + builder.tab + stackSnippet);
    for (let i2 = 0, l2 = this.params.length - 1; i2 < l2; i2++) {
      builder.addFlowCode((i2 === 0 ? "" : builder.tab) + "}\n\n").removeFlowTab();
    }
    builder.addFlowTab();
    return returnsSnippet;
  }
};
var Loop = (...params) => nodeObject(new LoopNode(nodeArray(params, "int"))).toStack();
var Continue = () => expression("continue").toStack();
var Break = () => expression("break").toStack();
var _morphTextures = /* @__PURE__ */ new WeakMap();
var _morphVec4 = new Vector4();
var getMorph = Fn(({ bufferMap, influence, stride, width, depth: depth3, offset }) => {
  const texelIndex = int(vertexIndex).mul(stride).add(offset);
  const y2 = texelIndex.div(width);
  const x2 = texelIndex.sub(y2.mul(width));
  const bufferAttrib = textureLoad(bufferMap, ivec2(x2, y2)).depth(depth3).xyz;
  return bufferAttrib.mul(influence);
});
function getEntry(geometry) {
  const hasMorphPosition = geometry.morphAttributes.position !== void 0;
  const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
  const hasMorphColors = geometry.morphAttributes.color !== void 0;
  const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
  const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
  let entry = _morphTextures.get(geometry);
  if (entry === void 0 || entry.count !== morphTargetsCount) {
    let disposeTexture = function() {
      bufferTexture.dispose();
      _morphTextures.delete(geometry);
      geometry.removeEventListener("dispose", disposeTexture);
    };
    if (entry !== void 0)
      entry.texture.dispose();
    const morphTargets = geometry.morphAttributes.position || [];
    const morphNormals = geometry.morphAttributes.normal || [];
    const morphColors = geometry.morphAttributes.color || [];
    let vertexDataCount = 0;
    if (hasMorphPosition === true)
      vertexDataCount = 1;
    if (hasMorphNormals === true)
      vertexDataCount = 2;
    if (hasMorphColors === true)
      vertexDataCount = 3;
    let width = geometry.attributes.position.count * vertexDataCount;
    let height = 1;
    const maxTextureSize = 4096;
    if (width > maxTextureSize) {
      height = Math.ceil(width / maxTextureSize);
      width = maxTextureSize;
    }
    const buffer3 = new Float32Array(width * height * 4 * morphTargetsCount);
    const bufferTexture = new DataArrayTexture(buffer3, width, height, morphTargetsCount);
    bufferTexture.type = FloatType;
    bufferTexture.needsUpdate = true;
    const vertexDataStride = vertexDataCount * 4;
    for (let i2 = 0; i2 < morphTargetsCount; i2++) {
      const morphTarget = morphTargets[i2];
      const morphNormal = morphNormals[i2];
      const morphColor = morphColors[i2];
      const offset = width * height * 4 * i2;
      for (let j2 = 0; j2 < morphTarget.count; j2++) {
        const stride = j2 * vertexDataStride;
        if (hasMorphPosition === true) {
          _morphVec4.fromBufferAttribute(morphTarget, j2);
          buffer3[offset + stride + 0] = _morphVec4.x;
          buffer3[offset + stride + 1] = _morphVec4.y;
          buffer3[offset + stride + 2] = _morphVec4.z;
          buffer3[offset + stride + 3] = 0;
        }
        if (hasMorphNormals === true) {
          _morphVec4.fromBufferAttribute(morphNormal, j2);
          buffer3[offset + stride + 4] = _morphVec4.x;
          buffer3[offset + stride + 5] = _morphVec4.y;
          buffer3[offset + stride + 6] = _morphVec4.z;
          buffer3[offset + stride + 7] = 0;
        }
        if (hasMorphColors === true) {
          _morphVec4.fromBufferAttribute(morphColor, j2);
          buffer3[offset + stride + 8] = _morphVec4.x;
          buffer3[offset + stride + 9] = _morphVec4.y;
          buffer3[offset + stride + 10] = _morphVec4.z;
          buffer3[offset + stride + 11] = morphColor.itemSize === 4 ? _morphVec4.w : 1;
        }
      }
    }
    entry = {
      count: morphTargetsCount,
      texture: bufferTexture,
      stride: vertexDataCount,
      size: new Vector2(width, height)
    };
    _morphTextures.set(geometry, entry);
    geometry.addEventListener("dispose", disposeTexture);
  }
  return entry;
}
var MorphNode = class extends Node {
  static get type() {
    return "MorphNode";
  }
  /**
   * Constructs a new morph node.
   *
   * @param {Mesh} mesh - The mesh holding the morph targets.
   */
  constructor(mesh) {
    super("void");
    this.mesh = mesh;
    this.morphBaseInfluence = uniform(1);
    this.updateType = NodeUpdateType.OBJECT;
  }
  /**
   * Setups the morph node by assigning the transformed vertex data to predefined node variables.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setup(builder) {
    const { geometry } = builder;
    const hasMorphPosition = geometry.morphAttributes.position !== void 0;
    const hasMorphNormals = geometry.hasAttribute("normal") && geometry.morphAttributes.normal !== void 0;
    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    const { texture: bufferMap, stride, size } = getEntry(geometry);
    if (hasMorphPosition === true)
      positionLocal.mulAssign(this.morphBaseInfluence);
    if (hasMorphNormals === true)
      normalLocal.mulAssign(this.morphBaseInfluence);
    const width = int(size.width);
    Loop(morphTargetsCount, ({ i: i2 }) => {
      const influence = float(0).toVar();
      if (this.mesh.count > 1 && (this.mesh.morphTexture !== null && this.mesh.morphTexture !== void 0)) {
        influence.assign(textureLoad(this.mesh.morphTexture, ivec2(int(i2).add(1), int(instanceIndex))).r);
      } else {
        influence.assign(reference("morphTargetInfluences", "float").element(i2).toVar());
      }
      If(influence.notEqual(0), () => {
        if (hasMorphPosition === true) {
          positionLocal.addAssign(getMorph({
            bufferMap,
            influence,
            stride,
            width,
            depth: i2,
            offset: int(0)
          }));
        }
        if (hasMorphNormals === true) {
          normalLocal.addAssign(getMorph({
            bufferMap,
            influence,
            stride,
            width,
            depth: i2,
            offset: int(1)
          }));
        }
      });
    });
  }
  /**
   * Updates the state of the morphed mesh by updating the base influence.
   *
   * @param {NodeFrame} frame - The current node frame.
   */
  update() {
    const morphBaseInfluence = this.morphBaseInfluence;
    if (this.mesh.geometry.morphTargetsRelative) {
      morphBaseInfluence.value = 1;
    } else {
      morphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce((a2, b) => a2 + b, 0);
    }
  }
};
var morphReference = nodeProxy(MorphNode).setParameterLength(1);
var LightingNode = class extends Node {
  static get type() {
    return "LightingNode";
  }
  /**
   * Constructs a new lighting node.
   */
  constructor() {
    super("vec3");
    this.isLightingNode = true;
  }
};
var AONode = class extends LightingNode {
  static get type() {
    return "AONode";
  }
  /**
   * Constructs a new AO node.
   *
   * @param {?Node<float>} [aoNode=null] - The ambient occlusion node.
   */
  constructor(aoNode = null) {
    super();
    this.aoNode = aoNode;
  }
  setup(builder) {
    builder.context.ambientOcclusion.mulAssign(this.aoNode);
  }
};
var LightingContextNode = class extends ContextNode {
  static get type() {
    return "LightingContextNode";
  }
  /**
   * Constructs a new lighting context node.
   *
   * @param {LightsNode} lightsNode - The lights node.
   * @param {?LightingModel} [lightingModel=null] - The current lighting model.
   * @param {?Node<vec3>} [backdropNode=null] - A backdrop node.
   * @param {?Node<float>} [backdropAlphaNode=null] - A backdrop alpha node.
   */
  constructor(lightsNode, lightingModel = null, backdropNode = null, backdropAlphaNode = null) {
    super(lightsNode);
    this.lightingModel = lightingModel;
    this.backdropNode = backdropNode;
    this.backdropAlphaNode = backdropAlphaNode;
    this._value = null;
  }
  /**
   * Returns a lighting context object.
   *
   * @return {{
   * radiance: Node<vec3>,
   * irradiance: Node<vec3>,
   * iblIrradiance: Node<vec3>,
   * ambientOcclusion: Node<float>,
   * reflectedLight: {directDiffuse: Node<vec3>, directSpecular: Node<vec3>, indirectDiffuse: Node<vec3>, indirectSpecular: Node<vec3>},
   * backdrop: Node<vec3>,
   * backdropAlpha: Node<float>
   * }} The lighting context object.
   */
  getContext() {
    const { backdropNode, backdropAlphaNode } = this;
    const directDiffuse = vec3().toVar("directDiffuse"), directSpecular = vec3().toVar("directSpecular"), indirectDiffuse = vec3().toVar("indirectDiffuse"), indirectSpecular = vec3().toVar("indirectSpecular");
    const reflectedLight = {
      directDiffuse,
      directSpecular,
      indirectDiffuse,
      indirectSpecular
    };
    const context3 = {
      radiance: vec3().toVar("radiance"),
      irradiance: vec3().toVar("irradiance"),
      iblIrradiance: vec3().toVar("iblIrradiance"),
      ambientOcclusion: float(1).toVar("ambientOcclusion"),
      reflectedLight,
      backdrop: backdropNode,
      backdropAlpha: backdropAlphaNode
    };
    return context3;
  }
  setup(builder) {
    this.value = this._value || (this._value = this.getContext());
    this.value.lightingModel = this.lightingModel || builder.context.lightingModel;
    return super.setup(builder);
  }
};
var lightingContext = nodeProxy(LightingContextNode);
var IrradianceNode = class extends LightingNode {
  static get type() {
    return "IrradianceNode";
  }
  /**
   * Constructs a new irradiance node.
   *
   * @param {Node<vec3>} node - A node contributing irradiance.
   */
  constructor(node) {
    super();
    this.node = node;
  }
  setup(builder) {
    builder.context.irradiance.addAssign(this.node);
  }
};
var _size$5 = new Vector2();
var ViewportTextureNode = class extends TextureNode {
  static get type() {
    return "ViewportTextureNode";
  }
  /**
   * Constructs a new viewport texture node.
   *
   * @param {Node} [uvNode=screenUV] - The uv node.
   * @param {?Node} [levelNode=null] - The level node.
   * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.
   */
  constructor(uvNode = screenUV, levelNode = null, framebufferTexture = null) {
    let defaultFramebuffer = null;
    if (framebufferTexture === null) {
      defaultFramebuffer = new FramebufferTexture();
      defaultFramebuffer.minFilter = LinearMipmapLinearFilter;
      framebufferTexture = defaultFramebuffer;
    } else {
      defaultFramebuffer = framebufferTexture;
    }
    super(framebufferTexture, uvNode, levelNode);
    this.generateMipmaps = false;
    this.defaultFramebuffer = defaultFramebuffer;
    this.isOutputTextureNode = true;
    this.updateBeforeType = NodeUpdateType.FRAME;
    this._cacheTextures = /* @__PURE__ */ new WeakMap();
  }
  /**
   * This methods returns a texture for the given render target reference.
   *
   * To avoid rendering errors, `ViewportTextureNode` must use unique framebuffer textures
   * for different render contexts.
   *
   * @param {?RenderTarget} [reference=null] - The render target reference.
   * @return {Texture} The framebuffer texture.
   */
  getTextureForReference(reference3 = null) {
    let defaultFramebuffer;
    let cacheTextures;
    if (this.referenceNode) {
      defaultFramebuffer = this.referenceNode.defaultFramebuffer;
      cacheTextures = this.referenceNode._cacheTextures;
    } else {
      defaultFramebuffer = this.defaultFramebuffer;
      cacheTextures = this._cacheTextures;
    }
    if (reference3 === null) {
      return defaultFramebuffer;
    }
    if (cacheTextures.has(reference3) === false) {
      const framebufferTexture = defaultFramebuffer.clone();
      cacheTextures.set(reference3, framebufferTexture);
    }
    return cacheTextures.get(reference3);
  }
  updateReference(frame) {
    const renderTarget = frame.renderer.getRenderTarget();
    this.value = this.getTextureForReference(renderTarget);
    return this.value;
  }
  updateBefore(frame) {
    const renderer3 = frame.renderer;
    const renderTarget = renderer3.getRenderTarget();
    if (renderTarget === null) {
      renderer3.getDrawingBufferSize(_size$5);
    } else {
      _size$5.set(renderTarget.width, renderTarget.height);
    }
    const framebufferTexture = this.getTextureForReference(renderTarget);
    if (framebufferTexture.image.width !== _size$5.width || framebufferTexture.image.height !== _size$5.height) {
      framebufferTexture.image.width = _size$5.width;
      framebufferTexture.image.height = _size$5.height;
      framebufferTexture.needsUpdate = true;
    }
    const currentGenerateMipmaps = framebufferTexture.generateMipmaps;
    framebufferTexture.generateMipmaps = this.generateMipmaps;
    renderer3.copyFramebufferToTexture(framebufferTexture);
    framebufferTexture.generateMipmaps = currentGenerateMipmaps;
  }
  clone() {
    const viewportTextureNode = new this.constructor(this.uvNode, this.levelNode, this.value);
    viewportTextureNode.generateMipmaps = this.generateMipmaps;
    return viewportTextureNode;
  }
};
var viewportTexture = nodeProxy(ViewportTextureNode).setParameterLength(0, 3);
var viewportMipTexture = nodeProxy(ViewportTextureNode, null, null, { generateMipmaps: true }).setParameterLength(0, 3);
var _sharedDepthbuffer = null;
var ViewportDepthTextureNode = class extends ViewportTextureNode {
  static get type() {
    return "ViewportDepthTextureNode";
  }
  /**
   * Constructs a new viewport depth texture node.
   *
   * @param {Node} [uvNode=screenUV] - The uv node.
   * @param {?Node} [levelNode=null] - The level node.
   */
  constructor(uvNode = screenUV, levelNode = null) {
    if (_sharedDepthbuffer === null) {
      _sharedDepthbuffer = new DepthTexture();
    }
    super(uvNode, levelNode, _sharedDepthbuffer);
  }
  /**
   * Overwritten so the method always returns the unique shared
   * depth texture.
   *
   * @return {DepthTexture} The shared depth texture.
   */
  getTextureForReference() {
    return _sharedDepthbuffer;
  }
};
var viewportDepthTexture = nodeProxy(ViewportDepthTextureNode).setParameterLength(0, 2);
var ViewportDepthNode = class _ViewportDepthNode extends Node {
  static get type() {
    return "ViewportDepthNode";
  }
  /**
   * Constructs a new viewport depth node.
   *
   * @param {('depth'|'depthBase'|'linearDepth')} scope - The node's scope.
   * @param {?Node} [valueNode=null] - The value node.
   */
  constructor(scope, valueNode = null) {
    super("float");
    this.scope = scope;
    this.valueNode = valueNode;
    this.isViewportDepthNode = true;
  }
  generate(builder) {
    const { scope } = this;
    if (scope === _ViewportDepthNode.DEPTH_BASE) {
      return builder.getFragDepth();
    }
    return super.generate(builder);
  }
  setup({ camera: camera3 }) {
    const { scope } = this;
    const value = this.valueNode;
    let node = null;
    if (scope === _ViewportDepthNode.DEPTH_BASE) {
      if (value !== null) {
        node = depthBase().assign(value);
      }
    } else if (scope === _ViewportDepthNode.DEPTH) {
      if (camera3.isPerspectiveCamera) {
        node = viewZToPerspectiveDepth(positionView.z, cameraNear, cameraFar);
      } else {
        node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
      }
    } else if (scope === _ViewportDepthNode.LINEAR_DEPTH) {
      if (value !== null) {
        if (camera3.isPerspectiveCamera) {
          const viewZ = perspectiveDepthToViewZ(value, cameraNear, cameraFar);
          node = viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);
        } else {
          node = value;
        }
      } else {
        node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
      }
    }
    return node;
  }
};
ViewportDepthNode.DEPTH_BASE = "depthBase";
ViewportDepthNode.DEPTH = "depth";
ViewportDepthNode.LINEAR_DEPTH = "linearDepth";
var viewZToOrthographicDepth = (viewZ, near, far) => viewZ.add(near).div(near.sub(far));
var orthographicDepthToViewZ = (depth3, near, far) => near.sub(far).mul(depth3).sub(near);
var viewZToPerspectiveDepth = (viewZ, near, far) => near.add(viewZ).mul(far).div(far.sub(near).mul(viewZ));
var perspectiveDepthToViewZ = (depth3, near, far) => near.mul(far).div(far.sub(near).mul(depth3).sub(far));
var viewZToLogarithmicDepth = (viewZ, near, far) => {
  near = near.max(1e-6).toVar();
  const numerator = log2(viewZ.negate().div(near));
  const denominator = log2(far.div(near));
  return numerator.div(denominator);
};
var logarithmicDepthToViewZ = (depth3, near, far) => {
  const exponent = depth3.mul(log(far.div(near)));
  return float(Math.E).pow(exponent).mul(near).negate();
};
var depthBase = nodeProxy(ViewportDepthNode, ViewportDepthNode.DEPTH_BASE);
var depth = nodeImmutable(ViewportDepthNode, ViewportDepthNode.DEPTH);
var linearDepth = nodeProxy(ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH).setParameterLength(0, 1);
var viewportLinearDepth = linearDepth(viewportDepthTexture());
depth.assign = (value) => depthBase(value);
var ClippingNode = class _ClippingNode extends Node {
  static get type() {
    return "ClippingNode";
  }
  /**
   * Constructs a new clipping node.
   *
   * @param {('default'|'hardware'|'alphaToCoverage')} [scope='default'] - The node's scope. Similar to other nodes,
   * the selected scope influences the behavior of the node and what type of code is generated.
   */
  constructor(scope = _ClippingNode.DEFAULT) {
    super();
    this.scope = scope;
  }
  /**
   * Setups the node depending on the selected scope.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node} The result node.
   */
  setup(builder) {
    super.setup(builder);
    const clippingContext = builder.clippingContext;
    const { intersectionPlanes, unionPlanes } = clippingContext;
    this.hardwareClipping = builder.material.hardwareClipping;
    if (this.scope === _ClippingNode.ALPHA_TO_COVERAGE) {
      return this.setupAlphaToCoverage(intersectionPlanes, unionPlanes);
    } else if (this.scope === _ClippingNode.HARDWARE) {
      return this.setupHardwareClipping(unionPlanes, builder);
    } else {
      return this.setupDefault(intersectionPlanes, unionPlanes);
    }
  }
  /**
   * Setups alpha to coverage.
   *
   * @param {Array<Vector4>} intersectionPlanes - The intersection planes.
   * @param {Array<Vector4>} unionPlanes - The union planes.
   * @return {Node} The result node.
   */
  setupAlphaToCoverage(intersectionPlanes, unionPlanes) {
    return Fn(() => {
      const distanceToPlane = float().toVar("distanceToPlane");
      const distanceGradient = float().toVar("distanceToGradient");
      const clipOpacity = float(1).toVar("clipOpacity");
      const numUnionPlanes = unionPlanes.length;
      if (this.hardwareClipping === false && numUnionPlanes > 0) {
        const clippingPlanes = uniformArray(unionPlanes).setGroup(renderGroup);
        Loop(numUnionPlanes, ({ i: i2 }) => {
          const plane = clippingPlanes.element(i2);
          distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));
          distanceGradient.assign(distanceToPlane.fwidth().div(2));
          clipOpacity.mulAssign(smoothstep(distanceGradient.negate(), distanceGradient, distanceToPlane));
        });
      }
      const numIntersectionPlanes = intersectionPlanes.length;
      if (numIntersectionPlanes > 0) {
        const clippingPlanes = uniformArray(intersectionPlanes).setGroup(renderGroup);
        const intersectionClipOpacity = float(1).toVar("intersectionClipOpacity");
        Loop(numIntersectionPlanes, ({ i: i2 }) => {
          const plane = clippingPlanes.element(i2);
          distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));
          distanceGradient.assign(distanceToPlane.fwidth().div(2));
          intersectionClipOpacity.mulAssign(smoothstep(distanceGradient.negate(), distanceGradient, distanceToPlane).oneMinus());
        });
        clipOpacity.mulAssign(intersectionClipOpacity.oneMinus());
      }
      diffuseColor.a.mulAssign(clipOpacity);
      diffuseColor.a.equal(0).discard();
    })();
  }
  /**
   * Setups the default clipping.
   *
   * @param {Array<Vector4>} intersectionPlanes - The intersection planes.
   * @param {Array<Vector4>} unionPlanes - The union planes.
   * @return {Node} The result node.
   */
  setupDefault(intersectionPlanes, unionPlanes) {
    return Fn(() => {
      const numUnionPlanes = unionPlanes.length;
      if (this.hardwareClipping === false && numUnionPlanes > 0) {
        const clippingPlanes = uniformArray(unionPlanes).setGroup(renderGroup);
        Loop(numUnionPlanes, ({ i: i2 }) => {
          const plane = clippingPlanes.element(i2);
          positionView.dot(plane.xyz).greaterThan(plane.w).discard();
        });
      }
      const numIntersectionPlanes = intersectionPlanes.length;
      if (numIntersectionPlanes > 0) {
        const clippingPlanes = uniformArray(intersectionPlanes).setGroup(renderGroup);
        const clipped = bool(true).toVar("clipped");
        Loop(numIntersectionPlanes, ({ i: i2 }) => {
          const plane = clippingPlanes.element(i2);
          clipped.assign(positionView.dot(plane.xyz).greaterThan(plane.w).and(clipped));
        });
        clipped.discard();
      }
    })();
  }
  /**
   * Setups hardware clipping.
   *
   * @param {Array<Vector4>} unionPlanes - The union planes.
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node} The result node.
   */
  setupHardwareClipping(unionPlanes, builder) {
    const numUnionPlanes = unionPlanes.length;
    builder.enableHardwareClipping(numUnionPlanes);
    return Fn(() => {
      const clippingPlanes = uniformArray(unionPlanes).setGroup(renderGroup);
      const hw_clip_distances = builtin(builder.getClipDistance());
      Loop(numUnionPlanes, ({ i: i2 }) => {
        const plane = clippingPlanes.element(i2);
        const distance4 = positionView.dot(plane.xyz).sub(plane.w).negate();
        hw_clip_distances.element(i2).assign(distance4);
      });
    })();
  }
};
ClippingNode.ALPHA_TO_COVERAGE = "alphaToCoverage";
ClippingNode.DEFAULT = "default";
ClippingNode.HARDWARE = "hardware";
var clipping = () => nodeObject(new ClippingNode());
var clippingAlpha = () => nodeObject(new ClippingNode(ClippingNode.ALPHA_TO_COVERAGE));
var hardwareClipping = () => nodeObject(new ClippingNode(ClippingNode.HARDWARE));
var ALPHA_HASH_SCALE = 0.05;
var hash2D = Fn(([value]) => {
  return fract(mul(1e4, sin2(mul(17, value.x).add(mul(0.1, value.y)))).mul(add3(0.1, abs(sin2(mul(13, value.y).add(value.x))))));
});
var hash3D = Fn(([value]) => {
  return hash2D(vec2(hash2D(value.xy), value.z));
});
var getAlphaHashThreshold = Fn(([position]) => {
  const maxDeriv = max$1(
    length(dFdx(position.xyz)),
    length(dFdy(position.xyz))
  );
  const pixScale = float(1).div(float(ALPHA_HASH_SCALE).mul(maxDeriv)).toVar("pixScale");
  const pixScales = vec2(
    exp2(floor(log2(pixScale))),
    exp2(ceil(log2(pixScale)))
  );
  const alpha = vec2(
    hash3D(floor(pixScales.x.mul(position.xyz))),
    hash3D(floor(pixScales.y.mul(position.xyz)))
  );
  const lerpFactor = fract(log2(pixScale));
  const x2 = add3(mul(lerpFactor.oneMinus(), alpha.x), mul(lerpFactor, alpha.y));
  const a2 = min$1(lerpFactor, lerpFactor.oneMinus());
  const cases = vec3(
    x2.mul(x2).div(mul(2, a2).mul(sub(1, a2))),
    x2.sub(mul(0.5, a2)).div(sub(1, a2)),
    sub(1, sub(1, x2).mul(sub(1, x2)).div(mul(2, a2).mul(sub(1, a2))))
  );
  const threshold = x2.lessThan(a2.oneMinus()).select(x2.lessThan(a2).select(cases.x, cases.y), cases.z);
  return clamp(threshold, 1e-6, 1);
}).setLayout({
  name: "getAlphaHashThreshold",
  type: "float",
  inputs: [
    { name: "position", type: "vec3" }
  ]
});
var VertexColorNode = class extends AttributeNode {
  static get type() {
    return "VertexColorNode";
  }
  /**
   * Constructs a new vertex color node.
   *
   * @param {number} index - The attribute index.
   */
  constructor(index6) {
    super(null, "vec4");
    this.isVertexColorNode = true;
    this.index = index6;
  }
  /**
   * Overwrites the default implementation by honoring the attribute index.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The attribute name.
   */
  getAttributeName() {
    const index6 = this.index;
    return "color" + (index6 > 0 ? index6 : "");
  }
  generate(builder) {
    const attributeName = this.getAttributeName(builder);
    const geometryAttribute = builder.hasGeometryAttribute(attributeName);
    let result;
    if (geometryAttribute === true) {
      result = super.generate(builder);
    } else {
      result = builder.generateConst(this.nodeType, new Vector4(1, 1, 1, 1));
    }
    return result;
  }
  serialize(data) {
    super.serialize(data);
    data.index = this.index;
  }
  deserialize(data) {
    super.deserialize(data);
    this.index = data.index;
  }
};
var vertexColor = (index6 = 0) => nodeObject(new VertexColorNode(index6));
var blendBurn = Fn(([base, blend]) => {
  return min$1(1, base.oneMinus().div(blend)).oneMinus();
}).setLayout({
  name: "blendBurn",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var blendDodge = Fn(([base, blend]) => {
  return min$1(base.div(blend.oneMinus()), 1);
}).setLayout({
  name: "blendDodge",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var blendScreen = Fn(([base, blend]) => {
  return base.oneMinus().mul(blend.oneMinus()).oneMinus();
}).setLayout({
  name: "blendScreen",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var blendOverlay = Fn(([base, blend]) => {
  return mix(base.mul(2).mul(blend), base.oneMinus().mul(2).mul(blend.oneMinus()).oneMinus(), step(0.5, base));
}).setLayout({
  name: "blendOverlay",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var blendColor = Fn(([base, blend]) => {
  const outAlpha = blend.a.add(base.a.mul(blend.a.oneMinus()));
  return vec4(blend.rgb.mul(blend.a).add(base.rgb.mul(base.a).mul(blend.a.oneMinus())).div(outAlpha), outAlpha);
}).setLayout({
  name: "blendColor",
  type: "vec4",
  inputs: [
    { name: "base", type: "vec4" },
    { name: "blend", type: "vec4" }
  ]
});
var premultiplyAlpha = Fn(([color4]) => {
  return vec4(color4.rgb.mul(color4.a), color4.a);
}, { color: "vec4", return: "vec4" });
var unpremultiplyAlpha = Fn(([color4]) => {
  If(color4.a.equal(0), () => vec4(0));
  return vec4(color4.rgb.div(color4.a), color4.a);
}, { color: "vec4", return: "vec4" });
var burn = (...params) => {
  console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.');
  return blendBurn(params);
};
var dodge = (...params) => {
  console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.');
  return blendDodge(params);
};
var screen = (...params) => {
  console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.');
  return blendScreen(params);
};
var overlay = (...params) => {
  console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.');
  return blendOverlay(params);
};
var NodeMaterial = class extends Material {
  static get type() {
    return "NodeMaterial";
  }
  /**
   * Represents the type of the node material.
   *
   * @type {string}
   */
  get type() {
    return this.constructor.type;
  }
  set type(_value) {
  }
  /**
   * Constructs a new node material.
   */
  constructor() {
    super();
    this.isNodeMaterial = true;
    this.fog = true;
    this.lights = false;
    this.hardwareClipping = false;
    this.lightsNode = null;
    this.envNode = null;
    this.aoNode = null;
    this.colorNode = null;
    this.normalNode = null;
    this.opacityNode = null;
    this.backdropNode = null;
    this.backdropAlphaNode = null;
    this.alphaTestNode = null;
    this.maskNode = null;
    this.positionNode = null;
    this.geometryNode = null;
    this.depthNode = null;
    this.receivedShadowPositionNode = null;
    this.castShadowPositionNode = null;
    this.receivedShadowNode = null;
    this.castShadowNode = null;
    this.outputNode = null;
    this.mrtNode = null;
    this.fragmentNode = null;
    this.vertexNode = null;
    Object.defineProperty(this, "shadowPositionNode", {
      // @deprecated, r176
      get: () => {
        return this.receivedShadowPositionNode;
      },
      set: (value) => {
        console.warn('THREE.NodeMaterial: ".shadowPositionNode" was renamed to ".receivedShadowPositionNode".');
        this.receivedShadowPositionNode = value;
      }
    });
  }
  /**
   * Allows to define a custom cache key that influence the material key computation
   * for render objects.
   *
   * @return {string} The custom cache key.
   */
  customProgramCacheKey() {
    return this.type + getCacheKey$1(this);
  }
  /**
   * Builds this material with the given node builder.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  build(builder) {
    this.setup(builder);
  }
  /**
   * Setups a node material observer with the given builder.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {NodeMaterialObserver} The node material observer.
   */
  setupObserver(builder) {
    return new NodeMaterialObserver(builder);
  }
  /**
   * Setups the vertex and fragment stage of this node material.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setup(builder) {
    builder.context.setupNormal = () => subBuild(this.setupNormal(builder), "NORMAL", "vec3");
    builder.context.setupPositionView = () => this.setupPositionView(builder);
    builder.context.setupModelViewProjection = () => this.setupModelViewProjection(builder);
    const renderer3 = builder.renderer;
    const renderTarget = renderer3.getRenderTarget();
    builder.addStack();
    const mvp = subBuild(this.setupVertex(builder), "VERTEX");
    const vertexNode = this.vertexNode || mvp;
    builder.stack.outputNode = vertexNode;
    this.setupHardwareClipping(builder);
    if (this.geometryNode !== null) {
      builder.stack.outputNode = builder.stack.outputNode.bypass(this.geometryNode);
    }
    builder.addFlow("vertex", builder.removeStack());
    builder.addStack();
    let resultNode;
    const clippingNode = this.setupClipping(builder);
    if (this.depthWrite === true || this.depthTest === true) {
      if (renderTarget !== null) {
        if (renderTarget.depthBuffer === true)
          this.setupDepth(builder);
      } else {
        if (renderer3.depth === true)
          this.setupDepth(builder);
      }
    }
    if (this.fragmentNode === null) {
      this.setupDiffuseColor(builder);
      this.setupVariants(builder);
      const outgoingLightNode = this.setupLighting(builder);
      if (clippingNode !== null)
        builder.stack.add(clippingNode);
      const basicOutput = vec4(outgoingLightNode, diffuseColor.a).max(0);
      resultNode = this.setupOutput(builder, basicOutput);
      output.assign(resultNode);
      const isCustomOutput = this.outputNode !== null;
      if (isCustomOutput)
        resultNode = this.outputNode;
      if (renderTarget !== null) {
        const mrt3 = renderer3.getMRT();
        const materialMRT = this.mrtNode;
        if (mrt3 !== null) {
          if (isCustomOutput)
            output.assign(resultNode);
          resultNode = mrt3;
          if (materialMRT !== null) {
            resultNode = mrt3.merge(materialMRT);
          }
        } else if (materialMRT !== null) {
          resultNode = materialMRT;
        }
      }
    } else {
      let fragmentNode = this.fragmentNode;
      if (fragmentNode.isOutputStructNode !== true) {
        fragmentNode = vec4(fragmentNode);
      }
      resultNode = this.setupOutput(builder, fragmentNode);
    }
    builder.stack.outputNode = resultNode;
    builder.addFlow("fragment", builder.removeStack());
    builder.observer = this.setupObserver(builder);
  }
  /**
   * Setups the clipping node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {ClippingNode} The clipping node.
   */
  setupClipping(builder) {
    if (builder.clippingContext === null)
      return null;
    const { unionPlanes, intersectionPlanes } = builder.clippingContext;
    let result = null;
    if (unionPlanes.length > 0 || intersectionPlanes.length > 0) {
      const samples = builder.renderer.samples;
      if (this.alphaToCoverage && samples > 1) {
        result = clippingAlpha();
      } else {
        builder.stack.add(clipping());
      }
    }
    return result;
  }
  /**
   * Setups the hardware clipping if available on the current device.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupHardwareClipping(builder) {
    this.hardwareClipping = false;
    if (builder.clippingContext === null)
      return;
    const candidateCount = builder.clippingContext.unionPlanes.length;
    if (candidateCount > 0 && candidateCount <= 8 && builder.isAvailable("clipDistance")) {
      builder.stack.add(hardwareClipping());
      this.hardwareClipping = true;
    }
    return;
  }
  /**
   * Setups the depth of this material.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupDepth(builder) {
    const { renderer: renderer3, camera: camera3 } = builder;
    let depthNode = this.depthNode;
    if (depthNode === null) {
      const mrt3 = renderer3.getMRT();
      if (mrt3 && mrt3.has("depth")) {
        depthNode = mrt3.get("depth");
      } else if (renderer3.logarithmicDepthBuffer === true) {
        if (camera3.isPerspectiveCamera) {
          depthNode = viewZToLogarithmicDepth(positionView.z, cameraNear, cameraFar);
        } else {
          depthNode = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
        }
      }
    }
    if (depthNode !== null) {
      depth.assign(depthNode).toStack();
    }
  }
  /**
   * Setups the position node in view space. This method exists
   * so derived node materials can modify the implementation e.g. sprite materials.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec3>} The position in view space.
   */
  setupPositionView() {
    return modelViewMatrix.mul(positionLocal).xyz;
  }
  /**
   * Setups the position in clip space.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec4>} The position in view space.
   */
  setupModelViewProjection() {
    return cameraProjectionMatrix.mul(positionView);
  }
  /**
   * Setups the logic for the vertex stage.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec4>} The position in clip space.
   */
  setupVertex(builder) {
    builder.addStack();
    this.setupPosition(builder);
    builder.context.vertex = builder.removeStack();
    return modelViewProjection;
  }
  /**
   * Setups the computation of the position in local space.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec3>} The position in local space.
   */
  setupPosition(builder) {
    const { object, geometry } = builder;
    if (geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color) {
      morphReference(object).toStack();
    }
    if (object.isSkinnedMesh === true) {
      skinning(object).toStack();
    }
    if (this.displacementMap) {
      const displacementMap = materialReference("displacementMap", "texture");
      const displacementScale = materialReference("displacementScale", "float");
      const displacementBias = materialReference("displacementBias", "float");
      positionLocal.addAssign(normalLocal.normalize().mul(displacementMap.x.mul(displacementScale).add(displacementBias)));
    }
    if (object.isBatchedMesh) {
      batch(object).toStack();
    }
    if (object.isInstancedMesh && object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true) {
      instancedMesh(object).toStack();
    }
    if (this.positionNode !== null) {
      positionLocal.assign(subBuild(this.positionNode, "POSITION", "vec3"));
    }
    return positionLocal;
  }
  /**
   * Setups the computation of the material's diffuse color.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {BufferGeometry} geometry - The geometry.
   */
  setupDiffuseColor({ object, geometry }) {
    if (this.maskNode !== null) {
      bool(this.maskNode).not().discard();
    }
    let colorNode = this.colorNode ? vec4(this.colorNode) : materialColor;
    if (this.vertexColors === true && geometry.hasAttribute("color")) {
      colorNode = colorNode.mul(vertexColor());
    }
    if (object.instanceColor) {
      const instanceColor = varyingProperty("vec3", "vInstanceColor");
      colorNode = instanceColor.mul(colorNode);
    }
    if (object.isBatchedMesh && object._colorsTexture) {
      const batchColor = varyingProperty("vec3", "vBatchColor");
      colorNode = batchColor.mul(colorNode);
    }
    diffuseColor.assign(colorNode);
    const opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;
    diffuseColor.a.assign(diffuseColor.a.mul(opacityNode));
    let alphaTestNode = null;
    if (this.alphaTestNode !== null || this.alphaTest > 0) {
      alphaTestNode = this.alphaTestNode !== null ? float(this.alphaTestNode) : materialAlphaTest;
      diffuseColor.a.lessThanEqual(alphaTestNode).discard();
    }
    if (this.alphaHash === true) {
      diffuseColor.a.lessThan(getAlphaHashThreshold(positionLocal)).discard();
    }
    const isOpaque = this.transparent === false && this.blending === NormalBlending && this.alphaToCoverage === false;
    if (isOpaque) {
      diffuseColor.a.assign(1);
    } else if (alphaTestNode === null) {
      diffuseColor.a.lessThanEqual(0).discard();
    }
  }
  /**
   * Abstract interface method that can be implemented by derived materials
   * to setup material-specific node variables.
   *
   * @abstract
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupVariants() {
  }
  /**
   * Setups the outgoing light node variable
   *
   * @return {Node<vec3>} The outgoing light node.
   */
  setupOutgoingLight() {
    return this.lights === true ? vec3(0) : diffuseColor.rgb;
  }
  /**
   * Setups the normal node from the material.
   *
   * @return {Node<vec3>} The normal node.
   */
  setupNormal() {
    return this.normalNode ? vec3(this.normalNode) : materialNormal;
  }
  /**
   * Setups the environment node from the material.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec4>} The environment node.
   */
  setupEnvironment() {
    let node = null;
    if (this.envNode) {
      node = this.envNode;
    } else if (this.envMap) {
      node = this.envMap.isCubeTexture ? materialReference("envMap", "cubeTexture") : materialReference("envMap", "texture");
    }
    return node;
  }
  /**
   * Setups the light map node from the material.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec3>} The light map node.
   */
  setupLightMap(builder) {
    let node = null;
    if (builder.material.lightMap) {
      node = new IrradianceNode(materialLightMap);
    }
    return node;
  }
  /**
   * Setups the lights node based on the scene, environment and material.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {LightsNode} The lights node.
   */
  setupLights(builder) {
    const materialLightsNode = [];
    const envNode = this.setupEnvironment(builder);
    if (envNode && envNode.isLightingNode) {
      materialLightsNode.push(envNode);
    }
    const lightMapNode = this.setupLightMap(builder);
    if (lightMapNode && lightMapNode.isLightingNode) {
      materialLightsNode.push(lightMapNode);
    }
    if (this.aoNode !== null || builder.material.aoMap) {
      const aoNode = this.aoNode !== null ? this.aoNode : materialAO;
      materialLightsNode.push(new AONode(aoNode));
    }
    let lightsN = this.lightsNode || builder.lightsNode;
    if (materialLightsNode.length > 0) {
      lightsN = builder.renderer.lighting.createNode([...lightsN.getLights(), ...materialLightsNode]);
    }
    return lightsN;
  }
  /**
   * This method should be implemented by most derived materials
   * since it defines the material's lighting model.
   *
   * @abstract
   * @param {NodeBuilder} builder - The current node builder.
   * @return {LightingModel} The lighting model.
   */
  setupLightingModel() {
  }
  /**
   * Setups the outgoing light node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec3>} The outgoing light node.
   */
  setupLighting(builder) {
    const { material } = builder;
    const { backdropNode, backdropAlphaNode, emissiveNode } = this;
    const lights3 = this.lights === true || this.lightsNode !== null;
    const lightsNode = lights3 ? this.setupLights(builder) : null;
    let outgoingLightNode = this.setupOutgoingLight(builder);
    if (lightsNode && lightsNode.getScope().hasLights) {
      const lightingModel = this.setupLightingModel(builder) || null;
      outgoingLightNode = lightingContext(lightsNode, lightingModel, backdropNode, backdropAlphaNode);
    } else if (backdropNode !== null) {
      outgoingLightNode = vec3(backdropAlphaNode !== null ? mix(outgoingLightNode, backdropNode, backdropAlphaNode) : backdropNode);
    }
    if (emissiveNode && emissiveNode.isNode === true || material.emissive && material.emissive.isColor === true) {
      emissive.assign(vec3(emissiveNode ? emissiveNode : materialEmissive));
      outgoingLightNode = outgoingLightNode.add(emissive);
    }
    return outgoingLightNode;
  }
  /**
   * Setup the fog.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node<vec4>} outputNode - The existing output node.
   * @return {Node<vec4>} The output node.
   */
  setupFog(builder, outputNode) {
    const fogNode = builder.fogNode;
    if (fogNode) {
      output.assign(outputNode);
      outputNode = vec4(fogNode.toVar());
    }
    return outputNode;
  }
  /**
   * Setups premultiplied alpha.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node<vec4>} outputNode - The existing output node.
   * @return {Node<vec4>} The output node.
   */
  setupPremultipliedAlpha(builder, outputNode) {
    return premultiplyAlpha(outputNode);
  }
  /**
   * Setups the output node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node<vec4>} outputNode - The existing output node.
   * @return {Node<vec4>} The output node.
   */
  setupOutput(builder, outputNode) {
    if (this.fog === true) {
      outputNode = this.setupFog(builder, outputNode);
    }
    if (this.premultipliedAlpha === true) {
      outputNode = this.setupPremultipliedAlpha(builder, outputNode);
    }
    return outputNode;
  }
  /**
   * Most classic material types have a node pendant e.g. for `MeshBasicMaterial`
   * there is `MeshBasicNodeMaterial`. This utility method is intended for
   * defining all material properties of the classic type in the node type.
   *
   * @param {Material} material - The material to copy properties with their values to this node material.
   */
  setDefaultValues(material) {
    for (const property3 in material) {
      const value = material[property3];
      if (this[property3] === void 0) {
        this[property3] = value;
        if (value && value.clone)
          this[property3] = value.clone();
      }
    }
    const descriptors = Object.getOwnPropertyDescriptors(material.constructor.prototype);
    for (const key in descriptors) {
      if (Object.getOwnPropertyDescriptor(this.constructor.prototype, key) === void 0 && descriptors[key].get !== void 0) {
        Object.defineProperty(this.constructor.prototype, key, descriptors[key]);
      }
    }
  }
  /**
   * Serializes this material to JSON.
   *
   * @param {?(Object|string)} meta - The meta information for serialization.
   * @return {Object} The serialized node.
   */
  toJSON(meta) {
    const isRoot = meta === void 0 || typeof meta === "string";
    if (isRoot) {
      meta = {
        textures: {},
        images: {},
        nodes: {}
      };
    }
    const data = Material.prototype.toJSON.call(this, meta);
    const nodeChildren = getNodeChildren(this);
    data.inputNodes = {};
    for (const { property: property3, childNode } of nodeChildren) {
      data.inputNodes[property3] = childNode.toJSON(meta).uuid;
    }
    function extractFromCache(cache3) {
      const values = [];
      for (const key in cache3) {
        const data2 = cache3[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRoot) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const nodes = extractFromCache(meta.nodes);
      if (textures.length > 0)
        data.textures = textures;
      if (images.length > 0)
        data.images = images;
      if (nodes.length > 0)
        data.nodes = nodes;
    }
    return data;
  }
  /**
   * Copies the properties of the given node material to this instance.
   *
   * @param {NodeMaterial} source - The material to copy.
   * @return {NodeMaterial} A reference to this node material.
   */
  copy(source) {
    this.lightsNode = source.lightsNode;
    this.envNode = source.envNode;
    this.colorNode = source.colorNode;
    this.normalNode = source.normalNode;
    this.opacityNode = source.opacityNode;
    this.backdropNode = source.backdropNode;
    this.backdropAlphaNode = source.backdropAlphaNode;
    this.alphaTestNode = source.alphaTestNode;
    this.maskNode = source.maskNode;
    this.positionNode = source.positionNode;
    this.geometryNode = source.geometryNode;
    this.depthNode = source.depthNode;
    this.receivedShadowPositionNode = source.receivedShadowPositionNode;
    this.castShadowPositionNode = source.castShadowPositionNode;
    this.receivedShadowNode = source.receivedShadowNode;
    this.castShadowNode = source.castShadowNode;
    this.outputNode = source.outputNode;
    this.mrtNode = source.mrtNode;
    this.fragmentNode = source.fragmentNode;
    this.vertexNode = source.vertexNode;
    return super.copy(source);
  }
};
var _defaultValues$d = new LineBasicMaterial();
var LineBasicNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "LineBasicNodeMaterial";
  }
  /**
   * Constructs a new line basic node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isLineBasicNodeMaterial = true;
    this.setDefaultValues(_defaultValues$d);
    this.setValues(parameters);
  }
};
var _defaultValues$c = new LineDashedMaterial();
var LineDashedNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "LineDashedNodeMaterial";
  }
  /**
   * Constructs a new line dashed node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isLineDashedNodeMaterial = true;
    this.setDefaultValues(_defaultValues$c);
    this.dashOffset = 0;
    this.offsetNode = null;
    this.dashScaleNode = null;
    this.dashSizeNode = null;
    this.gapSizeNode = null;
    this.setValues(parameters);
  }
  /**
   * Setups the dash specific node variables.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupVariants() {
    const offsetNode = this.offsetNode ? float(this.offsetNode) : materialLineDashOffset;
    const dashScaleNode = this.dashScaleNode ? float(this.dashScaleNode) : materialLineScale;
    const dashSizeNode = this.dashSizeNode ? float(this.dashSizeNode) : materialLineDashSize;
    const gapSizeNode = this.gapSizeNode ? float(this.gapSizeNode) : materialLineGapSize;
    dashSize.assign(dashSizeNode);
    gapSize.assign(gapSizeNode);
    const vLineDistance = varying(attribute("lineDistance").mul(dashScaleNode));
    const vLineDistanceOffset = offsetNode ? vLineDistance.add(offsetNode) : vLineDistance;
    vLineDistanceOffset.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard();
  }
};
var _sharedFramebuffer = null;
var ViewportSharedTextureNode = class extends ViewportTextureNode {
  static get type() {
    return "ViewportSharedTextureNode";
  }
  /**
   * Constructs a new viewport shared texture node.
   *
   * @param {Node} [uvNode=screenUV] - The uv node.
   * @param {?Node} [levelNode=null] - The level node.
   */
  constructor(uvNode = screenUV, levelNode = null) {
    if (_sharedFramebuffer === null) {
      _sharedFramebuffer = new FramebufferTexture();
    }
    super(uvNode, levelNode, _sharedFramebuffer);
  }
  /**
   * Overwritten so the method always returns the unique shared
   * framebuffer texture.
   *
   * @return {FramebufferTexture} The shared framebuffer texture.
   */
  getTextureForReference() {
    return _sharedFramebuffer;
  }
  updateReference() {
    return this;
  }
};
var viewportSharedTexture = nodeProxy(ViewportSharedTextureNode).setParameterLength(0, 2);
var _defaultValues$b = new LineDashedMaterial();
var directionToColor = (node) => nodeObject(node).mul(0.5).add(0.5);
var colorToDirection = (node) => nodeObject(node).mul(2).sub(1);
var _defaultValues$a = new MeshNormalMaterial();
var MeshNormalNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "MeshNormalNodeMaterial";
  }
  /**
   * Constructs a new mesh normal node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshNormalNodeMaterial = true;
    this.setDefaultValues(_defaultValues$a);
    this.setValues(parameters);
  }
  /**
   * Overwrites the default implementation by computing the diffuse color
   * based on the normal data.
   */
  setupDiffuseColor() {
    const opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;
    diffuseColor.assign(colorSpaceToWorking(vec4(directionToColor(normalView), opacityNode), SRGBColorSpace));
  }
};
var equirectUV = Fn(([dir = positionWorldDirection]) => {
  const u2 = dir.z.atan(dir.x).mul(1 / (Math.PI * 2)).add(0.5);
  const v2 = dir.y.clamp(-1, 1).asin().mul(1 / Math.PI).add(0.5);
  return vec2(u2, v2);
});
var CubeRenderTarget = class extends WebGLCubeRenderTarget {
  /**
   * Constructs a new cube render target.
   *
   * @param {number} [size=1] - The size of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(size = 1, options = {}) {
    super(size, options);
    this.isCubeRenderTarget = true;
  }
  /**
   * Converts the given equirectangular texture to a cube map.
   *
   * @param {Renderer} renderer - The renderer.
   * @param {Texture} texture - The equirectangular texture.
   * @return {CubeRenderTarget} A reference to this cube render target.
   */
  fromEquirectangularTexture(renderer3, texture$1) {
    const currentMinFilter = texture$1.minFilter;
    const currentGenerateMipmaps = texture$1.generateMipmaps;
    texture$1.generateMipmaps = true;
    this.texture.type = texture$1.type;
    this.texture.colorSpace = texture$1.colorSpace;
    this.texture.generateMipmaps = texture$1.generateMipmaps;
    this.texture.minFilter = texture$1.minFilter;
    this.texture.magFilter = texture$1.magFilter;
    const geometry = new BoxGeometry(5, 5, 5);
    const uvNode = equirectUV(positionWorldDirection);
    const material = new NodeMaterial();
    material.colorNode = texture(texture$1, uvNode, 0);
    material.side = BackSide;
    material.blending = NoBlending;
    const mesh = new Mesh(geometry, material);
    const scene3 = new Scene();
    scene3.add(mesh);
    if (texture$1.minFilter === LinearMipmapLinearFilter)
      texture$1.minFilter = LinearFilter;
    const camera3 = new CubeCamera(1, 10, this);
    const currentMRT = renderer3.getMRT();
    renderer3.setMRT(null);
    camera3.update(renderer3, scene3);
    renderer3.setMRT(currentMRT);
    texture$1.minFilter = currentMinFilter;
    texture$1.currentGenerateMipmaps = currentGenerateMipmaps;
    mesh.geometry.dispose();
    mesh.material.dispose();
    return this;
  }
};
var _cache$1 = /* @__PURE__ */ new WeakMap();
var CubeMapNode = class extends TempNode {
  static get type() {
    return "CubeMapNode";
  }
  /**
   * Constructs a new cube map node.
   *
   * @param {Node} envNode - The node representing the environment map.
   */
  constructor(envNode) {
    super("vec3");
    this.envNode = envNode;
    this._cubeTexture = null;
    this._cubeTextureNode = cubeTexture(null);
    const defaultTexture = new CubeTexture();
    defaultTexture.isRenderTargetTexture = true;
    this._defaultTexture = defaultTexture;
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  updateBefore(frame) {
    const { renderer: renderer3, material } = frame;
    const envNode = this.envNode;
    if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {
      const texture3 = envNode.isTextureNode ? envNode.value : material[envNode.property];
      if (texture3 && texture3.isTexture) {
        const mapping = texture3.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (_cache$1.has(texture3)) {
            const cubeMap = _cache$1.get(texture3);
            mapTextureMapping(cubeMap, texture3.mapping);
            this._cubeTexture = cubeMap;
          } else {
            const image = texture3.image;
            if (isEquirectangularMapReady$1(image)) {
              const renderTarget = new CubeRenderTarget(image.height);
              renderTarget.fromEquirectangularTexture(renderer3, texture3);
              mapTextureMapping(renderTarget.texture, texture3.mapping);
              this._cubeTexture = renderTarget.texture;
              _cache$1.set(texture3, renderTarget.texture);
              texture3.addEventListener("dispose", onTextureDispose);
            } else {
              this._cubeTexture = this._defaultTexture;
            }
          }
          this._cubeTextureNode.value = this._cubeTexture;
        } else {
          this._cubeTextureNode = this.envNode;
        }
      }
    }
  }
  setup(builder) {
    this.updateBefore(builder);
    return this._cubeTextureNode;
  }
};
function isEquirectangularMapReady$1(image) {
  if (image === null || image === void 0)
    return false;
  return image.height > 0;
}
function onTextureDispose(event) {
  const texture3 = event.target;
  texture3.removeEventListener("dispose", onTextureDispose);
  const renderTarget = _cache$1.get(texture3);
  if (renderTarget !== void 0) {
    _cache$1.delete(texture3);
    renderTarget.dispose();
  }
}
function mapTextureMapping(texture3, mapping) {
  if (mapping === EquirectangularReflectionMapping) {
    texture3.mapping = CubeReflectionMapping;
  } else if (mapping === EquirectangularRefractionMapping) {
    texture3.mapping = CubeRefractionMapping;
  }
}
var cubeMapNode = nodeProxy(CubeMapNode).setParameterLength(1);
var BasicEnvironmentNode = class extends LightingNode {
  static get type() {
    return "BasicEnvironmentNode";
  }
  /**
   * Constructs a new basic environment node.
   *
   * @param {Node} [envNode=null] - A node representing the environment.
   */
  constructor(envNode = null) {
    super();
    this.envNode = envNode;
  }
  setup(builder) {
    builder.context.environment = cubeMapNode(this.envNode);
  }
};
var BasicLightMapNode = class extends LightingNode {
  static get type() {
    return "BasicLightMapNode";
  }
  /**
   * Constructs a new basic light map node.
   *
   * @param {?Node<vec3>} [lightMapNode=null] - The light map node.
   */
  constructor(lightMapNode = null) {
    super();
    this.lightMapNode = lightMapNode;
  }
  setup(builder) {
    const RECIPROCAL_PI2 = float(1 / Math.PI);
    builder.context.irradianceLightMap = this.lightMapNode.mul(RECIPROCAL_PI2);
  }
};
var LightingModel = class {
  /**
   * This method is intended for setting up lighting model and context data
   * which are later used in the evaluation process.
   *
   * @abstract
   * @param {NodeBuilder} builder - The current node builder.
   */
  start(builder) {
    builder.lightsNode.setupLights(builder, builder.lightsNode.getLightNodes(builder));
    this.indirect(builder);
  }
  /**
   * This method is intended for executing final tasks like final updates
   * to the outgoing light.
   *
   * @abstract
   * @param {NodeBuilder} builder - The current node builder.
   */
  finish() {
  }
  /**
   * This method is intended for implementing the direct light term and
   * executed during the build process of directional, point and spot light nodes.
   *
   * @abstract
   * @param {Object} lightData - The light data.
   * @param {NodeBuilder} builder - The current node builder.
   */
  direct() {
  }
  /**
   * This method is intended for implementing the direct light term for
   * rect area light nodes.
   *
   * @abstract
   * @param {Object} lightData - The light data.
   * @param {NodeBuilder} builder - The current node builder.
   */
  directRectArea() {
  }
  /**
   * This method is intended for implementing the indirect light term.
   *
   * @abstract
   * @param {NodeBuilder} builder - The current node builder.
   */
  indirect() {
  }
  /**
   * This method is intended for implementing the ambient occlusion term.
   * Unlike other methods, this method must be called manually by the lighting
   * model in its indirect term.
   *
   * @abstract
   * @param {NodeBuilder} builder - The current node builder.
   */
  ambientOcclusion() {
  }
};
var BasicLightingModel = class extends LightingModel {
  /**
   * Constructs a new basic lighting model.
   */
  constructor() {
    super();
  }
  /**
   * Implements the baked indirect lighting with its modulation.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  indirect({ context: context3 }) {
    const ambientOcclusion = context3.ambientOcclusion;
    const reflectedLight = context3.reflectedLight;
    const irradianceLightMap = context3.irradianceLightMap;
    reflectedLight.indirectDiffuse.assign(vec4(0));
    if (irradianceLightMap) {
      reflectedLight.indirectDiffuse.addAssign(irradianceLightMap);
    } else {
      reflectedLight.indirectDiffuse.addAssign(vec4(1, 1, 1, 0));
    }
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
    reflectedLight.indirectDiffuse.mulAssign(diffuseColor.rgb);
  }
  /**
   * Implements the environment mapping.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  finish(builder) {
    const { material, context: context3 } = builder;
    const outgoingLight = context3.outgoingLight;
    const envNode = builder.context.environment;
    if (envNode) {
      switch (material.combine) {
        case MultiplyOperation:
          outgoingLight.rgb.assign(mix(outgoingLight.rgb, outgoingLight.rgb.mul(envNode.rgb), materialSpecularStrength.mul(materialReflectivity)));
          break;
        case MixOperation:
          outgoingLight.rgb.assign(mix(outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul(materialReflectivity)));
          break;
        case AddOperation:
          outgoingLight.rgb.addAssign(envNode.rgb.mul(materialSpecularStrength.mul(materialReflectivity)));
          break;
        default:
          console.warn("THREE.BasicLightingModel: Unsupported .combine value:", material.combine);
          break;
      }
    }
  }
};
var _defaultValues$9 = new MeshBasicMaterial();
var MeshBasicNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "MeshBasicNodeMaterial";
  }
  /**
   * Constructs a new mesh basic node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshBasicNodeMaterial = true;
    this.lights = true;
    this.setDefaultValues(_defaultValues$9);
    this.setValues(parameters);
  }
  /**
   * Basic materials are not affected by normal and bump maps so we
   * return by default {@link normalViewGeometry}.
   *
   * @return {Node<vec3>} The normal node.
   */
  setupNormal() {
    return directionToFaceDirection(normalViewGeometry);
  }
  /**
   * Overwritten since this type of material uses {@link BasicEnvironmentNode}
   * to implement the default environment mapping.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {?BasicEnvironmentNode<vec3>} The environment node.
   */
  setupEnvironment(builder) {
    const envNode = super.setupEnvironment(builder);
    return envNode ? new BasicEnvironmentNode(envNode) : null;
  }
  /**
   * This method must be overwritten since light maps are evaluated
   * with a special scaling factor for basic materials.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {?BasicLightMapNode<vec3>} The light map node.
   */
  setupLightMap(builder) {
    let node = null;
    if (builder.material.lightMap) {
      node = new BasicLightMapNode(materialLightMap);
    }
    return node;
  }
  /**
   * The material overwrites this method because `lights` is set to `true` but
   * we still want to return the diffuse color as the outgoing light.
   *
   * @return {Node<vec3>} The outgoing light node.
   */
  setupOutgoingLight() {
    return diffuseColor.rgb;
  }
  /**
   * Setups the lighting model.
   *
   * @return {BasicLightingModel} The lighting model.
   */
  setupLightingModel() {
    return new BasicLightingModel();
  }
};
var F_Schlick = Fn(({ f0, f90, dotVH }) => {
  const fresnel = dotVH.mul(-5.55473).sub(6.98316).mul(dotVH).exp2();
  return f0.mul(fresnel.oneMinus()).add(f90.mul(fresnel));
});
var BRDF_Lambert = Fn((inputs) => {
  return inputs.diffuseColor.mul(1 / Math.PI);
});
var G_BlinnPhong_Implicit = () => float(0.25);
var D_BlinnPhong = Fn(({ dotNH }) => {
  return shininess.mul(float(0.5)).add(1).mul(float(1 / Math.PI)).mul(dotNH.pow(shininess));
});
var BRDF_BlinnPhong = Fn(({ lightDirection }) => {
  const halfDir = lightDirection.add(positionViewDirection).normalize();
  const dotNH = normalView.dot(halfDir).clamp();
  const dotVH = positionViewDirection.dot(halfDir).clamp();
  const F2 = F_Schlick({ f0: specularColor, f90: 1, dotVH });
  const G2 = G_BlinnPhong_Implicit();
  const D2 = D_BlinnPhong({ dotNH });
  return F2.mul(G2).mul(D2);
});
var PhongLightingModel = class extends BasicLightingModel {
  /**
   * Constructs a new phong lighting model.
   *
   * @param {boolean} [specular=true] - Whether specular is supported or not.
   */
  constructor(specular = true) {
    super();
    this.specular = specular;
  }
  /**
   * Implements the direct lighting. The specular portion is optional an can be controlled
   * with the {@link PhongLightingModel#specular} flag.
   *
   * @param {Object} lightData - The light data.
   */
  direct({ lightDirection, lightColor, reflectedLight }) {
    const dotNL = normalView.dot(lightDirection).clamp();
    const irradiance = dotNL.mul(lightColor);
    reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
    if (this.specular === true) {
      reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_BlinnPhong({ lightDirection })).mul(materialSpecularStrength));
    }
  }
  /**
   * Implements the indirect lighting.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  indirect(builder) {
    const { ambientOcclusion, irradiance, reflectedLight } = builder.context;
    reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
  }
};
var _defaultValues$8 = new MeshLambertMaterial();
var MeshLambertNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "MeshLambertNodeMaterial";
  }
  /**
   * Constructs a new mesh lambert node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshLambertNodeMaterial = true;
    this.lights = true;
    this.setDefaultValues(_defaultValues$8);
    this.setValues(parameters);
  }
  /**
   * Overwritten since this type of material uses {@link BasicEnvironmentNode}
   * to implement the default environment mapping.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {?BasicEnvironmentNode<vec3>} The environment node.
   */
  setupEnvironment(builder) {
    const envNode = super.setupEnvironment(builder);
    return envNode ? new BasicEnvironmentNode(envNode) : null;
  }
  /**
   * Setups the lighting model.
   *
   * @return {PhongLightingModel} The lighting model.
   */
  setupLightingModel() {
    return new PhongLightingModel(false);
  }
};
var _defaultValues$7 = new MeshPhongMaterial();
var MeshPhongNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "MeshPhongNodeMaterial";
  }
  /**
   * Constructs a new mesh lambert node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshPhongNodeMaterial = true;
    this.lights = true;
    this.shininessNode = null;
    this.specularNode = null;
    this.setDefaultValues(_defaultValues$7);
    this.setValues(parameters);
  }
  /**
   * Overwritten since this type of material uses {@link BasicEnvironmentNode}
   * to implement the default environment mapping.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {?BasicEnvironmentNode<vec3>} The environment node.
   */
  setupEnvironment(builder) {
    const envNode = super.setupEnvironment(builder);
    return envNode ? new BasicEnvironmentNode(envNode) : null;
  }
  /**
   * Setups the lighting model.
   *
   * @return {PhongLightingModel} The lighting model.
   */
  setupLightingModel() {
    return new PhongLightingModel();
  }
  /**
   * Setups the phong specific node variables.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupVariants() {
    const shininessNode = (this.shininessNode ? float(this.shininessNode) : materialShininess).max(1e-4);
    shininess.assign(shininessNode);
    const specularNode = this.specularNode || materialSpecular;
    specularColor.assign(specularNode);
  }
  copy(source) {
    this.shininessNode = source.shininessNode;
    this.specularNode = source.specularNode;
    return super.copy(source);
  }
};
var getGeometryRoughness = Fn((builder) => {
  if (builder.geometry.hasAttribute("normal") === false) {
    return float(0);
  }
  const dxy = normalViewGeometry.dFdx().abs().max(normalViewGeometry.dFdy().abs());
  const geometryRoughness = dxy.x.max(dxy.y).max(dxy.z);
  return geometryRoughness;
});
var getRoughness = Fn((inputs) => {
  const { roughness: roughness3 } = inputs;
  const geometryRoughness = getGeometryRoughness();
  let roughnessFactor = roughness3.max(0.0525);
  roughnessFactor = roughnessFactor.add(geometryRoughness);
  roughnessFactor = roughnessFactor.min(1);
  return roughnessFactor;
});
var V_GGX_SmithCorrelated = Fn(({ alpha, dotNL, dotNV }) => {
  const a2 = alpha.pow2();
  const gv = dotNL.mul(a2.add(a2.oneMinus().mul(dotNV.pow2())).sqrt());
  const gl = dotNV.mul(a2.add(a2.oneMinus().mul(dotNL.pow2())).sqrt());
  return div(0.5, gv.add(gl).max(EPSILON));
}).setLayout({
  name: "V_GGX_SmithCorrelated",
  type: "float",
  inputs: [
    { name: "alpha", type: "float" },
    { name: "dotNL", type: "float" },
    { name: "dotNV", type: "float" }
  ]
});
var V_GGX_SmithCorrelated_Anisotropic = Fn(({ alphaT: alphaT3, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL }) => {
  const gv = dotNL.mul(vec3(alphaT3.mul(dotTV), alphaB.mul(dotBV), dotNV).length());
  const gl = dotNV.mul(vec3(alphaT3.mul(dotTL), alphaB.mul(dotBL), dotNL).length());
  const v2 = div(0.5, gv.add(gl));
  return v2.saturate();
}).setLayout({
  name: "V_GGX_SmithCorrelated_Anisotropic",
  type: "float",
  inputs: [
    { name: "alphaT", type: "float", qualifier: "in" },
    { name: "alphaB", type: "float", qualifier: "in" },
    { name: "dotTV", type: "float", qualifier: "in" },
    { name: "dotBV", type: "float", qualifier: "in" },
    { name: "dotTL", type: "float", qualifier: "in" },
    { name: "dotBL", type: "float", qualifier: "in" },
    { name: "dotNV", type: "float", qualifier: "in" },
    { name: "dotNL", type: "float", qualifier: "in" }
  ]
});
var D_GGX = Fn(({ alpha, dotNH }) => {
  const a2 = alpha.pow2();
  const denom = dotNH.pow2().mul(a2.oneMinus()).oneMinus();
  return a2.div(denom.pow2()).mul(1 / Math.PI);
}).setLayout({
  name: "D_GGX",
  type: "float",
  inputs: [
    { name: "alpha", type: "float" },
    { name: "dotNH", type: "float" }
  ]
});
var RECIPROCAL_PI = float(1 / Math.PI);
var D_GGX_Anisotropic = Fn(({ alphaT: alphaT3, alphaB, dotNH, dotTH, dotBH }) => {
  const a2 = alphaT3.mul(alphaB);
  const v2 = vec3(alphaB.mul(dotTH), alphaT3.mul(dotBH), a2.mul(dotNH));
  const v22 = v2.dot(v2);
  const w22 = a2.div(v22);
  return RECIPROCAL_PI.mul(a2.mul(w22.pow2()));
}).setLayout({
  name: "D_GGX_Anisotropic",
  type: "float",
  inputs: [
    { name: "alphaT", type: "float", qualifier: "in" },
    { name: "alphaB", type: "float", qualifier: "in" },
    { name: "dotNH", type: "float", qualifier: "in" },
    { name: "dotTH", type: "float", qualifier: "in" },
    { name: "dotBH", type: "float", qualifier: "in" }
  ]
});
var BRDF_GGX = Fn(({ lightDirection, f0, f90, roughness: roughness3, f: f2, normalView: normalView$1 = normalView, USE_IRIDESCENCE, USE_ANISOTROPY }) => {
  const alpha = roughness3.pow2();
  const halfDir = lightDirection.add(positionViewDirection).normalize();
  const dotNL = normalView$1.dot(lightDirection).clamp();
  const dotNV = normalView$1.dot(positionViewDirection).clamp();
  const dotNH = normalView$1.dot(halfDir).clamp();
  const dotVH = positionViewDirection.dot(halfDir).clamp();
  let F2 = F_Schlick({ f0, f90, dotVH });
  let V2, D2;
  if (defined(USE_IRIDESCENCE)) {
    F2 = iridescence.mix(F2, f2);
  }
  if (defined(USE_ANISOTROPY)) {
    const dotTL = anisotropyT.dot(lightDirection);
    const dotTV = anisotropyT.dot(positionViewDirection);
    const dotTH = anisotropyT.dot(halfDir);
    const dotBL = anisotropyB.dot(lightDirection);
    const dotBV = anisotropyB.dot(positionViewDirection);
    const dotBH = anisotropyB.dot(halfDir);
    V2 = V_GGX_SmithCorrelated_Anisotropic({ alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL });
    D2 = D_GGX_Anisotropic({ alphaT, alphaB: alpha, dotNH, dotTH, dotBH });
  } else {
    V2 = V_GGX_SmithCorrelated({ alpha, dotNL, dotNV });
    D2 = D_GGX({ alpha, dotNH });
  }
  return F2.mul(V2).mul(D2);
});
var DFGApprox = Fn(({ roughness: roughness3, dotNV }) => {
  const c0 = vec4(-1, -0.0275, -0.572, 0.022);
  const c1 = vec4(1, 0.0425, 1.04, -0.04);
  const r2 = roughness3.mul(c0).add(c1);
  const a004 = r2.x.mul(r2.x).min(dotNV.mul(-9.28).exp2()).mul(r2.x).add(r2.y);
  const fab = vec2(-1.04, 1.04).mul(a004).add(r2.zw);
  return fab;
}).setLayout({
  name: "DFGApprox",
  type: "vec2",
  inputs: [
    { name: "roughness", type: "float" },
    { name: "dotNV", type: "vec3" }
  ]
});
var EnvironmentBRDF = Fn((inputs) => {
  const { dotNV, specularColor: specularColor3, specularF90: specularF903, roughness: roughness3 } = inputs;
  const fab = DFGApprox({ dotNV, roughness: roughness3 });
  return specularColor3.mul(fab.x).add(specularF903.mul(fab.y));
});
var Schlick_to_F0 = Fn(({ f: f2, f90, dotVH }) => {
  const x2 = dotVH.oneMinus().saturate();
  const x22 = x2.mul(x2);
  const x5 = x2.mul(x22, x22).clamp(0, 0.9999);
  return f2.sub(vec3(f90).mul(x5)).div(x5.oneMinus());
}).setLayout({
  name: "Schlick_to_F0",
  type: "vec3",
  inputs: [
    { name: "f", type: "vec3" },
    { name: "f90", type: "float" },
    { name: "dotVH", type: "float" }
  ]
});
var D_Charlie = Fn(({ roughness: roughness3, dotNH }) => {
  const alpha = roughness3.pow2();
  const invAlpha = float(1).div(alpha);
  const cos2h = dotNH.pow2();
  const sin2h = cos2h.oneMinus().max(78125e-7);
  return float(2).add(invAlpha).mul(sin2h.pow(invAlpha.mul(0.5))).div(2 * Math.PI);
}).setLayout({
  name: "D_Charlie",
  type: "float",
  inputs: [
    { name: "roughness", type: "float" },
    { name: "dotNH", type: "float" }
  ]
});
var V_Neubelt = Fn(({ dotNV, dotNL }) => {
  return float(1).div(float(4).mul(dotNL.add(dotNV).sub(dotNL.mul(dotNV))));
}).setLayout({
  name: "V_Neubelt",
  type: "float",
  inputs: [
    { name: "dotNV", type: "float" },
    { name: "dotNL", type: "float" }
  ]
});
var BRDF_Sheen = Fn(({ lightDirection }) => {
  const halfDir = lightDirection.add(positionViewDirection).normalize();
  const dotNL = normalView.dot(lightDirection).clamp();
  const dotNV = normalView.dot(positionViewDirection).clamp();
  const dotNH = normalView.dot(halfDir).clamp();
  const D2 = D_Charlie({ roughness: sheenRoughness, dotNH });
  const V2 = V_Neubelt({ dotNV, dotNL });
  return sheen.mul(D2).mul(V2);
});
var LTC_Uv = Fn(({ N: N3, V: V2, roughness: roughness3 }) => {
  const LUT_SIZE = 64;
  const LUT_SCALE = (LUT_SIZE - 1) / LUT_SIZE;
  const LUT_BIAS = 0.5 / LUT_SIZE;
  const dotNV = N3.dot(V2).saturate();
  const uv3 = vec2(roughness3, dotNV.oneMinus().sqrt());
  uv3.assign(uv3.mul(LUT_SCALE).add(LUT_BIAS));
  return uv3;
}).setLayout({
  name: "LTC_Uv",
  type: "vec2",
  inputs: [
    { name: "N", type: "vec3" },
    { name: "V", type: "vec3" },
    { name: "roughness", type: "float" }
  ]
});
var LTC_ClippedSphereFormFactor = Fn(({ f: f2 }) => {
  const l2 = f2.length();
  return max$1(l2.mul(l2).add(f2.z).div(l2.add(1)), 0);
}).setLayout({
  name: "LTC_ClippedSphereFormFactor",
  type: "float",
  inputs: [
    { name: "f", type: "vec3" }
  ]
});
var LTC_EdgeVectorFormFactor = Fn(({ v1, v2 }) => {
  const x2 = v1.dot(v2);
  const y2 = x2.abs().toVar();
  const a2 = y2.mul(0.0145206).add(0.4965155).mul(y2).add(0.8543985).toVar();
  const b = y2.add(4.1616724).mul(y2).add(3.417594).toVar();
  const v3 = a2.div(b);
  const theta_sintheta = x2.greaterThan(0).select(v3, max$1(x2.mul(x2).oneMinus(), 1e-7).inverseSqrt().mul(0.5).sub(v3));
  return v1.cross(v2).mul(theta_sintheta);
}).setLayout({
  name: "LTC_EdgeVectorFormFactor",
  type: "vec3",
  inputs: [
    { name: "v1", type: "vec3" },
    { name: "v2", type: "vec3" }
  ]
});
var LTC_Evaluate = Fn(({ N: N3, V: V2, P: P2, mInv, p0, p1, p2, p3 }) => {
  const v1 = p1.sub(p0).toVar();
  const v2 = p3.sub(p0).toVar();
  const lightNormal = v1.cross(v2);
  const result = vec3().toVar();
  If(lightNormal.dot(P2.sub(p0)).greaterThanEqual(0), () => {
    const T1 = V2.sub(N3.mul(V2.dot(N3))).normalize();
    const T22 = N3.cross(T1).negate();
    const mat = mInv.mul(mat3(T1, T22, N3).transpose()).toVar();
    const coords0 = mat.mul(p0.sub(P2)).normalize().toVar();
    const coords1 = mat.mul(p1.sub(P2)).normalize().toVar();
    const coords2 = mat.mul(p2.sub(P2)).normalize().toVar();
    const coords3 = mat.mul(p3.sub(P2)).normalize().toVar();
    const vectorFormFactor = vec3(0).toVar();
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords0, v2: coords1 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords1, v2: coords2 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords2, v2: coords3 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords3, v2: coords0 }));
    result.assign(vec3(LTC_ClippedSphereFormFactor({ f: vectorFormFactor })));
  });
  return result;
}).setLayout({
  name: "LTC_Evaluate",
  type: "vec3",
  inputs: [
    { name: "N", type: "vec3" },
    { name: "V", type: "vec3" },
    { name: "P", type: "vec3" },
    { name: "mInv", type: "mat3" },
    { name: "p0", type: "vec3" },
    { name: "p1", type: "vec3" },
    { name: "p2", type: "vec3" },
    { name: "p3", type: "vec3" }
  ]
});
var LTC_Evaluate_Volume = Fn(({ P: P2, p0, p1, p2, p3 }) => {
  const v1 = p1.sub(p0).toVar();
  const v2 = p3.sub(p0).toVar();
  const lightNormal = v1.cross(v2);
  const result = vec3().toVar();
  If(lightNormal.dot(P2.sub(p0)).greaterThanEqual(0), () => {
    const coords0 = p0.sub(P2).normalize().toVar();
    const coords1 = p1.sub(P2).normalize().toVar();
    const coords2 = p2.sub(P2).normalize().toVar();
    const coords3 = p3.sub(P2).normalize().toVar();
    const vectorFormFactor = vec3(0).toVar();
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords0, v2: coords1 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords1, v2: coords2 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords2, v2: coords3 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords3, v2: coords0 }));
    result.assign(vec3(LTC_ClippedSphereFormFactor({ f: vectorFormFactor.abs() })));
  });
  return result;
}).setLayout({
  name: "LTC_Evaluate",
  type: "vec3",
  inputs: [
    { name: "P", type: "vec3" },
    { name: "p0", type: "vec3" },
    { name: "p1", type: "vec3" },
    { name: "p2", type: "vec3" },
    { name: "p3", type: "vec3" }
  ]
});
var bC = 1 / 6;
var w0 = (a2) => mul(bC, mul(a2, mul(a2, a2.negate().add(3)).sub(3)).add(1));
var w1 = (a2) => mul(bC, mul(a2, mul(a2, mul(3, a2).sub(6))).add(4));
var w2 = (a2) => mul(bC, mul(a2, mul(a2, mul(-3, a2).add(3)).add(3)).add(1));
var w3 = (a2) => mul(bC, pow(a2, 3));
var g0 = (a2) => w0(a2).add(w1(a2));
var g1 = (a2) => w2(a2).add(w3(a2));
var h0 = (a2) => add3(-1, w1(a2).div(w0(a2).add(w1(a2))));
var h1 = (a2) => add3(1, w3(a2).div(w2(a2).add(w3(a2))));
var bicubic = (textureNode, texelSize, lod) => {
  const uv3 = textureNode.uvNode;
  const uvScaled = mul(uv3, texelSize.zw).add(0.5);
  const iuv = floor(uvScaled);
  const fuv = fract(uvScaled);
  const g0x = g0(fuv.x);
  const g1x = g1(fuv.x);
  const h0x = h0(fuv.x);
  const h1x = h1(fuv.x);
  const h0y = h0(fuv.y);
  const h1y = h1(fuv.y);
  const p0 = vec2(iuv.x.add(h0x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);
  const p1 = vec2(iuv.x.add(h1x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);
  const p2 = vec2(iuv.x.add(h0x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);
  const p3 = vec2(iuv.x.add(h1x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);
  const a2 = g0(fuv.y).mul(add3(g0x.mul(textureNode.sample(p0).level(lod)), g1x.mul(textureNode.sample(p1).level(lod))));
  const b = g1(fuv.y).mul(add3(g0x.mul(textureNode.sample(p2).level(lod)), g1x.mul(textureNode.sample(p3).level(lod))));
  return a2.add(b);
};
var textureBicubicLevel = Fn(([textureNode, lodNode]) => {
  const fLodSize = vec2(textureNode.size(int(lodNode)));
  const cLodSize = vec2(textureNode.size(int(lodNode.add(1))));
  const fLodSizeInv = div(1, fLodSize);
  const cLodSizeInv = div(1, cLodSize);
  const fSample = bicubic(textureNode, vec4(fLodSizeInv, fLodSize), floor(lodNode));
  const cSample = bicubic(textureNode, vec4(cLodSizeInv, cLodSize), ceil(lodNode));
  return fract(lodNode).mix(fSample, cSample);
});
var textureBicubic = Fn(([textureNode, strength]) => {
  const lod = strength.mul(maxMipLevel(textureNode));
  return textureBicubicLevel(textureNode, lod);
});
var getVolumeTransmissionRay = Fn(([n2, v2, thickness3, ior3, modelMatrix]) => {
  const refractionVector = vec3(refract(v2.negate(), normalize(n2), div(1, ior3)));
  const modelScale3 = vec3(
    length(modelMatrix[0].xyz),
    length(modelMatrix[1].xyz),
    length(modelMatrix[2].xyz)
  );
  return normalize(refractionVector).mul(thickness3.mul(modelScale3));
}).setLayout({
  name: "getVolumeTransmissionRay",
  type: "vec3",
  inputs: [
    { name: "n", type: "vec3" },
    { name: "v", type: "vec3" },
    { name: "thickness", type: "float" },
    { name: "ior", type: "float" },
    { name: "modelMatrix", type: "mat4" }
  ]
});
var applyIorToRoughness = Fn(([roughness3, ior3]) => {
  return roughness3.mul(clamp(ior3.mul(2).sub(2), 0, 1));
}).setLayout({
  name: "applyIorToRoughness",
  type: "float",
  inputs: [
    { name: "roughness", type: "float" },
    { name: "ior", type: "float" }
  ]
});
var viewportBackSideTexture = viewportMipTexture();
var viewportFrontSideTexture = viewportMipTexture();
var getTransmissionSample = Fn(([fragCoord, roughness3, ior3], { material }) => {
  const vTexture = material.side === BackSide ? viewportBackSideTexture : viewportFrontSideTexture;
  const transmissionSample = vTexture.sample(fragCoord);
  const lod = log2(screenSize.x).mul(applyIorToRoughness(roughness3, ior3));
  return textureBicubicLevel(transmissionSample, lod);
});
var volumeAttenuation = Fn(([transmissionDistance, attenuationColor3, attenuationDistance3]) => {
  If(attenuationDistance3.notEqual(0), () => {
    const attenuationCoefficient = log(attenuationColor3).negate().div(attenuationDistance3);
    const transmittance = exp(attenuationCoefficient.negate().mul(transmissionDistance));
    return transmittance;
  });
  return vec3(1);
}).setLayout({
  name: "volumeAttenuation",
  type: "vec3",
  inputs: [
    { name: "transmissionDistance", type: "float" },
    { name: "attenuationColor", type: "vec3" },
    { name: "attenuationDistance", type: "float" }
  ]
});
var getIBLVolumeRefraction = Fn(([n2, v2, roughness3, diffuseColor3, specularColor3, specularF903, position, modelMatrix, viewMatrix, projMatrix, ior3, thickness3, attenuationColor3, attenuationDistance3, dispersion3]) => {
  let transmittedLight, transmittance;
  if (dispersion3) {
    transmittedLight = vec4().toVar();
    transmittance = vec3().toVar();
    const halfSpread = ior3.sub(1).mul(dispersion3.mul(0.025));
    const iors = vec3(ior3.sub(halfSpread), ior3, ior3.add(halfSpread));
    Loop({ start: 0, end: 3 }, ({ i: i2 }) => {
      const ior4 = iors.element(i2);
      const transmissionRay = getVolumeTransmissionRay(n2, v2, thickness3, ior4, modelMatrix);
      const refractedRayExit = position.add(transmissionRay);
      const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1)));
      const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();
      refractionCoords.addAssign(1);
      refractionCoords.divAssign(2);
      refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus()));
      const transmissionSample = getTransmissionSample(refractionCoords, roughness3, ior4);
      transmittedLight.element(i2).assign(transmissionSample.element(i2));
      transmittedLight.a.addAssign(transmissionSample.a);
      transmittance.element(i2).assign(diffuseColor3.element(i2).mul(volumeAttenuation(length(transmissionRay), attenuationColor3, attenuationDistance3).element(i2)));
    });
    transmittedLight.a.divAssign(3);
  } else {
    const transmissionRay = getVolumeTransmissionRay(n2, v2, thickness3, ior3, modelMatrix);
    const refractedRayExit = position.add(transmissionRay);
    const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1)));
    const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();
    refractionCoords.addAssign(1);
    refractionCoords.divAssign(2);
    refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus()));
    transmittedLight = getTransmissionSample(refractionCoords, roughness3, ior3);
    transmittance = diffuseColor3.mul(volumeAttenuation(length(transmissionRay), attenuationColor3, attenuationDistance3));
  }
  const attenuatedColor = transmittance.rgb.mul(transmittedLight.rgb);
  const dotNV = n2.dot(v2).clamp();
  const F2 = vec3(EnvironmentBRDF({
    // n, v, specularColor, specularF90, roughness
    dotNV,
    specularColor: specularColor3,
    specularF90: specularF903,
    roughness: roughness3
  }));
  const transmittanceFactor = transmittance.r.add(transmittance.g, transmittance.b).div(3);
  return vec4(F2.oneMinus().mul(attenuatedColor), transmittedLight.a.oneMinus().mul(transmittanceFactor).oneMinus());
});
var XYZ_TO_REC709 = mat3(
  3.2404542,
  -0.969266,
  0.0556434,
  -1.5371385,
  1.8760108,
  -0.2040259,
  -0.4985314,
  0.041556,
  1.0572252
);
var Fresnel0ToIor = (fresnel0) => {
  const sqrtF0 = fresnel0.sqrt();
  return vec3(1).add(sqrtF0).div(vec3(1).sub(sqrtF0));
};
var IorToFresnel0 = (transmittedIor, incidentIor) => {
  return transmittedIor.sub(incidentIor).div(transmittedIor.add(incidentIor)).pow2();
};
var evalSensitivity = (OPD, shift) => {
  const phase = OPD.mul(2 * Math.PI * 1e-9);
  const val = vec3(54856e-17, 44201e-17, 52481e-17);
  const pos = vec3(1681e3, 1795300, 2208400);
  const VAR = vec3(43278e5, 93046e5, 66121e5);
  const x2 = float(9747e-17 * Math.sqrt(2 * Math.PI * 45282e5)).mul(phase.mul(2239900).add(shift.x).cos()).mul(phase.pow2().mul(-45282e5).exp());
  let xyz = val.mul(VAR.mul(2 * Math.PI).sqrt()).mul(pos.mul(phase).add(shift).cos()).mul(phase.pow2().negate().mul(VAR).exp());
  xyz = vec3(xyz.x.add(x2), xyz.y, xyz.z).div(10685e-11);
  const rgb2 = XYZ_TO_REC709.mul(xyz);
  return rgb2;
};
var evalIridescence = Fn(({ outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 }) => {
  const iridescenceIOR3 = mix(outsideIOR, eta2, smoothstep(0, 0.03, thinFilmThickness));
  const sinTheta2Sq = outsideIOR.div(iridescenceIOR3).pow2().mul(cosTheta1.pow2().oneMinus());
  const cosTheta2Sq = sinTheta2Sq.oneMinus();
  If(cosTheta2Sq.lessThan(0), () => {
    return vec3(1);
  });
  const cosTheta2 = cosTheta2Sq.sqrt();
  const R0 = IorToFresnel0(iridescenceIOR3, outsideIOR);
  const R12 = F_Schlick({ f0: R0, f90: 1, dotVH: cosTheta1 });
  const T121 = R12.oneMinus();
  const phi12 = iridescenceIOR3.lessThan(outsideIOR).select(Math.PI, 0);
  const phi21 = float(Math.PI).sub(phi12);
  const baseIOR = Fresnel0ToIor(baseF0.clamp(0, 0.9999));
  const R1 = IorToFresnel0(baseIOR, iridescenceIOR3.toVec3());
  const R23 = F_Schlick({ f0: R1, f90: 1, dotVH: cosTheta2 });
  const phi23 = vec3(
    baseIOR.x.lessThan(iridescenceIOR3).select(Math.PI, 0),
    baseIOR.y.lessThan(iridescenceIOR3).select(Math.PI, 0),
    baseIOR.z.lessThan(iridescenceIOR3).select(Math.PI, 0)
  );
  const OPD = iridescenceIOR3.mul(thinFilmThickness, cosTheta2, 2);
  const phi = vec3(phi21).add(phi23);
  const R123 = R12.mul(R23).clamp(1e-5, 0.9999);
  const r123 = R123.sqrt();
  const Rs = T121.pow2().mul(R23).div(vec3(1).sub(R123));
  const C0 = R12.add(Rs);
  const I2 = C0.toVar();
  const Cm = Rs.sub(T121).toVar();
  Loop({ start: 1, end: 2, condition: "<=", name: "m" }, ({ m: m2 }) => {
    Cm.mulAssign(r123);
    const Sm = evalSensitivity(float(m2).mul(OPD), float(m2).mul(phi)).mul(2);
    I2.addAssign(Cm.mul(Sm));
  });
  return I2.max(vec3(0));
}).setLayout({
  name: "evalIridescence",
  type: "vec3",
  inputs: [
    { name: "outsideIOR", type: "float" },
    { name: "eta2", type: "float" },
    { name: "cosTheta1", type: "float" },
    { name: "thinFilmThickness", type: "float" },
    { name: "baseF0", type: "vec3" }
  ]
});
var IBLSheenBRDF = Fn(({ normal: normal2, viewDir, roughness: roughness3 }) => {
  const dotNV = normal2.dot(viewDir).saturate();
  const r2 = roughness3.pow2();
  const a2 = select(
    roughness3.lessThan(0.25),
    float(-339.2).mul(r2).add(float(161.4).mul(roughness3)).sub(25.9),
    float(-8.48).mul(r2).add(float(14.3).mul(roughness3)).sub(9.95)
  );
  const b = select(
    roughness3.lessThan(0.25),
    float(44).mul(r2).sub(float(23.7).mul(roughness3)).add(3.26),
    float(1.97).mul(r2).sub(float(3.27).mul(roughness3)).add(0.72)
  );
  const DG = select(roughness3.lessThan(0.25), 0, float(0.1).mul(roughness3).sub(0.025)).add(a2.mul(dotNV).add(b).exp());
  return DG.mul(1 / Math.PI).saturate();
});
var clearcoatF0 = vec3(0.04);
var clearcoatF90 = float(1);
var PhysicalLightingModel = class extends LightingModel {
  /**
   * Constructs a new physical lighting model.
   *
   * @param {boolean} [clearcoat=false] - Whether clearcoat is supported or not.
   * @param {boolean} [sheen=false] - Whether sheen is supported or not.
   * @param {boolean} [iridescence=false] - Whether iridescence is supported or not.
   * @param {boolean} [anisotropy=false] - Whether anisotropy is supported or not.
   * @param {boolean} [transmission=false] - Whether transmission is supported or not.
   * @param {boolean} [dispersion=false] - Whether dispersion is supported or not.
   */
  constructor(clearcoat3 = false, sheen3 = false, iridescence3 = false, anisotropy3 = false, transmission3 = false, dispersion3 = false) {
    super();
    this.clearcoat = clearcoat3;
    this.sheen = sheen3;
    this.iridescence = iridescence3;
    this.anisotropy = anisotropy3;
    this.transmission = transmission3;
    this.dispersion = dispersion3;
    this.clearcoatRadiance = null;
    this.clearcoatSpecularDirect = null;
    this.clearcoatSpecularIndirect = null;
    this.sheenSpecularDirect = null;
    this.sheenSpecularIndirect = null;
    this.iridescenceFresnel = null;
    this.iridescenceF0 = null;
  }
  /**
   * Depending on what features are requested, the method prepares certain node variables
   * which are later used for lighting computations.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  start(builder) {
    if (this.clearcoat === true) {
      this.clearcoatRadiance = vec3().toVar("clearcoatRadiance");
      this.clearcoatSpecularDirect = vec3().toVar("clearcoatSpecularDirect");
      this.clearcoatSpecularIndirect = vec3().toVar("clearcoatSpecularIndirect");
    }
    if (this.sheen === true) {
      this.sheenSpecularDirect = vec3().toVar("sheenSpecularDirect");
      this.sheenSpecularIndirect = vec3().toVar("sheenSpecularIndirect");
    }
    if (this.iridescence === true) {
      const dotNVi = normalView.dot(positionViewDirection).clamp();
      this.iridescenceFresnel = evalIridescence({
        outsideIOR: float(1),
        eta2: iridescenceIOR,
        cosTheta1: dotNVi,
        thinFilmThickness: iridescenceThickness,
        baseF0: specularColor
      });
      this.iridescenceF0 = Schlick_to_F0({ f: this.iridescenceFresnel, f90: 1, dotVH: dotNVi });
    }
    if (this.transmission === true) {
      const position = positionWorld;
      const v2 = cameraPosition.sub(positionWorld).normalize();
      const n2 = normalWorld;
      const context3 = builder.context;
      context3.backdrop = getIBLVolumeRefraction(
        n2,
        v2,
        roughness,
        diffuseColor,
        specularColor,
        specularF90,
        // specularF90
        position,
        // positionWorld
        modelWorldMatrix,
        // modelMatrix
        cameraViewMatrix,
        // viewMatrix
        cameraProjectionMatrix,
        // projMatrix
        ior,
        thickness,
        attenuationColor,
        attenuationDistance,
        this.dispersion ? dispersion : null
      );
      context3.backdropAlpha = transmission;
      diffuseColor.a.mulAssign(mix(1, context3.backdrop.a, transmission));
    }
    super.start(builder);
  }
  // Fdez-Agüera's "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"
  // Approximates multi-scattering in order to preserve energy.
  // http://www.jcgt.org/published/0008/01/03/
  computeMultiscattering(singleScatter, multiScatter, specularF903) {
    const dotNV = normalView.dot(positionViewDirection).clamp();
    const fab = DFGApprox({ roughness, dotNV });
    const Fr = this.iridescenceF0 ? iridescence.mix(specularColor, this.iridescenceF0) : specularColor;
    const FssEss = Fr.mul(fab.x).add(specularF903.mul(fab.y));
    const Ess = fab.x.add(fab.y);
    const Ems = Ess.oneMinus();
    const Favg = specularColor.add(specularColor.oneMinus().mul(0.047619));
    const Fms = FssEss.mul(Favg).div(Ems.mul(Favg).oneMinus());
    singleScatter.addAssign(FssEss);
    multiScatter.addAssign(Fms.mul(Ems));
  }
  /**
   * Implements the direct light.
   *
   * @param {Object} lightData - The light data.
   * @param {NodeBuilder} builder - The current node builder.
   */
  direct({ lightDirection, lightColor, reflectedLight }) {
    const dotNL = normalView.dot(lightDirection).clamp();
    const irradiance = dotNL.mul(lightColor);
    if (this.sheen === true) {
      this.sheenSpecularDirect.addAssign(irradiance.mul(BRDF_Sheen({ lightDirection })));
    }
    if (this.clearcoat === true) {
      const dotNLcc = clearcoatNormalView.dot(lightDirection).clamp();
      const ccIrradiance = dotNLcc.mul(lightColor);
      this.clearcoatSpecularDirect.addAssign(ccIrradiance.mul(BRDF_GGX({ lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: clearcoatNormalView })));
    }
    reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
    reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_GGX({ lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy })));
  }
  /**
   * This method is intended for implementing the direct light term for
   * rect area light nodes.
   *
   * @param {Object} input - The input data.
   * @param {NodeBuilder} builder - The current node builder.
   */
  directRectArea({ lightColor, lightPosition: lightPosition3, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 }) {
    const p0 = lightPosition3.add(halfWidth).sub(halfHeight);
    const p1 = lightPosition3.sub(halfWidth).sub(halfHeight);
    const p2 = lightPosition3.sub(halfWidth).add(halfHeight);
    const p3 = lightPosition3.add(halfWidth).add(halfHeight);
    const N3 = normalView;
    const V2 = positionViewDirection;
    const P2 = positionView.toVar();
    const uv3 = LTC_Uv({ N: N3, V: V2, roughness });
    const t1 = ltc_1.sample(uv3).toVar();
    const t2 = ltc_2.sample(uv3).toVar();
    const mInv = mat3(
      vec3(t1.x, 0, t1.y),
      vec3(0, 1, 0),
      vec3(t1.z, 0, t1.w)
    ).toVar();
    const fresnel = specularColor.mul(t2.x).add(specularColor.oneMinus().mul(t2.y)).toVar();
    reflectedLight.directSpecular.addAssign(lightColor.mul(fresnel).mul(LTC_Evaluate({ N: N3, V: V2, P: P2, mInv, p0, p1, p2, p3 })));
    reflectedLight.directDiffuse.addAssign(lightColor.mul(diffuseColor).mul(LTC_Evaluate({ N: N3, V: V2, P: P2, mInv: mat3(1, 0, 0, 0, 1, 0, 0, 0, 1), p0, p1, p2, p3 })));
  }
  /**
   * Implements the indirect lighting.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  indirect(builder) {
    this.indirectDiffuse(builder);
    this.indirectSpecular(builder);
    this.ambientOcclusion(builder);
  }
  /**
   * Implements the indirect diffuse term.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  indirectDiffuse(builder) {
    const { irradiance, reflectedLight } = builder.context;
    reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
  }
  /**
   * Implements the indirect specular term.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  indirectSpecular(builder) {
    const { radiance, iblIrradiance, reflectedLight } = builder.context;
    if (this.sheen === true) {
      this.sheenSpecularIndirect.addAssign(iblIrradiance.mul(
        sheen,
        IBLSheenBRDF({
          normal: normalView,
          viewDir: positionViewDirection,
          roughness: sheenRoughness
        })
      ));
    }
    if (this.clearcoat === true) {
      const dotNVcc = clearcoatNormalView.dot(positionViewDirection).clamp();
      const clearcoatEnv = EnvironmentBRDF({
        dotNV: dotNVcc,
        specularColor: clearcoatF0,
        specularF90: clearcoatF90,
        roughness: clearcoatRoughness
      });
      this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(clearcoatEnv));
    }
    const singleScattering = vec3().toVar("singleScattering");
    const multiScattering = vec3().toVar("multiScattering");
    const cosineWeightedIrradiance = iblIrradiance.mul(1 / Math.PI);
    this.computeMultiscattering(singleScattering, multiScattering, specularF90);
    const totalScattering = singleScattering.add(multiScattering);
    const diffuse = diffuseColor.mul(totalScattering.r.max(totalScattering.g).max(totalScattering.b).oneMinus());
    reflectedLight.indirectSpecular.addAssign(radiance.mul(singleScattering));
    reflectedLight.indirectSpecular.addAssign(multiScattering.mul(cosineWeightedIrradiance));
    reflectedLight.indirectDiffuse.addAssign(diffuse.mul(cosineWeightedIrradiance));
  }
  /**
   * Implements the ambient occlusion term.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  ambientOcclusion(builder) {
    const { ambientOcclusion, reflectedLight } = builder.context;
    const dotNV = normalView.dot(positionViewDirection).clamp();
    const aoNV = dotNV.add(ambientOcclusion);
    const aoExp = roughness.mul(-16).oneMinus().negate().exp2();
    const aoNode = ambientOcclusion.sub(aoNV.pow(aoExp).oneMinus()).clamp();
    if (this.clearcoat === true) {
      this.clearcoatSpecularIndirect.mulAssign(ambientOcclusion);
    }
    if (this.sheen === true) {
      this.sheenSpecularIndirect.mulAssign(ambientOcclusion);
    }
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
    reflectedLight.indirectSpecular.mulAssign(aoNode);
  }
  /**
   * Used for final lighting accumulations depending on the requested features.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  finish({ context: context3 }) {
    const { outgoingLight } = context3;
    if (this.clearcoat === true) {
      const dotNVcc = clearcoatNormalView.dot(positionViewDirection).clamp();
      const Fcc = F_Schlick({
        dotVH: dotNVcc,
        f0: clearcoatF0,
        f90: clearcoatF90
      });
      const clearcoatLight = outgoingLight.mul(clearcoat.mul(Fcc).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(clearcoat));
      outgoingLight.assign(clearcoatLight);
    }
    if (this.sheen === true) {
      const sheenEnergyComp = sheen.r.max(sheen.g).max(sheen.b).mul(0.157).oneMinus();
      const sheenLight = outgoingLight.mul(sheenEnergyComp).add(this.sheenSpecularDirect, this.sheenSpecularIndirect);
      outgoingLight.assign(sheenLight);
    }
  }
};
var cubeUV_r0 = float(1);
var cubeUV_m0 = float(-2);
var cubeUV_r1 = float(0.8);
var cubeUV_m1 = float(-1);
var cubeUV_r4 = float(0.4);
var cubeUV_m4 = float(2);
var cubeUV_r5 = float(0.305);
var cubeUV_m5 = float(3);
var cubeUV_r6 = float(0.21);
var cubeUV_m6 = float(4);
var cubeUV_minMipLevel = float(4);
var cubeUV_minTileSize = float(16);
var getFace = Fn(([direction]) => {
  const absDirection = vec3(abs(direction)).toVar();
  const face = float(-1).toVar();
  If(absDirection.x.greaterThan(absDirection.z), () => {
    If(absDirection.x.greaterThan(absDirection.y), () => {
      face.assign(select(direction.x.greaterThan(0), 0, 3));
    }).Else(() => {
      face.assign(select(direction.y.greaterThan(0), 1, 4));
    });
  }).Else(() => {
    If(absDirection.z.greaterThan(absDirection.y), () => {
      face.assign(select(direction.z.greaterThan(0), 2, 5));
    }).Else(() => {
      face.assign(select(direction.y.greaterThan(0), 1, 4));
    });
  });
  return face;
}).setLayout({
  name: "getFace",
  type: "float",
  inputs: [
    { name: "direction", type: "vec3" }
  ]
});
var getUV = Fn(([direction, face]) => {
  const uv3 = vec2().toVar();
  If(face.equal(0), () => {
    uv3.assign(vec2(direction.z, direction.y).div(abs(direction.x)));
  }).ElseIf(face.equal(1), () => {
    uv3.assign(vec2(direction.x.negate(), direction.z.negate()).div(abs(direction.y)));
  }).ElseIf(face.equal(2), () => {
    uv3.assign(vec2(direction.x.negate(), direction.y).div(abs(direction.z)));
  }).ElseIf(face.equal(3), () => {
    uv3.assign(vec2(direction.z.negate(), direction.y).div(abs(direction.x)));
  }).ElseIf(face.equal(4), () => {
    uv3.assign(vec2(direction.x.negate(), direction.z).div(abs(direction.y)));
  }).Else(() => {
    uv3.assign(vec2(direction.x, direction.y).div(abs(direction.z)));
  });
  return mul(0.5, uv3.add(1));
}).setLayout({
  name: "getUV",
  type: "vec2",
  inputs: [
    { name: "direction", type: "vec3" },
    { name: "face", type: "float" }
  ]
});
var roughnessToMip = Fn(([roughness3]) => {
  const mip = float(0).toVar();
  If(roughness3.greaterThanEqual(cubeUV_r1), () => {
    mip.assign(cubeUV_r0.sub(roughness3).mul(cubeUV_m1.sub(cubeUV_m0)).div(cubeUV_r0.sub(cubeUV_r1)).add(cubeUV_m0));
  }).ElseIf(roughness3.greaterThanEqual(cubeUV_r4), () => {
    mip.assign(cubeUV_r1.sub(roughness3).mul(cubeUV_m4.sub(cubeUV_m1)).div(cubeUV_r1.sub(cubeUV_r4)).add(cubeUV_m1));
  }).ElseIf(roughness3.greaterThanEqual(cubeUV_r5), () => {
    mip.assign(cubeUV_r4.sub(roughness3).mul(cubeUV_m5.sub(cubeUV_m4)).div(cubeUV_r4.sub(cubeUV_r5)).add(cubeUV_m4));
  }).ElseIf(roughness3.greaterThanEqual(cubeUV_r6), () => {
    mip.assign(cubeUV_r5.sub(roughness3).mul(cubeUV_m6.sub(cubeUV_m5)).div(cubeUV_r5.sub(cubeUV_r6)).add(cubeUV_m5));
  }).Else(() => {
    mip.assign(float(-2).mul(log2(mul(1.16, roughness3))));
  });
  return mip;
}).setLayout({
  name: "roughnessToMip",
  type: "float",
  inputs: [
    { name: "roughness", type: "float" }
  ]
});
var getDirection = Fn(([uv_immutable, face]) => {
  const uv3 = uv_immutable.toVar();
  uv3.assign(mul(2, uv3).sub(1));
  const direction = vec3(uv3, 1).toVar();
  If(face.equal(0), () => {
    direction.assign(direction.zyx);
  }).ElseIf(face.equal(1), () => {
    direction.assign(direction.xzy);
    direction.xz.mulAssign(-1);
  }).ElseIf(face.equal(2), () => {
    direction.x.mulAssign(-1);
  }).ElseIf(face.equal(3), () => {
    direction.assign(direction.zyx);
    direction.xz.mulAssign(-1);
  }).ElseIf(face.equal(4), () => {
    direction.assign(direction.xzy);
    direction.xy.mulAssign(-1);
  }).ElseIf(face.equal(5), () => {
    direction.z.mulAssign(-1);
  });
  return direction;
}).setLayout({
  name: "getDirection",
  type: "vec3",
  inputs: [
    { name: "uv", type: "vec2" },
    { name: "face", type: "float" }
  ]
});
var textureCubeUV = Fn(([envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP]) => {
  const roughness3 = float(roughness_immutable);
  const sampleDir = vec3(sampleDir_immutable);
  const mip = clamp(roughnessToMip(roughness3), cubeUV_m0, CUBEUV_MAX_MIP);
  const mipF = fract(mip);
  const mipInt = floor(mip);
  const color0 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();
  If(mipF.notEqual(0), () => {
    const color1 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt.add(1), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();
    color0.assign(mix(color0, color1, mipF));
  });
  return color0;
});
var bilinearCubeUV = Fn(([envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP]) => {
  const mipInt = float(mipInt_immutable).toVar();
  const direction = vec3(direction_immutable);
  const face = float(getFace(direction)).toVar();
  const filterInt = float(max$1(cubeUV_minMipLevel.sub(mipInt), 0)).toVar();
  mipInt.assign(max$1(mipInt, cubeUV_minMipLevel));
  const faceSize = float(exp2(mipInt)).toVar();
  const uv3 = vec2(getUV(direction, face).mul(faceSize.sub(2)).add(1)).toVar();
  If(face.greaterThan(2), () => {
    uv3.y.addAssign(faceSize);
    face.subAssign(3);
  });
  uv3.x.addAssign(face.mul(faceSize));
  uv3.x.addAssign(filterInt.mul(mul(3, cubeUV_minTileSize)));
  uv3.y.addAssign(mul(4, exp2(CUBEUV_MAX_MIP).sub(faceSize)));
  uv3.x.mulAssign(CUBEUV_TEXEL_WIDTH);
  uv3.y.mulAssign(CUBEUV_TEXEL_HEIGHT);
  return envMap.sample(uv3).grad(vec2(), vec2());
});
var getSample = Fn(({ envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP }) => {
  const cosTheta = cos2(theta);
  const sampleDirection = outputDirection.mul(cosTheta).add(axis.cross(outputDirection).mul(sin2(theta))).add(axis.mul(axis.dot(outputDirection).mul(cosTheta.oneMinus())));
  return bilinearCubeUV(envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP);
});
var blur = Fn(({ n: n2, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP }) => {
  const axis = vec3(select(latitudinal, poleAxis, cross(poleAxis, outputDirection))).toVar();
  If(axis.equal(vec3(0)), () => {
    axis.assign(vec3(outputDirection.z, 0, outputDirection.x.negate()));
  });
  axis.assign(normalize(axis));
  const gl_FragColor = vec3().toVar();
  gl_FragColor.addAssign(weights.element(0).mul(getSample({ theta: 0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
  Loop({ start: int(1), end: n2 }, ({ i: i2 }) => {
    If(i2.greaterThanEqual(samples), () => {
      Break();
    });
    const theta = float(dTheta.mul(float(i2))).toVar();
    gl_FragColor.addAssign(weights.element(i2).mul(getSample({ theta: theta.mul(-1), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
    gl_FragColor.addAssign(weights.element(i2).mul(getSample({ theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
  });
  return vec4(gl_FragColor, 1);
});
var LOD_MIN = 4;
var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
var MAX_SAMPLES = 20;
var _flatCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
var _cubeCamera = new PerspectiveCamera(90, 1);
var _clearColor$2 = new Color();
var _oldTarget = null;
var _oldActiveCubeFace = 0;
var _oldActiveMipmapLevel = 0;
var PHI = (1 + Math.sqrt(5)) / 2;
var INV_PHI = 1 / PHI;
var _axisDirections = [
  new Vector3(-PHI, INV_PHI, 0),
  new Vector3(PHI, INV_PHI, 0),
  new Vector3(-INV_PHI, 0, PHI),
  new Vector3(INV_PHI, 0, PHI),
  new Vector3(0, PHI, -INV_PHI),
  new Vector3(0, PHI, INV_PHI),
  new Vector3(-1, 1, -1),
  new Vector3(1, 1, -1),
  new Vector3(-1, 1, 1),
  new Vector3(1, 1, 1)
];
var _origin = new Vector3();
var _uniformsMap = /* @__PURE__ */ new WeakMap();
var _faceLib = [
  3,
  1,
  5,
  0,
  4,
  2
];
var _direction = getDirection(uv$1(), attribute("faceIndex")).normalize();
var _outputDirection = vec3(_direction.x, _direction.y, _direction.z);
var PMREMGenerator = class {
  /**
   * Constructs a new PMREM generator.
   *
   * @param {Renderer} renderer - The renderer.
   */
  constructor(renderer3) {
    this._renderer = renderer3;
    this._pingPongRenderTarget = null;
    this._lodMax = 0;
    this._cubeSize = 0;
    this._lodPlanes = [];
    this._sizeLods = [];
    this._sigmas = [];
    this._lodMeshes = [];
    this._blurMaterial = null;
    this._cubemapMaterial = null;
    this._equirectMaterial = null;
    this._backgroundBox = null;
  }
  get _hasInitialized() {
    return this._renderer.hasInitialized();
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety.
   *
   * @param {Scene} scene - The scene to be captured.
   * @param {number} [sigma=0] - The blur radius in radians.
   * @param {number} [near=0.1] - The near plane distance.
   * @param {number} [far=100] - The far plane distance.
   * @param {Object} [options={}] - The configuration options.
   * @param {number} [options.size=256] - The texture size of the PMREM.
   * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
   * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.
   * @return {RenderTarget} The resulting PMREM.
   * @see {@link PMREMGenerator#fromSceneAsync}
   */
  fromScene(scene3, sigma = 0, near = 0.1, far = 100, options = {}) {
    const {
      size = 256,
      position = _origin,
      renderTarget = null
    } = options;
    this._setSize(size);
    if (this._hasInitialized === false) {
      console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");
      const cubeUVRenderTarget2 = renderTarget || this._allocateTarget();
      options.renderTarget = cubeUVRenderTarget2;
      this.fromSceneAsync(scene3, sigma, near, far, options);
      return cubeUVRenderTarget2;
    }
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    const cubeUVRenderTarget = renderTarget || this._allocateTarget();
    cubeUVRenderTarget.depthBuffer = true;
    this._init(cubeUVRenderTarget);
    this._sceneToCubeUV(scene3, near, far, cubeUVRenderTarget, position);
    if (sigma > 0) {
      this._blur(cubeUVRenderTarget, 0, 0, sigma);
    }
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   *
   * @param {Scene} scene - The scene to be captured.
   * @param {number} [sigma=0] - The blur radius in radians.
   * @param {number} [near=0.1] - The near plane distance.
   * @param {number} [far=100] - The far plane distance.
   * @param {Object} [options={}] - The configuration options.
   * @param {number} [options.size=256] - The texture size of the PMREM.
   * @param {Vector3} [options.position=origin] - The position of the internal cube camera that renders the scene.
   * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.
   * @return {Promise<RenderTarget>} A Promise that resolve with the PMREM when the generation has been finished.
   * @see {@link PMREMGenerator#fromScene}
   */
  async fromSceneAsync(scene3, sigma = 0, near = 0.1, far = 100, options = {}) {
    if (this._hasInitialized === false)
      await this._renderer.init();
    return this.fromScene(scene3, sigma, near, far, options);
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} equirectangular - The equirectangular texture to be converted.
   * @param {?RenderTarget} [renderTarget=null] - The render target to use.
   * @return {RenderTarget} The resulting PMREM.
   * @see {@link PMREMGenerator#fromEquirectangularAsync}
   */
  fromEquirectangular(equirectangular, renderTarget = null) {
    if (this._hasInitialized === false) {
      console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead.");
      this._setSizeFromTexture(equirectangular);
      const cubeUVRenderTarget = renderTarget || this._allocateTarget();
      this.fromEquirectangularAsync(equirectangular, cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    return this._fromTexture(equirectangular, renderTarget);
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} equirectangular - The equirectangular texture to be converted.
   * @param {?RenderTarget} [renderTarget=null] - The render target to use.
   * @return {Promise<RenderTarget>} The resulting PMREM.
   * @see {@link PMREMGenerator#fromEquirectangular}
   */
  async fromEquirectangularAsync(equirectangular, renderTarget = null) {
    if (this._hasInitialized === false)
      await this._renderer.init();
    return this._fromTexture(equirectangular, renderTarget);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} cubemap - The cubemap texture to be converted.
   * @param {?RenderTarget} [renderTarget=null] - The render target to use.
   * @return {RenderTarget} The resulting PMREM.
   * @see {@link PMREMGenerator#fromCubemapAsync}
   */
  fromCubemap(cubemap, renderTarget = null) {
    if (this._hasInitialized === false) {
      console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead.");
      this._setSizeFromTexture(cubemap);
      const cubeUVRenderTarget = renderTarget || this._allocateTarget();
      this.fromCubemapAsync(cubemap, renderTarget);
      return cubeUVRenderTarget;
    }
    return this._fromTexture(cubemap, renderTarget);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * with the 256 x 256 cubemap output.
   *
   * @param {Texture} cubemap - The cubemap texture to be converted.
   * @param {?RenderTarget} [renderTarget=null] - The render target to use.
   * @return {Promise<RenderTarget>} The resulting PMREM.
   * @see {@link PMREMGenerator#fromCubemap}
   */
  async fromCubemapAsync(cubemap, renderTarget = null) {
    if (this._hasInitialized === false)
      await this._renderer.init();
    return this._fromTexture(cubemap, renderTarget);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   *
   * @returns {Promise}
   */
  async compileCubemapShader() {
    if (this._cubemapMaterial === null) {
      this._cubemapMaterial = _getCubemapMaterial();
      await this._compileMaterial(this._cubemapMaterial);
    }
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   *
   * @returns {Promise}
   */
  async compileEquirectangularShader() {
    if (this._equirectMaterial === null) {
      this._equirectMaterial = _getEquirectMaterial();
      await this._compileMaterial(this._equirectMaterial);
    }
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose();
    if (this._cubemapMaterial !== null)
      this._cubemapMaterial.dispose();
    if (this._equirectMaterial !== null)
      this._equirectMaterial.dispose();
    if (this._backgroundBox !== null) {
      this._backgroundBox.geometry.dispose();
      this._backgroundBox.material.dispose();
    }
  }
  // private interface
  _setSizeFromTexture(texture3) {
    if (texture3.mapping === CubeReflectionMapping || texture3.mapping === CubeRefractionMapping) {
      this._setSize(texture3.image.length === 0 ? 16 : texture3.image[0].width || texture3.image[0].image.width);
    } else {
      this._setSize(texture3.image.width / 4);
    }
  }
  _setSize(cubeSize) {
    this._lodMax = Math.floor(Math.log2(cubeSize));
    this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    if (this._blurMaterial !== null)
      this._blurMaterial.dispose();
    if (this._pingPongRenderTarget !== null)
      this._pingPongRenderTarget.dispose();
    for (let i2 = 0; i2 < this._lodPlanes.length; i2++) {
      this._lodPlanes[i2].dispose();
    }
  }
  _cleanup(outputTarget) {
    this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);
    outputTarget.scissorTest = false;
    _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
  }
  _fromTexture(texture3, renderTarget) {
    this._setSizeFromTexture(texture3);
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    const cubeUVRenderTarget = renderTarget || this._allocateTarget();
    this._init(cubeUVRenderTarget);
    this._textureToCubeUV(texture3, cubeUVRenderTarget);
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  _allocateTarget() {
    const width = 3 * Math.max(this._cubeSize, 16 * 7);
    const height = 4 * this._cubeSize;
    const cubeUVRenderTarget = _createRenderTarget(width, height);
    return cubeUVRenderTarget;
  }
  _init(renderTarget) {
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== renderTarget.width || this._pingPongRenderTarget.height !== renderTarget.height) {
      if (this._pingPongRenderTarget !== null) {
        this._dispose();
      }
      this._pingPongRenderTarget = _createRenderTarget(renderTarget.width, renderTarget.height);
      const { _lodMax } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes(_lodMax));
      this._blurMaterial = _getBlurShader(_lodMax, renderTarget.width, renderTarget.height);
    }
  }
  async _compileMaterial(material) {
    const tmpMesh = new Mesh(this._lodPlanes[0], material);
    await this._renderer.compile(tmpMesh, _flatCamera);
  }
  _sceneToCubeUV(scene3, near, far, cubeUVRenderTarget, position) {
    const cubeCamera = _cubeCamera;
    cubeCamera.near = near;
    cubeCamera.far = far;
    const upSign = [1, 1, 1, 1, -1, 1];
    const forwardSign = [1, -1, 1, -1, 1, -1];
    const renderer3 = this._renderer;
    const originalAutoClear = renderer3.autoClear;
    renderer3.getClearColor(_clearColor$2);
    renderer3.autoClear = false;
    let backgroundBox = this._backgroundBox;
    if (backgroundBox === null) {
      const backgroundMaterial = new MeshBasicMaterial({
        name: "PMREM.Background",
        side: BackSide,
        depthWrite: false,
        depthTest: false
      });
      backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
    }
    let useSolidColor = false;
    const background = scene3.background;
    if (background) {
      if (background.isColor) {
        backgroundBox.material.color.copy(background);
        scene3.background = null;
        useSolidColor = true;
      }
    } else {
      backgroundBox.material.color.copy(_clearColor$2);
      useSolidColor = true;
    }
    renderer3.setRenderTarget(cubeUVRenderTarget);
    renderer3.clear();
    if (useSolidColor) {
      renderer3.render(backgroundBox, cubeCamera);
    }
    for (let i2 = 0; i2 < 6; i2++) {
      const col = i2 % 3;
      if (col === 0) {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.position.set(position.x, position.y, position.z);
        cubeCamera.lookAt(position.x + forwardSign[i2], position.y, position.z);
      } else if (col === 1) {
        cubeCamera.up.set(0, 0, upSign[i2]);
        cubeCamera.position.set(position.x, position.y, position.z);
        cubeCamera.lookAt(position.x, position.y + forwardSign[i2], position.z);
      } else {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.position.set(position.x, position.y, position.z);
        cubeCamera.lookAt(position.x, position.y, position.z + forwardSign[i2]);
      }
      const size = this._cubeSize;
      _setViewport(cubeUVRenderTarget, col * size, i2 > 2 ? size : 0, size, size);
      renderer3.render(scene3, cubeCamera);
    }
    renderer3.autoClear = originalAutoClear;
    scene3.background = background;
  }
  _textureToCubeUV(texture3, cubeUVRenderTarget) {
    const renderer3 = this._renderer;
    const isCubeTexture = texture3.mapping === CubeReflectionMapping || texture3.mapping === CubeRefractionMapping;
    if (isCubeTexture) {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial(texture3);
      }
    } else {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial(texture3);
      }
    }
    const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
    material.fragmentNode.value = texture3;
    const mesh = this._lodMeshes[0];
    mesh.material = material;
    const size = this._cubeSize;
    _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
    renderer3.setRenderTarget(cubeUVRenderTarget);
    renderer3.render(mesh, _flatCamera);
  }
  _applyPMREM(cubeUVRenderTarget) {
    const renderer3 = this._renderer;
    const autoClear = renderer3.autoClear;
    renderer3.autoClear = false;
    const n2 = this._lodPlanes.length;
    for (let i2 = 1; i2 < n2; i2++) {
      const sigma = Math.sqrt(this._sigmas[i2] * this._sigmas[i2] - this._sigmas[i2 - 1] * this._sigmas[i2 - 1]);
      const poleAxis = _axisDirections[(n2 - i2 - 1) % _axisDirections.length];
      this._blur(cubeUVRenderTarget, i2 - 1, i2, sigma, poleAxis);
    }
    renderer3.autoClear = autoClear;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   *
   * @private
   * @param {RenderTarget} cubeUVRenderTarget - The cubemap render target.
   * @param {number} lodIn - The input level-of-detail.
   * @param {number} lodOut - The output level-of-detail.
   * @param {number} sigma - The blur radius in radians.
   * @param {Vector3} [poleAxis] - The pole axis.
   */
  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
    const pingPongRenderTarget = this._pingPongRenderTarget;
    this._halfBlur(
      cubeUVRenderTarget,
      pingPongRenderTarget,
      lodIn,
      lodOut,
      sigma,
      "latitudinal",
      poleAxis
    );
    this._halfBlur(
      pingPongRenderTarget,
      cubeUVRenderTarget,
      lodOut,
      lodOut,
      sigma,
      "longitudinal",
      poleAxis
    );
  }
  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
    const renderer3 = this._renderer;
    const blurMaterial = this._blurMaterial;
    if (direction !== "latitudinal" && direction !== "longitudinal") {
      console.error("blur direction must be either latitudinal or longitudinal!");
    }
    const STANDARD_DEVIATIONS = 3;
    const blurMesh = this._lodMeshes[lodOut];
    blurMesh.material = blurMaterial;
    const blurUniforms = _uniformsMap.get(blurMaterial);
    const pixels = this._sizeLods[lodIn] - 1;
    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
    const sigmaPixels = sigmaRadians / radiansPerPixel;
    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
    if (samples > MAX_SAMPLES) {
      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
    }
    const weights = [];
    let sum2 = 0;
    for (let i2 = 0; i2 < MAX_SAMPLES; ++i2) {
      const x3 = i2 / sigmaPixels;
      const weight = Math.exp(-x3 * x3 / 2);
      weights.push(weight);
      if (i2 === 0) {
        sum2 += weight;
      } else if (i2 < samples) {
        sum2 += 2 * weight;
      }
    }
    for (let i2 = 0; i2 < weights.length; i2++) {
      weights[i2] = weights[i2] / sum2;
    }
    targetIn.texture.frame = (targetIn.texture.frame || 0) + 1;
    blurUniforms.envMap.value = targetIn.texture;
    blurUniforms.samples.value = samples;
    blurUniforms.weights.array = weights;
    blurUniforms.latitudinal.value = direction === "latitudinal" ? 1 : 0;
    if (poleAxis) {
      blurUniforms.poleAxis.value = poleAxis;
    }
    const { _lodMax } = this;
    blurUniforms.dTheta.value = radiansPerPixel;
    blurUniforms.mipInt.value = _lodMax - lodIn;
    const outputSize = this._sizeLods[lodOut];
    const x2 = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
    const y2 = 4 * (this._cubeSize - outputSize);
    _setViewport(targetOut, x2, y2, 3 * outputSize, 2 * outputSize);
    renderer3.setRenderTarget(targetOut);
    renderer3.render(blurMesh, _flatCamera);
  }
};
function _createPlanes(lodMax) {
  const lodPlanes = [];
  const sizeLods = [];
  const sigmas = [];
  const lodMeshes = [];
  let lod = lodMax;
  const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  for (let i2 = 0; i2 < totalLods; i2++) {
    const sizeLod = Math.pow(2, lod);
    sizeLods.push(sizeLod);
    let sigma = 1 / sizeLod;
    if (i2 > lodMax - LOD_MIN) {
      sigma = EXTRA_LOD_SIGMA[i2 - lodMax + LOD_MIN - 1];
    } else if (i2 === 0) {
      sigma = 0;
    }
    sigmas.push(sigma);
    const texelSize = 1 / (sizeLod - 2);
    const min4 = -texelSize;
    const max5 = 1 + texelSize;
    const uv1 = [min4, min4, max5, min4, max5, max5, min4, min4, max5, max5, min4, max5];
    const cubeFaces = 6;
    const vertices = 6;
    const positionSize = 3;
    const uvSize = 2;
    const faceIndexSize = 1;
    const position = new Float32Array(positionSize * vertices * cubeFaces);
    const uv3 = new Float32Array(uvSize * vertices * cubeFaces);
    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
    for (let face = 0; face < cubeFaces; face++) {
      const x2 = face % 3 * 2 / 3 - 1;
      const y2 = face > 2 ? 0 : -1;
      const coordinates = [
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2 + 1,
        0
      ];
      const faceIdx = _faceLib[face];
      position.set(coordinates, positionSize * vertices * faceIdx);
      uv3.set(uv1, uvSize * vertices * faceIdx);
      const fill = [faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx];
      faceIndex.set(fill, faceIndexSize * vertices * faceIdx);
    }
    const planes = new BufferGeometry();
    planes.setAttribute("position", new BufferAttribute(position, positionSize));
    planes.setAttribute("uv", new BufferAttribute(uv3, uvSize));
    planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
    lodPlanes.push(planes);
    lodMeshes.push(new Mesh(planes, null));
    if (lod > LOD_MIN) {
      lod--;
    }
  }
  return { lodPlanes, sizeLods, sigmas, lodMeshes };
}
function _createRenderTarget(width, height) {
  const params = {
    magFilter: LinearFilter,
    minFilter: LinearFilter,
    generateMipmaps: false,
    type: HalfFloatType,
    format: RGBAFormat,
    colorSpace: LinearSRGBColorSpace
    //depthBuffer: false
  };
  const cubeUVRenderTarget = new RenderTarget(width, height, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
  cubeUVRenderTarget.texture.isPMREMTexture = true;
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}
function _setViewport(target, x2, y2, width, height) {
  target.viewport.set(x2, y2, width, height);
  target.scissor.set(x2, y2, width, height);
}
function _getMaterial(type) {
  const material = new NodeMaterial();
  material.depthTest = false;
  material.depthWrite = false;
  material.blending = NoBlending;
  material.name = `PMREM_${type}`;
  return material;
}
function _getBlurShader(lodMax, width, height) {
  const weights = uniformArray(new Array(MAX_SAMPLES).fill(0));
  const poleAxis = uniform(new Vector3(0, 1, 0));
  const dTheta = uniform(0);
  const n2 = float(MAX_SAMPLES);
  const latitudinal = uniform(0);
  const samples = uniform(1);
  const envMap = texture(null);
  const mipInt = uniform(0);
  const CUBEUV_TEXEL_WIDTH = float(1 / width);
  const CUBEUV_TEXEL_HEIGHT = float(1 / height);
  const CUBEUV_MAX_MIP = float(lodMax);
  const materialUniforms = {
    n: n2,
    latitudinal,
    weights,
    poleAxis,
    outputDirection: _outputDirection,
    dTheta,
    samples,
    envMap,
    mipInt,
    CUBEUV_TEXEL_WIDTH,
    CUBEUV_TEXEL_HEIGHT,
    CUBEUV_MAX_MIP
  };
  const material = _getMaterial("blur");
  material.fragmentNode = blur({ ...materialUniforms, latitudinal: latitudinal.equal(1) });
  _uniformsMap.set(material, materialUniforms);
  return material;
}
function _getCubemapMaterial(envTexture) {
  const material = _getMaterial("cubemap");
  material.fragmentNode = cubeTexture(envTexture, _outputDirection);
  return material;
}
function _getEquirectMaterial(envTexture) {
  const material = _getMaterial("equirect");
  material.fragmentNode = texture(envTexture, equirectUV(_outputDirection), 0);
  return material;
}
var _cache = /* @__PURE__ */ new WeakMap();
function _generateCubeUVSize(imageHeight) {
  const maxMip = Math.log2(imageHeight) - 2;
  const texelHeight = 1 / imageHeight;
  const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
  return { texelWidth, texelHeight, maxMip };
}
function _getPMREMFromTexture(texture3, renderer3, generator) {
  const cache3 = _getCache(renderer3);
  let cacheTexture = cache3.get(texture3);
  const pmremVersion = cacheTexture !== void 0 ? cacheTexture.pmremVersion : -1;
  if (pmremVersion !== texture3.pmremVersion) {
    const image = texture3.image;
    if (texture3.isCubeTexture) {
      if (isCubeMapReady(image)) {
        cacheTexture = generator.fromCubemap(texture3, cacheTexture);
      } else {
        return null;
      }
    } else {
      if (isEquirectangularMapReady(image)) {
        cacheTexture = generator.fromEquirectangular(texture3, cacheTexture);
      } else {
        return null;
      }
    }
    cacheTexture.pmremVersion = texture3.pmremVersion;
    cache3.set(texture3, cacheTexture);
  }
  return cacheTexture.texture;
}
function _getCache(renderer3) {
  let rendererCache2 = _cache.get(renderer3);
  if (rendererCache2 === void 0) {
    rendererCache2 = /* @__PURE__ */ new WeakMap();
    _cache.set(renderer3, rendererCache2);
  }
  return rendererCache2;
}
var PMREMNode = class extends TempNode {
  static get type() {
    return "PMREMNode";
  }
  /**
   * Constructs a new function overloading node.
   *
   * @param {Texture} value - The input texture.
   * @param {Node<vec2>} [uvNode=null] - The uv node.
   * @param {Node<float>} [levelNode=null] - The level node.
   */
  constructor(value, uvNode = null, levelNode = null) {
    super("vec3");
    this._value = value;
    this._pmrem = null;
    this.uvNode = uvNode;
    this.levelNode = levelNode;
    this._generator = null;
    const defaultTexture = new Texture();
    defaultTexture.isRenderTargetTexture = true;
    this._texture = texture(defaultTexture);
    this._width = uniform(0);
    this._height = uniform(0);
    this._maxMip = uniform(0);
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  set value(value) {
    this._value = value;
    this._pmrem = null;
  }
  /**
   * The node's texture value.
   *
   * @type {Texture}
   */
  get value() {
    return this._value;
  }
  /**
   * Uses the given PMREM texture to update internal values.
   *
   * @param {Texture} texture - The PMREM texture.
   */
  updateFromTexture(texture3) {
    const cubeUVSize = _generateCubeUVSize(texture3.image.height);
    this._texture.value = texture3;
    this._width.value = cubeUVSize.texelWidth;
    this._height.value = cubeUVSize.texelHeight;
    this._maxMip.value = cubeUVSize.maxMip;
  }
  updateBefore(frame) {
    let pmrem = this._pmrem;
    const pmremVersion = pmrem ? pmrem.pmremVersion : -1;
    const texture3 = this._value;
    if (pmremVersion !== texture3.pmremVersion) {
      if (texture3.isPMREMTexture === true) {
        pmrem = texture3;
      } else {
        pmrem = _getPMREMFromTexture(texture3, frame.renderer, this._generator);
      }
      if (pmrem !== null) {
        this._pmrem = pmrem;
        this.updateFromTexture(pmrem);
      }
    }
  }
  setup(builder) {
    if (this._generator === null) {
      this._generator = new PMREMGenerator(builder.renderer);
    }
    this.updateBefore(builder);
    let uvNode = this.uvNode;
    if (uvNode === null && builder.context.getUV) {
      uvNode = builder.context.getUV(this);
    }
    uvNode = materialEnvRotation.mul(vec3(uvNode.x, uvNode.y.negate(), uvNode.z));
    let levelNode = this.levelNode;
    if (levelNode === null && builder.context.getTextureLevel) {
      levelNode = builder.context.getTextureLevel(this);
    }
    return textureCubeUV(this._texture, uvNode, levelNode, this._width, this._height, this._maxMip);
  }
  dispose() {
    super.dispose();
    if (this._generator !== null)
      this._generator.dispose();
  }
};
function isCubeMapReady(image) {
  if (image === null || image === void 0)
    return false;
  let count = 0;
  const length3 = 6;
  for (let i2 = 0; i2 < length3; i2++) {
    if (image[i2] !== void 0)
      count++;
  }
  return count === length3;
}
function isEquirectangularMapReady(image) {
  if (image === null || image === void 0)
    return false;
  return image.height > 0;
}
var pmremTexture = nodeProxy(PMREMNode).setParameterLength(1, 3);
var _envNodeCache = /* @__PURE__ */ new WeakMap();
var EnvironmentNode = class extends LightingNode {
  static get type() {
    return "EnvironmentNode";
  }
  /**
   * Constructs a new environment node.
   *
   * @param {Node} [envNode=null] - A node representing the environment.
   */
  constructor(envNode = null) {
    super();
    this.envNode = envNode;
  }
  setup(builder) {
    const { material } = builder;
    let envNode = this.envNode;
    if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {
      const value = envNode.isTextureNode ? envNode.value : material[envNode.property];
      let cacheEnvNode = _envNodeCache.get(value);
      if (cacheEnvNode === void 0) {
        cacheEnvNode = pmremTexture(value);
        _envNodeCache.set(value, cacheEnvNode);
      }
      envNode = cacheEnvNode;
    }
    const useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;
    const radianceNormalView = useAnisotropy ? bentNormalView : normalView;
    const radiance = envNode.context(createRadianceContext(roughness, radianceNormalView)).mul(materialEnvIntensity);
    const irradiance = envNode.context(createIrradianceContext(normalWorld)).mul(Math.PI).mul(materialEnvIntensity);
    const isolateRadiance = cache(radiance);
    const isolateIrradiance = cache(irradiance);
    builder.context.radiance.addAssign(isolateRadiance);
    builder.context.iblIrradiance.addAssign(isolateIrradiance);
    const clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;
    if (clearcoatRadiance) {
      const clearcoatRadianceContext = envNode.context(createRadianceContext(clearcoatRoughness, clearcoatNormalView)).mul(materialEnvIntensity);
      const isolateClearcoatRadiance = cache(clearcoatRadianceContext);
      clearcoatRadiance.addAssign(isolateClearcoatRadiance);
    }
  }
};
var createRadianceContext = (roughnessNode, normalViewNode) => {
  let reflectVec = null;
  return {
    getUV: () => {
      if (reflectVec === null) {
        reflectVec = positionViewDirection.negate().reflect(normalViewNode);
        reflectVec = roughnessNode.mul(roughnessNode).mix(reflectVec, normalViewNode).normalize();
        reflectVec = reflectVec.transformDirection(cameraViewMatrix);
      }
      return reflectVec;
    },
    getTextureLevel: () => {
      return roughnessNode;
    }
  };
};
var createIrradianceContext = (normalWorldNode) => {
  return {
    getUV: () => {
      return normalWorldNode;
    },
    getTextureLevel: () => {
      return float(1);
    }
  };
};
var _defaultValues$6 = new MeshStandardMaterial();
var MeshStandardNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "MeshStandardNodeMaterial";
  }
  /**
   * Constructs a new mesh standard node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshStandardNodeMaterial = true;
    this.lights = true;
    this.emissiveNode = null;
    this.metalnessNode = null;
    this.roughnessNode = null;
    this.setDefaultValues(_defaultValues$6);
    this.setValues(parameters);
  }
  /**
   * Overwritten since this type of material uses {@link EnvironmentNode}
   * to implement the PBR (PMREM based) environment mapping. Besides, the
   * method honors `Scene.environment`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {?EnvironmentNode<vec3>} The environment node.
   */
  setupEnvironment(builder) {
    let envNode = super.setupEnvironment(builder);
    if (envNode === null && builder.environmentNode) {
      envNode = builder.environmentNode;
    }
    return envNode ? new EnvironmentNode(envNode) : null;
  }
  /**
   * Setups the lighting model.
   *
   * @return {PhysicalLightingModel} The lighting model.
   */
  setupLightingModel() {
    return new PhysicalLightingModel();
  }
  /**
   * Setups the specular related node variables.
   */
  setupSpecular() {
    const specularColorNode = mix(vec3(0.04), diffuseColor.rgb, metalness);
    specularColor.assign(specularColorNode);
    specularF90.assign(1);
  }
  /**
   * Setups the standard specific node variables.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupVariants() {
    const metalnessNode = this.metalnessNode ? float(this.metalnessNode) : materialMetalness;
    metalness.assign(metalnessNode);
    let roughnessNode = this.roughnessNode ? float(this.roughnessNode) : materialRoughness;
    roughnessNode = getRoughness({ roughness: roughnessNode });
    roughness.assign(roughnessNode);
    this.setupSpecular();
    diffuseColor.assign(vec4(diffuseColor.rgb.mul(metalnessNode.oneMinus()), diffuseColor.a));
  }
  copy(source) {
    this.emissiveNode = source.emissiveNode;
    this.metalnessNode = source.metalnessNode;
    this.roughnessNode = source.roughnessNode;
    return super.copy(source);
  }
};
var _defaultValues$5 = new MeshPhysicalMaterial();
var MeshPhysicalNodeMaterial = class extends MeshStandardNodeMaterial {
  static get type() {
    return "MeshPhysicalNodeMaterial";
  }
  /**
   * Constructs a new mesh physical node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshPhysicalNodeMaterial = true;
    this.clearcoatNode = null;
    this.clearcoatRoughnessNode = null;
    this.clearcoatNormalNode = null;
    this.sheenNode = null;
    this.sheenRoughnessNode = null;
    this.iridescenceNode = null;
    this.iridescenceIORNode = null;
    this.iridescenceThicknessNode = null;
    this.specularIntensityNode = null;
    this.specularColorNode = null;
    this.iorNode = null;
    this.transmissionNode = null;
    this.thicknessNode = null;
    this.attenuationDistanceNode = null;
    this.attenuationColorNode = null;
    this.dispersionNode = null;
    this.anisotropyNode = null;
    this.setDefaultValues(_defaultValues$5);
    this.setValues(parameters);
  }
  /**
   * Whether the lighting model should use clearcoat or not.
   *
   * @type {boolean}
   * @default true
   */
  get useClearcoat() {
    return this.clearcoat > 0 || this.clearcoatNode !== null;
  }
  /**
   * Whether the lighting model should use iridescence or not.
   *
   * @type {boolean}
   * @default true
   */
  get useIridescence() {
    return this.iridescence > 0 || this.iridescenceNode !== null;
  }
  /**
   * Whether the lighting model should use sheen or not.
   *
   * @type {boolean}
   * @default true
   */
  get useSheen() {
    return this.sheen > 0 || this.sheenNode !== null;
  }
  /**
   * Whether the lighting model should use anisotropy or not.
   *
   * @type {boolean}
   * @default true
   */
  get useAnisotropy() {
    return this.anisotropy > 0 || this.anisotropyNode !== null;
  }
  /**
   * Whether the lighting model should use transmission or not.
   *
   * @type {boolean}
   * @default true
   */
  get useTransmission() {
    return this.transmission > 0 || this.transmissionNode !== null;
  }
  /**
   * Whether the lighting model should use dispersion or not.
   *
   * @type {boolean}
   * @default true
   */
  get useDispersion() {
    return this.dispersion > 0 || this.dispersionNode !== null;
  }
  /**
   * Setups the specular related node variables.
   */
  setupSpecular() {
    const iorNode = this.iorNode ? float(this.iorNode) : materialIOR;
    ior.assign(iorNode);
    specularColor.assign(mix(min$1(pow2(ior.sub(1).div(ior.add(1))).mul(materialSpecularColor), vec3(1)).mul(materialSpecularIntensity), diffuseColor.rgb, metalness));
    specularF90.assign(mix(materialSpecularIntensity, 1, metalness));
  }
  /**
   * Setups the lighting model.
   *
   * @return {PhysicalLightingModel} The lighting model.
   */
  setupLightingModel() {
    return new PhysicalLightingModel(this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion);
  }
  /**
   * Setups the physical specific node variables.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupVariants(builder) {
    super.setupVariants(builder);
    if (this.useClearcoat) {
      const clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;
      const clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;
      clearcoat.assign(clearcoatNode);
      clearcoatRoughness.assign(getRoughness({ roughness: clearcoatRoughnessNode }));
    }
    if (this.useSheen) {
      const sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;
      const sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;
      sheen.assign(sheenNode);
      sheenRoughness.assign(sheenRoughnessNode);
    }
    if (this.useIridescence) {
      const iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;
      const iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;
      const iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;
      iridescence.assign(iridescenceNode);
      iridescenceIOR.assign(iridescenceIORNode);
      iridescenceThickness.assign(iridescenceThicknessNode);
    }
    if (this.useAnisotropy) {
      const anisotropyV = (this.anisotropyNode ? vec2(this.anisotropyNode) : materialAnisotropy).toVar();
      anisotropy.assign(anisotropyV.length());
      If(anisotropy.equal(0), () => {
        anisotropyV.assign(vec2(1, 0));
      }).Else(() => {
        anisotropyV.divAssign(vec2(anisotropy));
        anisotropy.assign(anisotropy.saturate());
      });
      alphaT.assign(anisotropy.pow2().mix(roughness.pow2(), 1));
      anisotropyT.assign(TBNViewMatrix[0].mul(anisotropyV.x).add(TBNViewMatrix[1].mul(anisotropyV.y)));
      anisotropyB.assign(TBNViewMatrix[1].mul(anisotropyV.x).sub(TBNViewMatrix[0].mul(anisotropyV.y)));
    }
    if (this.useTransmission) {
      const transmissionNode = this.transmissionNode ? float(this.transmissionNode) : materialTransmission;
      const thicknessNode = this.thicknessNode ? float(this.thicknessNode) : materialThickness;
      const attenuationDistanceNode = this.attenuationDistanceNode ? float(this.attenuationDistanceNode) : materialAttenuationDistance;
      const attenuationColorNode = this.attenuationColorNode ? vec3(this.attenuationColorNode) : materialAttenuationColor;
      transmission.assign(transmissionNode);
      thickness.assign(thicknessNode);
      attenuationDistance.assign(attenuationDistanceNode);
      attenuationColor.assign(attenuationColorNode);
      if (this.useDispersion) {
        const dispersionNode = this.dispersionNode ? float(this.dispersionNode) : materialDispersion;
        dispersion.assign(dispersionNode);
      }
    }
  }
  /**
   * Setups the clearcoat normal node.
   *
   * @return {Node<vec3>} The clearcoat normal.
   */
  setupClearcoatNormal() {
    return this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;
  }
  setup(builder) {
    builder.context.setupClearcoatNormal = () => subBuild(this.setupClearcoatNormal(builder), "NORMAL", "vec3");
    super.setup(builder);
  }
  copy(source) {
    this.clearcoatNode = source.clearcoatNode;
    this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;
    this.clearcoatNormalNode = source.clearcoatNormalNode;
    this.sheenNode = source.sheenNode;
    this.sheenRoughnessNode = source.sheenRoughnessNode;
    this.iridescenceNode = source.iridescenceNode;
    this.iridescenceIORNode = source.iridescenceIORNode;
    this.iridescenceThicknessNode = source.iridescenceThicknessNode;
    this.specularIntensityNode = source.specularIntensityNode;
    this.specularColorNode = source.specularColorNode;
    this.transmissionNode = source.transmissionNode;
    this.thicknessNode = source.thicknessNode;
    this.attenuationDistanceNode = source.attenuationDistanceNode;
    this.attenuationColorNode = source.attenuationColorNode;
    this.dispersionNode = source.dispersionNode;
    this.anisotropyNode = source.anisotropyNode;
    return super.copy(source);
  }
};
var getGradientIrradiance = Fn(({ normal: normal2, lightDirection, builder }) => {
  const dotNL = normal2.dot(lightDirection);
  const coord = vec2(dotNL.mul(0.5).add(0.5), 0);
  if (builder.material.gradientMap) {
    const gradientMap = materialReference("gradientMap", "texture").context({ getUV: () => coord });
    return vec3(gradientMap.r);
  } else {
    const fw = coord.fwidth().mul(0.5);
    return mix(vec3(0.7), vec3(1), smoothstep(float(0.7).sub(fw.x), float(0.7).add(fw.x), coord.x));
  }
});
var ToonLightingModel = class extends LightingModel {
  /**
   * Implements the direct lighting. Instead of using a conventional smooth irradiance, the irradiance is
   * reduced to a small number of discrete shades to create a comic-like, flat look.
   *
   * @param {Object} lightData - The light data.
   * @param {NodeBuilder} builder - The current node builder.
   */
  direct({ lightDirection, lightColor, reflectedLight }, builder) {
    const irradiance = getGradientIrradiance({ normal: normalGeometry, lightDirection, builder }).mul(lightColor);
    reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
  }
  /**
   * Implements the indirect lighting.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  indirect(builder) {
    const { ambientOcclusion, irradiance, reflectedLight } = builder.context;
    reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
  }
};
var _defaultValues$4 = new MeshToonMaterial();
var MeshToonNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "MeshToonNodeMaterial";
  }
  /**
   * Constructs a new mesh toon node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshToonNodeMaterial = true;
    this.lights = true;
    this.setDefaultValues(_defaultValues$4);
    this.setValues(parameters);
  }
  /**
   * Setups the lighting model.
   *
   * @return {ToonLightingModel} The lighting model.
   */
  setupLightingModel() {
    return new ToonLightingModel();
  }
};
var matcapUV = Fn(() => {
  const x2 = vec3(positionViewDirection.z, 0, positionViewDirection.x.negate()).normalize();
  const y2 = positionViewDirection.cross(x2);
  return vec2(x2.dot(normalView), y2.dot(normalView)).mul(0.495).add(0.5);
}).once(["NORMAL", "VERTEX"])().toVar("matcapUV");
var _defaultValues$3 = new MeshMatcapMaterial();
var MeshMatcapNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "MeshMatcapNodeMaterial";
  }
  /**
   * Constructs a new mesh normal node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isMeshMatcapNodeMaterial = true;
    this.setDefaultValues(_defaultValues$3);
    this.setValues(parameters);
  }
  /**
   * Setups the matcap specific node variables.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupVariants(builder) {
    const uv3 = matcapUV;
    let matcapColor;
    if (builder.material.matcap) {
      matcapColor = materialReference("matcap", "texture").context({ getUV: () => uv3 });
    } else {
      matcapColor = vec3(mix(0.2, 0.8, uv3.y));
    }
    diffuseColor.rgb.mulAssign(matcapColor.rgb);
  }
};
var RotateNode = class extends TempNode {
  static get type() {
    return "RotateNode";
  }
  /**
   * Constructs a new rotate node.
   *
   * @param {Node} positionNode - The position node.
   * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending
   * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.
   */
  constructor(positionNode, rotationNode) {
    super();
    this.positionNode = positionNode;
    this.rotationNode = rotationNode;
  }
  /**
   * The type of the {@link RotateNode#positionNode} defines the node's type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node's type.
   */
  getNodeType(builder) {
    return this.positionNode.getNodeType(builder);
  }
  setup(builder) {
    const { rotationNode, positionNode } = this;
    const nodeType = this.getNodeType(builder);
    if (nodeType === "vec2") {
      const cosAngle = rotationNode.cos();
      const sinAngle = rotationNode.sin();
      const rotationMatrix = mat2(
        cosAngle,
        sinAngle,
        sinAngle.negate(),
        cosAngle
      );
      return rotationMatrix.mul(positionNode);
    } else {
      const rotation = rotationNode;
      const rotationXMatrix = mat4(vec4(1, 0, 0, 0), vec4(0, cos2(rotation.x), sin2(rotation.x).negate(), 0), vec4(0, sin2(rotation.x), cos2(rotation.x), 0), vec4(0, 0, 0, 1));
      const rotationYMatrix = mat4(vec4(cos2(rotation.y), 0, sin2(rotation.y), 0), vec4(0, 1, 0, 0), vec4(sin2(rotation.y).negate(), 0, cos2(rotation.y), 0), vec4(0, 0, 0, 1));
      const rotationZMatrix = mat4(vec4(cos2(rotation.z), sin2(rotation.z).negate(), 0, 0), vec4(sin2(rotation.z), cos2(rotation.z), 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
      return rotationXMatrix.mul(rotationYMatrix).mul(rotationZMatrix).mul(vec4(positionNode, 1)).xyz;
    }
  }
};
var rotate = nodeProxy(RotateNode).setParameterLength(2);
var _defaultValues$2 = new SpriteMaterial();
var SpriteNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "SpriteNodeMaterial";
  }
  /**
   * Constructs a new sprite node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isSpriteNodeMaterial = true;
    this._useSizeAttenuation = true;
    this.positionNode = null;
    this.rotationNode = null;
    this.scaleNode = null;
    this.transparent = true;
    this.setDefaultValues(_defaultValues$2);
    this.setValues(parameters);
  }
  /**
   * Setups the position node in view space. This method implements
   * the sprite specific vertex shader.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node<vec3>} The position in view space.
   */
  setupPositionView(builder) {
    const { object, camera: camera3 } = builder;
    const { positionNode, rotationNode, scaleNode, sizeAttenuation } = this;
    const mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));
    let scale2 = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());
    if (scaleNode !== null) {
      scale2 = scale2.mul(vec2(scaleNode));
    }
    if (camera3.isPerspectiveCamera && sizeAttenuation === false) {
      scale2 = scale2.mul(mvPosition.z.negate());
    }
    let alignedPosition = positionGeometry.xy;
    if (object.center && object.center.isVector2 === true) {
      const center = reference$1("center", "vec2", object);
      alignedPosition = alignedPosition.sub(center.sub(0.5));
    }
    alignedPosition = alignedPosition.mul(scale2);
    const rotation = float(rotationNode || materialRotation);
    const rotatedPosition = rotate(alignedPosition, rotation);
    return vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);
  }
  copy(source) {
    this.positionNode = source.positionNode;
    this.rotationNode = source.rotationNode;
    this.scaleNode = source.scaleNode;
    return super.copy(source);
  }
  /**
   * Whether to use size attenuation or not.
   *
   * @type {boolean}
   * @default true
   */
  get sizeAttenuation() {
    return this._useSizeAttenuation;
  }
  set sizeAttenuation(value) {
    if (this._useSizeAttenuation !== value) {
      this._useSizeAttenuation = value;
      this.needsUpdate = true;
    }
  }
};
var _defaultValues$1 = new PointsMaterial();
var _size$4 = new Vector2();
var PointsNodeMaterial = class extends SpriteNodeMaterial {
  static get type() {
    return "PointsNodeMaterial";
  }
  /**
   * Constructs a new points node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.sizeNode = null;
    this.isPointsNodeMaterial = true;
    this.setDefaultValues(_defaultValues$1);
    this.setValues(parameters);
  }
  setupPositionView() {
    const { positionNode } = this;
    return modelViewMatrix.mul(vec3(positionNode || positionLocal)).xyz;
  }
  setupVertexSprite(builder) {
    const { material, camera: camera3 } = builder;
    const { rotationNode, scaleNode, sizeNode, sizeAttenuation } = this;
    let mvp = super.setupVertex(builder);
    if (material.isNodeMaterial !== true) {
      return mvp;
    }
    let pointSize = sizeNode !== null ? vec2(sizeNode) : materialPointSize;
    pointSize = pointSize.mul(screenDPR);
    if (camera3.isPerspectiveCamera && sizeAttenuation === true) {
      pointSize = pointSize.mul(scale.div(positionView.z.negate()));
    }
    if (scaleNode && scaleNode.isNode) {
      pointSize = pointSize.mul(vec2(scaleNode));
    }
    let offset = positionGeometry.xy;
    if (rotationNode && rotationNode.isNode) {
      const rotation = float(rotationNode);
      offset = rotate(offset, rotation);
    }
    offset = offset.mul(pointSize);
    offset = offset.div(viewportSize.div(2));
    offset = offset.mul(mvp.w);
    mvp = mvp.add(vec4(offset, 0, 0));
    return mvp;
  }
  setupVertex(builder) {
    if (builder.object.isPoints) {
      return super.setupVertex(builder);
    } else {
      return this.setupVertexSprite(builder);
    }
  }
  /**
   * Whether alpha to coverage should be used or not.
   *
   * @type {boolean}
   * @default true
   */
  get alphaToCoverage() {
    return this._useAlphaToCoverage;
  }
  set alphaToCoverage(value) {
    if (this._useAlphaToCoverage !== value) {
      this._useAlphaToCoverage = value;
      this.needsUpdate = true;
    }
  }
};
var scale = uniform(1).onFrameUpdate(function({ renderer: renderer3 }) {
  const size = renderer3.getSize(_size$4);
  this.value = 0.5 * size.y;
});
var ShadowMaskModel = class extends LightingModel {
  /**
   * Constructs a new shadow mask model.
   */
  constructor() {
    super();
    this.shadowNode = float(1).toVar("shadowMask");
  }
  /**
   * Only used to save the shadow mask.
   *
   * @param {Object} input - The input data.
   */
  direct({ lightNode }) {
    if (lightNode.shadowNode !== null) {
      this.shadowNode.mulAssign(lightNode.shadowNode);
    }
  }
  /**
   * Uses the shadow mask to produce the final color.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  finish({ context: context3 }) {
    diffuseColor.a.mulAssign(this.shadowNode.oneMinus());
    context3.outgoingLight.rgb.assign(diffuseColor.rgb);
  }
};
var _defaultValues = new ShadowMaterial();
var ShadowNodeMaterial = class extends NodeMaterial {
  static get type() {
    return "ShadowNodeMaterial";
  }
  /**
   * Constructs a new shadow node material.
   *
   * @param {Object} [parameters] - The configuration parameter.
   */
  constructor(parameters) {
    super();
    this.isShadowNodeMaterial = true;
    this.lights = true;
    this.transparent = true;
    this.setDefaultValues(_defaultValues);
    this.setValues(parameters);
  }
  /**
   * Setups the lighting model.
   *
   * @return {ShadowMaskModel} The lighting model.
   */
  setupLightingModel() {
    return new ShadowMaskModel();
  }
};
var scatteringDensity = property("vec3");
var linearDepthRay = property("vec3");
var outgoingRayLight = property("vec3");
var Animation = class {
  /**
   * Constructs a new animation loop management component.
   *
   * @param {Nodes} nodes - Renderer component for managing nodes related logic.
   * @param {Info} info - Renderer component for managing metrics and monitoring data.
   */
  constructor(nodes, info) {
    this.nodes = nodes;
    this.info = info;
    this._context = typeof self !== "undefined" ? self : null;
    this._animationLoop = null;
    this._requestId = null;
  }
  /**
   * Starts the internal animation loop.
   */
  start() {
    const update20 = (time3, xrFrame) => {
      this._requestId = this._context.requestAnimationFrame(update20);
      if (this.info.autoReset === true)
        this.info.reset();
      this.nodes.nodeFrame.update();
      this.info.frame = this.nodes.nodeFrame.frameId;
      if (this._animationLoop !== null)
        this._animationLoop(time3, xrFrame);
    };
    update20();
  }
  /**
   * Stops the internal animation loop.
   */
  stop() {
    this._context.cancelAnimationFrame(this._requestId);
    this._requestId = null;
  }
  /**
   * Returns the user-level animation loop.
   *
   * @return {?Function} The animation loop.
   */
  getAnimationLoop() {
    return this._animationLoop;
  }
  /**
   * Defines the user-level animation loop.
   *
   * @param {?Function} callback - The animation loop.
   */
  setAnimationLoop(callback) {
    this._animationLoop = callback;
  }
  /**
   * Returns the animation context.
   *
   * @return {Window|XRSession} The animation context.
   */
  getContext() {
    return this._context;
  }
  /**
   * Defines the context in which `requestAnimationFrame()` is executed.
   *
   * @param {Window|XRSession} context - The context to set.
   */
  setContext(context3) {
    this._context = context3;
  }
  /**
   * Frees all internal resources and stops the animation loop.
   */
  dispose() {
    this.stop();
  }
};
var ChainMap = class {
  /**
   * Constructs a new Chain Map.
   */
  constructor() {
    this.weakMap = /* @__PURE__ */ new WeakMap();
  }
  /**
   * Returns the value for the given array of keys.
   *
   * @param {Array<Object>} keys - List of keys.
   * @return {any} The value. Returns `undefined` if no value was found.
   */
  get(keys) {
    let map = this.weakMap;
    for (let i2 = 0; i2 < keys.length - 1; i2++) {
      map = map.get(keys[i2]);
      if (map === void 0)
        return void 0;
    }
    return map.get(keys[keys.length - 1]);
  }
  /**
   * Sets the value for the given keys.
   *
   * @param {Array<Object>} keys - List of keys.
   * @param {any} value - The value to set.
   * @return {ChainMap} A reference to this Chain Map.
   */
  set(keys, value) {
    let map = this.weakMap;
    for (let i2 = 0; i2 < keys.length - 1; i2++) {
      const key = keys[i2];
      if (map.has(key) === false)
        map.set(key, /* @__PURE__ */ new WeakMap());
      map = map.get(key);
    }
    map.set(keys[keys.length - 1], value);
    return this;
  }
  /**
   * Deletes a value for the given keys.
   *
   * @param {Array<Object>} keys - The keys.
   * @return {boolean} Returns `true` if the value has been removed successfully and `false` if the value has not be found.
   */
  delete(keys) {
    let map = this.weakMap;
    for (let i2 = 0; i2 < keys.length - 1; i2++) {
      map = map.get(keys[i2]);
      if (map === void 0)
        return false;
    }
    return map.delete(keys[keys.length - 1]);
  }
};
var _id$9 = 0;
function getKeys(obj) {
  const keys = Object.keys(obj);
  let proto2 = Object.getPrototypeOf(obj);
  while (proto2) {
    const descriptors = Object.getOwnPropertyDescriptors(proto2);
    for (const key in descriptors) {
      if (descriptors[key] !== void 0) {
        const descriptor = descriptors[key];
        if (descriptor && typeof descriptor.get === "function") {
          keys.push(key);
        }
      }
    }
    proto2 = Object.getPrototypeOf(proto2);
  }
  return keys;
}
var RenderObject = class {
  /**
   * Constructs a new render object.
   *
   * @param {Nodes} nodes - Renderer component for managing nodes related logic.
   * @param {Geometries} geometries - Renderer component for managing geometries.
   * @param {Renderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Material} material - The 3D object's material.
   * @param {Scene} scene - The scene the 3D object belongs to.
   * @param {Camera} camera - The camera the object should be rendered with.
   * @param {LightsNode} lightsNode - The lights node.
   * @param {RenderContext} renderContext - The render context.
   * @param {ClippingContext} clippingContext - The clipping context.
   */
  constructor(nodes, geometries, renderer3, object, material, scene3, camera3, lightsNode, renderContext, clippingContext) {
    this.id = _id$9++;
    this._nodes = nodes;
    this._geometries = geometries;
    this.renderer = renderer3;
    this.object = object;
    this.material = material;
    this.scene = scene3;
    this.camera = camera3;
    this.lightsNode = lightsNode;
    this.context = renderContext;
    this.geometry = object.geometry;
    this.version = material.version;
    this.drawRange = null;
    this.attributes = null;
    this.attributesId = null;
    this.pipeline = null;
    this.group = null;
    this.vertexBuffers = null;
    this.drawParams = null;
    this.bundle = null;
    this.clippingContext = clippingContext;
    this.clippingContextCacheKey = clippingContext !== null ? clippingContext.cacheKey : "";
    this.initialNodesCacheKey = this.getDynamicCacheKey();
    this.initialCacheKey = this.getCacheKey();
    this._nodeBuilderState = null;
    this._bindings = null;
    this._monitor = null;
    this.onDispose = null;
    this.isRenderObject = true;
    this.onMaterialDispose = () => {
      this.dispose();
    };
    this.onGeometryDispose = () => {
      this.attributes = null;
      this.attributesId = null;
    };
    this.material.addEventListener("dispose", this.onMaterialDispose);
    this.geometry.addEventListener("dispose", this.onGeometryDispose);
  }
  /**
   * Updates the clipping context.
   *
   * @param {ClippingContext} context - The clipping context to set.
   */
  updateClipping(context3) {
    this.clippingContext = context3;
  }
  /**
   * Whether the clipping requires an update or not.
   *
   * @type {boolean}
   * @readonly
   */
  get clippingNeedsUpdate() {
    if (this.clippingContext === null || this.clippingContext.cacheKey === this.clippingContextCacheKey)
      return false;
    this.clippingContextCacheKey = this.clippingContext.cacheKey;
    return true;
  }
  /**
   * The number of clipping planes defined in context of hardware clipping.
   *
   * @type {number}
   * @readonly
   */
  get hardwareClippingPlanes() {
    return this.material.hardwareClipping === true ? this.clippingContext.unionClippingCount : 0;
  }
  /**
   * Returns the node builder state of this render object.
   *
   * @return {NodeBuilderState} The node builder state.
   */
  getNodeBuilderState() {
    return this._nodeBuilderState || (this._nodeBuilderState = this._nodes.getForRender(this));
  }
  /**
   * Returns the node material observer of this render object.
   *
   * @return {NodeMaterialObserver} The node material observer.
   */
  getMonitor() {
    return this._monitor || (this._monitor = this.getNodeBuilderState().observer);
  }
  /**
   * Returns an array of bind groups of this render object.
   *
   * @return {Array<BindGroup>} The bindings.
   */
  getBindings() {
    return this._bindings || (this._bindings = this.getNodeBuilderState().createBindings());
  }
  /**
   * Returns a binding group by group name of this render object.
   *
   * @param {string} name - The name of the binding group.
   * @return {?BindGroup} The bindings.
   */
  getBindingGroup(name) {
    for (const bindingGroup of this.getBindings()) {
      if (bindingGroup.name === name) {
        return bindingGroup;
      }
    }
  }
  /**
   * Returns the index of the render object's geometry.
   *
   * @return {?BufferAttribute} The index. Returns `null` for non-indexed geometries.
   */
  getIndex() {
    return this._geometries.getIndex(this);
  }
  /**
   * Returns the indirect buffer attribute.
   *
   * @return {?BufferAttribute} The indirect attribute. `null` if no indirect drawing is used.
   */
  getIndirect() {
    return this._geometries.getIndirect(this);
  }
  /**
   * Returns an array that acts as a key for identifying the render object in a chain map.
   *
   * @return {Array<Object>} An array with object references.
   */
  getChainArray() {
    return [this.object, this.material, this.context, this.lightsNode];
  }
  /**
   * This method is used when the geometry of a 3D object has been exchanged and the
   * respective render object now requires an update.
   *
   * @param {BufferGeometry} geometry - The geometry to set.
   */
  setGeometry(geometry) {
    this.geometry = geometry;
    this.attributes = null;
    this.attributesId = null;
  }
  /**
   * Returns the buffer attributes of the render object. The returned array holds
   * attribute definitions on geometry and node level.
   *
   * @return {Array<BufferAttribute>} An array with buffer attributes.
   */
  getAttributes() {
    if (this.attributes !== null)
      return this.attributes;
    const nodeAttributes = this.getNodeBuilderState().nodeAttributes;
    const geometry = this.geometry;
    const attributes = [];
    const vertexBuffers = /* @__PURE__ */ new Set();
    const attributesId = {};
    for (const nodeAttribute of nodeAttributes) {
      let attribute3;
      if (nodeAttribute.node && nodeAttribute.node.attribute) {
        attribute3 = nodeAttribute.node.attribute;
      } else {
        attribute3 = geometry.getAttribute(nodeAttribute.name);
        attributesId[nodeAttribute.name] = attribute3.version;
      }
      if (attribute3 === void 0)
        continue;
      attributes.push(attribute3);
      const bufferAttribute3 = attribute3.isInterleavedBufferAttribute ? attribute3.data : attribute3;
      vertexBuffers.add(bufferAttribute3);
    }
    this.attributes = attributes;
    this.attributesId = attributesId;
    this.vertexBuffers = Array.from(vertexBuffers.values());
    return attributes;
  }
  /**
   * Returns the vertex buffers of the render object.
   *
   * @return {Array<BufferAttribute|InterleavedBuffer>} An array with buffer attribute or interleaved buffers.
   */
  getVertexBuffers() {
    if (this.vertexBuffers === null)
      this.getAttributes();
    return this.vertexBuffers;
  }
  /**
   * Returns the draw parameters for the render object.
   *
   * @return {?{vertexCount: number, firstVertex: number, instanceCount: number, firstInstance: number}} The draw parameters.
   */
  getDrawParameters() {
    const { object, material, geometry, group, drawRange } = this;
    const drawParams = this.drawParams || (this.drawParams = {
      vertexCount: 0,
      firstVertex: 0,
      instanceCount: 0,
      firstInstance: 0
    });
    const index6 = this.getIndex();
    const hasIndex = index6 !== null;
    let instanceCount = 1;
    if (geometry.isInstancedBufferGeometry === true) {
      instanceCount = geometry.instanceCount;
    } else if (object.count !== void 0) {
      instanceCount = Math.max(0, object.count);
    }
    if (instanceCount === 0)
      return null;
    drawParams.instanceCount = instanceCount;
    if (object.isBatchedMesh === true)
      return drawParams;
    let rangeFactor = 1;
    if (material.wireframe === true && !object.isPoints && !object.isLineSegments && !object.isLine && !object.isLineLoop) {
      rangeFactor = 2;
    }
    let firstVertex = drawRange.start * rangeFactor;
    let lastVertex = (drawRange.start + drawRange.count) * rangeFactor;
    if (group !== null) {
      firstVertex = Math.max(firstVertex, group.start * rangeFactor);
      lastVertex = Math.min(lastVertex, (group.start + group.count) * rangeFactor);
    }
    const position = geometry.attributes.position;
    let itemCount = Infinity;
    if (hasIndex) {
      itemCount = index6.count;
    } else if (position !== void 0 && position !== null) {
      itemCount = position.count;
    }
    firstVertex = Math.max(firstVertex, 0);
    lastVertex = Math.min(lastVertex, itemCount);
    const count = lastVertex - firstVertex;
    if (count < 0 || count === Infinity)
      return null;
    drawParams.vertexCount = count;
    drawParams.firstVertex = firstVertex;
    return drawParams;
  }
  /**
   * Returns the render object's geometry cache key.
   *
   * The geometry cache key is part of the material cache key.
   *
   * @return {string} The geometry cache key.
   */
  getGeometryCacheKey() {
    const { geometry } = this;
    let cacheKey = "";
    for (const name of Object.keys(geometry.attributes).sort()) {
      const attribute3 = geometry.attributes[name];
      cacheKey += name + ",";
      if (attribute3.data)
        cacheKey += attribute3.data.stride + ",";
      if (attribute3.offset)
        cacheKey += attribute3.offset + ",";
      if (attribute3.itemSize)
        cacheKey += attribute3.itemSize + ",";
      if (attribute3.normalized)
        cacheKey += "n,";
    }
    for (const name of Object.keys(geometry.morphAttributes).sort()) {
      const targets = geometry.morphAttributes[name];
      cacheKey += "morph-" + name + ",";
      for (let i2 = 0, l2 = targets.length; i2 < l2; i2++) {
        const attribute3 = targets[i2];
        cacheKey += attribute3.id + ",";
      }
    }
    if (geometry.index) {
      cacheKey += "index,";
    }
    return cacheKey;
  }
  /**
   * Returns the render object's material cache key.
   *
   * The material cache key is part of the render object cache key.
   *
   * @return {number} The material cache key.
   */
  getMaterialCacheKey() {
    const { object, material, renderer: renderer3 } = this;
    let cacheKey = material.customProgramCacheKey();
    for (const property3 of getKeys(material)) {
      if (/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(property3))
        continue;
      const value = material[property3];
      let valueKey;
      if (value !== null) {
        const type = typeof value;
        if (type === "number") {
          valueKey = value !== 0 ? "1" : "0";
        } else if (type === "object") {
          valueKey = "{";
          if (value.isTexture) {
            valueKey += value.mapping;
            if (renderer3.backend.isWebGPUBackend === true) {
              valueKey += value.magFilter;
              valueKey += value.minFilter;
              valueKey += value.wrapS;
              valueKey += value.wrapT;
              valueKey += value.wrapR;
            }
          }
          valueKey += "}";
        } else {
          valueKey = String(value);
        }
      } else {
        valueKey = String(value);
      }
      cacheKey += /*property + ':' +*/
      valueKey + ",";
    }
    cacheKey += this.clippingContextCacheKey + ",";
    if (object.geometry) {
      cacheKey += this.getGeometryCacheKey();
    }
    if (object.skeleton) {
      cacheKey += object.skeleton.bones.length + ",";
    }
    if (object.isBatchedMesh) {
      cacheKey += object._matricesTexture.uuid + ",";
      if (object._colorsTexture !== null) {
        cacheKey += object._colorsTexture.uuid + ",";
      }
    }
    if (object.isInstancedMesh || object.count > 1) {
      cacheKey += object.uuid + ",";
    }
    cacheKey += object.receiveShadow + ",";
    return hashString(cacheKey);
  }
  /**
   * Whether the geometry requires an update or not.
   *
   * @type {boolean}
   * @readonly
   */
  get needsGeometryUpdate() {
    if (this.geometry.id !== this.object.geometry.id)
      return true;
    if (this.attributes !== null) {
      const attributesId = this.attributesId;
      for (const name in attributesId) {
        const attribute3 = this.geometry.getAttribute(name);
        if (attribute3 === void 0 || attributesId[name] !== attribute3.id) {
          return true;
        }
      }
    }
    return false;
  }
  /**
   * Whether the render object requires an update or not.
   *
   * Note: There are two distinct places where render objects are checked for an update.
   *
   * 1. In `RenderObjects.get()` which is executed when the render object is request. This
   * method checks the `needsUpdate` flag and recreates the render object if necessary.
   * 2. In `Renderer._renderObjectDirect()` right after getting the render object via
   * `RenderObjects.get()`. The render object's NodeMaterialObserver is then used to detect
   * a need for a refresh due to material, geometry or object related value changes.
   *
   * TODO: Investigate if it's possible to merge both steps so there is only a single place
   * that performs the 'needsUpdate' check.
   *
   * @type {boolean}
   * @readonly
   */
  get needsUpdate() {
    return (
      /*this.object.static !== true &&*/
      this.initialNodesCacheKey !== this.getDynamicCacheKey() || this.clippingNeedsUpdate
    );
  }
  /**
   * Returns the dynamic cache key which represents a key that is computed per draw command.
   *
   * @return {number} The cache key.
   */
  getDynamicCacheKey() {
    let cacheKey = 0;
    if (this.material.isShadowPassMaterial !== true) {
      cacheKey = this._nodes.getCacheKey(this.scene, this.lightsNode);
    }
    if (this.camera.isArrayCamera) {
      cacheKey = hash$1(cacheKey, this.camera.cameras.length);
    }
    if (this.object.receiveShadow) {
      cacheKey = hash$1(cacheKey, 1);
    }
    return cacheKey;
  }
  /**
   * Returns the render object's cache key.
   *
   * @return {number} The cache key.
   */
  getCacheKey() {
    return this.getMaterialCacheKey() + this.getDynamicCacheKey();
  }
  /**
   * Frees internal resources.
   */
  dispose() {
    this.material.removeEventListener("dispose", this.onMaterialDispose);
    this.geometry.removeEventListener("dispose", this.onGeometryDispose);
    this.onDispose();
  }
};
var _chainKeys$5 = [];
var RenderObjects = class {
  /**
   * Constructs a new render object management component.
   *
   * @param {Renderer} renderer - The renderer.
   * @param {Nodes} nodes - Renderer component for managing nodes related logic.
   * @param {Geometries} geometries - Renderer component for managing geometries.
   * @param {Pipelines} pipelines - Renderer component for managing pipelines.
   * @param {Bindings} bindings - Renderer component for managing bindings.
   * @param {Info} info - Renderer component for managing metrics and monitoring data.
   */
  constructor(renderer3, nodes, geometries, pipelines, bindings, info) {
    this.renderer = renderer3;
    this.nodes = nodes;
    this.geometries = geometries;
    this.pipelines = pipelines;
    this.bindings = bindings;
    this.info = info;
    this.chainMaps = {};
  }
  /**
   * Returns a render object for the given object and state data.
   *
   * @param {Object3D} object - The 3D object.
   * @param {Material} material - The 3D object's material.
   * @param {Scene} scene - The scene the 3D object belongs to.
   * @param {Camera} camera - The camera the 3D object should be rendered with.
   * @param {LightsNode} lightsNode - The lights node.
   * @param {RenderContext} renderContext - The render context.
   * @param {ClippingContext} clippingContext - The clipping context.
   * @param {string} [passId] - An optional ID for identifying the pass.
   * @return {RenderObject} The render object.
   */
  get(object, material, scene3, camera3, lightsNode, renderContext, clippingContext, passId) {
    const chainMap = this.getChainMap(passId);
    _chainKeys$5[0] = object;
    _chainKeys$5[1] = material;
    _chainKeys$5[2] = renderContext;
    _chainKeys$5[3] = lightsNode;
    let renderObject = chainMap.get(_chainKeys$5);
    if (renderObject === void 0) {
      renderObject = this.createRenderObject(this.nodes, this.geometries, this.renderer, object, material, scene3, camera3, lightsNode, renderContext, clippingContext, passId);
      chainMap.set(_chainKeys$5, renderObject);
    } else {
      renderObject.updateClipping(clippingContext);
      if (renderObject.needsGeometryUpdate) {
        renderObject.setGeometry(object.geometry);
      }
      if (renderObject.version !== material.version || renderObject.needsUpdate) {
        if (renderObject.initialCacheKey !== renderObject.getCacheKey()) {
          renderObject.dispose();
          renderObject = this.get(object, material, scene3, camera3, lightsNode, renderContext, clippingContext, passId);
        } else {
          renderObject.version = material.version;
        }
      }
    }
    _chainKeys$5.length = 0;
    return renderObject;
  }
  /**
   * Returns a chain map for the given pass ID.
   *
   * @param {string} [passId='default'] - The pass ID.
   * @return {ChainMap} The chain map.
   */
  getChainMap(passId = "default") {
    return this.chainMaps[passId] || (this.chainMaps[passId] = new ChainMap());
  }
  /**
   * Frees internal resources.
   */
  dispose() {
    this.chainMaps = {};
  }
  /**
   * Factory method for creating render objects with the given list of parameters.
   *
   * @param {Nodes} nodes - Renderer component for managing nodes related logic.
   * @param {Geometries} geometries - Renderer component for managing geometries.
   * @param {Renderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Material} material - The object's material.
   * @param {Scene} scene - The scene the 3D object belongs to.
   * @param {Camera} camera - The camera the object should be rendered with.
   * @param {LightsNode} lightsNode - The lights node.
   * @param {RenderContext} renderContext - The render context.
   * @param {ClippingContext} clippingContext - The clipping context.
   * @param {string} [passId] - An optional ID for identifying the pass.
   * @return {RenderObject} The render object.
   */
  createRenderObject(nodes, geometries, renderer3, object, material, scene3, camera3, lightsNode, renderContext, clippingContext, passId) {
    const chainMap = this.getChainMap(passId);
    const renderObject = new RenderObject(nodes, geometries, renderer3, object, material, scene3, camera3, lightsNode, renderContext, clippingContext);
    renderObject.onDispose = () => {
      this.pipelines.delete(renderObject);
      this.bindings.delete(renderObject);
      this.nodes.delete(renderObject);
      chainMap.delete(renderObject.getChainArray());
    };
    return renderObject;
  }
};
var DataMap = class {
  /**
   * Constructs a new data map.
   */
  constructor() {
    this.data = /* @__PURE__ */ new WeakMap();
  }
  /**
   * Returns the dictionary for the given object.
   *
   * @param {Object} object - The object.
   * @return {Object} The dictionary.
   */
  get(object) {
    let map = this.data.get(object);
    if (map === void 0) {
      map = {};
      this.data.set(object, map);
    }
    return map;
  }
  /**
   * Deletes the dictionary for the given object.
   *
   * @param {Object} object - The object.
   * @return {?Object} The deleted dictionary.
   */
  delete(object) {
    let map = null;
    if (this.data.has(object)) {
      map = this.data.get(object);
      this.data.delete(object);
    }
    return map;
  }
  /**
   * Returns `true` if the given object has a dictionary defined.
   *
   * @param {Object} object - The object to test.
   * @return {boolean} Whether a dictionary is defined or not.
   */
  has(object) {
    return this.data.has(object);
  }
  /**
   * Frees internal resources.
   */
  dispose() {
    this.data = /* @__PURE__ */ new WeakMap();
  }
};
var AttributeType = {
  VERTEX: 1,
  INDEX: 2,
  STORAGE: 3,
  INDIRECT: 4
};
var GPU_CHUNK_BYTES = 16;
var BlendColorFactor = 211;
var OneMinusBlendColorFactor = 212;
var Attributes = class extends DataMap {
  /**
   * Constructs a new attribute management component.
   *
   * @param {Backend} backend - The renderer's backend.
   */
  constructor(backend) {
    super();
    this.backend = backend;
  }
  /**
   * Deletes the data for the given attribute.
   *
   * @param {BufferAttribute} attribute - The attribute.
   * @return {?Object} The deleted attribute data.
   */
  delete(attribute3) {
    const attributeData = super.delete(attribute3);
    if (attributeData !== null) {
      this.backend.destroyAttribute(attribute3);
    }
    return attributeData;
  }
  /**
   * Updates the given attribute. This method creates attribute buffers
   * for new attributes and updates data for existing ones.
   *
   * @param {BufferAttribute} attribute - The attribute to update.
   * @param {number} type - The attribute type.
   */
  update(attribute3, type) {
    const data = this.get(attribute3);
    if (data.version === void 0) {
      if (type === AttributeType.VERTEX) {
        this.backend.createAttribute(attribute3);
      } else if (type === AttributeType.INDEX) {
        this.backend.createIndexAttribute(attribute3);
      } else if (type === AttributeType.STORAGE) {
        this.backend.createStorageAttribute(attribute3);
      } else if (type === AttributeType.INDIRECT) {
        this.backend.createIndirectStorageAttribute(attribute3);
      }
      data.version = this._getBufferAttribute(attribute3).version;
    } else {
      const bufferAttribute3 = this._getBufferAttribute(attribute3);
      if (data.version < bufferAttribute3.version || bufferAttribute3.usage === DynamicDrawUsage) {
        this.backend.updateAttribute(attribute3);
        data.version = bufferAttribute3.version;
      }
    }
  }
  /**
   * Utility method for handling interleaved buffer attributes correctly.
   * To process them, their `InterleavedBuffer` is returned.
   *
   * @param {BufferAttribute} attribute - The attribute.
   * @return {BufferAttribute|InterleavedBuffer}
   */
  _getBufferAttribute(attribute3) {
    if (attribute3.isInterleavedBufferAttribute)
      attribute3 = attribute3.data;
    return attribute3;
  }
};
function getWireframeVersion(geometry) {
  return geometry.index !== null ? geometry.index.version : geometry.attributes.position.version;
}
function getWireframeIndex(geometry) {
  const indices = [];
  const geometryIndex = geometry.index;
  const geometryPosition = geometry.attributes.position;
  if (geometryIndex !== null) {
    const array3 = geometryIndex.array;
    for (let i2 = 0, l2 = array3.length; i2 < l2; i2 += 3) {
      const a2 = array3[i2 + 0];
      const b = array3[i2 + 1];
      const c2 = array3[i2 + 2];
      indices.push(a2, b, b, c2, c2, a2);
    }
  } else {
    const array3 = geometryPosition.array;
    for (let i2 = 0, l2 = array3.length / 3 - 1; i2 < l2; i2 += 3) {
      const a2 = i2 + 0;
      const b = i2 + 1;
      const c2 = i2 + 2;
      indices.push(a2, b, b, c2, c2, a2);
    }
  }
  const attribute3 = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
  attribute3.version = getWireframeVersion(geometry);
  return attribute3;
}
var Geometries = class extends DataMap {
  /**
   * Constructs a new geometry management component.
   *
   * @param {Attributes} attributes - Renderer component for managing attributes.
   * @param {Info} info - Renderer component for managing metrics and monitoring data.
   */
  constructor(attributes, info) {
    super();
    this.attributes = attributes;
    this.info = info;
    this.wireframes = /* @__PURE__ */ new WeakMap();
    this.attributeCall = /* @__PURE__ */ new WeakMap();
  }
  /**
   * Returns `true` if the given render object has an initialized geometry.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {boolean} Whether if the given render object has an initialized geometry or not.
   */
  has(renderObject) {
    const geometry = renderObject.geometry;
    return super.has(geometry) && this.get(geometry).initialized === true;
  }
  /**
   * Prepares the geometry of the given render object for rendering.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  updateForRender(renderObject) {
    if (this.has(renderObject) === false)
      this.initGeometry(renderObject);
    this.updateAttributes(renderObject);
  }
  /**
   * Initializes the geometry of the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  initGeometry(renderObject) {
    const geometry = renderObject.geometry;
    const geometryData = this.get(geometry);
    geometryData.initialized = true;
    this.info.memory.geometries++;
    const onDispose = () => {
      this.info.memory.geometries--;
      const index6 = geometry.index;
      const geometryAttributes = renderObject.getAttributes();
      if (index6 !== null) {
        this.attributes.delete(index6);
      }
      for (const geometryAttribute of geometryAttributes) {
        this.attributes.delete(geometryAttribute);
      }
      const wireframeAttribute = this.wireframes.get(geometry);
      if (wireframeAttribute !== void 0) {
        this.attributes.delete(wireframeAttribute);
      }
      geometry.removeEventListener("dispose", onDispose);
    };
    geometry.addEventListener("dispose", onDispose);
  }
  /**
   * Updates the geometry attributes of the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  updateAttributes(renderObject) {
    const attributes = renderObject.getAttributes();
    for (const attribute3 of attributes) {
      if (attribute3.isStorageBufferAttribute || attribute3.isStorageInstancedBufferAttribute) {
        this.updateAttribute(attribute3, AttributeType.STORAGE);
      } else {
        this.updateAttribute(attribute3, AttributeType.VERTEX);
      }
    }
    const index6 = this.getIndex(renderObject);
    if (index6 !== null) {
      this.updateAttribute(index6, AttributeType.INDEX);
    }
    const indirect = renderObject.geometry.indirect;
    if (indirect !== null) {
      this.updateAttribute(indirect, AttributeType.INDIRECT);
    }
  }
  /**
   * Updates the given attribute.
   *
   * @param {BufferAttribute} attribute - The attribute to update.
   * @param {number} type - The attribute type.
   */
  updateAttribute(attribute3, type) {
    const callId = this.info.render.calls;
    if (!attribute3.isInterleavedBufferAttribute) {
      if (this.attributeCall.get(attribute3) !== callId) {
        this.attributes.update(attribute3, type);
        this.attributeCall.set(attribute3, callId);
      }
    } else {
      if (this.attributeCall.get(attribute3) === void 0) {
        this.attributes.update(attribute3, type);
        this.attributeCall.set(attribute3, callId);
      } else if (this.attributeCall.get(attribute3.data) !== callId) {
        this.attributes.update(attribute3, type);
        this.attributeCall.set(attribute3.data, callId);
        this.attributeCall.set(attribute3, callId);
      }
    }
  }
  /**
   * Returns the indirect buffer attribute of the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {?BufferAttribute} The indirect attribute. `null` if no indirect drawing is used.
   */
  getIndirect(renderObject) {
    return renderObject.geometry.indirect;
  }
  /**
   * Returns the index of the given render object's geometry. This is implemented
   * in a method to return a wireframe index if necessary.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {?BufferAttribute} The index. Returns `null` for non-indexed geometries.
   */
  getIndex(renderObject) {
    const { geometry, material } = renderObject;
    let index6 = geometry.index;
    if (material.wireframe === true) {
      const wireframes = this.wireframes;
      let wireframeAttribute = wireframes.get(geometry);
      if (wireframeAttribute === void 0) {
        wireframeAttribute = getWireframeIndex(geometry);
        wireframes.set(geometry, wireframeAttribute);
      } else if (wireframeAttribute.version !== getWireframeVersion(geometry)) {
        this.attributes.delete(wireframeAttribute);
        wireframeAttribute = getWireframeIndex(geometry);
        wireframes.set(geometry, wireframeAttribute);
      }
      index6 = wireframeAttribute;
    }
    return index6;
  }
};
var Info = class {
  /**
   * Constructs a new info component.
   */
  constructor() {
    this.autoReset = true;
    this.frame = 0;
    this.calls = 0;
    this.render = {
      calls: 0,
      frameCalls: 0,
      drawCalls: 0,
      triangles: 0,
      points: 0,
      lines: 0,
      timestamp: 0
    };
    this.compute = {
      calls: 0,
      frameCalls: 0,
      timestamp: 0
    };
    this.memory = {
      geometries: 0,
      textures: 0
    };
  }
  /**
   * This method should be executed per draw call and updates the corresponding metrics.
   *
   * @param {Object3D} object - The 3D object that is going to be rendered.
   * @param {number} count - The vertex or index count.
   * @param {number} instanceCount - The instance count.
   */
  update(object, count, instanceCount) {
    this.render.drawCalls++;
    if (object.isMesh || object.isSprite) {
      this.render.triangles += instanceCount * (count / 3);
    } else if (object.isPoints) {
      this.render.points += instanceCount * count;
    } else if (object.isLineSegments) {
      this.render.lines += instanceCount * (count / 2);
    } else if (object.isLine) {
      this.render.lines += instanceCount * (count - 1);
    } else {
      console.error("THREE.WebGPUInfo: Unknown object type.");
    }
  }
  /**
   * Resets frame related metrics.
   */
  reset() {
    this.render.drawCalls = 0;
    this.render.frameCalls = 0;
    this.compute.frameCalls = 0;
    this.render.triangles = 0;
    this.render.points = 0;
    this.render.lines = 0;
  }
  /**
   * Performs a complete reset of the object.
   */
  dispose() {
    this.reset();
    this.calls = 0;
    this.render.calls = 0;
    this.compute.calls = 0;
    this.render.timestamp = 0;
    this.compute.timestamp = 0;
    this.memory.geometries = 0;
    this.memory.textures = 0;
  }
};
var Pipeline = class {
  /**
   * Constructs a new pipeline.
   *
   * @param {string} cacheKey - The pipeline's cache key.
   */
  constructor(cacheKey) {
    this.cacheKey = cacheKey;
    this.usedTimes = 0;
  }
};
var RenderPipeline = class extends Pipeline {
  /**
   * Constructs a new render pipeline.
   *
   * @param {string} cacheKey - The pipeline's cache key.
   * @param {ProgrammableStage} vertexProgram - The pipeline's vertex shader.
   * @param {ProgrammableStage} fragmentProgram - The pipeline's fragment shader.
   */
  constructor(cacheKey, vertexProgram, fragmentProgram) {
    super(cacheKey);
    this.vertexProgram = vertexProgram;
    this.fragmentProgram = fragmentProgram;
  }
};
var ComputePipeline = class extends Pipeline {
  /**
   * Constructs a new render pipeline.
   *
   * @param {string} cacheKey - The pipeline's cache key.
   * @param {ProgrammableStage} computeProgram - The pipeline's compute shader.
   */
  constructor(cacheKey, computeProgram) {
    super(cacheKey);
    this.computeProgram = computeProgram;
    this.isComputePipeline = true;
  }
};
var _id$8 = 0;
var ProgrammableStage = class {
  /**
   * Constructs a new programmable stage.
   *
   * @param {string} code - The shader code.
   * @param {('vertex'|'fragment'|'compute')} stage - The type of stage.
   * @param {string} name - The name of the shader.
   * @param {?Array<Object>} [transforms=null] - The transforms (only relevant for compute stages with WebGL 2 which uses Transform Feedback).
   * @param {?Array<Object>} [attributes=null] - The attributes (only relevant for compute stages with WebGL 2 which uses Transform Feedback).
   */
  constructor(code3, stage, name, transforms = null, attributes = null) {
    this.id = _id$8++;
    this.code = code3;
    this.stage = stage;
    this.name = name;
    this.transforms = transforms;
    this.attributes = attributes;
    this.usedTimes = 0;
  }
};
var Pipelines = class extends DataMap {
  /**
   * Constructs a new pipeline management component.
   *
   * @param {Backend} backend - The renderer's backend.
   * @param {Nodes} nodes - Renderer component for managing nodes related logic.
   */
  constructor(backend, nodes) {
    super();
    this.backend = backend;
    this.nodes = nodes;
    this.bindings = null;
    this.caches = /* @__PURE__ */ new Map();
    this.programs = {
      vertex: /* @__PURE__ */ new Map(),
      fragment: /* @__PURE__ */ new Map(),
      compute: /* @__PURE__ */ new Map()
    };
  }
  /**
   * Returns a compute pipeline for the given compute node.
   *
   * @param {Node} computeNode - The compute node.
   * @param {Array<BindGroup>} bindings - The bindings.
   * @return {ComputePipeline} The compute pipeline.
   */
  getForCompute(computeNode, bindings) {
    const { backend } = this;
    const data = this.get(computeNode);
    if (this._needsComputeUpdate(computeNode)) {
      const previousPipeline = data.pipeline;
      if (previousPipeline) {
        previousPipeline.usedTimes--;
        previousPipeline.computeProgram.usedTimes--;
      }
      const nodeBuilderState = this.nodes.getForCompute(computeNode);
      let stageCompute = this.programs.compute.get(nodeBuilderState.computeShader);
      if (stageCompute === void 0) {
        if (previousPipeline && previousPipeline.computeProgram.usedTimes === 0)
          this._releaseProgram(previousPipeline.computeProgram);
        stageCompute = new ProgrammableStage(nodeBuilderState.computeShader, "compute", computeNode.name, nodeBuilderState.transforms, nodeBuilderState.nodeAttributes);
        this.programs.compute.set(nodeBuilderState.computeShader, stageCompute);
        backend.createProgram(stageCompute);
      }
      const cacheKey = this._getComputeCacheKey(computeNode, stageCompute);
      let pipeline = this.caches.get(cacheKey);
      if (pipeline === void 0) {
        if (previousPipeline && previousPipeline.usedTimes === 0)
          this._releasePipeline(previousPipeline);
        pipeline = this._getComputePipeline(computeNode, stageCompute, cacheKey, bindings);
      }
      pipeline.usedTimes++;
      stageCompute.usedTimes++;
      data.version = computeNode.version;
      data.pipeline = pipeline;
    }
    return data.pipeline;
  }
  /**
   * Returns a render pipeline for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @param {?Array<Promise>} [promises=null] - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.
   * @return {RenderPipeline} The render pipeline.
   */
  getForRender(renderObject, promises = null) {
    const { backend } = this;
    const data = this.get(renderObject);
    if (this._needsRenderUpdate(renderObject)) {
      const previousPipeline = data.pipeline;
      if (previousPipeline) {
        previousPipeline.usedTimes--;
        previousPipeline.vertexProgram.usedTimes--;
        previousPipeline.fragmentProgram.usedTimes--;
      }
      const nodeBuilderState = renderObject.getNodeBuilderState();
      const name = renderObject.material ? renderObject.material.name : "";
      let stageVertex = this.programs.vertex.get(nodeBuilderState.vertexShader);
      if (stageVertex === void 0) {
        if (previousPipeline && previousPipeline.vertexProgram.usedTimes === 0)
          this._releaseProgram(previousPipeline.vertexProgram);
        stageVertex = new ProgrammableStage(nodeBuilderState.vertexShader, "vertex", name);
        this.programs.vertex.set(nodeBuilderState.vertexShader, stageVertex);
        backend.createProgram(stageVertex);
      }
      let stageFragment = this.programs.fragment.get(nodeBuilderState.fragmentShader);
      if (stageFragment === void 0) {
        if (previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0)
          this._releaseProgram(previousPipeline.fragmentProgram);
        stageFragment = new ProgrammableStage(nodeBuilderState.fragmentShader, "fragment", name);
        this.programs.fragment.set(nodeBuilderState.fragmentShader, stageFragment);
        backend.createProgram(stageFragment);
      }
      const cacheKey = this._getRenderCacheKey(renderObject, stageVertex, stageFragment);
      let pipeline = this.caches.get(cacheKey);
      if (pipeline === void 0) {
        if (previousPipeline && previousPipeline.usedTimes === 0)
          this._releasePipeline(previousPipeline);
        pipeline = this._getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises);
      } else {
        renderObject.pipeline = pipeline;
      }
      pipeline.usedTimes++;
      stageVertex.usedTimes++;
      stageFragment.usedTimes++;
      data.pipeline = pipeline;
    }
    return data.pipeline;
  }
  /**
   * Deletes the pipeline for the given render object.
   *
   * @param {RenderObject} object - The render object.
   * @return {?Object} The deleted dictionary.
   */
  delete(object) {
    const pipeline = this.get(object).pipeline;
    if (pipeline) {
      pipeline.usedTimes--;
      if (pipeline.usedTimes === 0)
        this._releasePipeline(pipeline);
      if (pipeline.isComputePipeline) {
        pipeline.computeProgram.usedTimes--;
        if (pipeline.computeProgram.usedTimes === 0)
          this._releaseProgram(pipeline.computeProgram);
      } else {
        pipeline.fragmentProgram.usedTimes--;
        pipeline.vertexProgram.usedTimes--;
        if (pipeline.vertexProgram.usedTimes === 0)
          this._releaseProgram(pipeline.vertexProgram);
        if (pipeline.fragmentProgram.usedTimes === 0)
          this._releaseProgram(pipeline.fragmentProgram);
      }
    }
    return super.delete(object);
  }
  /**
   * Frees internal resources.
   */
  dispose() {
    super.dispose();
    this.caches = /* @__PURE__ */ new Map();
    this.programs = {
      vertex: /* @__PURE__ */ new Map(),
      fragment: /* @__PURE__ */ new Map(),
      compute: /* @__PURE__ */ new Map()
    };
  }
  /**
   * Updates the pipeline for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  updateForRender(renderObject) {
    this.getForRender(renderObject);
  }
  /**
   * Returns a compute pipeline for the given parameters.
   *
   * @private
   * @param {Node} computeNode - The compute node.
   * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.
   * @param {string} cacheKey - The cache key.
   * @param {Array<BindGroup>} bindings - The bindings.
   * @return {ComputePipeline} The compute pipeline.
   */
  _getComputePipeline(computeNode, stageCompute, cacheKey, bindings) {
    cacheKey = cacheKey || this._getComputeCacheKey(computeNode, stageCompute);
    let pipeline = this.caches.get(cacheKey);
    if (pipeline === void 0) {
      pipeline = new ComputePipeline(cacheKey, stageCompute);
      this.caches.set(cacheKey, pipeline);
      this.backend.createComputePipeline(pipeline, bindings);
    }
    return pipeline;
  }
  /**
   * Returns a render pipeline for the given parameters.
   *
   * @private
   * @param {RenderObject} renderObject - The render object.
   * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.
   * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.
   * @param {string} cacheKey - The cache key.
   * @param {?Array<Promise>} promises - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.
   * @return {ComputePipeline} The compute pipeline.
   */
  _getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises) {
    cacheKey = cacheKey || this._getRenderCacheKey(renderObject, stageVertex, stageFragment);
    let pipeline = this.caches.get(cacheKey);
    if (pipeline === void 0) {
      pipeline = new RenderPipeline(cacheKey, stageVertex, stageFragment);
      this.caches.set(cacheKey, pipeline);
      renderObject.pipeline = pipeline;
      this.backend.createRenderPipeline(renderObject, promises);
    }
    return pipeline;
  }
  /**
   * Computes a cache key representing a compute pipeline.
   *
   * @private
   * @param {Node} computeNode - The compute node.
   * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.
   * @return {string} The cache key.
   */
  _getComputeCacheKey(computeNode, stageCompute) {
    return computeNode.id + "," + stageCompute.id;
  }
  /**
   * Computes a cache key representing a render pipeline.
   *
   * @private
   * @param {RenderObject} renderObject - The render object.
   * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.
   * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.
   * @return {string} The cache key.
   */
  _getRenderCacheKey(renderObject, stageVertex, stageFragment) {
    return stageVertex.id + "," + stageFragment.id + "," + this.backend.getRenderCacheKey(renderObject);
  }
  /**
   * Releases the given pipeline.
   *
   * @private
   * @param {Pipeline} pipeline - The pipeline to release.
   */
  _releasePipeline(pipeline) {
    this.caches.delete(pipeline.cacheKey);
  }
  /**
   * Releases the shader program.
   *
   * @private
   * @param {Object} program - The shader program to release.
   */
  _releaseProgram(program) {
    const code3 = program.code;
    const stage = program.stage;
    this.programs[stage].delete(code3);
  }
  /**
   * Returns `true` if the compute pipeline for the given compute node requires an update.
   *
   * @private
   * @param {Node} computeNode - The compute node.
   * @return {boolean} Whether the compute pipeline for the given compute node requires an update or not.
   */
  _needsComputeUpdate(computeNode) {
    const data = this.get(computeNode);
    return data.pipeline === void 0 || data.version !== computeNode.version;
  }
  /**
   * Returns `true` if the render pipeline for the given render object requires an update.
   *
   * @private
   * @param {RenderObject} renderObject - The render object.
   * @return {boolean} Whether the render object for the given render object requires an update or not.
   */
  _needsRenderUpdate(renderObject) {
    const data = this.get(renderObject);
    return data.pipeline === void 0 || this.backend.needsRenderUpdate(renderObject);
  }
};
var Bindings = class extends DataMap {
  /**
   * Constructs a new bindings management component.
   *
   * @param {Backend} backend - The renderer's backend.
   * @param {Nodes} nodes - Renderer component for managing nodes related logic.
   * @param {Textures} textures - Renderer component for managing textures.
   * @param {Attributes} attributes - Renderer component for managing attributes.
   * @param {Pipelines} pipelines - Renderer component for managing pipelines.
   * @param {Info} info - Renderer component for managing metrics and monitoring data.
   */
  constructor(backend, nodes, textures, attributes, pipelines, info) {
    super();
    this.backend = backend;
    this.textures = textures;
    this.pipelines = pipelines;
    this.attributes = attributes;
    this.nodes = nodes;
    this.info = info;
    this.pipelines.bindings = this;
  }
  /**
   * Returns the bind groups for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {Array<BindGroup>} The bind groups.
   */
  getForRender(renderObject) {
    const bindings = renderObject.getBindings();
    for (const bindGroup of bindings) {
      const groupData = this.get(bindGroup);
      if (groupData.bindGroup === void 0) {
        this._init(bindGroup);
        this.backend.createBindings(bindGroup, bindings, 0);
        groupData.bindGroup = bindGroup;
      }
    }
    return bindings;
  }
  /**
   * Returns the bind groups for the given compute node.
   *
   * @param {Node} computeNode - The compute node.
   * @return {Array<BindGroup>} The bind groups.
   */
  getForCompute(computeNode) {
    const bindings = this.nodes.getForCompute(computeNode).bindings;
    for (const bindGroup of bindings) {
      const groupData = this.get(bindGroup);
      if (groupData.bindGroup === void 0) {
        this._init(bindGroup);
        this.backend.createBindings(bindGroup, bindings, 0);
        groupData.bindGroup = bindGroup;
      }
    }
    return bindings;
  }
  /**
   * Updates the bindings for the given compute node.
   *
   * @param {Node} computeNode - The compute node.
   */
  updateForCompute(computeNode) {
    this._updateBindings(this.getForCompute(computeNode));
  }
  /**
   * Updates the bindings for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  updateForRender(renderObject) {
    this._updateBindings(this.getForRender(renderObject));
  }
  /**
   * Updates the given array of bindings.
   *
   * @param {Array<BindGroup>} bindings - The bind groups.
   */
  _updateBindings(bindings) {
    for (const bindGroup of bindings) {
      this._update(bindGroup, bindings);
    }
  }
  /**
   * Initializes the given bind group.
   *
   * @param {BindGroup} bindGroup - The bind group to initialize.
   */
  _init(bindGroup) {
    for (const binding of bindGroup.bindings) {
      if (binding.isSampledTexture) {
        this.textures.updateTexture(binding.texture);
      } else if (binding.isStorageBuffer) {
        const attribute3 = binding.attribute;
        const attributeType = attribute3.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;
        this.attributes.update(attribute3, attributeType);
      }
    }
  }
  /**
   * Updates the given bind group.
   *
   * @param {BindGroup} bindGroup - The bind group to update.
   * @param {Array<BindGroup>} bindings - The bind groups.
   */
  _update(bindGroup, bindings) {
    const { backend } = this;
    let needsBindingsUpdate = false;
    let cacheBindings = true;
    let cacheIndex = 0;
    let version = 0;
    for (const binding of bindGroup.bindings) {
      if (binding.isNodeUniformsGroup) {
        const updated = this.nodes.updateGroup(binding);
        if (updated === false)
          continue;
      }
      if (binding.isStorageBuffer) {
        const attribute3 = binding.attribute;
        const attributeType = attribute3.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;
        this.attributes.update(attribute3, attributeType);
      }
      if (binding.isUniformBuffer) {
        const updated = binding.update();
        if (updated) {
          backend.updateBinding(binding);
        }
      } else if (binding.isSampledTexture) {
        const updated = binding.update();
        const texture3 = binding.texture;
        const texturesTextureData = this.textures.get(texture3);
        if (updated) {
          this.textures.updateTexture(texture3);
          if (binding.generation !== texturesTextureData.generation) {
            binding.generation = texturesTextureData.generation;
            needsBindingsUpdate = true;
            cacheBindings = false;
          }
        }
        const textureData = backend.get(texture3);
        if (textureData.externalTexture !== void 0 || texturesTextureData.isDefaultTexture) {
          cacheBindings = false;
        } else {
          cacheIndex = cacheIndex * 10 + texture3.id;
          version += texture3.version;
        }
        if (texture3.isStorageTexture === true) {
          const textureData2 = this.get(texture3);
          if (binding.store === true) {
            textureData2.needsMipmap = true;
          } else if (this.textures.needsMipmaps(texture3) && textureData2.needsMipmap === true) {
            this.backend.generateMipmaps(texture3);
            textureData2.needsMipmap = false;
          }
        }
      } else if (binding.isSampler) {
        binding.update();
      }
    }
    if (needsBindingsUpdate === true) {
      this.backend.updateBindings(bindGroup, bindings, cacheBindings ? cacheIndex : 0, version);
    }
  }
};
function painterSortStable(a2, b) {
  if (a2.groupOrder !== b.groupOrder) {
    return a2.groupOrder - b.groupOrder;
  } else if (a2.renderOrder !== b.renderOrder) {
    return a2.renderOrder - b.renderOrder;
  } else if (a2.z !== b.z) {
    return a2.z - b.z;
  } else {
    return a2.id - b.id;
  }
}
function reversePainterSortStable(a2, b) {
  if (a2.groupOrder !== b.groupOrder) {
    return a2.groupOrder - b.groupOrder;
  } else if (a2.renderOrder !== b.renderOrder) {
    return a2.renderOrder - b.renderOrder;
  } else if (a2.z !== b.z) {
    return b.z - a2.z;
  } else {
    return a2.id - b.id;
  }
}
function needsDoublePass(material) {
  const hasTransmission = material.transmission > 0 || material.transmissionNode;
  return hasTransmission && material.side === DoubleSide && material.forceSinglePass === false;
}
var RenderList = class {
  /**
   * Constructs a render list.
   *
   * @param {Lighting} lighting - The lighting management component.
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera the scene is rendered with.
   */
  constructor(lighting, scene3, camera3) {
    this.renderItems = [];
    this.renderItemsIndex = 0;
    this.opaque = [];
    this.transparentDoublePass = [];
    this.transparent = [];
    this.bundles = [];
    this.lightsNode = lighting.getNode(scene3, camera3);
    this.lightsArray = [];
    this.scene = scene3;
    this.camera = camera3;
    this.occlusionQueryCount = 0;
  }
  /**
   * This method is called right at the beginning of a render call
   * before the scene is analyzed. It prepares the internal data
   * structures for the upcoming render lists generation.
   *
   * @return {RenderList} A reference to this render list.
   */
  begin() {
    this.renderItemsIndex = 0;
    this.opaque.length = 0;
    this.transparentDoublePass.length = 0;
    this.transparent.length = 0;
    this.bundles.length = 0;
    this.lightsArray.length = 0;
    this.occlusionQueryCount = 0;
    return this;
  }
  /**
   * Returns a render item for the giving render item state. The state is defined
   * by a series of object-related parameters.
   *
   * The method avoids object creation by holding render items and reusing them in
   * subsequent render calls (just with different property values).
   *
   * @param {Object3D} object - The 3D object.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {number} groupOrder - The current group order.
   * @param {number} z - Th 3D object's depth value (z value in clip space).
   * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
   * @param {ClippingContext} clippingContext - The current clipping context.
   * @return {Object} The render item.
   */
  getNextRenderItem(object, geometry, material, groupOrder, z2, group, clippingContext) {
    let renderItem = this.renderItems[this.renderItemsIndex];
    if (renderItem === void 0) {
      renderItem = {
        id: object.id,
        object,
        geometry,
        material,
        groupOrder,
        renderOrder: object.renderOrder,
        z: z2,
        group,
        clippingContext
      };
      this.renderItems[this.renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object.id;
      renderItem.object = object;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object.renderOrder;
      renderItem.z = z2;
      renderItem.group = group;
      renderItem.clippingContext = clippingContext;
    }
    this.renderItemsIndex++;
    return renderItem;
  }
  /**
   * Pushes the given object as a render item to the internal render lists.
   * The selected lists depend on the object properties.
   *
   * @param {Object3D} object - The 3D object.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {number} groupOrder - The current group order.
   * @param {number} z - Th 3D object's depth value (z value in clip space).
   * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
   * @param {ClippingContext} clippingContext - The current clipping context.
   */
  push(object, geometry, material, groupOrder, z2, group, clippingContext) {
    const renderItem = this.getNextRenderItem(object, geometry, material, groupOrder, z2, group, clippingContext);
    if (object.occlusionTest === true)
      this.occlusionQueryCount++;
    if (material.transparent === true || material.transmission > 0) {
      if (needsDoublePass(material))
        this.transparentDoublePass.push(renderItem);
      this.transparent.push(renderItem);
    } else {
      this.opaque.push(renderItem);
    }
  }
  /**
   * Inserts the given object as a render item at the start of the internal render lists.
   * The selected lists depend on the object properties.
   *
   * @param {Object3D} object - The 3D object.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {number} groupOrder - The current group order.
   * @param {number} z - Th 3D object's depth value (z value in clip space).
   * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
   * @param {ClippingContext} clippingContext - The current clipping context.
   */
  unshift(object, geometry, material, groupOrder, z2, group, clippingContext) {
    const renderItem = this.getNextRenderItem(object, geometry, material, groupOrder, z2, group, clippingContext);
    if (material.transparent === true || material.transmission > 0) {
      if (needsDoublePass(material))
        this.transparentDoublePass.unshift(renderItem);
      this.transparent.unshift(renderItem);
    } else {
      this.opaque.unshift(renderItem);
    }
  }
  /**
   * Pushes render bundle group data into the render list.
   *
   * @param {Object} group - Bundle group data.
   */
  pushBundle(group) {
    this.bundles.push(group);
  }
  /**
   * Pushes a light into the render list.
   *
   * @param {Light} light - The light.
   */
  pushLight(light) {
    this.lightsArray.push(light);
  }
  /**
   * Sorts the internal render lists.
   *
   * @param {?function(any, any): number} customOpaqueSort - A custom sort function for opaque objects.
   * @param {?function(any, any): number} customTransparentSort -  A custom sort function for transparent objects.
   */
  sort(customOpaqueSort, customTransparentSort) {
    if (this.opaque.length > 1)
      this.opaque.sort(customOpaqueSort || painterSortStable);
    if (this.transparentDoublePass.length > 1)
      this.transparentDoublePass.sort(customTransparentSort || reversePainterSortStable);
    if (this.transparent.length > 1)
      this.transparent.sort(customTransparentSort || reversePainterSortStable);
  }
  /**
   * This method performs finalizing tasks right after the render lists
   * have been generated.
   */
  finish() {
    this.lightsNode.setLights(this.lightsArray);
    for (let i2 = this.renderItemsIndex, il = this.renderItems.length; i2 < il; i2++) {
      const renderItem = this.renderItems[i2];
      if (renderItem.id === null)
        break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.groupOrder = null;
      renderItem.renderOrder = null;
      renderItem.z = null;
      renderItem.group = null;
      renderItem.clippingContext = null;
    }
  }
};
var _chainKeys$4 = [];
var RenderLists = class {
  /**
   * Constructs a render lists management component.
   *
   * @param {Lighting} lighting - The lighting management component.
   */
  constructor(lighting) {
    this.lighting = lighting;
    this.lists = new ChainMap();
  }
  /**
   * Returns a render list for the given scene and camera.
   *
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera.
   * @return {RenderList} The render list.
   */
  get(scene3, camera3) {
    const lists = this.lists;
    _chainKeys$4[0] = scene3;
    _chainKeys$4[1] = camera3;
    let list = lists.get(_chainKeys$4);
    if (list === void 0) {
      list = new RenderList(this.lighting, scene3, camera3);
      lists.set(_chainKeys$4, list);
    }
    _chainKeys$4.length = 0;
    return list;
  }
  /**
   * Frees all internal resources.
   */
  dispose() {
    this.lists = new ChainMap();
  }
};
var _id$7 = 0;
var RenderContext = class {
  /**
   * Constructs a new render context.
   */
  constructor() {
    this.id = _id$7++;
    this.color = true;
    this.clearColor = true;
    this.clearColorValue = { r: 0, g: 0, b: 0, a: 1 };
    this.depth = true;
    this.clearDepth = true;
    this.clearDepthValue = 1;
    this.stencil = false;
    this.clearStencil = true;
    this.clearStencilValue = 1;
    this.viewport = false;
    this.viewportValue = new Vector4();
    this.scissor = false;
    this.scissorValue = new Vector4();
    this.renderTarget = null;
    this.textures = null;
    this.depthTexture = null;
    this.activeCubeFace = 0;
    this.activeMipmapLevel = 0;
    this.sampleCount = 1;
    this.width = 0;
    this.height = 0;
    this.occlusionQueryCount = 0;
    this.clippingContext = null;
    this.isRenderContext = true;
  }
  /**
   * Returns the cache key of this render context.
   *
   * @return {number} The cache key.
   */
  getCacheKey() {
    return getCacheKey(this);
  }
};
function getCacheKey(renderContext) {
  const { textures, activeCubeFace, activeMipmapLevel } = renderContext;
  const values = [activeCubeFace, activeMipmapLevel];
  for (const texture3 of textures) {
    values.push(texture3.id);
  }
  return hashArray(values);
}
var _chainKeys$3 = [];
var _defaultScene = new Scene();
var _defaultCamera = new Camera();
var RenderContexts = class {
  /**
   * Constructs a new render context management component.
   */
  constructor() {
    this.chainMaps = {};
  }
  /**
   * Returns a render context for the given scene, camera and render target.
   *
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {?RenderTarget} [renderTarget=null] - The active render target.
   * @return {RenderContext} The render context.
   */
  get(scene3, camera3, renderTarget = null) {
    _chainKeys$3[0] = scene3;
    _chainKeys$3[1] = camera3;
    let attachmentState;
    if (renderTarget === null) {
      attachmentState = "default";
    } else {
      const format2 = renderTarget.texture.format;
      const count = renderTarget.textures.length;
      attachmentState = `${count}:${format2}:${renderTarget.samples}:${renderTarget.depthBuffer}:${renderTarget.stencilBuffer}`;
    }
    const chainMap = this._getChainMap(attachmentState);
    let renderState = chainMap.get(_chainKeys$3);
    if (renderState === void 0) {
      renderState = new RenderContext();
      chainMap.set(_chainKeys$3, renderState);
    }
    _chainKeys$3.length = 0;
    if (renderTarget !== null)
      renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;
    return renderState;
  }
  /**
   * Returns a render context intended for clear operations.
   *
   * @param {?RenderTarget} [renderTarget=null] - The active render target.
   * @return {RenderContext} The render context.
   */
  getForClear(renderTarget = null) {
    return this.get(_defaultScene, _defaultCamera, renderTarget);
  }
  /**
   * Returns a chain map for the given attachment state.
   *
   * @private
   * @param {string} attachmentState - The attachment state.
   * @return {ChainMap} The chain map.
   */
  _getChainMap(attachmentState) {
    return this.chainMaps[attachmentState] || (this.chainMaps[attachmentState] = new ChainMap());
  }
  /**
   * Frees internal resources.
   */
  dispose() {
    this.chainMaps = {};
  }
};
var _size$3 = new Vector3();
var Textures = class extends DataMap {
  /**
   * Constructs a new texture management component.
   *
   * @param {Renderer} renderer - The renderer.
   * @param {Backend} backend - The renderer's backend.
   * @param {Info} info - Renderer component for managing metrics and monitoring data.
   */
  constructor(renderer3, backend, info) {
    super();
    this.renderer = renderer3;
    this.backend = backend;
    this.info = info;
  }
  /**
   * Updates the given render target. Based on the given render target configuration,
   * it updates the texture states representing the attachments of the framebuffer.
   *
   * @param {RenderTarget} renderTarget - The render target to update.
   * @param {number} [activeMipmapLevel=0] - The active mipmap level.
   */
  updateRenderTarget(renderTarget, activeMipmapLevel = 0) {
    const renderTargetData = this.get(renderTarget);
    const sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;
    const depthTextureMips = renderTargetData.depthTextureMips || (renderTargetData.depthTextureMips = {});
    const textures = renderTarget.textures;
    const size = this.getSize(textures[0]);
    const mipWidth = size.width >> activeMipmapLevel;
    const mipHeight = size.height >> activeMipmapLevel;
    let depthTexture = renderTarget.depthTexture || depthTextureMips[activeMipmapLevel];
    const useDepthTexture = renderTarget.depthBuffer === true || renderTarget.stencilBuffer === true;
    let textureNeedsUpdate = false;
    if (depthTexture === void 0 && useDepthTexture) {
      depthTexture = new DepthTexture();
      depthTexture.format = renderTarget.stencilBuffer ? DepthStencilFormat : DepthFormat;
      depthTexture.type = renderTarget.stencilBuffer ? UnsignedInt248Type : UnsignedIntType;
      depthTexture.image.width = mipWidth;
      depthTexture.image.height = mipHeight;
      depthTexture.image.depth = size.depth;
      depthTexture.isArrayTexture = renderTarget.multiview === true && size.depth > 1;
      depthTextureMips[activeMipmapLevel] = depthTexture;
    }
    if (renderTargetData.width !== size.width || size.height !== renderTargetData.height) {
      textureNeedsUpdate = true;
      if (depthTexture) {
        depthTexture.needsUpdate = true;
        depthTexture.image.width = mipWidth;
        depthTexture.image.height = mipHeight;
        depthTexture.image.depth = depthTexture.isArrayTexture ? depthTexture.image.depth : 1;
      }
    }
    renderTargetData.width = size.width;
    renderTargetData.height = size.height;
    renderTargetData.textures = textures;
    renderTargetData.depthTexture = depthTexture || null;
    renderTargetData.depth = renderTarget.depthBuffer;
    renderTargetData.stencil = renderTarget.stencilBuffer;
    renderTargetData.renderTarget = renderTarget;
    if (renderTargetData.sampleCount !== sampleCount) {
      textureNeedsUpdate = true;
      if (depthTexture) {
        depthTexture.needsUpdate = true;
      }
      renderTargetData.sampleCount = sampleCount;
    }
    const options = { sampleCount };
    if (renderTarget.isXRRenderTarget !== true) {
      for (let i2 = 0; i2 < textures.length; i2++) {
        const texture3 = textures[i2];
        if (textureNeedsUpdate)
          texture3.needsUpdate = true;
        this.updateTexture(texture3, options);
      }
      if (depthTexture) {
        this.updateTexture(depthTexture, options);
      }
    }
    if (renderTargetData.initialized !== true) {
      renderTargetData.initialized = true;
      const onDispose = () => {
        renderTarget.removeEventListener("dispose", onDispose);
        for (let i2 = 0; i2 < textures.length; i2++) {
          this._destroyTexture(textures[i2]);
        }
        if (depthTexture) {
          this._destroyTexture(depthTexture);
        }
        this.delete(renderTarget);
        this.backend.delete(renderTarget);
      };
      renderTarget.addEventListener("dispose", onDispose);
    }
  }
  /**
   * Updates the given texture. Depending on the texture state, this method
   * triggers the upload of texture data to the GPU memory. If the texture data are
   * not yet ready for the upload, it uses default texture data for as a placeholder.
   *
   * @param {Texture} texture - The texture to update.
   * @param {Object} [options={}] - The options.
   */
  updateTexture(texture3, options = {}) {
    const textureData = this.get(texture3);
    if (textureData.initialized === true && textureData.version === texture3.version)
      return;
    const isRenderTarget = texture3.isRenderTargetTexture || texture3.isDepthTexture || texture3.isFramebufferTexture;
    const backend = this.backend;
    if (isRenderTarget && textureData.initialized === true) {
      backend.destroySampler(texture3);
      backend.destroyTexture(texture3);
    }
    if (texture3.isFramebufferTexture) {
      const renderTarget = this.renderer.getRenderTarget();
      if (renderTarget) {
        texture3.type = renderTarget.texture.type;
      } else {
        texture3.type = UnsignedByteType;
      }
    }
    const { width, height, depth: depth3 } = this.getSize(texture3);
    options.width = width;
    options.height = height;
    options.depth = depth3;
    options.needsMipmaps = this.needsMipmaps(texture3);
    options.levels = options.needsMipmaps ? this.getMipLevels(texture3, width, height) : 1;
    if (texture3.isCubeTexture && texture3.mipmaps.length > 0)
      options.levels++;
    if (isRenderTarget || texture3.isStorageTexture === true || texture3.isExternalTexture === true) {
      backend.createSampler(texture3);
      backend.createTexture(texture3, options);
      textureData.generation = texture3.version;
    } else {
      const needsCreate = textureData.initialized !== true;
      if (needsCreate)
        backend.createSampler(texture3);
      if (texture3.version > 0) {
        const image = texture3.image;
        if (image === void 0) {
          console.warn("THREE.Renderer: Texture marked for update but image is undefined.");
        } else if (image.complete === false) {
          console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");
        } else {
          if (texture3.images) {
            const images = [];
            for (const image2 of texture3.images) {
              images.push(image2);
            }
            options.images = images;
          } else {
            options.image = image;
          }
          if (textureData.isDefaultTexture === void 0 || textureData.isDefaultTexture === true) {
            backend.createTexture(texture3, options);
            textureData.isDefaultTexture = false;
            textureData.generation = texture3.version;
          }
          if (texture3.source.dataReady === true)
            backend.updateTexture(texture3, options);
          if (options.needsMipmaps && texture3.mipmaps.length === 0)
            backend.generateMipmaps(texture3);
          if (texture3.onUpdate)
            texture3.onUpdate(texture3);
        }
      } else {
        backend.createDefaultTexture(texture3);
        textureData.isDefaultTexture = true;
        textureData.generation = texture3.version;
      }
    }
    if (textureData.initialized !== true) {
      textureData.initialized = true;
      textureData.generation = texture3.version;
      this.info.memory.textures++;
      if (texture3.isVideoTexture && ColorManagement.getTransfer(texture3.colorSpace) !== SRGBTransfer) {
        console.warn("WebGPURenderer: Video textures must use a color space with a sRGB transfer function, e.g. SRGBColorSpace.");
      }
      const onDispose = () => {
        texture3.removeEventListener("dispose", onDispose);
        this._destroyTexture(texture3);
      };
      texture3.addEventListener("dispose", onDispose);
    }
    textureData.version = texture3.version;
  }
  /**
   * Computes the size of the given texture and writes the result
   * into the target vector. This vector is also returned by the
   * method.
   *
   * If no texture data are available for the compute yet, the method
   * returns default size values.
   *
   * @param {Texture} texture - The texture to compute the size for.
   * @param {Vector3} target - The target vector.
   * @return {Vector3} The target vector.
   */
  getSize(texture3, target = _size$3) {
    let image = texture3.images ? texture3.images[0] : texture3.image;
    if (image) {
      if (image.image !== void 0)
        image = image.image;
      if (typeof HTMLVideoElement !== "undefined" && image instanceof HTMLVideoElement) {
        target.width = image.videoWidth || 1;
        target.height = image.videoHeight || 1;
        target.depth = 1;
      } else if (image instanceof VideoFrame) {
        target.width = image.displayWidth || 1;
        target.height = image.displayHeight || 1;
        target.depth = 1;
      } else {
        target.width = image.width || 1;
        target.height = image.height || 1;
        target.depth = texture3.isCubeTexture ? 6 : image.depth || 1;
      }
    } else {
      target.width = target.height = target.depth = 1;
    }
    return target;
  }
  /**
   * Computes the number of mipmap levels for the given texture.
   *
   * @param {Texture} texture - The texture.
   * @param {number} width - The texture's width.
   * @param {number} height - The texture's height.
   * @return {number} The number of mipmap levels.
   */
  getMipLevels(texture3, width, height) {
    let mipLevelCount;
    if (texture3.mipmaps.length > 0) {
      mipLevelCount = texture3.mipmaps.length;
    } else {
      if (texture3.isCompressedTexture === true) {
        mipLevelCount = 1;
      } else {
        mipLevelCount = Math.floor(Math.log2(Math.max(width, height))) + 1;
      }
    }
    return mipLevelCount;
  }
  /**
   * Returns `true` if the given texture makes use of mipmapping.
   *
   * @param {Texture} texture - The texture.
   * @return {boolean} Whether mipmaps are required or not.
   */
  needsMipmaps(texture3) {
    return texture3.generateMipmaps === true || texture3.mipmaps.length > 0;
  }
  /**
   * Frees internal resource when the given texture isn't
   * required anymore.
   *
   * @param {Texture} texture - The texture to destroy.
   */
  _destroyTexture(texture3) {
    if (this.has(texture3) === true) {
      this.backend.destroySampler(texture3);
      this.backend.destroyTexture(texture3);
      this.delete(texture3);
      this.info.memory.textures--;
    }
  }
};
var Color4 = class extends Color {
  /**
   * Constructs a new four-component color.
   * You can also pass a single THREE.Color, hex or
   * string argument to this constructor.
   *
   * @param {number|string} [r=1] - The red value.
   * @param {number} [g=1] - The green value.
   * @param {number} [b=1] - The blue value.
   * @param {number} [a=1] - The alpha value.
   */
  constructor(r2, g2, b, a2 = 1) {
    super(r2, g2, b);
    this.a = a2;
  }
  /**
   * Overwrites the default to honor alpha.
   * You can also pass a single THREE.Color, hex or
   * string argument to this method.
   *
   * @param {number|string|Color} r - The red value.
   * @param {number} [g] - The green value.
   * @param {number} [b] - The blue value.
   * @param {number} [a=1] - The alpha value.
   * @return {Color4} A reference to this object.
   */
  set(r2, g2, b, a2 = 1) {
    this.a = a2;
    return super.set(r2, g2, b);
  }
  /**
   * Overwrites the default to honor alpha.
   *
   * @param {Color4} color - The color to copy.
   * @return {Color4} A reference to this object.
   */
  copy(color4) {
    if (color4.a !== void 0)
      this.a = color4.a;
    return super.copy(color4);
  }
  /**
   * Overwrites the default to honor alpha.
   *
   * @return {Color4} The cloned color.
   */
  clone() {
    return new this.constructor(this.r, this.g, this.b, this.a);
  }
};
var ParameterNode = class extends PropertyNode {
  static get type() {
    return "ParameterNode";
  }
  /**
   * Constructs a new parameter node.
   *
   * @param {string} nodeType - The type of the node.
   * @param {?string} [name=null] - The name of the parameter in the shader.
   */
  constructor(nodeType, name = null) {
    super(nodeType, name);
    this.isParameterNode = true;
  }
  getHash() {
    return this.uuid;
  }
  generate() {
    return this.name;
  }
};
var parameter = (type, name) => nodeObject(new ParameterNode(type, name));
var StackNode = class extends Node {
  static get type() {
    return "StackNode";
  }
  /**
   * Constructs a new stack node.
   *
   * @param {?StackNode} [parent=null] - The parent stack node.
   */
  constructor(parent = null) {
    super();
    this.nodes = [];
    this.outputNode = null;
    this.parent = parent;
    this._currentCond = null;
    this._expressionNode = null;
    this.isStackNode = true;
  }
  getNodeType(builder) {
    return this.hasOutput ? this.outputNode.getNodeType(builder) : "void";
  }
  getMemberType(builder, name) {
    return this.hasOutput ? this.outputNode.getMemberType(builder, name) : "void";
  }
  /**
   * Adds a node to this stack.
   *
   * @param {Node} node - The node to add.
   * @return {StackNode} A reference to this stack node.
   */
  add(node) {
    if (node.isNode !== true) {
      console.error("THREE.TSL: Invalid node added to stack.");
      return this;
    }
    this.nodes.push(node);
    return this;
  }
  /**
   * Represent an `if` statement in TSL.
   *
   * @param {Node} boolNode - Represents the condition.
   * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.
   * @return {StackNode} A reference to this stack node.
   */
  If(boolNode, method) {
    const methodNode = new ShaderNode(method);
    this._currentCond = select(boolNode, methodNode);
    return this.add(this._currentCond);
  }
  /**
   * Represent an `elseif` statement in TSL.
   *
   * @param {Node} boolNode - Represents the condition.
   * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.
   * @return {StackNode} A reference to this stack node.
   */
  ElseIf(boolNode, method) {
    const methodNode = new ShaderNode(method);
    const ifNode = select(boolNode, methodNode);
    this._currentCond.elseNode = ifNode;
    this._currentCond = ifNode;
    return this;
  }
  /**
   * Represent an `else` statement in TSL.
   *
   * @param {Function} method - TSL code which is executed in the `else` case.
   * @return {StackNode} A reference to this stack node.
   */
  Else(method) {
    this._currentCond.elseNode = new ShaderNode(method);
    return this;
  }
  /**
   * Represents a `switch` statement in TSL.
   *
   * @param {any} expression - Represents the expression.
   * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.
   * @return {StackNode} A reference to this stack node.
   */
  Switch(expression3) {
    this._expressionNode = nodeObject(expression3);
    return this;
  }
  /**
   * Represents a `case` statement in TSL. The TSL version accepts an arbitrary numbers of values.
   * The last parameter must be the callback method that should be executed in the `true` case.
   *
   * @param {...any} params - The values of the `Case()` statement as well as the callback method.
   * @return {StackNode} A reference to this stack node.
   */
  Case(...params) {
    const caseNodes = [];
    if (params.length >= 2) {
      for (let i2 = 0; i2 < params.length - 1; i2++) {
        caseNodes.push(this._expressionNode.equal(nodeObject(params[i2])));
      }
    } else {
      console.error("THREE.TSL: Invalid parameter length. Case() requires at least two parameters.");
    }
    const method = params[params.length - 1];
    const methodNode = new ShaderNode(method);
    let caseNode = caseNodes[0];
    for (let i2 = 1; i2 < caseNodes.length; i2++) {
      caseNode = caseNode.or(caseNodes[i2]);
    }
    const condNode = select(caseNode, methodNode);
    if (this._currentCond === null) {
      this._currentCond = condNode;
      return this.add(this._currentCond);
    } else {
      this._currentCond.elseNode = condNode;
      this._currentCond = condNode;
      return this;
    }
  }
  /**
   * Represents the default code block of a Switch/Case statement.
   *
   * @param {Function} method - TSL code which is executed in the `else` case.
   * @return {StackNode} A reference to this stack node.
   */
  Default(method) {
    this.Else(method);
    return this;
  }
  setup(builder) {
    const nodeProperties = builder.getNodeProperties(this);
    let index6 = 0;
    for (const childNode of this.getChildren()) {
      if (childNode.isVarNode && childNode.intent === true) {
        const properties = builder.getNodeProperties(childNode);
        if (properties.assign !== true) {
          continue;
        }
      }
      nodeProperties["node" + index6++] = childNode;
    }
    return nodeProperties.outputNode || null;
  }
  get hasOutput() {
    return this.outputNode && this.outputNode.isNode;
  }
  build(builder, ...params) {
    const previousBuildStack = builder.currentStack;
    const previousStack = getCurrentStack();
    setCurrentStack(this);
    builder.currentStack = this;
    const buildStage = builder.buildStage;
    for (const node of this.nodes) {
      if (node.isVarNode && node.intent === true) {
        const properties = builder.getNodeProperties(node);
        if (properties.assign !== true) {
          continue;
        }
      }
      if (buildStage === "setup") {
        node.build(builder);
      } else if (buildStage === "analyze") {
        node.build(builder, this);
      } else if (buildStage === "generate") {
        const stages = builder.getDataFromNode(node, "any").stages;
        const parents = stages && stages[builder.shaderStage];
        if (node.isVarNode && parents && parents.length === 1 && parents[0] && parents[0].isStackNode) {
          continue;
        }
        node.build(builder, "void");
      }
    }
    let result;
    if (this.hasOutput) {
      result = this.outputNode.build(builder, ...params);
    } else {
      result = super.build(builder, ...params);
    }
    setCurrentStack(previousStack);
    builder.currentStack = previousBuildStack;
    return result;
  }
};
var stack = nodeProxy(StackNode).setParameterLength(0, 1);
function getMembersLayout(members) {
  return Object.entries(members).map(([name, value]) => {
    if (typeof value === "string") {
      return { name, type: value, atomic: false };
    }
    return { name, type: value.type, atomic: value.atomic || false };
  });
}
var StructTypeNode = class extends Node {
  static get type() {
    return "StructTypeNode";
  }
  /**
   * Creates an instance of StructTypeNode.
   *
   * @param {Object} membersLayout - The layout of the members for the struct.
   * @param {?string} [name=null] - The optional name of the struct.
   */
  constructor(membersLayout, name = null) {
    super("struct");
    this.membersLayout = getMembersLayout(membersLayout);
    this.name = name;
    this.isStructLayoutNode = true;
  }
  /**
   * Returns the length of the struct.
   * The length is calculated by summing the lengths of the struct's members.
   *
   * @returns {number} The length of the struct.
   */
  getLength() {
    const GPU_CHUNK_BYTES2 = 8;
    const BYTES_PER_ELEMENT = Float32Array.BYTES_PER_ELEMENT;
    let offset = 0;
    for (const member of this.membersLayout) {
      const type = member.type;
      const itemSize = getMemoryLengthFromType(type) * BYTES_PER_ELEMENT;
      const boundary = getByteBoundaryFromType(type);
      const chunkOffset = offset % GPU_CHUNK_BYTES2;
      const chunkPadding = chunkOffset % boundary;
      const chunkStart = chunkOffset + chunkPadding;
      offset += chunkPadding;
      if (chunkStart !== 0 && GPU_CHUNK_BYTES2 - chunkStart < itemSize) {
        offset += GPU_CHUNK_BYTES2 - chunkStart;
      }
      offset += itemSize;
    }
    return Math.ceil(offset / GPU_CHUNK_BYTES2) * GPU_CHUNK_BYTES2 / BYTES_PER_ELEMENT;
  }
  getMemberType(builder, name) {
    const member = this.membersLayout.find((m2) => m2.name === name);
    return member ? member.type : "void";
  }
  getNodeType(builder) {
    const structType = builder.getStructTypeFromNode(this, this.membersLayout, this.name);
    return structType.name;
  }
  setup(builder) {
    builder.getStructTypeFromNode(this, this.membersLayout, this.name);
    builder.addInclude(this);
  }
  generate(builder) {
    return this.getNodeType(builder);
  }
};
var StructNode = class extends Node {
  static get type() {
    return "StructNode";
  }
  constructor(structTypeNode, values) {
    super("vec3");
    this.structTypeNode = structTypeNode;
    this.values = values;
    this.isStructNode = true;
  }
  getNodeType(builder) {
    return this.structTypeNode.getNodeType(builder);
  }
  getMemberType(builder, name) {
    return this.structTypeNode.getMemberType(builder, name);
  }
  generate(builder) {
    const nodeVar = builder.getVarFromNode(this);
    const structType = nodeVar.type;
    const propertyName = builder.getPropertyName(nodeVar);
    builder.addLineFlowCode(`${propertyName} = ${builder.generateStruct(structType, this.structTypeNode.membersLayout, this.values)}`, this);
    return nodeVar.name;
  }
};
var struct = (membersLayout, name = null) => {
  const structLayout = new StructTypeNode(membersLayout, name);
  const struct3 = (...params) => {
    let values = null;
    if (params.length > 0) {
      if (params[0].isNode) {
        values = {};
        const names2 = Object.keys(membersLayout);
        for (let i2 = 0; i2 < params.length; i2++) {
          values[names2[i2]] = params[i2];
        }
      } else {
        values = params[0];
      }
    }
    return nodeObject(new StructNode(structLayout, values));
  };
  struct3.layout = structLayout;
  struct3.isStruct = true;
  return struct3;
};
var OutputStructNode = class extends Node {
  static get type() {
    return "OutputStructNode";
  }
  /**
   * Constructs a new output struct node. The constructor can be invoked with an
   * arbitrary number of nodes representing the members.
   *
   * @param {...Node} members - A parameter list of nodes.
   */
  constructor(...members) {
    super();
    this.members = members;
    this.isOutputStructNode = true;
  }
  getNodeType(builder) {
    const properties = builder.getNodeProperties(this);
    if (properties.membersLayout === void 0) {
      const members = this.members;
      const membersLayout = [];
      for (let i2 = 0; i2 < members.length; i2++) {
        const name = "m" + i2;
        const type = members[i2].getNodeType(builder);
        membersLayout.push({ name, type, index: i2 });
      }
      properties.membersLayout = membersLayout;
      properties.structType = builder.getOutputStructTypeFromNode(this, properties.membersLayout);
    }
    return properties.structType.name;
  }
  generate(builder) {
    const propertyName = builder.getOutputStructName();
    const members = this.members;
    const structPrefix = propertyName !== "" ? propertyName + "." : "";
    for (let i2 = 0; i2 < members.length; i2++) {
      const snippet = members[i2].build(builder);
      builder.addLineFlowCode(`${structPrefix}m${i2} = ${snippet}`, this);
    }
    return propertyName;
  }
};
var outputStruct = nodeProxy(OutputStructNode);
function getTextureIndex(textures, name) {
  for (let i2 = 0; i2 < textures.length; i2++) {
    if (textures[i2].name === name) {
      return i2;
    }
  }
  return -1;
}
var MRTNode = class extends OutputStructNode {
  static get type() {
    return "MRTNode";
  }
  /**
   * Constructs a new output struct node.
   *
   * @param {Object<string, Node>} outputNodes - The MRT outputs.
   */
  constructor(outputNodes) {
    super();
    this.outputNodes = outputNodes;
    this.isMRTNode = true;
  }
  /**
   * Returns `true` if the MRT node has an output with the given name.
   *
   * @param {string} name - The name of the output.
   * @return {NodeBuilder} Whether the MRT node has an output for the given name or not.
   */
  has(name) {
    return this.outputNodes[name] !== void 0;
  }
  /**
   * Returns the output node for the given name.
   *
   * @param {string} name - The name of the output.
   * @return {Node} The output node.
   */
  get(name) {
    return this.outputNodes[name];
  }
  /**
   * Merges the outputs of the given MRT node with the outputs of this node.
   *
   * @param {MRTNode} mrtNode - The MRT to merge.
   * @return {MRTNode} A new MRT node with merged outputs..
   */
  merge(mrtNode) {
    const outputs = { ...this.outputNodes, ...mrtNode.outputNodes };
    return mrt(outputs);
  }
  setup(builder) {
    const outputNodes = this.outputNodes;
    const mrt3 = builder.renderer.getRenderTarget();
    const members = [];
    const textures = mrt3.textures;
    for (const name in outputNodes) {
      const index6 = getTextureIndex(textures, name);
      members[index6] = vec4(outputNodes[name]);
    }
    this.members = members;
    return super.setup(builder);
  }
};
var mrt = nodeProxy(MRTNode);
var BitcastNode = class extends TempNode {
  static get type() {
    return "BitcastNode";
  }
  /**
   * Constructs a new bitcast node.
   *
   * @param {Node} valueNode - The value to convert.
   * @param {string} conversionType - The type to convert to.
   * @param {?string} [inputType = null] - The expected input data type of the bitcast operation.
   */
  constructor(valueNode, conversionType, inputType = null) {
    super();
    this.valueNode = valueNode;
    this.conversionType = conversionType;
    this.inputType = inputType;
    this.isBitcastNode = true;
  }
  getNodeType(builder) {
    if (this.inputType !== null) {
      const valueType = this.valueNode.getNodeType(builder);
      const valueLength = builder.getTypeLength(valueType);
      return builder.getTypeFromLength(valueLength, this.conversionType);
    }
    return this.conversionType;
  }
  generate(builder) {
    const type = this.getNodeType(builder);
    let inputType = "";
    if (this.inputType !== null) {
      const valueType = this.valueNode.getNodeType(builder);
      const valueTypeLength = builder.getTypeLength(valueType);
      inputType = valueTypeLength === 1 ? this.inputType : builder.changeComponentType(valueType, this.inputType);
    } else {
      inputType = this.valueNode.getNodeType(builder);
    }
    return `${builder.getBitcastMethod(type, inputType)}( ${this.valueNode.build(builder, inputType)} )`;
  }
};
var bitcast = nodeProxyIntent(BitcastNode).setParameterLength(2);
var floatBitsToInt = (value) => new BitcastNode(value, "int", "float");
var floatBitsToUint = (value) => new BitcastNode(value, "uint", "float");
var intBitsToFloat = (value) => new BitcastNode(value, "float", "int");
var uintBitsToFloat = (value) => new BitcastNode(value, "float", "uint");
var hash = Fn(([seed]) => {
  const state = seed.toUint().mul(747796405).add(2891336453);
  const word = state.shiftRight(state.shiftRight(28).add(4)).bitXor(state).mul(277803737);
  const result = word.shiftRight(22).bitXor(word);
  return result.toFloat().mul(1 / 2 ** 32);
});
var parabola = (x2, k2) => pow(mul(4, x2.mul(sub(1, x2))), k2);
var gain = (x2, k2) => x2.lessThan(0.5) ? parabola(x2.mul(2), k2).div(2) : sub(1, parabola(mul(sub(1, x2), 2), k2).div(2));
var pcurve = (x2, a2, b) => pow(div(pow(x2, a2), add3(pow(x2, a2), pow(sub(1, x2), b))), 1 / a2);
var sinc = (x2, k2) => sin2(PI.mul(k2.mul(x2).sub(1))).div(PI.mul(k2.mul(x2).sub(1)));
var tri = Fn(([x2]) => {
  return x2.fract().sub(0.5).abs();
}).setLayout({
  name: "tri",
  type: "float",
  inputs: [
    { name: "x", type: "float" }
  ]
});
var tri3 = Fn(([p2]) => {
  return vec3(tri(p2.z.add(tri(p2.y.mul(1)))), tri(p2.z.add(tri(p2.x.mul(1)))), tri(p2.y.add(tri(p2.x.mul(1)))));
}).setLayout({
  name: "tri3",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var triNoise3D = Fn(([position, speed, time3]) => {
  const p2 = vec3(position).toVar();
  const z2 = float(1.4).toVar();
  const rz = float(0).toVar();
  const bp = vec3(p2).toVar();
  Loop({ start: float(0), end: float(3), type: "float", condition: "<=" }, () => {
    const dg = vec3(tri3(bp.mul(2))).toVar();
    p2.addAssign(dg.add(time3.mul(float(0.1).mul(speed))));
    bp.mulAssign(1.8);
    z2.mulAssign(1.5);
    p2.mulAssign(1.2);
    const t2 = float(tri(p2.z.add(tri(p2.x.add(tri(p2.y)))))).toVar();
    rz.addAssign(t2.div(z2));
    bp.addAssign(0.14);
  });
  return rz;
}).setLayout({
  name: "triNoise3D",
  type: "float",
  inputs: [
    { name: "position", type: "vec3" },
    { name: "speed", type: "float" },
    { name: "time", type: "float" }
  ]
});
var FunctionOverloadingNode = class extends Node {
  static get type() {
    return "FunctionOverloadingNode";
  }
  /**
   * Constructs a new function overloading node.
   *
   * @param {Array<Function>} functionNodes - Array of `Fn` function definitions.
   * @param {...Node} parametersNodes - A list of parameter nodes.
   */
  constructor(functionNodes = [], ...parametersNodes) {
    super();
    this.functionNodes = functionNodes;
    this.parametersNodes = parametersNodes;
    this._candidateFnCall = null;
    this.global = true;
  }
  /**
   * This method is overwritten since the node type is inferred from
   * the function's return type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType() {
    return this.functionNodes[0].shaderNode.layout.type;
  }
  setup(builder) {
    const params = this.parametersNodes;
    let candidateFnCall = this._candidateFnCall;
    if (candidateFnCall === null) {
      let candidateFn = null;
      let candidateScore = -1;
      for (const functionNode of this.functionNodes) {
        const shaderNode = functionNode.shaderNode;
        const layout = shaderNode.layout;
        if (layout === null) {
          throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");
        }
        const inputs = layout.inputs;
        if (params.length === inputs.length) {
          let score = 0;
          for (let i2 = 0; i2 < params.length; i2++) {
            const param = params[i2];
            const input = inputs[i2];
            if (param.getNodeType(builder) === input.type) {
              score++;
            } else {
              score = 0;
            }
          }
          if (score > candidateScore) {
            candidateFn = functionNode;
            candidateScore = score;
          }
        }
      }
      this._candidateFnCall = candidateFnCall = candidateFn(...params);
    }
    return candidateFnCall;
  }
};
var overloadingBaseFn = nodeProxy(FunctionOverloadingNode);
var overloadingFn = (functionNodes) => (...params) => overloadingBaseFn(functionNodes, ...params);
var time = uniform(0).setGroup(renderGroup).onRenderUpdate((frame) => frame.time);
var deltaTime = uniform(0).setGroup(renderGroup).onRenderUpdate((frame) => frame.deltaTime);
var frameId = uniform(0, "uint").setGroup(renderGroup).onRenderUpdate((frame) => frame.frameId);
var oscSine = (t2 = time) => t2.add(0.75).mul(Math.PI * 2).sin().mul(0.5).add(0.5);
var oscSquare = (t2 = time) => t2.fract().round();
var oscTriangle = (t2 = time) => t2.add(0.5).fract().mul(2).sub(1).abs();
var oscSawtooth = (t2 = time) => t2.fract();
var rotateUV = Fn(([uv3, rotation, center = vec2(0.5)]) => {
  return rotate(uv3.sub(center), rotation).add(center);
});
var spherizeUV = Fn(([uv3, strength, center = vec2(0.5)]) => {
  const delta = uv3.sub(center);
  const delta2 = delta.dot(delta);
  const delta4 = delta2.mul(delta2);
  const deltaOffset = delta4.mul(strength);
  return uv3.add(delta.mul(deltaOffset));
});
var billboarding = Fn(({ position = null, horizontal = true, vertical = false }) => {
  let worldMatrix;
  if (position !== null) {
    worldMatrix = modelWorldMatrix.toVar();
    worldMatrix[3][0] = position.x;
    worldMatrix[3][1] = position.y;
    worldMatrix[3][2] = position.z;
  } else {
    worldMatrix = modelWorldMatrix;
  }
  const modelViewMatrix3 = cameraViewMatrix.mul(worldMatrix);
  if (defined(horizontal)) {
    modelViewMatrix3[0][0] = modelWorldMatrix[0].length();
    modelViewMatrix3[0][1] = 0;
    modelViewMatrix3[0][2] = 0;
  }
  if (defined(vertical)) {
    modelViewMatrix3[1][0] = 0;
    modelViewMatrix3[1][1] = modelWorldMatrix[1].length();
    modelViewMatrix3[1][2] = 0;
  }
  modelViewMatrix3[2][0] = 0;
  modelViewMatrix3[2][1] = 0;
  modelViewMatrix3[2][2] = 1;
  return cameraProjectionMatrix.mul(modelViewMatrix3).mul(positionLocal);
});
var viewportSafeUV = Fn(([uv3 = null]) => {
  const depth3 = linearDepth();
  const depthDiff = linearDepth(viewportDepthTexture(uv3)).sub(depth3);
  const finalUV = depthDiff.lessThan(0).select(screenUV, uv3);
  return finalUV;
});
var SpriteSheetUVNode = class extends Node {
  static get type() {
    return "SpriteSheetUVNode";
  }
  /**
   * Constructs a new sprite sheet uv node.
   *
   * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).
   * @param {Node<vec2>} [uvNode=uv()] - The uv node.
   * @param {Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.
   */
  constructor(countNode, uvNode = uv$1(), frameNode = float(0)) {
    super("vec2");
    this.countNode = countNode;
    this.uvNode = uvNode;
    this.frameNode = frameNode;
  }
  setup() {
    const { frameNode, uvNode, countNode } = this;
    const { width, height } = countNode;
    const frameNum = frameNode.mod(width.mul(height)).floor();
    const column = frameNum.mod(width);
    const row = height.sub(frameNum.add(1).div(width).ceil());
    const scale2 = countNode.reciprocal();
    const uvFrameOffset = vec2(column, row);
    return uvNode.add(uvFrameOffset).mul(scale2);
  }
};
var spritesheetUV = nodeProxy(SpriteSheetUVNode).setParameterLength(3);
var triplanarTextures = Fn(([textureXNode, textureYNode = null, textureZNode = null, scaleNode = float(1), positionNode = positionLocal, normalNode = normalLocal]) => {
  let bf = normalNode.abs().normalize();
  bf = bf.div(bf.dot(vec3(1)));
  const tx = positionNode.yz.mul(scaleNode);
  const ty = positionNode.zx.mul(scaleNode);
  const tz = positionNode.xy.mul(scaleNode);
  const textureX = textureXNode.value;
  const textureY = textureYNode !== null ? textureYNode.value : textureX;
  const textureZ = textureZNode !== null ? textureZNode.value : textureX;
  const cx = texture(textureX, tx).mul(bf.x);
  const cy = texture(textureY, ty).mul(bf.y);
  const cz = texture(textureZ, tz).mul(bf.z);
  return add3(cx, cy, cz);
});
var triplanarTexture = (...params) => triplanarTextures(...params);
var _reflectorPlane = new Plane();
var _normal = new Vector3();
var _reflectorWorldPosition = new Vector3();
var _cameraWorldPosition = new Vector3();
var _rotationMatrix = new Matrix4();
var _lookAtPosition = new Vector3(0, 0, -1);
var clipPlane = new Vector4();
var _view = new Vector3();
var _target = new Vector3();
var _q = new Vector4();
var _size$2 = new Vector2();
var _defaultRT = new RenderTarget();
var _defaultUV = screenUV.flipX();
_defaultRT.depthTexture = new DepthTexture(1, 1);
var _inReflector = false;
var ReflectorNode = class _ReflectorNode extends TextureNode {
  static get type() {
    return "ReflectorNode";
  }
  /**
   * Constructs a new reflector node.
   *
   * @param {Object} [parameters={}] - An object holding configuration parameters.
   * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.
   * @param {number} [parameters.resolutionScale=1] - The resolution scale.
   * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.
   * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.
   * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.
   * @param {number} [parameters.samples] - Anti-Aliasing samples of the internal render-target.
   * @param {TextureNode} [parameters.defaultTexture] - The default texture node.
   * @param {ReflectorBaseNode} [parameters.reflector] - The reflector base node.
   */
  constructor(parameters = {}) {
    super(parameters.defaultTexture || _defaultRT.texture, _defaultUV);
    this._reflectorBaseNode = parameters.reflector || new ReflectorBaseNode(this, parameters);
    this._depthNode = null;
    this.setUpdateMatrix(false);
  }
  /**
   * A reference to the internal reflector node.
   *
   * @type {ReflectorBaseNode}
   */
  get reflector() {
    return this._reflectorBaseNode;
  }
  /**
   * A reference to 3D object the reflector is linked to.
   *
   * @type {Object3D}
   */
  get target() {
    return this._reflectorBaseNode.target;
  }
  /**
   * Returns a node representing the mirror's depth. That can be used
   * to implement more advanced reflection effects like distance attenuation.
   *
   * @return {Node} The depth node.
   */
  getDepthNode() {
    if (this._depthNode === null) {
      if (this._reflectorBaseNode.depth !== true) {
        throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");
      }
      this._depthNode = nodeObject(new _ReflectorNode({
        defaultTexture: _defaultRT.depthTexture,
        reflector: this._reflectorBaseNode
      }));
    }
    return this._depthNode;
  }
  setup(builder) {
    if (!builder.object.isQuadMesh)
      this._reflectorBaseNode.build(builder);
    return super.setup(builder);
  }
  clone() {
    const newNode = new this.constructor(this.reflectorNode);
    newNode.uvNode = this.uvNode;
    newNode.levelNode = this.levelNode;
    newNode.biasNode = this.biasNode;
    newNode.sampler = this.sampler;
    newNode.depthNode = this.depthNode;
    newNode.compareNode = this.compareNode;
    newNode.gradNode = this.gradNode;
    newNode._reflectorBaseNode = this._reflectorBaseNode;
    return newNode;
  }
  /**
   * Frees internal resources. Should be called when the node is no longer in use.
   */
  dispose() {
    super.dispose();
    this._reflectorBaseNode.dispose();
  }
};
var ReflectorBaseNode = class extends Node {
  static get type() {
    return "ReflectorBaseNode";
  }
  /**
   * Constructs a new reflector base node.
   *
   * @param {TextureNode} textureNode - Represents the rendered reflections as a texture node.
   * @param {Object} [parameters={}] - An object holding configuration parameters.
   * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.
   * @param {number} [parameters.resolutionScale=1] - The resolution scale.
   * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.
   * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.
   * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.
   * @param {number} [parameters.samples] - Anti-Aliasing samples of the internal render-target.
   */
  constructor(textureNode, parameters = {}) {
    super();
    const {
      target = new Object3D(),
      resolutionScale = 1,
      generateMipmaps = false,
      bounces = true,
      depth: depth3 = false,
      samples = 0
    } = parameters;
    this.textureNode = textureNode;
    this.target = target;
    this.resolutionScale = resolutionScale;
    if (parameters.resolution !== void 0) {
      warnOnce('THREE.ReflectorNode: The "resolution" parameter has been renamed to "resolutionScale".');
      this.resolutionScale = parameters.resolution;
    }
    this.generateMipmaps = generateMipmaps;
    this.bounces = bounces;
    this.depth = depth3;
    this.samples = samples;
    this.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;
    this.virtualCameras = /* @__PURE__ */ new WeakMap();
    this.renderTargets = /* @__PURE__ */ new Map();
    this.forceUpdate = false;
    this.hasOutput = false;
  }
  /**
   * Updates the resolution of the internal render target.
   *
   * @private
   * @param {RenderTarget} renderTarget - The render target to resize.
   * @param {Renderer} renderer - The renderer that is used to determine the new size.
   */
  _updateResolution(renderTarget, renderer3) {
    const resolution2 = this.resolutionScale;
    renderer3.getDrawingBufferSize(_size$2);
    renderTarget.setSize(Math.round(_size$2.width * resolution2), Math.round(_size$2.height * resolution2));
  }
  setup(builder) {
    this._updateResolution(_defaultRT, builder.renderer);
    return super.setup(builder);
  }
  /**
   * Frees internal resources. Should be called when the node is no longer in use.
   */
  dispose() {
    super.dispose();
    for (const renderTarget of this.renderTargets.values()) {
      renderTarget.dispose();
    }
  }
  /**
   * Returns a virtual camera for the given camera. The virtual camera is used to
   * render the scene from the reflector's view so correct reflections can be produced.
   *
   * @param {Camera} camera - The scene's camera.
   * @return {Camera} The corresponding virtual camera.
   */
  getVirtualCamera(camera3) {
    let virtualCamera = this.virtualCameras.get(camera3);
    if (virtualCamera === void 0) {
      virtualCamera = camera3.clone();
      this.virtualCameras.set(camera3, virtualCamera);
    }
    return virtualCamera;
  }
  /**
   * Returns a render target for the given camera. The reflections are rendered
   * into this render target.
   *
   * @param {Camera} camera - The scene's camera.
   * @return {RenderTarget} The render target.
   */
  getRenderTarget(camera3) {
    let renderTarget = this.renderTargets.get(camera3);
    if (renderTarget === void 0) {
      renderTarget = new RenderTarget(0, 0, { type: HalfFloatType, samples: this.samples });
      if (this.generateMipmaps === true) {
        renderTarget.texture.minFilter = LinearMipMapLinearFilter;
        renderTarget.texture.generateMipmaps = true;
      }
      if (this.depth === true) {
        renderTarget.depthTexture = new DepthTexture();
      }
      this.renderTargets.set(camera3, renderTarget);
    }
    return renderTarget;
  }
  updateBefore(frame) {
    if (this.bounces === false && _inReflector)
      return false;
    _inReflector = true;
    const { scene: scene3, camera: camera3, renderer: renderer3, material } = frame;
    const { target } = this;
    const virtualCamera = this.getVirtualCamera(camera3);
    const renderTarget = this.getRenderTarget(virtualCamera);
    renderer3.getDrawingBufferSize(_size$2);
    this._updateResolution(renderTarget, renderer3);
    _reflectorWorldPosition.setFromMatrixPosition(target.matrixWorld);
    _cameraWorldPosition.setFromMatrixPosition(camera3.matrixWorld);
    _rotationMatrix.extractRotation(target.matrixWorld);
    _normal.set(0, 0, 1);
    _normal.applyMatrix4(_rotationMatrix);
    _view.subVectors(_reflectorWorldPosition, _cameraWorldPosition);
    const isFacingAway = _view.dot(_normal) > 0;
    let needsClear = false;
    if (isFacingAway === true && this.forceUpdate === false) {
      if (this.hasOutput === false) {
        _inReflector = false;
        return;
      }
      needsClear = true;
    }
    _view.reflect(_normal).negate();
    _view.add(_reflectorWorldPosition);
    _rotationMatrix.extractRotation(camera3.matrixWorld);
    _lookAtPosition.set(0, 0, -1);
    _lookAtPosition.applyMatrix4(_rotationMatrix);
    _lookAtPosition.add(_cameraWorldPosition);
    _target.subVectors(_reflectorWorldPosition, _lookAtPosition);
    _target.reflect(_normal).negate();
    _target.add(_reflectorWorldPosition);
    virtualCamera.coordinateSystem = camera3.coordinateSystem;
    virtualCamera.position.copy(_view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(_rotationMatrix);
    virtualCamera.up.reflect(_normal);
    virtualCamera.lookAt(_target);
    virtualCamera.near = camera3.near;
    virtualCamera.far = camera3.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera3.projectionMatrix);
    _reflectorPlane.setFromNormalAndCoplanarPoint(_normal, _reflectorWorldPosition);
    _reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(_reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    _q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    _q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    _q.z = -1;
    _q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(1 / clipPlane.dot(_q));
    const clipBias = 0;
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = renderer3.coordinateSystem === WebGPUCoordinateSystem ? clipPlane.z - clipBias : clipPlane.z + 1 - clipBias;
    projectionMatrix.elements[14] = clipPlane.w;
    this.textureNode.value = renderTarget.texture;
    if (this.depth === true) {
      this.textureNode.getDepthNode().value = renderTarget.depthTexture;
    }
    material.visible = false;
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    const currentAutoClear = renderer3.autoClear;
    renderer3.setMRT(null);
    renderer3.setRenderTarget(renderTarget);
    renderer3.autoClear = true;
    if (needsClear) {
      renderer3.clear();
      this.hasOutput = false;
    } else {
      renderer3.render(scene3, virtualCamera);
      this.hasOutput = true;
    }
    renderer3.setMRT(currentMRT);
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.autoClear = currentAutoClear;
    material.visible = true;
    _inReflector = false;
    this.forceUpdate = false;
  }
  /**
   * The resolution scale.
   *
   * @deprecated
   * @type {number}
   * @default {1}
   */
  get resolution() {
    warnOnce('THREE.ReflectorNode: The "resolution" property has been renamed to "resolutionScale".');
    return this.resolutionScale;
  }
  set resolution(value) {
    warnOnce('THREE.ReflectorNode: The "resolution" property has been renamed to "resolutionScale".');
    this.resolutionScale = value;
  }
};
var reflector = (parameters) => nodeObject(new ReflectorNode(parameters));
var _camera2 = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
var QuadGeometry = class extends BufferGeometry {
  /**
   * Constructs a new quad geometry.
   *
   * @param {boolean} [flipY=false] - Whether the uv coordinates should be flipped along the vertical axis or not.
   */
  constructor(flipY = false) {
    super();
    const uv3 = flipY === false ? [0, -1, 0, 1, 2, 1] : [0, 2, 0, 0, 2, 0];
    this.setAttribute("position", new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
    this.setAttribute("uv", new Float32BufferAttribute(uv3, 2));
  }
};
var _geometry = new QuadGeometry();
var QuadMesh = class extends Mesh {
  /**
   * Constructs a new quad mesh.
   *
   * @param {?Material} [material=null] - The material to render the quad mesh with.
   */
  constructor(material = null) {
    super(_geometry, material);
    this.camera = _camera2;
    this.isQuadMesh = true;
  }
  /**
   * Async version of `render()`.
   *
   * @async
   * @param {Renderer} renderer - The renderer.
   * @return {Promise} A Promise that resolves when the render has been finished.
   */
  async renderAsync(renderer3) {
    return renderer3.renderAsync(this, _camera2);
  }
  /**
   * Renders the quad mesh
   *
   * @param {Renderer} renderer - The renderer.
   */
  render(renderer3) {
    renderer3.render(this, _camera2);
  }
};
var _size$1 = new Vector2();
var RTTNode = class extends TextureNode {
  static get type() {
    return "RTTNode";
  }
  /**
   * Constructs a new RTT node.
   *
   * @param {Node} node - The node to render a texture with.
   * @param {?number} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.
   * @param {?number} [height=null] - The height of the internal render target.
   * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.
   */
  constructor(node, width = null, height = null, options = { type: HalfFloatType }) {
    const renderTarget = new RenderTarget(width, height, options);
    super(renderTarget.texture, uv$1());
    this.isRTTNode = true;
    this.node = node;
    this.width = width;
    this.height = height;
    this.pixelRatio = 1;
    this.renderTarget = renderTarget;
    this.textureNeedsUpdate = true;
    this.autoUpdate = true;
    this._rttNode = null;
    this._quadMesh = new QuadMesh(new NodeMaterial());
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  /**
   * Whether the internal render target should automatically be resized or not.
   *
   * @type {boolean}
   * @readonly
   * @default true
   */
  get autoResize() {
    return this.width === null;
  }
  setup(builder) {
    this._rttNode = this.node.context(builder.getSharedContext());
    this._quadMesh.material.name = "RTT";
    this._quadMesh.material.needsUpdate = true;
    return super.setup(builder);
  }
  /**
   * Sets the size of the internal render target
   *
   * @param {number} width - The width to set.
   * @param {number} height - The width to set.
   */
  setSize(width, height) {
    this.width = width;
    this.height = height;
    const effectiveWidth = width * this.pixelRatio;
    const effectiveHeight = height * this.pixelRatio;
    this.renderTarget.setSize(effectiveWidth, effectiveHeight);
    this.textureNeedsUpdate = true;
  }
  /**
   * Sets the pixel ratio. This will also resize the render target.
   *
   * @param {number} pixelRatio - The pixel ratio to set.
   */
  setPixelRatio(pixelRatio) {
    this.pixelRatio = pixelRatio;
    this.setSize(this.width, this.height);
  }
  updateBefore({ renderer: renderer3 }) {
    if (this.textureNeedsUpdate === false && this.autoUpdate === false)
      return;
    this.textureNeedsUpdate = false;
    if (this.autoResize === true) {
      const pixelRatio = renderer3.getPixelRatio();
      const size = renderer3.getSize(_size$1);
      const effectiveWidth = size.width * pixelRatio;
      const effectiveHeight = size.height * pixelRatio;
      if (effectiveWidth !== this.renderTarget.width || effectiveHeight !== this.renderTarget.height) {
        this.renderTarget.setSize(effectiveWidth, effectiveHeight);
        this.textureNeedsUpdate = true;
      }
    }
    this._quadMesh.material.fragmentNode = this._rttNode;
    const currentRenderTarget = renderer3.getRenderTarget();
    renderer3.setRenderTarget(this.renderTarget);
    this._quadMesh.render(renderer3);
    renderer3.setRenderTarget(currentRenderTarget);
  }
  clone() {
    const newNode = new TextureNode(this.value, this.uvNode, this.levelNode);
    newNode.sampler = this.sampler;
    newNode.referenceNode = this;
    return newNode;
  }
};
var rtt = (node, ...params) => nodeObject(new RTTNode(nodeObject(node), ...params));
var convertToTexture = (node, ...params) => {
  if (node.isSampleNode || node.isTextureNode)
    return node;
  if (node.isPassNode)
    return node.getTextureNode();
  return rtt(node, ...params);
};
var getViewPosition = Fn(([screenPosition, depth3, projectionMatrixInverse], builder) => {
  let clipSpacePosition;
  if (builder.renderer.coordinateSystem === WebGPUCoordinateSystem) {
    screenPosition = vec2(screenPosition.x, screenPosition.y.oneMinus()).mul(2).sub(1);
    clipSpacePosition = vec4(vec3(screenPosition, depth3), 1);
  } else {
    clipSpacePosition = vec4(vec3(screenPosition.x, screenPosition.y.oneMinus(), depth3).mul(2).sub(1), 1);
  }
  const viewSpacePosition = vec4(projectionMatrixInverse.mul(clipSpacePosition));
  return viewSpacePosition.xyz.div(viewSpacePosition.w);
});
var getScreenPosition = Fn(([viewPosition, projectionMatrix]) => {
  const sampleClipPos = projectionMatrix.mul(vec4(viewPosition, 1));
  const sampleUv = sampleClipPos.xy.div(sampleClipPos.w).mul(0.5).add(0.5).toVar();
  return vec2(sampleUv.x, sampleUv.y.oneMinus());
});
var getNormalFromDepth = Fn(([uv3, depthTexture, projectionMatrixInverse]) => {
  const size = textureSize(textureLoad(depthTexture));
  const p2 = ivec2(uv3.mul(size)).toVar();
  const c0 = textureLoad(depthTexture, p2).toVar();
  const l2 = textureLoad(depthTexture, p2.sub(ivec2(2, 0))).toVar();
  const l1 = textureLoad(depthTexture, p2.sub(ivec2(1, 0))).toVar();
  const r1 = textureLoad(depthTexture, p2.add(ivec2(1, 0))).toVar();
  const r2 = textureLoad(depthTexture, p2.add(ivec2(2, 0))).toVar();
  const b2 = textureLoad(depthTexture, p2.add(ivec2(0, 2))).toVar();
  const b1 = textureLoad(depthTexture, p2.add(ivec2(0, 1))).toVar();
  const t1 = textureLoad(depthTexture, p2.sub(ivec2(0, 1))).toVar();
  const t2 = textureLoad(depthTexture, p2.sub(ivec2(0, 2))).toVar();
  const dl = abs(sub(float(2).mul(l1).sub(l2), c0)).toVar();
  const dr = abs(sub(float(2).mul(r1).sub(r2), c0)).toVar();
  const db = abs(sub(float(2).mul(b1).sub(b2), c0)).toVar();
  const dt = abs(sub(float(2).mul(t1).sub(t2), c0)).toVar();
  const ce = getViewPosition(uv3, c0, projectionMatrixInverse).toVar();
  const dpdx = dl.lessThan(dr).select(ce.sub(getViewPosition(uv3.sub(vec2(float(1).div(size.x), 0)), l1, projectionMatrixInverse)), ce.negate().add(getViewPosition(uv3.add(vec2(float(1).div(size.x), 0)), r1, projectionMatrixInverse)));
  const dpdy = db.lessThan(dt).select(ce.sub(getViewPosition(uv3.add(vec2(0, float(1).div(size.y))), b1, projectionMatrixInverse)), ce.negate().add(getViewPosition(uv3.sub(vec2(0, float(1).div(size.y))), t1, projectionMatrixInverse)));
  return normalize(cross(dpdx, dpdy));
});
var SampleNode = class extends Node {
  /**
   * Returns the type of the node.
   *
   * @type {string}
   * @readonly
   * @static
   */
  static get type() {
    return "SampleNode";
  }
  /**
   * Creates an instance of SampleNode.
   *
   * @param {Function} callback - The function to be called when sampling. Should accept a UV node and return a value.
   * @param {?Node<vec2>} [uvNode=null] - The UV node to be used in the texture sampling.
   */
  constructor(callback, uvNode = null) {
    super();
    this.callback = callback;
    this.uvNode = uvNode;
    this.isSampleNode = true;
  }
  /**
   * Sets up the node by sampling with the default UV accessor.
   *
   * @returns {Node} The result of the callback function when called with the UV node.
   */
  setup() {
    return this.sample(uv$1());
  }
  /**
   * Calls the callback function with the provided UV node.
   *
   * @param {Node<vec2>} uv - The UV node or value to be passed to the callback.
   * @returns {Node} The result of the callback function.
   */
  sample(uv3) {
    return this.callback(uv3);
  }
};
var sample = (callback, uv3 = null) => nodeObject(new SampleNode(callback, nodeObject(uv3)));
var EventNode = class _EventNode extends Node {
  static get type() {
    return "EventNode";
  }
  /**
   * Creates an EventNode.
   *
   * @param {string} eventType - The type of event
   * @param {Function} callback - The callback to execute on update.
   */
  constructor(eventType, callback) {
    super("void");
    this.eventType = eventType;
    this.callback = callback;
    if (eventType === _EventNode.OBJECT) {
      this.updateType = NodeUpdateType.OBJECT;
    } else if (eventType === _EventNode.MATERIAL) {
      this.updateType = NodeUpdateType.RENDER;
    }
  }
  update(frame) {
    this.callback(frame);
  }
};
EventNode.OBJECT = "object";
EventNode.MATERIAL = "material";
var createEvent = (type, callback) => nodeObject(new EventNode(type, callback)).toStack();
var OnObjectUpdate = (callback) => createEvent(EventNode.OBJECT, callback);
var OnMaterialUpdate = (callback) => createEvent(EventNode.MATERIAL, callback);
var StorageInstancedBufferAttribute = class extends InstancedBufferAttribute {
  /**
   * Constructs a new storage instanced buffer attribute.
   *
   * @param {number|TypedArray} count - The item count. It is also valid to pass a typed array as an argument.
   * The subsequent parameters are then obsolete.
   * @param {number} itemSize - The item size.
   * @param {TypedArray.constructor} [typeClass=Float32Array] - A typed array constructor.
   */
  constructor(count, itemSize, typeClass = Float32Array) {
    const array3 = ArrayBuffer.isView(count) ? count : new typeClass(count * itemSize);
    super(array3, itemSize);
    this.isStorageInstancedBufferAttribute = true;
  }
};
var StorageBufferAttribute = class extends BufferAttribute {
  /**
   * Constructs a new storage buffer attribute.
   *
   * @param {number|TypedArray} count - The item count. It is also valid to pass a typed array as an argument.
   * The subsequent parameters are then obsolete.
   * @param {number} itemSize - The item size.
   * @param {TypedArray.constructor} [typeClass=Float32Array] - A typed array constructor.
   */
  constructor(count, itemSize, typeClass = Float32Array) {
    const array3 = ArrayBuffer.isView(count) ? count : new typeClass(count * itemSize);
    super(array3, itemSize);
    this.isStorageBufferAttribute = true;
  }
};
var attributeArray = (count, type = "float") => {
  let itemSize, typedArray;
  if (type.isStruct === true) {
    itemSize = type.layout.getLength();
    typedArray = getTypedArrayFromType("float");
  } else {
    itemSize = getLengthFromType(type);
    typedArray = getTypedArrayFromType(type);
  }
  const buffer3 = new StorageBufferAttribute(count, itemSize, typedArray);
  const node = storage(buffer3, type, count);
  return node;
};
var instancedArray = (count, type = "float") => {
  let itemSize, typedArray;
  if (type.isStruct === true) {
    itemSize = type.layout.getLength();
    typedArray = getTypedArrayFromType("float");
  } else {
    itemSize = getLengthFromType(type);
    typedArray = getTypedArrayFromType(type);
  }
  const buffer3 = new StorageInstancedBufferAttribute(count, itemSize, typedArray);
  const node = storage(buffer3, type, count);
  return node;
};
var PointUVNode = class extends Node {
  static get type() {
    return "PointUVNode";
  }
  /**
   * Constructs a new point uv node.
   */
  constructor() {
    super("vec2");
    this.isPointUVNode = true;
  }
  generate() {
    return "vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )";
  }
};
var pointUV = nodeImmutable(PointUVNode);
var _e1 = new Euler();
var _m1 = new Matrix4();
var SceneNode = class _SceneNode extends Node {
  static get type() {
    return "SceneNode";
  }
  /**
   * Constructs a new scene node.
   *
   * @param {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')} scope - The scope defines the type of scene property that is accessed.
   * @param {?Scene} [scene=null] - A reference to the scene.
   */
  constructor(scope = _SceneNode.BACKGROUND_BLURRINESS, scene3 = null) {
    super();
    this.scope = scope;
    this.scene = scene3;
  }
  /**
   * Depending on the scope, the method returns a different type of node that represents
   * the respective scene property.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Node} The output node.
   */
  setup(builder) {
    const scope = this.scope;
    const scene3 = this.scene !== null ? this.scene : builder.scene;
    let output3;
    if (scope === _SceneNode.BACKGROUND_BLURRINESS) {
      output3 = reference("backgroundBlurriness", "float", scene3);
    } else if (scope === _SceneNode.BACKGROUND_INTENSITY) {
      output3 = reference("backgroundIntensity", "float", scene3);
    } else if (scope === _SceneNode.BACKGROUND_ROTATION) {
      output3 = uniform("mat4").setName("backgroundRotation").setGroup(renderGroup).onRenderUpdate(() => {
        const background = scene3.background;
        if (background !== null && background.isTexture && background.mapping !== UVMapping) {
          _e1.copy(scene3.backgroundRotation);
          _e1.x *= -1;
          _e1.y *= -1;
          _e1.z *= -1;
          _m1.makeRotationFromEuler(_e1);
        } else {
          _m1.identity();
        }
        return _m1;
      });
    } else {
      console.error("THREE.SceneNode: Unknown scope:", scope);
    }
    return output3;
  }
};
SceneNode.BACKGROUND_BLURRINESS = "backgroundBlurriness";
SceneNode.BACKGROUND_INTENSITY = "backgroundIntensity";
SceneNode.BACKGROUND_ROTATION = "backgroundRotation";
var backgroundBlurriness = nodeImmutable(SceneNode, SceneNode.BACKGROUND_BLURRINESS);
var backgroundIntensity = nodeImmutable(SceneNode, SceneNode.BACKGROUND_INTENSITY);
var backgroundRotation = nodeImmutable(SceneNode, SceneNode.BACKGROUND_ROTATION);
var StorageTextureNode = class extends TextureNode {
  static get type() {
    return "StorageTextureNode";
  }
  /**
   * Constructs a new storage texture node.
   *
   * @param {StorageTexture} value - The storage texture.
   * @param {Node<vec2|vec3>} uvNode - The uv node.
   * @param {?Node} [storeNode=null] - The value node that should be stored in the texture.
   */
  constructor(value, uvNode, storeNode = null) {
    super(value, uvNode);
    this.storeNode = storeNode;
    this.isStorageTextureNode = true;
    this.access = NodeAccess.WRITE_ONLY;
  }
  /**
   * Overwrites the default implementation to return a fixed value `'storageTexture'`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return "storageTexture";
  }
  setup(builder) {
    super.setup(builder);
    const properties = builder.getNodeProperties(this);
    properties.storeNode = this.storeNode;
    return properties;
  }
  /**
   * Defines the node access.
   *
   * @param {string} value - The node access.
   * @return {StorageTextureNode} A reference to this node.
   */
  setAccess(value) {
    this.access = value;
    return this;
  }
  /**
   * Generates the code snippet of the storage node. If no `storeNode`
   * is defined, the texture node is generated as normal texture.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} output - The current output.
   * @return {string} The generated code snippet.
   */
  generate(builder, output3) {
    let snippet;
    if (this.storeNode !== null) {
      snippet = this.generateStore(builder);
    } else {
      snippet = super.generate(builder, output3);
    }
    return snippet;
  }
  /**
   * Convenience method for configuring a read/write node access.
   *
   * @return {StorageTextureNode} A reference to this node.
   */
  toReadWrite() {
    return this.setAccess(NodeAccess.READ_WRITE);
  }
  /**
   * Convenience method for configuring a read-only node access.
   *
   * @return {StorageTextureNode} A reference to this node.
   */
  toReadOnly() {
    return this.setAccess(NodeAccess.READ_ONLY);
  }
  /**
   * Convenience method for configuring a write-only node access.
   *
   * @return {StorageTextureNode} A reference to this node.
   */
  toWriteOnly() {
    return this.setAccess(NodeAccess.WRITE_ONLY);
  }
  /**
   * Generates the code snippet of the storage texture node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  generateStore(builder) {
    const properties = builder.getNodeProperties(this);
    const { uvNode, storeNode, depthNode } = properties;
    const textureProperty = super.generate(builder, "property");
    const uvSnippet = uvNode.build(builder, this.value.is3DTexture === true ? "uvec3" : "uvec2");
    const storeSnippet = storeNode.build(builder, "vec4");
    const depthSnippet = depthNode ? depthNode.build(builder, "int") : null;
    const snippet = builder.generateTextureStore(builder, textureProperty, uvSnippet, depthSnippet, storeSnippet);
    builder.addLineFlowCode(snippet, this);
  }
  clone() {
    const newNode = super.clone();
    newNode.storeNode = this.storeNode;
    return newNode;
  }
};
var storageTexture = nodeProxy(StorageTextureNode).setParameterLength(1, 3);
var textureStore = (value, uvNode, storeNode) => {
  const node = storageTexture(value, uvNode, storeNode);
  if (storeNode !== null)
    node.toStack();
  return node;
};
var normal = Fn(({ texture: texture3, uv: uv3 }) => {
  const epsilon = 1e-4;
  const ret = vec3().toVar();
  If(uv3.x.lessThan(epsilon), () => {
    ret.assign(vec3(1, 0, 0));
  }).ElseIf(uv3.y.lessThan(epsilon), () => {
    ret.assign(vec3(0, 1, 0));
  }).ElseIf(uv3.z.lessThan(epsilon), () => {
    ret.assign(vec3(0, 0, 1));
  }).ElseIf(uv3.x.greaterThan(1 - epsilon), () => {
    ret.assign(vec3(-1, 0, 0));
  }).ElseIf(uv3.y.greaterThan(1 - epsilon), () => {
    ret.assign(vec3(0, -1, 0));
  }).ElseIf(uv3.z.greaterThan(1 - epsilon), () => {
    ret.assign(vec3(0, 0, -1));
  }).Else(() => {
    const step3 = 0.01;
    const x2 = texture3.sample(uv3.add(vec3(-step3, 0, 0))).r.sub(texture3.sample(uv3.add(vec3(step3, 0, 0))).r);
    const y2 = texture3.sample(uv3.add(vec3(0, -step3, 0))).r.sub(texture3.sample(uv3.add(vec3(0, step3, 0))).r);
    const z2 = texture3.sample(uv3.add(vec3(0, 0, -step3))).r.sub(texture3.sample(uv3.add(vec3(0, 0, step3))).r);
    ret.assign(vec3(x2, y2, z2));
  });
  return ret.normalize();
});
var Texture3DNode = class extends TextureNode {
  static get type() {
    return "Texture3DNode";
  }
  /**
   * Constructs a new 3D texture node.
   *
   * @param {Data3DTexture} value - The 3D texture.
   * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.
   * @param {?Node<int>} [levelNode=null] - The level node.
   */
  constructor(value, uvNode = null, levelNode = null) {
    super(value, uvNode, levelNode);
    this.isTexture3DNode = true;
  }
  /**
   * Overwrites the default implementation to return a fixed value `'texture3D'`.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return "texture3D";
  }
  /**
   * Returns a default uv node which is in context of 3D textures a three-dimensional
   * uv node.
   *
   * @return {Node<vec3>} The default uv node.
   */
  getDefaultUV() {
    return vec3(0.5, 0.5, 0.5);
  }
  /**
   * Overwritten with an empty implementation since the `updateMatrix` flag is ignored
   * for 3D textures. The uv transformation matrix is not applied to 3D textures.
   *
   * @param {boolean} value - The update toggle.
   */
  setUpdateMatrix() {
  }
  // Ignore .updateMatrix for 3d TextureNode
  /**
   * Overwrites the default implementation to return the unmodified uv node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} uvNode - The uv node to setup.
   * @return {Node} The unmodified uv node.
   */
  setupUV(builder, uvNode) {
    const texture3 = this.value;
    if (builder.isFlipY() && (texture3.isRenderTargetTexture === true || texture3.isFramebufferTexture === true)) {
      if (this.sampler) {
        uvNode = uvNode.flipY();
      } else {
        uvNode = uvNode.setY(int(textureSize(this, this.levelNode).y).sub(uvNode.y).sub(1));
      }
    }
    return uvNode;
  }
  /**
   * Generates the uv code snippet.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} uvNode - The uv node to generate code for.
   * @return {string} The generated code snippet.
   */
  generateUV(builder, uvNode) {
    return uvNode.build(builder, "vec3");
  }
  /**
   * Generates the offset code snippet.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {Node} offsetNode - The offset node to generate code for.
   * @return {string} The generated code snippet.
   */
  generateOffset(builder, offsetNode) {
    return offsetNode.build(builder, "ivec3");
  }
  /**
   * TODO.
   *
   * @param {Node<vec3>} uvNode - The uv node .
   * @return {Node<vec3>} TODO.
   */
  normal(uvNode) {
    return normal({ texture: this, uv: uvNode });
  }
};
var texture3D = nodeProxy(Texture3DNode).setParameterLength(1, 3);
var UserDataNode = class extends ReferenceNode {
  static get type() {
    return "UserDataNode";
  }
  /**
   * Constructs a new user data node.
   *
   * @param {string} property - The property name that should be referenced by the node.
   * @param {string} inputType - The node data type of the reference.
   * @param {?Object} [userData=null] - A reference to the `userData` object. If not provided, the `userData` property of the 3D object that uses the node material is evaluated.
   */
  constructor(property3, inputType, userData3 = null) {
    super(property3, inputType, userData3);
    this.userData = userData3;
  }
  /**
   * Overwritten to make sure {@link ReferenceNode#reference} points to the correct
   * `userData` field.
   *
   * @param {(NodeFrame|NodeBuilder)} state - The current state to evaluate.
   * @return {Object} A reference to the `userData` field.
   */
  updateReference(state) {
    this.reference = this.userData !== null ? this.userData : state.object.userData;
    return this.reference;
  }
};
var userData = (name, inputType, userData3) => nodeObject(new UserDataNode(name, inputType, userData3));
var _objectData = /* @__PURE__ */ new WeakMap();
var VelocityNode = class extends TempNode {
  static get type() {
    return "VelocityNode";
  }
  /**
   * Constructs a new vertex color node.
   */
  constructor() {
    super("vec2");
    this.projectionMatrix = null;
    this.updateType = NodeUpdateType.OBJECT;
    this.updateAfterType = NodeUpdateType.OBJECT;
    this.previousModelWorldMatrix = uniform(new Matrix4());
    this.previousProjectionMatrix = uniform(new Matrix4()).setGroup(renderGroup);
    this.previousCameraViewMatrix = uniform(new Matrix4());
  }
  /**
   * Sets the given projection matrix.
   *
   * @param {Matrix4} projectionMatrix - The projection matrix to set.
   */
  setProjectionMatrix(projectionMatrix) {
    this.projectionMatrix = projectionMatrix;
  }
  /**
   * Updates velocity specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update({ frameId: frameId3, camera: camera3, object }) {
    const previousModelMatrix = getPreviousMatrix(object);
    this.previousModelWorldMatrix.value.copy(previousModelMatrix);
    const cameraData = getData(camera3);
    if (cameraData.frameId !== frameId3) {
      cameraData.frameId = frameId3;
      if (cameraData.previousProjectionMatrix === void 0) {
        cameraData.previousProjectionMatrix = new Matrix4();
        cameraData.previousCameraViewMatrix = new Matrix4();
        cameraData.currentProjectionMatrix = new Matrix4();
        cameraData.currentCameraViewMatrix = new Matrix4();
        cameraData.previousProjectionMatrix.copy(this.projectionMatrix || camera3.projectionMatrix);
        cameraData.previousCameraViewMatrix.copy(camera3.matrixWorldInverse);
      } else {
        cameraData.previousProjectionMatrix.copy(cameraData.currentProjectionMatrix);
        cameraData.previousCameraViewMatrix.copy(cameraData.currentCameraViewMatrix);
      }
      cameraData.currentProjectionMatrix.copy(this.projectionMatrix || camera3.projectionMatrix);
      cameraData.currentCameraViewMatrix.copy(camera3.matrixWorldInverse);
      this.previousProjectionMatrix.value.copy(cameraData.previousProjectionMatrix);
      this.previousCameraViewMatrix.value.copy(cameraData.previousCameraViewMatrix);
    }
  }
  /**
   * Overwritten to updated velocity specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  updateAfter({ object }) {
    getPreviousMatrix(object).copy(object.matrixWorld);
  }
  /**
   * Implements the velocity computation based on the previous and current vertex data.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @return {Node<vec2>} The motion vector.
   */
  setup() {
    const projectionMatrix = this.projectionMatrix === null ? cameraProjectionMatrix : uniform(this.projectionMatrix);
    const previousModelViewMatrix = this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix);
    const clipPositionCurrent = projectionMatrix.mul(modelViewMatrix).mul(positionLocal);
    const clipPositionPrevious = this.previousProjectionMatrix.mul(previousModelViewMatrix).mul(positionPrevious);
    const ndcPositionCurrent = clipPositionCurrent.xy.div(clipPositionCurrent.w);
    const ndcPositionPrevious = clipPositionPrevious.xy.div(clipPositionPrevious.w);
    const velocity3 = sub(ndcPositionCurrent, ndcPositionPrevious);
    return velocity3;
  }
};
function getData(object) {
  let objectData = _objectData.get(object);
  if (objectData === void 0) {
    objectData = {};
    _objectData.set(object, objectData);
  }
  return objectData;
}
function getPreviousMatrix(object, index6 = 0) {
  const objectData = getData(object);
  let matrix = objectData[index6];
  if (matrix === void 0) {
    objectData[index6] = matrix = new Matrix4();
    objectData[index6].copy(object.matrixWorld);
  }
  return matrix;
}
var velocity = nodeImmutable(VelocityNode);
var grayscale = Fn(([color4]) => {
  return luminance(color4.rgb);
});
var saturation = Fn(([color4, adjustment = float(1)]) => {
  return adjustment.mix(luminance(color4.rgb), color4.rgb);
});
var vibrance = Fn(([color4, adjustment = float(1)]) => {
  const average = add3(color4.r, color4.g, color4.b).div(3);
  const mx = color4.r.max(color4.g.max(color4.b));
  const amt = mx.sub(average).mul(adjustment).mul(-3);
  return mix(color4.rgb, mx, amt);
});
var hue = Fn(([color4, adjustment = float(1)]) => {
  const k2 = vec3(0.57735, 0.57735, 0.57735);
  const cosAngle = adjustment.cos();
  return vec3(color4.rgb.mul(cosAngle).add(k2.cross(color4.rgb).mul(adjustment.sin()).add(k2.mul(dot(k2, color4.rgb).mul(cosAngle.oneMinus())))));
});
var luminance = (color4, luminanceCoefficients = vec3(ColorManagement.getLuminanceCoefficients(new Vector3()))) => dot(color4, luminanceCoefficients);
var cdl = Fn(([
  color4,
  slope = vec3(1),
  offset = vec3(0),
  power = vec3(1),
  saturation3 = float(1),
  // ASC CDL v1.2 explicitly requires Rec. 709 luminance coefficients.
  luminanceCoefficients = vec3(ColorManagement.getLuminanceCoefficients(new Vector3(), LinearSRGBColorSpace))
]) => {
  const luma = color4.rgb.dot(vec3(luminanceCoefficients));
  const v2 = max$1(color4.rgb.mul(slope).add(offset), 0).toVar();
  const pv = v2.pow(power).toVar();
  If(v2.r.greaterThan(0), () => {
    v2.r.assign(pv.r);
  });
  If(v2.g.greaterThan(0), () => {
    v2.g.assign(pv.g);
  });
  If(v2.b.greaterThan(0), () => {
    v2.b.assign(pv.b);
  });
  v2.assign(luma.add(v2.sub(luma).mul(saturation3)));
  return vec4(v2.rgb, color4.a);
});
var PosterizeNode = class extends TempNode {
  static get type() {
    return "PosterizeNode";
  }
  /**
   * Constructs a new posterize node.
   *
   * @param {Node} sourceNode - The input color.
   * @param {Node} stepsNode - Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.
   */
  constructor(sourceNode, stepsNode) {
    super();
    this.sourceNode = sourceNode;
    this.stepsNode = stepsNode;
  }
  setup() {
    const { sourceNode, stepsNode } = this;
    return sourceNode.mul(stepsNode).floor().div(stepsNode);
  }
};
var posterize = nodeProxy(PosterizeNode).setParameterLength(2);
var _size = new Vector2();
var PassTextureNode = class extends TextureNode {
  static get type() {
    return "PassTextureNode";
  }
  /**
   * Constructs a new pass texture node.
   *
   * @param {PassNode} passNode - The pass node.
   * @param {Texture} texture - The output texture.
   */
  constructor(passNode, texture3) {
    super(texture3);
    this.passNode = passNode;
    this.setUpdateMatrix(false);
  }
  setup(builder) {
    this.passNode.build(builder);
    return super.setup(builder);
  }
  clone() {
    return new this.constructor(this.passNode, this.value);
  }
};
var PassMultipleTextureNode = class extends PassTextureNode {
  static get type() {
    return "PassMultipleTextureNode";
  }
  /**
   * Constructs a new pass texture node.
   *
   * @param {PassNode} passNode - The pass node.
   * @param {string} textureName - The output texture name.
   * @param {boolean} [previousTexture=false] - Whether previous frame data should be used or not.
   */
  constructor(passNode, textureName, previousTexture = false) {
    super(passNode, null);
    this.textureName = textureName;
    this.previousTexture = previousTexture;
  }
  /**
   * Updates the texture reference of this node.
   */
  updateTexture() {
    this.value = this.previousTexture ? this.passNode.getPreviousTexture(this.textureName) : this.passNode.getTexture(this.textureName);
  }
  setup(builder) {
    this.updateTexture();
    return super.setup(builder);
  }
  clone() {
    const newNode = new this.constructor(this.passNode, this.textureName, this.previousTexture);
    newNode.uvNode = this.uvNode;
    newNode.levelNode = this.levelNode;
    newNode.biasNode = this.biasNode;
    newNode.sampler = this.sampler;
    newNode.depthNode = this.depthNode;
    newNode.compareNode = this.compareNode;
    newNode.gradNode = this.gradNode;
    return newNode;
  }
};
var PassNode = class _PassNode extends TempNode {
  static get type() {
    return "PassNode";
  }
  /**
   * Constructs a new pass node.
   *
   * @param {('color'|'depth')} scope - The scope of the pass. The scope determines whether the node outputs color or depth.
   * @param {Scene} scene - A reference to the scene.
   * @param {Camera} camera - A reference to the camera.
   * @param {Object} options - Options for the internal render target.
   */
  constructor(scope, scene3, camera3, options = {}) {
    super("vec4");
    this.scope = scope;
    this.scene = scene3;
    this.camera = camera3;
    this.options = options;
    this._pixelRatio = 1;
    this._width = 1;
    this._height = 1;
    const depthTexture = new DepthTexture();
    depthTexture.isRenderTargetTexture = true;
    depthTexture.name = "depth";
    const renderTarget = new RenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options });
    renderTarget.texture.name = "output";
    renderTarget.depthTexture = depthTexture;
    this.renderTarget = renderTarget;
    this._textures = {
      output: renderTarget.texture,
      depth: depthTexture
    };
    this._textureNodes = {};
    this._linearDepthNodes = {};
    this._viewZNodes = {};
    this._previousTextures = {};
    this._previousTextureNodes = {};
    this._cameraNear = uniform(0);
    this._cameraFar = uniform(0);
    this._mrt = null;
    this._layers = null;
    this._resolution = 1;
    this._viewport = null;
    this._scissor = null;
    this.isPassNode = true;
    this.updateBeforeType = NodeUpdateType.FRAME;
    this.global = true;
  }
  /**
   * Sets the resolution for the pass.
   * The resolution is a factor that is multiplied with the renderer's width and height.
   *
   * @param {number} resolution - The resolution to set. A value of `1` means full resolution.
   * @return {PassNode} A reference to this pass.
   */
  setResolution(resolution2) {
    this._resolution = resolution2;
    return this;
  }
  /**
   * Gets the current resolution of the pass.
   *
   * @return {number} The current resolution. A value of `1` means full resolution.
   */
  getResolution() {
    return this._resolution;
  }
  /**
   * Sets the layer configuration that should be used when rendering the pass.
   *
   * @param {Layers} layers - The layers object to set.
   * @return {PassNode} A reference to this pass.
   */
  setLayers(layers2) {
    this._layers = layers2;
    return this;
  }
  /**
   * Gets the current layer configuration of the pass.
   *
   * @return {?Layers} .
   */
  getLayers() {
    return this._layers;
  }
  /**
   * Sets the given MRT node to setup MRT for this pass.
   *
   * @param {MRTNode} mrt - The MRT object.
   * @return {PassNode} A reference to this pass.
   */
  setMRT(mrt3) {
    this._mrt = mrt3;
    return this;
  }
  /**
   * Returns the current MRT node.
   *
   * @return {MRTNode} The current MRT node.
   */
  getMRT() {
    return this._mrt;
  }
  /**
   * Returns the texture for the given output name.
   *
   * @param {string} name - The output name to get the texture for.
   * @return {Texture} The texture.
   */
  getTexture(name) {
    let texture3 = this._textures[name];
    if (texture3 === void 0) {
      const refTexture = this.renderTarget.texture;
      texture3 = refTexture.clone();
      texture3.name = name;
      this._textures[name] = texture3;
      this.renderTarget.textures.push(texture3);
    }
    return texture3;
  }
  /**
   * Returns the texture holding the data of the previous frame for the given output name.
   *
   * @param {string} name - The output name to get the texture for.
   * @return {Texture} The texture holding the data of the previous frame.
   */
  getPreviousTexture(name) {
    let texture3 = this._previousTextures[name];
    if (texture3 === void 0) {
      texture3 = this.getTexture(name).clone();
      this._previousTextures[name] = texture3;
    }
    return texture3;
  }
  /**
   * Switches current and previous textures for the given output name.
   *
   * @param {string} name - The output name.
   */
  toggleTexture(name) {
    const prevTexture = this._previousTextures[name];
    if (prevTexture !== void 0) {
      const texture3 = this._textures[name];
      const index6 = this.renderTarget.textures.indexOf(texture3);
      this.renderTarget.textures[index6] = prevTexture;
      this._textures[name] = prevTexture;
      this._previousTextures[name] = texture3;
      this._textureNodes[name].updateTexture();
      this._previousTextureNodes[name].updateTexture();
    }
  }
  /**
   * Returns the texture node for the given output name.
   *
   * @param {string} [name='output'] - The output name to get the texture node for.
   * @return {TextureNode} The texture node.
   */
  getTextureNode(name = "output") {
    let textureNode = this._textureNodes[name];
    if (textureNode === void 0) {
      textureNode = nodeObject(new PassMultipleTextureNode(this, name));
      textureNode.updateTexture();
      this._textureNodes[name] = textureNode;
    }
    return textureNode;
  }
  /**
   * Returns the previous texture node for the given output name.
   *
   * @param {string} [name='output'] - The output name to get the previous texture node for.
   * @return {TextureNode} The previous texture node.
   */
  getPreviousTextureNode(name = "output") {
    let textureNode = this._previousTextureNodes[name];
    if (textureNode === void 0) {
      if (this._textureNodes[name] === void 0)
        this.getTextureNode(name);
      textureNode = nodeObject(new PassMultipleTextureNode(this, name, true));
      textureNode.updateTexture();
      this._previousTextureNodes[name] = textureNode;
    }
    return textureNode;
  }
  /**
   * Returns a viewZ node of this pass.
   *
   * @param {string} [name='depth'] - The output name to get the viewZ node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.
   * @return {Node} The viewZ node.
   */
  getViewZNode(name = "depth") {
    let viewZNode = this._viewZNodes[name];
    if (viewZNode === void 0) {
      const cameraNear3 = this._cameraNear;
      const cameraFar3 = this._cameraFar;
      this._viewZNodes[name] = viewZNode = perspectiveDepthToViewZ(this.getTextureNode(name), cameraNear3, cameraFar3);
    }
    return viewZNode;
  }
  /**
   * Returns a linear depth node of this pass.
   *
   * @param {string} [name='depth'] - The output name to get the linear depth node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.
   * @return {Node} The linear depth node.
   */
  getLinearDepthNode(name = "depth") {
    let linearDepthNode = this._linearDepthNodes[name];
    if (linearDepthNode === void 0) {
      const cameraNear3 = this._cameraNear;
      const cameraFar3 = this._cameraFar;
      const viewZNode = this.getViewZNode(name);
      this._linearDepthNodes[name] = linearDepthNode = viewZToOrthographicDepth(viewZNode, cameraNear3, cameraFar3);
    }
    return linearDepthNode;
  }
  /**
   * Precompiles the pass.
   *
   * Note that this method must be called after the pass configuration is complete.
   * So calls like `setMRT()` and `getTextureNode()` must proceed the precompilation.
   *
   * @async
   * @param {Renderer} renderer - The renderer.
   * @return {Promise} A Promise that resolves when the compile has been finished.
   * @see {@link Renderer#compileAsync}
   */
  async compileAsync(renderer3) {
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    renderer3.setRenderTarget(this.renderTarget);
    renderer3.setMRT(this._mrt);
    await renderer3.compileAsync(this.scene, this.camera);
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setMRT(currentMRT);
  }
  setup({ renderer: renderer3 }) {
    this.renderTarget.samples = this.options.samples === void 0 ? renderer3.samples : this.options.samples;
    this.renderTarget.texture.type = renderer3.getColorBufferType();
    return this.scope === _PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const { scene: scene3 } = this;
    let camera3;
    let pixelRatio;
    const outputRenderTarget = renderer3.getOutputRenderTarget();
    if (outputRenderTarget && outputRenderTarget.isXRRenderTarget === true) {
      pixelRatio = 1;
      camera3 = renderer3.xr.getCamera();
      renderer3.xr.updateCamera(camera3);
      _size.set(outputRenderTarget.width, outputRenderTarget.height);
    } else {
      camera3 = this.camera;
      pixelRatio = renderer3.getPixelRatio();
      renderer3.getSize(_size);
    }
    this._pixelRatio = pixelRatio;
    this.setSize(_size.width, _size.height);
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    const currentMask = camera3.layers.mask;
    this._cameraNear.value = camera3.near;
    this._cameraFar.value = camera3.far;
    if (this._layers !== null) {
      camera3.layers.mask = this._layers.mask;
    }
    for (const name in this._previousTextures) {
      this.toggleTexture(name);
    }
    renderer3.setRenderTarget(this.renderTarget);
    renderer3.setMRT(this._mrt);
    renderer3.render(scene3, camera3);
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setMRT(currentMRT);
    camera3.layers.mask = currentMask;
  }
  /**
   * Sets the size of the pass's render target. Honors the pixel ratio.
   *
   * @param {number} width - The width to set.
   * @param {number} height - The height to set.
   */
  setSize(width, height) {
    this._width = width;
    this._height = height;
    const effectiveWidth = this._width * this._pixelRatio * this._resolution;
    const effectiveHeight = this._height * this._pixelRatio * this._resolution;
    this.renderTarget.setSize(effectiveWidth, effectiveHeight);
    if (this._scissor !== null)
      this.renderTarget.scissor.copy(this._scissor);
    if (this._viewport !== null)
      this.renderTarget.viewport.copy(this._viewport);
  }
  /**
   * This method allows to define the pass's scissor rectangle. By default, the scissor rectangle is kept
   * in sync with the pass's dimensions. To reverse the process and use auto-sizing again, call the method
   * with `null` as the single argument.
   *
   * @param {?(number | Vector4)} x - The horizontal coordinate for the lower left corner of the box in logical pixel unit.
   * Instead of passing four arguments, the method also works with a single four-dimensional vector.
   * @param {number} y - The vertical coordinate for the lower left corner of the box in logical pixel unit.
   * @param {number} width - The width of the scissor box in logical pixel unit.
   * @param {number} height - The height of the scissor box in logical pixel unit.
   */
  setScissor(x2, y2, width, height) {
    if (x2 === null) {
      this._scissor = null;
    } else {
      if (this._scissor === null)
        this._scissor = new Vector4();
      if (x2.isVector4) {
        this._scissor.copy(x2);
      } else {
        this._scissor.set(x2, y2, width, height);
      }
      this._scissor.multiplyScalar(this._pixelRatio * this._resolution).floor();
    }
  }
  /**
   * This method allows to define the pass's viewport. By default, the viewport is kept in sync
   * with the pass's dimensions. To reverse the process and use auto-sizing again, call the method
   * with `null` as the single argument.
   *
   * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.
   * @param {number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.
   * @param {number} width - The width of the viewport in logical pixel unit.
   * @param {number} height - The height of the viewport in logical pixel unit.
   */
  setViewport(x2, y2, width, height) {
    if (x2 === null) {
      this._viewport = null;
    } else {
      if (this._viewport === null)
        this._viewport = new Vector4();
      if (x2.isVector4) {
        this._viewport.copy(x2);
      } else {
        this._viewport.set(x2, y2, width, height);
      }
      this._viewport.multiplyScalar(this._pixelRatio * this._resolution).floor();
    }
  }
  /**
   * Sets the pixel ratio the pass's render target and updates the size.
   *
   * @param {number} pixelRatio - The pixel ratio to set.
   */
  setPixelRatio(pixelRatio) {
    this._pixelRatio = pixelRatio;
    this.setSize(this._width, this._height);
  }
  /**
   * Frees internal resources. Should be called when the node is no longer in use.
   */
  dispose() {
    this.renderTarget.dispose();
  }
};
PassNode.COLOR = "color";
PassNode.DEPTH = "depth";
var pass = (scene3, camera3, options) => nodeObject(new PassNode(PassNode.COLOR, scene3, camera3, options));
var passTexture = (pass3, texture3) => nodeObject(new PassTextureNode(pass3, texture3));
var depthPass = (scene3, camera3, options) => nodeObject(new PassNode(PassNode.DEPTH, scene3, camera3, options));
var ToonOutlinePassNode = class extends PassNode {
  static get type() {
    return "ToonOutlinePassNode";
  }
  /**
   * Constructs a new outline pass node.
   *
   * @param {Scene} scene - A reference to the scene.
   * @param {Camera} camera - A reference to the camera.
   * @param {Node} colorNode - Defines the outline's color.
   * @param {Node} thicknessNode - Defines the outline's thickness.
   * @param {Node} alphaNode - Defines the outline's alpha.
   */
  constructor(scene3, camera3, colorNode, thicknessNode, alphaNode) {
    super(PassNode.COLOR, scene3, camera3);
    this.colorNode = colorNode;
    this.thicknessNode = thicknessNode;
    this.alphaNode = alphaNode;
    this._materialCache = /* @__PURE__ */ new WeakMap();
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const currentRenderObjectFunction = renderer3.getRenderObjectFunction();
    renderer3.setRenderObjectFunction((object, scene3, camera3, geometry, material, group, lightsNode, clippingContext) => {
      if (material.isMeshToonMaterial || material.isMeshToonNodeMaterial) {
        if (material.wireframe === false) {
          const outlineMaterial = this._getOutlineMaterial(material);
          renderer3.renderObject(object, scene3, camera3, geometry, outlineMaterial, group, lightsNode, clippingContext);
        }
      }
      renderer3.renderObject(object, scene3, camera3, geometry, material, group, lightsNode, clippingContext);
    });
    super.updateBefore(frame);
    renderer3.setRenderObjectFunction(currentRenderObjectFunction);
  }
  /**
   * Creates the material used for outline rendering.
   *
   * @private
   * @return {NodeMaterial} The outline material.
   */
  _createMaterial() {
    const material = new NodeMaterial();
    material.isMeshToonOutlineMaterial = true;
    material.name = "Toon_Outline";
    material.side = BackSide;
    const outlineNormal = normalLocal.negate();
    const mvp = cameraProjectionMatrix.mul(modelViewMatrix);
    const ratio = float(1);
    const pos = mvp.mul(vec4(positionLocal, 1));
    const pos2 = mvp.mul(vec4(positionLocal.add(outlineNormal), 1));
    const norm = normalize(pos.sub(pos2));
    material.vertexNode = pos.add(norm.mul(this.thicknessNode).mul(pos.w).mul(ratio));
    material.colorNode = vec4(this.colorNode, this.alphaNode);
    return material;
  }
  /**
   * For the given toon material, this method returns a corresponding
   * outline material.
   *
   * @private
   * @param {(MeshToonMaterial|MeshToonNodeMaterial)} originalMaterial - The toon material.
   * @return {NodeMaterial} The outline material.
   */
  _getOutlineMaterial(originalMaterial) {
    let outlineMaterial = this._materialCache.get(originalMaterial);
    if (outlineMaterial === void 0) {
      outlineMaterial = this._createMaterial();
      this._materialCache.set(originalMaterial, outlineMaterial);
    }
    return outlineMaterial;
  }
};
var toonOutlinePass = (scene3, camera3, color4 = new Color(0, 0, 0), thickness3 = 3e-3, alpha = 1) => nodeObject(new ToonOutlinePassNode(scene3, camera3, nodeObject(color4), nodeObject(thickness3), nodeObject(alpha)));
var linearToneMapping = Fn(([color4, exposure]) => {
  return color4.mul(exposure).clamp();
}).setLayout({
  name: "linearToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var reinhardToneMapping = Fn(([color4, exposure]) => {
  color4 = color4.mul(exposure);
  return color4.div(color4.add(1)).clamp();
}).setLayout({
  name: "reinhardToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var cineonToneMapping = Fn(([color4, exposure]) => {
  color4 = color4.mul(exposure);
  color4 = color4.sub(4e-3).max(0);
  const a2 = color4.mul(color4.mul(6.2).add(0.5));
  const b = color4.mul(color4.mul(6.2).add(1.7)).add(0.06);
  return a2.div(b).pow(2.2);
}).setLayout({
  name: "cineonToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var RRTAndODTFit = Fn(([color4]) => {
  const a2 = color4.mul(color4.add(0.0245786)).sub(90537e-9);
  const b = color4.mul(color4.add(0.432951).mul(0.983729)).add(0.238081);
  return a2.div(b);
});
var acesFilmicToneMapping = Fn(([color4, exposure]) => {
  const ACESInputMat = mat3(
    0.59719,
    0.35458,
    0.04823,
    0.076,
    0.90834,
    0.01566,
    0.0284,
    0.13383,
    0.83777
  );
  const ACESOutputMat = mat3(
    1.60475,
    -0.53108,
    -0.07367,
    -0.10208,
    1.10813,
    -605e-5,
    -327e-5,
    -0.07276,
    1.07602
  );
  color4 = color4.mul(exposure).div(0.6);
  color4 = ACESInputMat.mul(color4);
  color4 = RRTAndODTFit(color4);
  color4 = ACESOutputMat.mul(color4);
  return color4.clamp();
}).setLayout({
  name: "acesFilmicToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var LINEAR_REC2020_TO_LINEAR_SRGB = mat3(vec3(1.6605, -0.1246, -0.0182), vec3(-0.5876, 1.1329, -0.1006), vec3(-0.0728, -83e-4, 1.1187));
var LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(vec3(0.6274, 0.0691, 0.0164), vec3(0.3293, 0.9195, 0.088), vec3(0.0433, 0.0113, 0.8956));
var agxDefaultContrastApprox = Fn(([x_immutable]) => {
  const x2 = vec3(x_immutable).toVar();
  const x22 = vec3(x2.mul(x2)).toVar();
  const x4 = vec3(x22.mul(x22)).toVar();
  return float(15.5).mul(x4.mul(x22)).sub(mul(40.14, x4.mul(x2))).add(mul(31.96, x4).sub(mul(6.868, x22.mul(x2))).add(mul(0.4298, x22).add(mul(0.1191, x2).sub(232e-5))));
});
var agxToneMapping = Fn(([color4, exposure]) => {
  const colortone = vec3(color4).toVar();
  const AgXInsetMatrix = mat3(vec3(0.856627153315983, 0.137318972929847, 0.11189821299995), vec3(0.0951212405381588, 0.761241990602591, 0.0767994186031903), vec3(0.0482516061458583, 0.101439036467562, 0.811302368396859));
  const AgXOutsetMatrix = mat3(vec3(1.1271005818144368, -0.1413297634984383, -0.14132976349843826), vec3(-0.11060664309660323, 1.157823702216272, -0.11060664309660294), vec3(-0.016493938717834573, -0.016493938717834257, 1.2519364065950405));
  const AgxMinEv = float(-12.47393);
  const AgxMaxEv = float(4.026069);
  colortone.mulAssign(exposure);
  colortone.assign(LINEAR_SRGB_TO_LINEAR_REC2020.mul(colortone));
  colortone.assign(AgXInsetMatrix.mul(colortone));
  colortone.assign(max$1(colortone, 1e-10));
  colortone.assign(log2(colortone));
  colortone.assign(colortone.sub(AgxMinEv).div(AgxMaxEv.sub(AgxMinEv)));
  colortone.assign(clamp(colortone, 0, 1));
  colortone.assign(agxDefaultContrastApprox(colortone));
  colortone.assign(AgXOutsetMatrix.mul(colortone));
  colortone.assign(pow(max$1(vec3(0), colortone), vec3(2.2)));
  colortone.assign(LINEAR_REC2020_TO_LINEAR_SRGB.mul(colortone));
  colortone.assign(clamp(colortone, 0, 1));
  return colortone;
}).setLayout({
  name: "agxToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var neutralToneMapping = Fn(([color4, exposure]) => {
  const StartCompression = float(0.8 - 0.04);
  const Desaturation = float(0.15);
  color4 = color4.mul(exposure);
  const x2 = min$1(color4.r, min$1(color4.g, color4.b));
  const offset = select(x2.lessThan(0.08), x2.sub(mul(6.25, x2.mul(x2))), 0.04);
  color4.subAssign(offset);
  const peak = max$1(color4.r, max$1(color4.g, color4.b));
  If(peak.lessThan(StartCompression), () => {
    return color4;
  });
  const d2 = sub(1, StartCompression);
  const newPeak = sub(1, d2.mul(d2).div(peak.add(d2.sub(StartCompression))));
  color4.mulAssign(newPeak.div(peak));
  const g2 = sub(1, div(1, Desaturation.mul(peak.sub(newPeak)).add(1)));
  return mix(color4, vec3(newPeak), g2);
}).setLayout({
  name: "neutralToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var CodeNode = class extends Node {
  static get type() {
    return "CodeNode";
  }
  /**
   * Constructs a new code node.
   *
   * @param {string} [code=''] - The native code.
   * @param {Array<Node>} [includes=[]] - An array of includes.
   * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.
   */
  constructor(code3 = "", includes = [], language = "") {
    super("code");
    this.isCodeNode = true;
    this.global = true;
    this.code = code3;
    this.includes = includes;
    this.language = language;
  }
  /**
   * Sets the includes of this code node.
   *
   * @param {Array<Node>} includes - The includes to set.
   * @return {CodeNode} A reference to this node.
   */
  setIncludes(includes) {
    this.includes = includes;
    return this;
  }
  /**
   * Returns the includes of this code node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Array<Node>} The includes.
   */
  getIncludes() {
    return this.includes;
  }
  generate(builder) {
    const includes = this.getIncludes(builder);
    for (const include of includes) {
      include.build(builder);
    }
    const nodeCode = builder.getCodeFromNode(this, this.getNodeType(builder));
    nodeCode.code = this.code;
    return nodeCode.code;
  }
  serialize(data) {
    super.serialize(data);
    data.code = this.code;
    data.language = this.language;
  }
  deserialize(data) {
    super.deserialize(data);
    this.code = data.code;
    this.language = data.language;
  }
};
var code = nodeProxy(CodeNode).setParameterLength(1, 3);
var js = (src, includes) => code(src, includes, "js");
var wgsl = (src, includes) => code(src, includes, "wgsl");
var glsl = (src, includes) => code(src, includes, "glsl");
var FunctionNode = class extends CodeNode {
  static get type() {
    return "FunctionNode";
  }
  /**
   * Constructs a new function node.
   *
   * @param {string} [code=''] - The native code.
   * @param {Array<Node>} [includes=[]] - An array of includes.
   * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.
   */
  constructor(code3 = "", includes = [], language = "") {
    super(code3, includes, language);
  }
  /**
   * Returns the type of this function node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The type.
   */
  getNodeType(builder) {
    return this.getNodeFunction(builder).type;
  }
  /**
   * Returns the type of a member of this function node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @param {string} name - The name of the member.
   * @return {string} The type of the member.
   */
  getMemberType(builder, name) {
    const type = this.getNodeType(builder);
    const structType = builder.getStructTypeNode(type);
    return structType.getMemberType(builder, name);
  }
  /**
   * Returns the inputs of this function node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {Array<NodeFunctionInput>} The inputs.
   */
  getInputs(builder) {
    return this.getNodeFunction(builder).inputs;
  }
  /**
   * Returns the node function for this function node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {NodeFunction} The node function.
   */
  getNodeFunction(builder) {
    const nodeData = builder.getDataFromNode(this);
    let nodeFunction = nodeData.nodeFunction;
    if (nodeFunction === void 0) {
      nodeFunction = builder.parser.parseFunction(this.code);
      nodeData.nodeFunction = nodeFunction;
    }
    return nodeFunction;
  }
  generate(builder, output3) {
    super.generate(builder);
    const nodeFunction = this.getNodeFunction(builder);
    const name = nodeFunction.name;
    const type = nodeFunction.type;
    const nodeCode = builder.getCodeFromNode(this, type);
    if (name !== "") {
      nodeCode.name = name;
    }
    const propertyName = builder.getPropertyName(nodeCode);
    const code3 = this.getNodeFunction(builder).getCode(propertyName);
    nodeCode.code = code3 + "\n";
    if (output3 === "property") {
      return propertyName;
    } else {
      return builder.format(`${propertyName}()`, type, output3);
    }
  }
};
var nativeFn = (code3, includes = [], language = "") => {
  for (let i2 = 0; i2 < includes.length; i2++) {
    const include = includes[i2];
    if (typeof include === "function") {
      includes[i2] = include.functionNode;
    }
  }
  const functionNode = nodeObject(new FunctionNode(code3, includes, language));
  const fn = (...params) => functionNode.call(...params);
  fn.functionNode = functionNode;
  return fn;
};
var glslFn = (code3, includes) => nativeFn(code3, includes, "glsl");
var wgslFn = (code3, includes) => nativeFn(code3, includes, "wgsl");
var ScriptableValueNode = class extends Node {
  static get type() {
    return "ScriptableValueNode";
  }
  /**
   * Constructs a new scriptable node.
   *
   * @param {any} [value=null] - The value.
   */
  constructor(value = null) {
    super();
    this._value = value;
    this._cache = null;
    this.inputType = null;
    this.outputType = null;
    this.events = new EventDispatcher();
    this.isScriptableValueNode = true;
  }
  /**
   * Whether this node represents an output or not.
   *
   * @type {boolean}
   * @readonly
   * @default true
   */
  get isScriptableOutputNode() {
    return this.outputType !== null;
  }
  set value(val) {
    if (this._value === val)
      return;
    if (this._cache && this.inputType === "URL" && this.value.value instanceof ArrayBuffer) {
      URL.revokeObjectURL(this._cache);
      this._cache = null;
    }
    this._value = val;
    this.events.dispatchEvent({ type: "change" });
    this.refresh();
  }
  /**
   * The node's value.
   *
   * @type {any}
   */
  get value() {
    return this._value;
  }
  /**
   * Dispatches the `refresh` event.
   */
  refresh() {
    this.events.dispatchEvent({ type: "refresh" });
  }
  /**
   * The `value` property usually represents a node or even binary data in form of array buffers.
   * In this case, this method tries to return the actual value behind the complex type.
   *
   * @return {any} The value.
   */
  getValue() {
    const value = this.value;
    if (value && this._cache === null && this.inputType === "URL" && value.value instanceof ArrayBuffer) {
      this._cache = URL.createObjectURL(new Blob([value.value]));
    } else if (value && value.value !== null && value.value !== void 0 && ((this.inputType === "URL" || this.inputType === "String") && typeof value.value === "string" || this.inputType === "Number" && typeof value.value === "number" || this.inputType === "Vector2" && value.value.isVector2 || this.inputType === "Vector3" && value.value.isVector3 || this.inputType === "Vector4" && value.value.isVector4 || this.inputType === "Color" && value.value.isColor || this.inputType === "Matrix3" && value.value.isMatrix3 || this.inputType === "Matrix4" && value.value.isMatrix4)) {
      return value.value;
    }
    return this._cache || value;
  }
  /**
   * Overwritten since the node type is inferred from the value.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return this.value && this.value.isNode ? this.value.getNodeType(builder) : "float";
  }
  setup() {
    return this.value && this.value.isNode ? this.value : float();
  }
  serialize(data) {
    super.serialize(data);
    if (this.value !== null) {
      if (this.inputType === "ArrayBuffer") {
        data.value = arrayBufferToBase64(this.value);
      } else {
        data.value = this.value ? this.value.toJSON(data.meta).uuid : null;
      }
    } else {
      data.value = null;
    }
    data.inputType = this.inputType;
    data.outputType = this.outputType;
  }
  deserialize(data) {
    super.deserialize(data);
    let value = null;
    if (data.value !== null) {
      if (data.inputType === "ArrayBuffer") {
        value = base64ToArrayBuffer(data.value);
      } else if (data.inputType === "Texture") {
        value = data.meta.textures[data.value];
      } else {
        value = data.meta.nodes[data.value] || null;
      }
    }
    this.value = value;
    this.inputType = data.inputType;
    this.outputType = data.outputType;
  }
};
var scriptableValue = nodeProxy(ScriptableValueNode).setParameterLength(1);
var Resources = class extends Map {
  get(key, callback = null, ...params) {
    if (this.has(key))
      return super.get(key);
    if (callback !== null) {
      const value = callback(...params);
      this.set(key, value);
      return value;
    }
  }
};
var Parameters = class {
  constructor(scriptableNode) {
    this.scriptableNode = scriptableNode;
  }
  get parameters() {
    return this.scriptableNode.parameters;
  }
  get layout() {
    return this.scriptableNode.getLayout();
  }
  getInputLayout(id) {
    return this.scriptableNode.getInputLayout(id);
  }
  get(name) {
    const param = this.parameters[name];
    const value = param ? param.getValue() : null;
    return value;
  }
};
var ScriptableNodeResources = new Resources();
var ScriptableNode = class extends Node {
  static get type() {
    return "ScriptableNode";
  }
  /**
   * Constructs a new scriptable node.
   *
   * @param {?CodeNode} [codeNode=null] - The code node.
   * @param {Object} [parameters={}] - The parameters definition.
   */
  constructor(codeNode = null, parameters = {}) {
    super();
    this.codeNode = codeNode;
    this.parameters = parameters;
    this._local = new Resources();
    this._output = scriptableValue(null);
    this._outputs = {};
    this._source = this.source;
    this._method = null;
    this._object = null;
    this._value = null;
    this._needsOutputUpdate = true;
    this.onRefresh = this.onRefresh.bind(this);
    this.isScriptableNode = true;
  }
  /**
   * The source code of the scriptable node.
   *
   * @type {string}
   */
  get source() {
    return this.codeNode ? this.codeNode.code : "";
  }
  /**
   * Sets the reference of a local script variable.
   *
   * @param {string} name - The variable name.
   * @param {Object} value - The reference to set.
   * @return {Resources} The resource map
   */
  setLocal(name, value) {
    return this._local.set(name, value);
  }
  /**
   * Gets the value of a local script variable.
   *
   * @param {string} name - The variable name.
   * @return {Object} The value.
   */
  getLocal(name) {
    return this._local.get(name);
  }
  /**
   * Event listener for the `refresh` event.
   */
  onRefresh() {
    this._refresh();
  }
  /**
   * Returns an input from the layout with the given id/name.
   *
   * @param {string} id - The id/name of the input.
   * @return {Object} The element entry.
   */
  getInputLayout(id) {
    for (const element3 of this.getLayout()) {
      if (element3.inputType && (element3.id === id || element3.name === id)) {
        return element3;
      }
    }
  }
  /**
   * Returns an output from the layout with the given id/name.
   *
   * @param {string} id - The id/name of the output.
   * @return {Object} The element entry.
   */
  getOutputLayout(id) {
    for (const element3 of this.getLayout()) {
      if (element3.outputType && (element3.id === id || element3.name === id)) {
        return element3;
      }
    }
  }
  /**
   * Defines a script output for the given name and value.
   *
   * @param {string} name - The name of the output.
   * @param {Node} value - The node value.
   * @return {ScriptableNode} A reference to this node.
   */
  setOutput(name, value) {
    const outputs = this._outputs;
    if (outputs[name] === void 0) {
      outputs[name] = scriptableValue(value);
    } else {
      outputs[name].value = value;
    }
    return this;
  }
  /**
   * Returns a script output for the given name.
   *
   * @param {string} name - The name of the output.
   * @return {ScriptableValueNode} The node value.
   */
  getOutput(name) {
    return this._outputs[name];
  }
  /**
   * Returns a parameter for the given name
   *
   * @param {string} name - The name of the parameter.
   * @return {ScriptableValueNode} The node value.
   */
  getParameter(name) {
    return this.parameters[name];
  }
  /**
   * Sets a value for the given parameter name.
   *
   * @param {string} name - The parameter name.
   * @param {any} value - The parameter value.
   * @return {ScriptableNode} A reference to this node.
   */
  setParameter(name, value) {
    const parameters = this.parameters;
    if (value && value.isScriptableNode) {
      this.deleteParameter(name);
      parameters[name] = value;
      parameters[name].getDefaultOutput().events.addEventListener("refresh", this.onRefresh);
    } else if (value && value.isScriptableValueNode) {
      this.deleteParameter(name);
      parameters[name] = value;
      parameters[name].events.addEventListener("refresh", this.onRefresh);
    } else if (parameters[name] === void 0) {
      parameters[name] = scriptableValue(value);
      parameters[name].events.addEventListener("refresh", this.onRefresh);
    } else {
      parameters[name].value = value;
    }
    return this;
  }
  /**
   * Returns the value of this node which is the value of
   * the default output.
   *
   * @return {Node} The value.
   */
  getValue() {
    return this.getDefaultOutput().getValue();
  }
  /**
   * Deletes a parameter from the script.
   *
   * @param {string} name - The parameter to remove.
   * @return {ScriptableNode} A reference to this node.
   */
  deleteParameter(name) {
    let valueNode = this.parameters[name];
    if (valueNode) {
      if (valueNode.isScriptableNode)
        valueNode = valueNode.getDefaultOutput();
      valueNode.events.removeEventListener("refresh", this.onRefresh);
    }
    return this;
  }
  /**
   * Deletes all parameters from the script.
   *
   * @return {ScriptableNode} A reference to this node.
   */
  clearParameters() {
    for (const name of Object.keys(this.parameters)) {
      this.deleteParameter(name);
    }
    this.needsUpdate = true;
    return this;
  }
  /**
   * Calls a function from the script.
   *
   * @param {string} name - The function name.
   * @param {...any} params - A list of parameters.
   * @return {any} The result of the function call.
   */
  call(name, ...params) {
    const object = this.getObject();
    const method = object[name];
    if (typeof method === "function") {
      return method(...params);
    }
  }
  /**
   * Asynchronously calls a function from the script.
   *
   * @param {string} name - The function name.
   * @param {...any} params - A list of parameters.
   * @return {Promise<any>} The result of the function call.
   */
  async callAsync(name, ...params) {
    const object = this.getObject();
    const method = object[name];
    if (typeof method === "function") {
      return method.constructor.name === "AsyncFunction" ? await method(...params) : method(...params);
    }
  }
  /**
   * Overwritten since the node types is inferred from the script's output.
   *
   * @param {NodeBuilder} builder - The current node builder
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return this.getDefaultOutputNode().getNodeType(builder);
  }
  /**
   * Refreshes the script node.
   *
   * @param {?string} [output=null] - An optional output.
   */
  refresh(output3 = null) {
    if (output3 !== null) {
      this.getOutput(output3).refresh();
    } else {
      this._refresh();
    }
  }
  /**
   * Returns an object representation of the script.
   *
   * @return {Object} The result object.
   */
  getObject() {
    if (this.needsUpdate)
      this.dispose();
    if (this._object !== null)
      return this._object;
    const refresh = () => this.refresh();
    const setOutput = (id, value) => this.setOutput(id, value);
    const parameters = new Parameters(this);
    const THREE5 = ScriptableNodeResources.get("THREE");
    const TSL2 = ScriptableNodeResources.get("TSL");
    const method = this.getMethod();
    const params = [parameters, this._local, ScriptableNodeResources, refresh, setOutput, THREE5, TSL2];
    this._object = method(...params);
    const layout = this._object.layout;
    if (layout) {
      if (layout.cache === false) {
        this._local.clear();
      }
      this._output.outputType = layout.outputType || null;
      if (Array.isArray(layout.elements)) {
        for (const element3 of layout.elements) {
          const id = element3.id || element3.name;
          if (element3.inputType) {
            if (this.getParameter(id) === void 0)
              this.setParameter(id, null);
            this.getParameter(id).inputType = element3.inputType;
          }
          if (element3.outputType) {
            if (this.getOutput(id) === void 0)
              this.setOutput(id, null);
            this.getOutput(id).outputType = element3.outputType;
          }
        }
      }
    }
    return this._object;
  }
  deserialize(data) {
    super.deserialize(data);
    for (const name in this.parameters) {
      let valueNode = this.parameters[name];
      if (valueNode.isScriptableNode)
        valueNode = valueNode.getDefaultOutput();
      valueNode.events.addEventListener("refresh", this.onRefresh);
    }
  }
  /**
   * Returns the layout of the script.
   *
   * @return {Object} The script's layout.
   */
  getLayout() {
    return this.getObject().layout;
  }
  /**
   * Returns default node output of the script.
   *
   * @return {Node} The default node output.
   */
  getDefaultOutputNode() {
    const output3 = this.getDefaultOutput().value;
    if (output3 && output3.isNode) {
      return output3;
    }
    return float();
  }
  /**
   * Returns default output of the script.
   *
   * @return {ScriptableValueNode} The default output.
   */
  getDefaultOutput() {
    return this._exec()._output;
  }
  /**
   * Returns a function created from the node's script.
   *
   * @return {Function} The function representing the node's code.
   */
  getMethod() {
    if (this.needsUpdate)
      this.dispose();
    if (this._method !== null)
      return this._method;
    const parametersProps = ["parameters", "local", "global", "refresh", "setOutput", "THREE", "TSL"];
    const interfaceProps = ["layout", "init", "main", "dispose"];
    const properties = interfaceProps.join(", ");
    const declarations = "var " + properties + "; var output = {};\n";
    const returns = "\nreturn { ...output, " + properties + " };";
    const code3 = declarations + this.codeNode.code + returns;
    this._method = new Function(...parametersProps, code3);
    return this._method;
  }
  /**
   * Frees all internal resources.
   */
  dispose() {
    if (this._method === null)
      return;
    if (this._object && typeof this._object.dispose === "function") {
      this._object.dispose();
    }
    this._method = null;
    this._object = null;
    this._source = null;
    this._value = null;
    this._needsOutputUpdate = true;
    this._output.value = null;
    this._outputs = {};
  }
  setup() {
    return this.getDefaultOutputNode();
  }
  getCacheKey(force) {
    const values = [hashString(this.source), this.getDefaultOutputNode().getCacheKey(force)];
    for (const param in this.parameters) {
      values.push(this.parameters[param].getCacheKey(force));
    }
    return hashArray(values);
  }
  set needsUpdate(value) {
    if (value === true)
      this.dispose();
  }
  get needsUpdate() {
    return this.source !== this._source;
  }
  /**
   * Executes the `main` function of the script.
   *
   * @private
   * @return {ScriptableNode} A reference to this node.
   */
  _exec() {
    if (this.codeNode === null)
      return this;
    if (this._needsOutputUpdate === true) {
      this._value = this.call("main");
      this._needsOutputUpdate = false;
    }
    this._output.value = this._value;
    return this;
  }
  /**
   * Executes the refresh.
   *
   * @private
   */
  _refresh() {
    this.needsUpdate = true;
    this._exec();
    this._output.refresh();
  }
};
var scriptable = nodeProxy(ScriptableNode).setParameterLength(1, 2);
function getViewZNode(builder) {
  let viewZ;
  const getViewZ = builder.context.getViewZ;
  if (getViewZ !== void 0) {
    viewZ = getViewZ(this);
  }
  return (viewZ || positionView.z).negate();
}
var rangeFogFactor = Fn(([near, far], builder) => {
  const viewZ = getViewZNode(builder);
  return smoothstep(near, far, viewZ);
});
var densityFogFactor = Fn(([density], builder) => {
  const viewZ = getViewZNode(builder);
  return density.mul(density, viewZ, viewZ).negate().exp().oneMinus();
});
var fog = Fn(([color4, factor]) => {
  return vec4(factor.toFloat().mix(output.rgb, color4.toVec3()), output.a);
});
function rangeFog(color4, near, far) {
  console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.');
  return fog(color4, rangeFogFactor(near, far));
}
function densityFog(color4, density) {
  console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.');
  return fog(color4, densityFogFactor(density));
}
var min2 = null;
var max3 = null;
var RangeNode = class extends Node {
  static get type() {
    return "RangeNode";
  }
  /**
   * Constructs a new range node.
   *
   * @param {Node<any>} [minNode=float()] - A node defining the lower bound of the range.
   * @param {Node<any>} [maxNode=float()] - A node defining the upper bound of the range.
   */
  constructor(minNode = float(), maxNode = float()) {
    super();
    this.minNode = minNode;
    this.maxNode = maxNode;
  }
  /**
   * Returns the vector length which is computed based on the range definition.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {number} The vector length.
   */
  getVectorLength(builder) {
    const minLength = builder.getTypeLength(getValueType(this.minNode.value));
    const maxLength = builder.getTypeLength(getValueType(this.maxNode.value));
    return minLength > maxLength ? minLength : maxLength;
  }
  /**
   * This method is overwritten since the node type is inferred from range definition.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return builder.object.count > 1 ? builder.getTypeFromLength(this.getVectorLength(builder)) : "float";
  }
  setup(builder) {
    const object = builder.object;
    let output3 = null;
    if (object.count > 1) {
      const minValue = this.minNode.value;
      const maxValue = this.maxNode.value;
      const minLength = builder.getTypeLength(getValueType(minValue));
      const maxLength = builder.getTypeLength(getValueType(maxValue));
      min2 = min2 || new Vector4();
      max3 = max3 || new Vector4();
      min2.setScalar(0);
      max3.setScalar(0);
      if (minLength === 1)
        min2.setScalar(minValue);
      else if (minValue.isColor)
        min2.set(minValue.r, minValue.g, minValue.b, 1);
      else
        min2.set(minValue.x, minValue.y, minValue.z || 0, minValue.w || 0);
      if (maxLength === 1)
        max3.setScalar(maxValue);
      else if (maxValue.isColor)
        max3.set(maxValue.r, maxValue.g, maxValue.b, 1);
      else
        max3.set(maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0);
      const stride = 4;
      const length3 = stride * object.count;
      const array3 = new Float32Array(length3);
      for (let i2 = 0; i2 < length3; i2++) {
        const index6 = i2 % stride;
        const minElementValue = min2.getComponent(index6);
        const maxElementValue = max3.getComponent(index6);
        array3[i2] = MathUtils.lerp(minElementValue, maxElementValue, Math.random());
      }
      const nodeType = this.getNodeType(builder);
      if (object.count <= 4096) {
        output3 = buffer(array3, "vec4", object.count).element(instanceIndex).convert(nodeType);
      } else {
        const bufferAttribute3 = new InstancedBufferAttribute(array3, 4);
        builder.geometry.setAttribute("__range" + this.id, bufferAttribute3);
        output3 = instancedBufferAttribute(bufferAttribute3).convert(nodeType);
      }
    } else {
      output3 = float(0);
    }
    return output3;
  }
};
var range = nodeProxy(RangeNode).setParameterLength(2);
var ComputeBuiltinNode = class extends Node {
  static get type() {
    return "ComputeBuiltinNode";
  }
  /**
   * Constructs a new compute builtin node.
   *
   * @param {string} builtinName - The built-in name.
   * @param {string} nodeType - The node type.
   */
  constructor(builtinName, nodeType) {
    super(nodeType);
    this._builtinName = builtinName;
  }
  /**
   * This method is overwritten since hash is derived from the built-in name.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The hash.
   */
  getHash(builder) {
    return this.getBuiltinName(builder);
  }
  /**
   * This method is overwritten since the node type is simply derived from `nodeType`..
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType() {
    return this.nodeType;
  }
  /**
   * Sets the builtin name.
   *
   * @param {string} builtinName - The built-in name.
   * @return {ComputeBuiltinNode} A reference to this node.
   */
  setBuiltinName(builtinName) {
    this._builtinName = builtinName;
    return this;
  }
  /**
   * Returns the builtin name.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The builtin name.
   */
  getBuiltinName() {
    return this._builtinName;
  }
  /**
   * Whether the current node builder has the builtin or not.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {boolean} Whether the builder has the builtin or not.
   */
  hasBuiltin(builder) {
    return builder.hasBuiltin(this._builtinName);
  }
  generate(builder, output3) {
    const builtinName = this.getBuiltinName(builder);
    const nodeType = this.getNodeType(builder);
    if (builder.shaderStage === "compute") {
      return builder.format(builtinName, nodeType, output3);
    } else {
      console.warn(`ComputeBuiltinNode: Compute built-in value ${builtinName} can not be accessed in the ${builder.shaderStage} stage`);
      return builder.generateConst(nodeType);
    }
  }
  serialize(data) {
    super.serialize(data);
    data.global = this.global;
    data._builtinName = this._builtinName;
  }
  deserialize(data) {
    super.deserialize(data);
    this.global = data.global;
    this._builtinName = data._builtinName;
  }
};
var computeBuiltin = (name, nodeType) => nodeObject(new ComputeBuiltinNode(name, nodeType));
var numWorkgroups = computeBuiltin("numWorkgroups", "uvec3");
var workgroupId = computeBuiltin("workgroupId", "uvec3");
var globalId = computeBuiltin("globalId", "uvec3");
var localId = computeBuiltin("localId", "uvec3");
var subgroupSize = computeBuiltin("subgroupSize", "uint");
var BarrierNode = class extends Node {
  /**
   * Constructs a new barrier node.
   *
   * @param {string} scope - The scope defines the behavior of the node.
   */
  constructor(scope) {
    super();
    this.scope = scope;
  }
  generate(builder) {
    const { scope } = this;
    const { renderer: renderer3 } = builder;
    if (renderer3.backend.isWebGLBackend === true) {
      builder.addFlowCode(`	// ${scope}Barrier 
`);
    } else {
      builder.addLineFlowCode(`${scope}Barrier()`, this);
    }
  }
};
var barrier = nodeProxy(BarrierNode);
var workgroupBarrier = () => barrier("workgroup").toStack();
var storageBarrier = () => barrier("storage").toStack();
var textureBarrier = () => barrier("texture").toStack();
var WorkgroupInfoElementNode = class extends ArrayElementNode {
  /**
   * Constructs a new workgroup info element node.
   *
   * @param {Node} workgroupInfoNode - The workgroup info node.
   * @param {Node} indexNode - The index node that defines the element access.
   */
  constructor(workgroupInfoNode, indexNode) {
    super(workgroupInfoNode, indexNode);
    this.isWorkgroupInfoElementNode = true;
  }
  generate(builder, output3) {
    let snippet;
    const isAssignContext = builder.context.assign;
    snippet = super.generate(builder);
    if (isAssignContext !== true) {
      const type = this.getNodeType(builder);
      snippet = builder.format(snippet, type, output3);
    }
    return snippet;
  }
};
var WorkgroupInfoNode = class extends Node {
  /**
   * Constructs a new buffer scoped to type scope.
   *
   * @param {string} scope - TODO.
   * @param {string} bufferType - The data type of a 'workgroup' scoped buffer element.
   * @param {number} [bufferCount=0] - The number of elements in the buffer.
   */
  constructor(scope, bufferType, bufferCount = 0) {
    super(bufferType);
    this.bufferType = bufferType;
    this.bufferCount = bufferCount;
    this.isWorkgroupInfoNode = true;
    this.elementType = bufferType;
    this.scope = scope;
    this.name = "";
  }
  /**
   * Sets the name of this node.
   *
   * @param {string} name - The name to set.
   * @return {WorkgroupInfoNode} A reference to this node.
   */
  setName(name) {
    this.name = name;
    return this;
  }
  /**
   * Sets the name/label of this node.
   *
   * @deprecated
   * @param {string} name - The name to set.
   * @return {WorkgroupInfoNode} A reference to this node.
   */
  label(name) {
    console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.');
    return this.setName(name);
  }
  /**
   * Sets the scope of this node.
   *
   * @param {string} scope - The scope to set.
   * @return {WorkgroupInfoNode} A reference to this node.
   */
  setScope(scope) {
    this.scope = scope;
    return this;
  }
  /**
   * The data type of the array buffer.
   *
   * @return {string} The element type.
   */
  getElementType() {
    return this.elementType;
  }
  /**
   * Overwrites the default implementation since the input type
   * is inferred from the scope.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType() {
    return `${this.scope}Array`;
  }
  /**
   * This method can be used to access elements via an index node.
   *
   * @param {IndexNode} indexNode - indexNode.
   * @return {WorkgroupInfoElementNode} A reference to an element.
   */
  element(indexNode) {
    return nodeObject(new WorkgroupInfoElementNode(this, indexNode));
  }
  generate(builder) {
    const name = this.name !== "" ? this.name : `${this.scope}Array_${this.id}`;
    return builder.getScopedArray(name, this.scope.toLowerCase(), this.bufferType, this.bufferCount);
  }
};
var workgroupArray = (type, count) => nodeObject(new WorkgroupInfoNode("Workgroup", type, count));
var AtomicFunctionNode = class extends Node {
  static get type() {
    return "AtomicFunctionNode";
  }
  /**
   * Constructs a new atomic function node.
   *
   * @param {string} method - The signature of the atomic function to construct.
   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.
   * @param {Node} valueNode - The value that mutates the atomic variable.
   */
  constructor(method, pointerNode, valueNode) {
    super("uint");
    this.method = method;
    this.pointerNode = pointerNode;
    this.valueNode = valueNode;
    this.parents = true;
  }
  /**
   * Overwrites the default implementation to return the type of
   * the pointer node.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The input type.
   */
  getInputType(builder) {
    return this.pointerNode.getNodeType(builder);
  }
  /**
   * Overwritten since the node type is inferred from the input type.
   *
   * @param {NodeBuilder} builder - The current node builder.
   * @return {string} The node type.
   */
  getNodeType(builder) {
    return this.getInputType(builder);
  }
  generate(builder) {
    const properties = builder.getNodeProperties(this);
    const parents = properties.parents;
    const method = this.method;
    const type = this.getNodeType(builder);
    const inputType = this.getInputType(builder);
    const a2 = this.pointerNode;
    const b = this.valueNode;
    const params = [];
    params.push(`&${a2.build(builder, inputType)}`);
    if (b !== null) {
      params.push(b.build(builder, inputType));
    }
    const methodSnippet = `${builder.getMethod(method, type)}( ${params.join(", ")} )`;
    const isVoid = parents ? parents.length === 1 && parents[0].isStackNode === true : false;
    if (isVoid) {
      builder.addLineFlowCode(methodSnippet, this);
    } else {
      if (properties.constNode === void 0) {
        properties.constNode = expression(methodSnippet, type).toConst();
      }
      return properties.constNode.build(builder);
    }
  }
};
AtomicFunctionNode.ATOMIC_LOAD = "atomicLoad";
AtomicFunctionNode.ATOMIC_STORE = "atomicStore";
AtomicFunctionNode.ATOMIC_ADD = "atomicAdd";
AtomicFunctionNode.ATOMIC_SUB = "atomicSub";
AtomicFunctionNode.ATOMIC_MAX = "atomicMax";
AtomicFunctionNode.ATOMIC_MIN = "atomicMin";
AtomicFunctionNode.ATOMIC_AND = "atomicAnd";
AtomicFunctionNode.ATOMIC_OR = "atomicOr";
AtomicFunctionNode.ATOMIC_XOR = "atomicXor";
var atomicNode = nodeProxy(AtomicFunctionNode);
var atomicFunc = (method, pointerNode, valueNode) => {
  return atomicNode(method, pointerNode, valueNode).toStack();
};
var atomicLoad = (pointerNode) => atomicFunc(AtomicFunctionNode.ATOMIC_LOAD, pointerNode, null);
var atomicStore = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_STORE, pointerNode, valueNode);
var atomicAdd = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_ADD, pointerNode, valueNode);
var atomicSub = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_SUB, pointerNode, valueNode);
var atomicMax = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_MAX, pointerNode, valueNode);
var atomicMin = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_MIN, pointerNode, valueNode);
var atomicAnd = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_AND, pointerNode, valueNode);
var atomicOr = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_OR, pointerNode, valueNode);
var atomicXor = (pointerNode, valueNode) => atomicFunc(AtomicFunctionNode.ATOMIC_XOR, pointerNode, valueNode);
var SubgroupFunctionNode = class _SubgroupFunctionNode extends TempNode {
  static get type() {
    return "SubgroupFunctionNode";
  }
  /**
   * Constructs a new function node.
   *
   * @param {string} method - The subgroup/wave intrinsic method to construct.
   * @param {Node} [aNode=null] - The method's first argument.
   * @param {Node} [bNode=null] - The method's second argument.
   */
  constructor(method, aNode = null, bNode = null) {
    super();
    this.method = method;
    this.aNode = aNode;
    this.bNode = bNode;
  }
  getInputType(builder) {
    const aType = this.aNode ? this.aNode.getNodeType(builder) : null;
    const bType = this.bNode ? this.bNode.getNodeType(builder) : null;
    const aLen = builder.isMatrix(aType) ? 0 : builder.getTypeLength(aType);
    const bLen = builder.isMatrix(bType) ? 0 : builder.getTypeLength(bType);
    if (aLen > bLen) {
      return aType;
    } else {
      return bType;
    }
  }
  getNodeType(builder) {
    const method = this.method;
    if (method === _SubgroupFunctionNode.SUBGROUP_ELECT) {
      return "bool";
    } else if (method === _SubgroupFunctionNode.SUBGROUP_BALLOT) {
      return "uvec4";
    } else {
      return this.getInputType(builder);
    }
  }
  generate(builder, output3) {
    const method = this.method;
    const type = this.getNodeType(builder);
    const inputType = this.getInputType(builder);
    const a2 = this.aNode;
    const b = this.bNode;
    const params = [];
    if (method === _SubgroupFunctionNode.SUBGROUP_BROADCAST || method === _SubgroupFunctionNode.SUBGROUP_SHUFFLE || method === _SubgroupFunctionNode.QUAD_BROADCAST) {
      const bType = b.getNodeType(builder);
      params.push(
        a2.build(builder, type),
        b.build(builder, bType === "float" ? "int" : type)
      );
    } else if (method === _SubgroupFunctionNode.SUBGROUP_SHUFFLE_XOR || method === _SubgroupFunctionNode.SUBGROUP_SHUFFLE_DOWN || method === _SubgroupFunctionNode.SUBGROUP_SHUFFLE_UP) {
      params.push(
        a2.build(builder, type),
        b.build(builder, "uint")
      );
    } else {
      if (a2 !== null)
        params.push(a2.build(builder, inputType));
      if (b !== null)
        params.push(b.build(builder, inputType));
    }
    const paramsString = params.length === 0 ? "()" : `( ${params.join(", ")} )`;
    return builder.format(`${builder.getMethod(method, type)}${paramsString}`, type, output3);
  }
  serialize(data) {
    super.serialize(data);
    data.method = this.method;
  }
  deserialize(data) {
    super.deserialize(data);
    this.method = data.method;
  }
};
SubgroupFunctionNode.SUBGROUP_ELECT = "subgroupElect";
SubgroupFunctionNode.SUBGROUP_BALLOT = "subgroupBallot";
SubgroupFunctionNode.SUBGROUP_ADD = "subgroupAdd";
SubgroupFunctionNode.SUBGROUP_INCLUSIVE_ADD = "subgroupInclusiveAdd";
SubgroupFunctionNode.SUBGROUP_EXCLUSIVE_AND = "subgroupExclusiveAdd";
SubgroupFunctionNode.SUBGROUP_MUL = "subgroupMul";
SubgroupFunctionNode.SUBGROUP_INCLUSIVE_MUL = "subgroupInclusiveMul";
SubgroupFunctionNode.SUBGROUP_EXCLUSIVE_MUL = "subgroupExclusiveMul";
SubgroupFunctionNode.SUBGROUP_AND = "subgroupAnd";
SubgroupFunctionNode.SUBGROUP_OR = "subgroupOr";
SubgroupFunctionNode.SUBGROUP_XOR = "subgroupXor";
SubgroupFunctionNode.SUBGROUP_MIN = "subgroupMin";
SubgroupFunctionNode.SUBGROUP_MAX = "subgroupMax";
SubgroupFunctionNode.SUBGROUP_ALL = "subgroupAll";
SubgroupFunctionNode.SUBGROUP_ANY = "subgroupAny";
SubgroupFunctionNode.SUBGROUP_BROADCAST_FIRST = "subgroupBroadcastFirst";
SubgroupFunctionNode.QUAD_SWAP_X = "quadSwapX";
SubgroupFunctionNode.QUAD_SWAP_Y = "quadSwapY";
SubgroupFunctionNode.QUAD_SWAP_DIAGONAL = "quadSwapDiagonal";
SubgroupFunctionNode.SUBGROUP_BROADCAST = "subgroupBroadcast";
SubgroupFunctionNode.SUBGROUP_SHUFFLE = "subgroupShuffle";
SubgroupFunctionNode.SUBGROUP_SHUFFLE_XOR = "subgroupShuffleXor";
SubgroupFunctionNode.SUBGROUP_SHUFFLE_UP = "subgroupShuffleUp";
SubgroupFunctionNode.SUBGROUP_SHUFFLE_DOWN = "subgroupShuffleDown";
SubgroupFunctionNode.QUAD_BROADCAST = "quadBroadcast";
var subgroupElect = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_ELECT).setParameterLength(0);
var subgroupBallot = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_BALLOT).setParameterLength(1);
var subgroupAdd = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_ADD).setParameterLength(1);
var subgroupInclusiveAdd = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_INCLUSIVE_ADD).setParameterLength(1);
var subgroupExclusiveAdd = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_EXCLUSIVE_AND).setParameterLength(1);
var subgroupMul = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_MUL).setParameterLength(1);
var subgroupInclusiveMul = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_INCLUSIVE_MUL).setParameterLength(1);
var subgroupExclusiveMul = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_EXCLUSIVE_MUL).setParameterLength(1);
var subgroupAnd = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_AND).setParameterLength(1);
var subgroupOr = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_OR).setParameterLength(1);
var subgroupXor = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_XOR).setParameterLength(1);
var subgroupMin = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_MIN).setParameterLength(1);
var subgroupMax = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_MAX).setParameterLength(1);
var subgroupAll = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_ALL).setParameterLength(0);
var subgroupAny = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_ANY).setParameterLength(0);
var subgroupBroadcastFirst = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_BROADCAST_FIRST).setParameterLength(2);
var quadSwapX = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.QUAD_SWAP_X).setParameterLength(1);
var quadSwapY = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.QUAD_SWAP_Y).setParameterLength(1);
var quadSwapDiagonal = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.QUAD_SWAP_DIAGONAL).setParameterLength(1);
var subgroupBroadcast = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_BROADCAST).setParameterLength(2);
var subgroupShuffle = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_SHUFFLE).setParameterLength(2);
var subgroupShuffleXor = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_SHUFFLE_XOR).setParameterLength(2);
var subgroupShuffleUp = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_SHUFFLE_UP).setParameterLength(2);
var subgroupShuffleDown = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.SUBGROUP_SHUFFLE_DOWN).setParameterLength(2);
var quadBroadcast = nodeProxyIntent(SubgroupFunctionNode, SubgroupFunctionNode.QUAD_BROADCAST).setParameterLength(1);
var uniformsLib;
function getLightData(light) {
  uniformsLib = uniformsLib || /* @__PURE__ */ new WeakMap();
  let uniforms = uniformsLib.get(light);
  if (uniforms === void 0)
    uniformsLib.set(light, uniforms = {});
  return uniforms;
}
function lightShadowMatrix(light) {
  const data = getLightData(light);
  return data.shadowMatrix || (data.shadowMatrix = uniform("mat4").setGroup(renderGroup).onRenderUpdate((frame) => {
    if (light.castShadow !== true || frame.renderer.shadowMap.enabled === false) {
      light.shadow.updateMatrices(light);
    }
    return light.shadow.matrix;
  }));
}
function lightProjectionUV(light, position = positionWorld) {
  const spotLightCoord = lightShadowMatrix(light).mul(position);
  const projectionUV = spotLightCoord.xyz.div(spotLightCoord.w);
  return projectionUV;
}
function lightPosition(light) {
  const data = getLightData(light);
  return data.position || (data.position = uniform(new Vector3()).setGroup(renderGroup).onRenderUpdate((_2, self2) => self2.value.setFromMatrixPosition(light.matrixWorld)));
}
function lightTargetPosition(light) {
  const data = getLightData(light);
  return data.targetPosition || (data.targetPosition = uniform(new Vector3()).setGroup(renderGroup).onRenderUpdate((_2, self2) => self2.value.setFromMatrixPosition(light.target.matrixWorld)));
}
function lightViewPosition(light) {
  const data = getLightData(light);
  return data.viewPosition || (data.viewPosition = uniform(new Vector3()).setGroup(renderGroup).onRenderUpdate(({ camera: camera3 }, self2) => {
    self2.value = self2.value || new Vector3();
    self2.value.setFromMatrixPosition(light.matrixWorld);
    self2.value.applyMatrix4(camera3.matrixWorldInverse);
  }));
}
var lightTargetDirection = (light) => cameraViewMatrix.transformDirection(lightPosition(light).sub(lightTargetPosition(light)));
var sortLights = (lights3) => {
  return lights3.sort((a2, b) => a2.id - b.id);
};
var getLightNodeById = (id, lightNodes) => {
  for (const lightNode of lightNodes) {
    if (lightNode.isAnalyticLightNode && lightNode.light.id === id) {
      return lightNode;
    }
  }
  return null;
};
var _lightsNodeRef = /* @__PURE__ */ new WeakMap();
var _hashData = [];
var LightsNode = class extends Node {
  static get type() {
    return "LightsNode";
  }
  /**
   * Constructs a new lights node.
   */
  constructor() {
    super("vec3");
    this.totalDiffuseNode = property("vec3", "totalDiffuse");
    this.totalSpecularNode = property("vec3", "totalSpecular");
    this.outgoingLightNode = property("vec3", "outgoingLight");
    this._lights = [];
    this._lightNodes = null;
    this._lightNodesHash = null;
    this.global = true;
  }
  /**
   * Overwrites the default {@link Node#customCacheKey} implementation by including
   * light data into the cache key.
   *
   * @return {number} The custom cache key.
   */
  customCacheKey() {
    const lights3 = this._lights;
    for (let i2 = 0; i2 < lights3.length; i2++) {
      const light = lights3[i2];
      _hashData.push(light.id);
      _hashData.push(light.castShadow ? 1 : 0);
      if (light.isSpotLight === true) {
        const hashMap = light.map !== null ? light.map.id : -1;
        const hashColorNode = light.colorNode ? light.colorNode.getCacheKey() : -1;
        _hashData.push(hashMap, hashColorNode);
      }
    }
    const cacheKey = hashArray(_hashData);
    _hashData.length = 0;
    return cacheKey;
  }
  /**
   * Computes a hash value for identifying the current light nodes setup.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @return {string} The computed hash.
   */
  getHash(builder) {
    if (this._lightNodesHash === null) {
      if (this._lightNodes === null)
        this.setupLightsNode(builder);
      const hash3 = [];
      for (const lightNode of this._lightNodes) {
        hash3.push(lightNode.getHash());
      }
      this._lightNodesHash = "lights-" + hash3.join(",");
    }
    return this._lightNodesHash;
  }
  analyze(builder) {
    const properties = builder.getNodeProperties(this);
    for (const node of properties.nodes) {
      node.build(builder);
    }
    properties.outputNode.build(builder);
  }
  /**
   * Creates lighting nodes for each scene light. This makes it possible to further
   * process lights in the node system.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   */
  setupLightsNode(builder) {
    const lightNodes = [];
    const previousLightNodes = this._lightNodes;
    const lights3 = sortLights(this._lights);
    const nodeLibrary = builder.renderer.library;
    for (const light of lights3) {
      if (light.isNode) {
        lightNodes.push(nodeObject(light));
      } else {
        let lightNode = null;
        if (previousLightNodes !== null) {
          lightNode = getLightNodeById(light.id, previousLightNodes);
        }
        if (lightNode === null) {
          const lightNodeClass = nodeLibrary.getLightNodeClass(light.constructor);
          if (lightNodeClass === null) {
            console.warn(`LightsNode.setupNodeLights: Light node not found for ${light.constructor.name}`);
            continue;
          }
          let lightNode2 = null;
          if (!_lightsNodeRef.has(light)) {
            lightNode2 = nodeObject(new lightNodeClass(light));
            _lightsNodeRef.set(light, lightNode2);
          } else {
            lightNode2 = _lightsNodeRef.get(light);
          }
          lightNodes.push(lightNode2);
        }
      }
    }
    this._lightNodes = lightNodes;
  }
  /**
   * Sets up a direct light in the lighting model.
   *
   * @param {Object} builder - The builder object containing the context and stack.
   * @param {Object} lightNode - The light node.
   * @param {Object} lightData - The light object containing color and direction properties.
   */
  setupDirectLight(builder, lightNode, lightData) {
    const { lightingModel, reflectedLight } = builder.context;
    lightingModel.direct({
      ...lightData,
      lightNode,
      reflectedLight
    }, builder);
  }
  setupDirectRectAreaLight(builder, lightNode, lightData) {
    const { lightingModel, reflectedLight } = builder.context;
    lightingModel.directRectArea({
      ...lightData,
      lightNode,
      reflectedLight
    }, builder);
  }
  /**
   * Setups the internal lights by building all respective
   * light nodes.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @param {Array<LightingNode>} lightNodes - An array of lighting nodes.
   */
  setupLights(builder, lightNodes) {
    for (const lightNode of lightNodes) {
      lightNode.build(builder);
    }
  }
  getLightNodes(builder) {
    if (this._lightNodes === null)
      this.setupLightsNode(builder);
    return this._lightNodes;
  }
  /**
   * The implementation makes sure that for each light in the scene
   * there is a corresponding light node. By building the light nodes
   * and evaluating the lighting model the outgoing light is computed.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @return {Node<vec3>} A node representing the outgoing light.
   */
  setup(builder) {
    const currentLightsNode = builder.lightsNode;
    builder.lightsNode = this;
    let outgoingLightNode = this.outgoingLightNode;
    const context3 = builder.context;
    const lightingModel = context3.lightingModel;
    const properties = builder.getNodeProperties(this);
    if (lightingModel) {
      const { totalDiffuseNode, totalSpecularNode } = this;
      context3.outgoingLight = outgoingLightNode;
      const stack3 = builder.addStack();
      properties.nodes = stack3.nodes;
      lightingModel.start(builder);
      const { backdrop, backdropAlpha } = context3;
      const { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context3.reflectedLight;
      let totalDiffuse = directDiffuse.add(indirectDiffuse);
      if (backdrop !== null) {
        if (backdropAlpha !== null) {
          totalDiffuse = vec3(backdropAlpha.mix(totalDiffuse, backdrop));
        } else {
          totalDiffuse = vec3(backdrop);
        }
        context3.material.transparent = true;
      }
      totalDiffuseNode.assign(totalDiffuse);
      totalSpecularNode.assign(directSpecular.add(indirectSpecular));
      outgoingLightNode.assign(totalDiffuseNode.add(totalSpecularNode));
      lightingModel.finish(builder);
      outgoingLightNode = outgoingLightNode.bypass(builder.removeStack());
    } else {
      properties.nodes = [];
    }
    builder.lightsNode = currentLightsNode;
    return outgoingLightNode;
  }
  /**
   * Configures this node with an array of lights.
   *
   * @param {Array<Light>} lights - An array of lights.
   * @return {LightsNode} A reference to this node.
   */
  setLights(lights3) {
    this._lights = lights3;
    this._lightNodes = null;
    this._lightNodesHash = null;
    return this;
  }
  /**
   * Returns an array of the scene's lights.
   *
   * @return {Array<Light>} The scene's lights.
   */
  getLights() {
    return this._lights;
  }
  /**
   * Whether the scene has lights or not.
   *
   * @type {boolean}
   */
  get hasLights() {
    return this._lights.length > 0;
  }
};
var lights = (lights3 = []) => nodeObject(new LightsNode()).setLights(lights3);
var ShadowBaseNode = class extends Node {
  static get type() {
    return "ShadowBaseNode";
  }
  /**
   * Constructs a new shadow base node.
   *
   * @param {Light} light - The shadow casting light.
   */
  constructor(light) {
    super();
    this.light = light;
    this.updateBeforeType = NodeUpdateType.RENDER;
    this.isShadowBaseNode = true;
  }
  /**
   * Setups the shadow position node which is by default the predefined TSL node object `shadowPositionWorld`.
   *
   * @param {NodeBuilder} object - A configuration object that must at least hold a material reference.
   */
  setupShadowPosition({ context: context3, material }) {
    shadowPositionWorld.assign(material.receivedShadowPositionNode || context3.shadowPositionWorld || positionWorld);
  }
};
var shadowPositionWorld = property("vec3", "shadowPositionWorld");
function saveRendererState(renderer3, state = {}) {
  state.toneMapping = renderer3.toneMapping;
  state.toneMappingExposure = renderer3.toneMappingExposure;
  state.outputColorSpace = renderer3.outputColorSpace;
  state.renderTarget = renderer3.getRenderTarget();
  state.activeCubeFace = renderer3.getActiveCubeFace();
  state.activeMipmapLevel = renderer3.getActiveMipmapLevel();
  state.renderObjectFunction = renderer3.getRenderObjectFunction();
  state.pixelRatio = renderer3.getPixelRatio();
  state.mrt = renderer3.getMRT();
  state.clearColor = renderer3.getClearColor(state.clearColor || new Color());
  state.clearAlpha = renderer3.getClearAlpha();
  state.autoClear = renderer3.autoClear;
  state.scissorTest = renderer3.getScissorTest();
  return state;
}
function resetRendererState(renderer3, state) {
  state = saveRendererState(renderer3, state);
  renderer3.setMRT(null);
  renderer3.setRenderObjectFunction(null);
  renderer3.setClearColor(0, 1);
  renderer3.autoClear = true;
  return state;
}
function restoreRendererState(renderer3, state) {
  renderer3.toneMapping = state.toneMapping;
  renderer3.toneMappingExposure = state.toneMappingExposure;
  renderer3.outputColorSpace = state.outputColorSpace;
  renderer3.setRenderTarget(state.renderTarget, state.activeCubeFace, state.activeMipmapLevel);
  renderer3.setRenderObjectFunction(state.renderObjectFunction);
  renderer3.setPixelRatio(state.pixelRatio);
  renderer3.setMRT(state.mrt);
  renderer3.setClearColor(state.clearColor, state.clearAlpha);
  renderer3.autoClear = state.autoClear;
  renderer3.setScissorTest(state.scissorTest);
}
function saveSceneState(scene3, state = {}) {
  state.background = scene3.background;
  state.backgroundNode = scene3.backgroundNode;
  state.overrideMaterial = scene3.overrideMaterial;
  return state;
}
function resetSceneState(scene3, state) {
  state = saveSceneState(scene3, state);
  scene3.background = null;
  scene3.backgroundNode = null;
  scene3.overrideMaterial = null;
  return state;
}
function restoreSceneState(scene3, state) {
  scene3.background = state.background;
  scene3.backgroundNode = state.backgroundNode;
  scene3.overrideMaterial = state.overrideMaterial;
}
function saveRendererAndSceneState(renderer3, scene3, state = {}) {
  state = saveRendererState(renderer3, state);
  state = saveSceneState(scene3, state);
  return state;
}
function resetRendererAndSceneState(renderer3, scene3, state) {
  state = resetRendererState(renderer3, state);
  state = resetSceneState(scene3, state);
  return state;
}
function restoreRendererAndSceneState(renderer3, scene3, state) {
  restoreRendererState(renderer3, state);
  restoreSceneState(scene3, state);
}
var RendererUtils = Object.freeze({
  __proto__: null,
  resetRendererAndSceneState,
  resetRendererState,
  resetSceneState,
  restoreRendererAndSceneState,
  restoreRendererState,
  restoreSceneState,
  saveRendererAndSceneState,
  saveRendererState,
  saveSceneState
});
var shadowMaterialLib = /* @__PURE__ */ new WeakMap();
var BasicShadowFilter = Fn(({ depthTexture, shadowCoord, depthLayer }) => {
  let basic = texture(depthTexture, shadowCoord.xy).setName("t_basic");
  if (depthTexture.isArrayTexture) {
    basic = basic.depth(depthLayer);
  }
  return basic.compare(shadowCoord.z);
});
var PCFShadowFilter = Fn(({ depthTexture, shadowCoord, shadow: shadow3, depthLayer }) => {
  const depthCompare = (uv3, compare) => {
    let depth3 = texture(depthTexture, uv3);
    if (depthTexture.isArrayTexture) {
      depth3 = depth3.depth(depthLayer);
    }
    return depth3.compare(compare);
  };
  const mapSize = reference("mapSize", "vec2", shadow3).setGroup(renderGroup);
  const radius = reference("radius", "float", shadow3).setGroup(renderGroup);
  const texelSize = vec2(1).div(mapSize);
  const dx0 = texelSize.x.negate().mul(radius);
  const dy0 = texelSize.y.negate().mul(radius);
  const dx1 = texelSize.x.mul(radius);
  const dy1 = texelSize.y.mul(radius);
  const dx2 = dx0.div(2);
  const dy2 = dy0.div(2);
  const dx3 = dx1.div(2);
  const dy3 = dy1.div(2);
  return add3(
    depthCompare(shadowCoord.xy.add(vec2(dx0, dy0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx1, dy0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx2, dy2)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy2)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx3, dy2)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx0, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx2, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy, shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx3, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx1, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx2, dy3)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy3)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx3, dy3)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx0, dy1)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy1)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx1, dy1)), shadowCoord.z)
  ).mul(1 / 17);
});
var PCFSoftShadowFilter = Fn(({ depthTexture, shadowCoord, shadow: shadow3, depthLayer }) => {
  const depthCompare = (uv4, compare) => {
    let depth3 = texture(depthTexture, uv4);
    if (depthTexture.isArrayTexture) {
      depth3 = depth3.depth(depthLayer);
    }
    return depth3.compare(compare);
  };
  const mapSize = reference("mapSize", "vec2", shadow3).setGroup(renderGroup);
  const texelSize = vec2(1).div(mapSize);
  const dx = texelSize.x;
  const dy = texelSize.y;
  const uv3 = shadowCoord.xy;
  const f2 = fract(uv3.mul(mapSize).add(0.5));
  uv3.subAssign(f2.mul(texelSize));
  return add3(
    depthCompare(uv3, shadowCoord.z),
    depthCompare(uv3.add(vec2(dx, 0)), shadowCoord.z),
    depthCompare(uv3.add(vec2(0, dy)), shadowCoord.z),
    depthCompare(uv3.add(texelSize), shadowCoord.z),
    mix(
      depthCompare(uv3.add(vec2(dx.negate(), 0)), shadowCoord.z),
      depthCompare(uv3.add(vec2(dx.mul(2), 0)), shadowCoord.z),
      f2.x
    ),
    mix(
      depthCompare(uv3.add(vec2(dx.negate(), dy)), shadowCoord.z),
      depthCompare(uv3.add(vec2(dx.mul(2), dy)), shadowCoord.z),
      f2.x
    ),
    mix(
      depthCompare(uv3.add(vec2(0, dy.negate())), shadowCoord.z),
      depthCompare(uv3.add(vec2(0, dy.mul(2))), shadowCoord.z),
      f2.y
    ),
    mix(
      depthCompare(uv3.add(vec2(dx, dy.negate())), shadowCoord.z),
      depthCompare(uv3.add(vec2(dx, dy.mul(2))), shadowCoord.z),
      f2.y
    ),
    mix(
      mix(
        depthCompare(uv3.add(vec2(dx.negate(), dy.negate())), shadowCoord.z),
        depthCompare(uv3.add(vec2(dx.mul(2), dy.negate())), shadowCoord.z),
        f2.x
      ),
      mix(
        depthCompare(uv3.add(vec2(dx.negate(), dy.mul(2))), shadowCoord.z),
        depthCompare(uv3.add(vec2(dx.mul(2), dy.mul(2))), shadowCoord.z),
        f2.x
      ),
      f2.y
    )
  ).mul(1 / 9);
});
var VSMShadowFilter = Fn(({ depthTexture, shadowCoord, depthLayer }) => {
  const occlusion = float(1).toVar();
  let distribution = texture(depthTexture).sample(shadowCoord.xy);
  if (depthTexture.isArrayTexture) {
    distribution = distribution.depth(depthLayer);
  }
  distribution = distribution.rg;
  const hardShadow = step(shadowCoord.z, distribution.x);
  If(hardShadow.notEqual(float(1)), () => {
    const distance4 = shadowCoord.z.sub(distribution.x);
    const variance = max$1(0, distribution.y.mul(distribution.y));
    let softnessProbability = variance.div(variance.add(distance4.mul(distance4)));
    softnessProbability = clamp(sub(softnessProbability, 0.3).div(0.95 - 0.3));
    occlusion.assign(clamp(max$1(hardShadow, softnessProbability)));
  });
  return occlusion;
});
var linearDistance = Fn(([position, cameraNear3, cameraFar3]) => {
  let dist = positionWorld.sub(position).length();
  dist = dist.sub(cameraNear3).div(cameraFar3.sub(cameraNear3));
  dist = dist.saturate();
  return dist;
});
var linearShadowDistance = (light) => {
  const camera3 = light.shadow.camera;
  const nearDistance = reference("near", "float", camera3).setGroup(renderGroup);
  const farDistance = reference("far", "float", camera3).setGroup(renderGroup);
  const referencePosition = objectPosition(light);
  return linearDistance(referencePosition, nearDistance, farDistance);
};
var getShadowMaterial = (light) => {
  let material = shadowMaterialLib.get(light);
  if (material === void 0) {
    const depthNode = light.isPointLight ? linearShadowDistance(light) : null;
    material = new NodeMaterial();
    material.colorNode = vec4(0, 0, 0, 1);
    material.depthNode = depthNode;
    material.isShadowPassMaterial = true;
    material.name = "ShadowMaterial";
    material.fog = false;
    shadowMaterialLib.set(light, material);
  }
  return material;
};
var _shadowRenderObjectLibrary = new ChainMap();
var _shadowRenderObjectKeys = [];
var getShadowRenderObjectFunction = (renderer3, shadow3, shadowType, useVelocity) => {
  _shadowRenderObjectKeys[0] = renderer3;
  _shadowRenderObjectKeys[1] = shadow3;
  let renderObjectFunction = _shadowRenderObjectLibrary.get(_shadowRenderObjectKeys);
  if (renderObjectFunction === void 0 || (renderObjectFunction.shadowType !== shadowType || renderObjectFunction.useVelocity !== useVelocity)) {
    renderObjectFunction = (object, scene3, _camera4, geometry, material, group, ...params) => {
      if (object.castShadow === true || object.receiveShadow && shadowType === VSMShadowMap) {
        if (useVelocity) {
          getDataFromObject(object).useVelocity = true;
        }
        object.onBeforeShadow(renderer3, object, _camera4, shadow3.camera, geometry, scene3.overrideMaterial, group);
        renderer3.renderObject(object, scene3, _camera4, geometry, material, group, ...params);
        object.onAfterShadow(renderer3, object, _camera4, shadow3.camera, geometry, scene3.overrideMaterial, group);
      }
    };
    renderObjectFunction.shadowType = shadowType;
    renderObjectFunction.useVelocity = useVelocity;
    _shadowRenderObjectLibrary.set(_shadowRenderObjectKeys, renderObjectFunction);
  }
  _shadowRenderObjectKeys[0] = null;
  _shadowRenderObjectKeys[1] = null;
  return renderObjectFunction;
};
var VSMPassVertical = Fn(({ samples, radius, size, shadowPass, depthLayer }) => {
  const mean2 = float(0).toVar("meanVertical");
  const squaredMean = float(0).toVar("squareMeanVertical");
  const uvStride = samples.lessThanEqual(float(1)).select(float(0), float(2).div(samples.sub(1)));
  const uvStart = samples.lessThanEqual(float(1)).select(float(0), float(-1));
  Loop({ start: int(0), end: int(samples), type: "int", condition: "<" }, ({ i: i2 }) => {
    const uvOffset = uvStart.add(float(i2).mul(uvStride));
    let depth3 = shadowPass.sample(add3(screenCoordinate.xy, vec2(0, uvOffset).mul(radius)).div(size));
    if (shadowPass.value.isArrayTexture) {
      depth3 = depth3.depth(depthLayer);
    }
    depth3 = depth3.x;
    mean2.addAssign(depth3);
    squaredMean.addAssign(depth3.mul(depth3));
  });
  mean2.divAssign(samples);
  squaredMean.divAssign(samples);
  const std_dev = sqrt2(squaredMean.sub(mean2.mul(mean2)));
  return vec2(mean2, std_dev);
});
var VSMPassHorizontal = Fn(({ samples, radius, size, shadowPass, depthLayer }) => {
  const mean2 = float(0).toVar("meanHorizontal");
  const squaredMean = float(0).toVar("squareMeanHorizontal");
  const uvStride = samples.lessThanEqual(float(1)).select(float(0), float(2).div(samples.sub(1)));
  const uvStart = samples.lessThanEqual(float(1)).select(float(0), float(-1));
  Loop({ start: int(0), end: int(samples), type: "int", condition: "<" }, ({ i: i2 }) => {
    const uvOffset = uvStart.add(float(i2).mul(uvStride));
    let distribution = shadowPass.sample(add3(screenCoordinate.xy, vec2(uvOffset, 0).mul(radius)).div(size));
    if (shadowPass.value.isArrayTexture) {
      distribution = distribution.depth(depthLayer);
    }
    mean2.addAssign(distribution.x);
    squaredMean.addAssign(add3(distribution.y.mul(distribution.y), distribution.x.mul(distribution.x)));
  });
  mean2.divAssign(samples);
  squaredMean.divAssign(samples);
  const std_dev = sqrt2(squaredMean.sub(mean2.mul(mean2)));
  return vec2(mean2, std_dev);
});
var _shadowFilterLib = [BasicShadowFilter, PCFShadowFilter, PCFSoftShadowFilter, VSMShadowFilter];
var _rendererState;
var _quadMesh = new QuadMesh();
var ShadowNode = class extends ShadowBaseNode {
  static get type() {
    return "ShadowNode";
  }
  /**
   * Constructs a new shadow node.
   *
   * @param {Light} light - The shadow casting light.
   * @param {?LightShadow} [shadow=null] - An optional light shadow.
   */
  constructor(light, shadow3 = null) {
    super(light);
    this.shadow = shadow3 || light.shadow;
    this.shadowMap = null;
    this.vsmShadowMapVertical = null;
    this.vsmShadowMapHorizontal = null;
    this.vsmMaterialVertical = null;
    this.vsmMaterialHorizontal = null;
    this._node = null;
    this._cameraFrameId = /* @__PURE__ */ new WeakMap();
    this.isShadowNode = true;
    this.depthLayer = 0;
  }
  /**
   * Setups the shadow filtering.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @param {Object} inputs - A configuration object that defines the shadow filtering.
   * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.
   * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.
   * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.
   * @param {LightShadow} inputs.shadow - The light shadow.
   * @return {Node<float>} The result node of the shadow filtering.
   */
  setupShadowFilter(builder, { filterFn, depthTexture, shadowCoord, shadow: shadow3, depthLayer }) {
    const frustumTest = shadowCoord.x.greaterThanEqual(0).and(shadowCoord.x.lessThanEqual(1)).and(shadowCoord.y.greaterThanEqual(0)).and(shadowCoord.y.lessThanEqual(1)).and(shadowCoord.z.lessThanEqual(1));
    const shadowNode = filterFn({ depthTexture, shadowCoord, shadow: shadow3, depthLayer });
    return frustumTest.select(shadowNode, float(1));
  }
  /**
   * Setups the shadow coordinates.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @param {Node<vec3>} shadowPosition - A node representing the shadow position.
   * @return {Node<vec3>} The shadow coordinates.
   */
  setupShadowCoord(builder, shadowPosition) {
    const { shadow: shadow3 } = this;
    const { renderer: renderer3 } = builder;
    const bias = reference("bias", "float", shadow3).setGroup(renderGroup);
    let shadowCoord = shadowPosition;
    let coordZ;
    if (shadow3.camera.isOrthographicCamera || renderer3.logarithmicDepthBuffer !== true) {
      shadowCoord = shadowCoord.xyz.div(shadowCoord.w);
      coordZ = shadowCoord.z;
      if (renderer3.coordinateSystem === WebGPUCoordinateSystem) {
        coordZ = coordZ.mul(2).sub(1);
      }
    } else {
      const w4 = shadowCoord.w;
      shadowCoord = shadowCoord.xy.div(w4);
      const cameraNearLocal = reference("near", "float", shadow3.camera).setGroup(renderGroup);
      const cameraFarLocal = reference("far", "float", shadow3.camera).setGroup(renderGroup);
      coordZ = viewZToLogarithmicDepth(w4.negate(), cameraNearLocal, cameraFarLocal);
    }
    shadowCoord = vec3(
      shadowCoord.x,
      shadowCoord.y.oneMinus(),
      // follow webgpu standards
      coordZ.add(bias)
    );
    return shadowCoord;
  }
  /**
   * Returns the shadow filtering function for the given shadow type.
   *
   * @param {number} type - The shadow type.
   * @return {Function} The filtering function.
   */
  getShadowFilterFn(type) {
    return _shadowFilterLib[type];
  }
  setupRenderTarget(shadow3, builder) {
    const depthTexture = new DepthTexture(shadow3.mapSize.width, shadow3.mapSize.height);
    depthTexture.name = "ShadowDepthTexture";
    depthTexture.compareFunction = LessCompare;
    const shadowMap = builder.createRenderTarget(shadow3.mapSize.width, shadow3.mapSize.height);
    shadowMap.texture.name = "ShadowMap";
    shadowMap.texture.type = shadow3.mapType;
    shadowMap.depthTexture = depthTexture;
    return { shadowMap, depthTexture };
  }
  /**
   * Setups the shadow output node.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @return {Node<vec3>} The shadow output node.
   */
  setupShadow(builder) {
    const { renderer: renderer3 } = builder;
    const { light, shadow: shadow3 } = this;
    const shadowMapType = renderer3.shadowMap.type;
    const { depthTexture, shadowMap } = this.setupRenderTarget(shadow3, builder);
    shadow3.camera.updateProjectionMatrix();
    if (shadowMapType === VSMShadowMap && shadow3.isPointLightShadow !== true) {
      depthTexture.compareFunction = null;
      if (shadowMap.depth > 1) {
        if (!shadowMap._vsmShadowMapVertical) {
          shadowMap._vsmShadowMapVertical = builder.createRenderTarget(shadow3.mapSize.width, shadow3.mapSize.height, { format: RGFormat, type: HalfFloatType, depth: shadowMap.depth, depthBuffer: false });
          shadowMap._vsmShadowMapVertical.texture.name = "VSMVertical";
        }
        this.vsmShadowMapVertical = shadowMap._vsmShadowMapVertical;
        if (!shadowMap._vsmShadowMapHorizontal) {
          shadowMap._vsmShadowMapHorizontal = builder.createRenderTarget(shadow3.mapSize.width, shadow3.mapSize.height, { format: RGFormat, type: HalfFloatType, depth: shadowMap.depth, depthBuffer: false });
          shadowMap._vsmShadowMapHorizontal.texture.name = "VSMHorizontal";
        }
        this.vsmShadowMapHorizontal = shadowMap._vsmShadowMapHorizontal;
      } else {
        this.vsmShadowMapVertical = builder.createRenderTarget(shadow3.mapSize.width, shadow3.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false });
        this.vsmShadowMapHorizontal = builder.createRenderTarget(shadow3.mapSize.width, shadow3.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false });
      }
      let shadowPassVertical = texture(depthTexture);
      if (depthTexture.isArrayTexture) {
        shadowPassVertical = shadowPassVertical.depth(this.depthLayer);
      }
      let shadowPassHorizontal = texture(this.vsmShadowMapVertical.texture);
      if (depthTexture.isArrayTexture) {
        shadowPassHorizontal = shadowPassHorizontal.depth(this.depthLayer);
      }
      const samples = reference("blurSamples", "float", shadow3).setGroup(renderGroup);
      const radius = reference("radius", "float", shadow3).setGroup(renderGroup);
      const size = reference("mapSize", "vec2", shadow3).setGroup(renderGroup);
      let material = this.vsmMaterialVertical || (this.vsmMaterialVertical = new NodeMaterial());
      material.fragmentNode = VSMPassVertical({ samples, radius, size, shadowPass: shadowPassVertical, depthLayer: this.depthLayer }).context(builder.getSharedContext());
      material.name = "VSMVertical";
      material = this.vsmMaterialHorizontal || (this.vsmMaterialHorizontal = new NodeMaterial());
      material.fragmentNode = VSMPassHorizontal({ samples, radius, size, shadowPass: shadowPassHorizontal, depthLayer: this.depthLayer }).context(builder.getSharedContext());
      material.name = "VSMHorizontal";
    }
    const shadowIntensity = reference("intensity", "float", shadow3).setGroup(renderGroup);
    const normalBias = reference("normalBias", "float", shadow3).setGroup(renderGroup);
    const shadowPosition = lightShadowMatrix(light).mul(shadowPositionWorld.add(normalWorld.mul(normalBias)));
    const shadowCoord = this.setupShadowCoord(builder, shadowPosition);
    const filterFn = shadow3.filterNode || this.getShadowFilterFn(renderer3.shadowMap.type) || null;
    if (filterFn === null) {
      throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");
    }
    const shadowDepthTexture = shadowMapType === VSMShadowMap && shadow3.isPointLightShadow !== true ? this.vsmShadowMapHorizontal.texture : depthTexture;
    const shadowNode = this.setupShadowFilter(builder, { filterFn, shadowTexture: shadowMap.texture, depthTexture: shadowDepthTexture, shadowCoord, shadow: shadow3, depthLayer: this.depthLayer });
    let shadowColor = texture(shadowMap.texture, shadowCoord);
    if (depthTexture.isArrayTexture) {
      shadowColor = shadowColor.depth(this.depthLayer);
    }
    const shadowOutput = mix(1, shadowNode.rgb.mix(shadowColor, 1), shadowIntensity.mul(shadowColor.a)).toVar();
    this.shadowMap = shadowMap;
    this.shadow.map = shadowMap;
    return shadowOutput;
  }
  /**
   * The implementation performs the setup of the output node. An output is only
   * produces if shadow mapping is globally enabled in the renderer.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @return {ShaderCallNodeInternal} The output node.
   */
  setup(builder) {
    if (builder.renderer.shadowMap.enabled === false)
      return;
    return Fn(() => {
      let node = this._node;
      this.setupShadowPosition(builder);
      if (node === null) {
        this._node = node = this.setupShadow(builder);
      }
      if (builder.material.shadowNode) {
        console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.');
      }
      if (builder.material.receivedShadowNode) {
        node = builder.material.receivedShadowNode(node);
      }
      return node;
    })();
  }
  /**
   * Renders the shadow. The logic of this function could be included
   * into {@link ShadowNode#updateShadow} however more specialized shadow
   * nodes might require a custom shadow map rendering. By having a
   * dedicated method, it's easier to overwrite the default behavior.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  renderShadow(frame) {
    const { shadow: shadow3, shadowMap, light } = this;
    const { renderer: renderer3, scene: scene3 } = frame;
    shadow3.updateMatrices(light);
    shadowMap.setSize(shadow3.mapSize.width, shadow3.mapSize.height, shadowMap.depth);
    renderer3.render(scene3, shadow3.camera);
  }
  /**
   * Updates the shadow.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  updateShadow(frame) {
    const { shadowMap, light, shadow: shadow3 } = this;
    const { renderer: renderer3, scene: scene3, camera: camera3 } = frame;
    const shadowType = renderer3.shadowMap.type;
    const depthVersion = shadowMap.depthTexture.version;
    this._depthVersionCached = depthVersion;
    const _shadowCameraLayer = shadow3.camera.layers.mask;
    if ((shadow3.camera.layers.mask & 4294967294) === 0) {
      shadow3.camera.layers.mask = camera3.layers.mask;
    }
    const currentRenderObjectFunction = renderer3.getRenderObjectFunction();
    const currentMRT = renderer3.getMRT();
    const useVelocity = currentMRT ? currentMRT.has("velocity") : false;
    _rendererState = resetRendererAndSceneState(renderer3, scene3, _rendererState);
    scene3.overrideMaterial = getShadowMaterial(light);
    renderer3.setRenderObjectFunction(getShadowRenderObjectFunction(renderer3, shadow3, shadowType, useVelocity));
    renderer3.setClearColor(0, 0);
    renderer3.setRenderTarget(shadowMap);
    this.renderShadow(frame);
    renderer3.setRenderObjectFunction(currentRenderObjectFunction);
    if (shadowType === VSMShadowMap && shadow3.isPointLightShadow !== true) {
      this.vsmPass(renderer3);
    }
    shadow3.camera.layers.mask = _shadowCameraLayer;
    restoreRendererAndSceneState(renderer3, scene3, _rendererState);
  }
  /**
   * For VSM additional render passes are required.
   *
   * @param {Renderer} renderer - A reference to the current renderer.
   */
  vsmPass(renderer3) {
    const { shadow: shadow3 } = this;
    const depth3 = this.shadowMap.depth;
    this.vsmShadowMapVertical.setSize(shadow3.mapSize.width, shadow3.mapSize.height, depth3);
    this.vsmShadowMapHorizontal.setSize(shadow3.mapSize.width, shadow3.mapSize.height, depth3);
    renderer3.setRenderTarget(this.vsmShadowMapVertical);
    _quadMesh.material = this.vsmMaterialVertical;
    _quadMesh.render(renderer3);
    renderer3.setRenderTarget(this.vsmShadowMapHorizontal);
    _quadMesh.material = this.vsmMaterialHorizontal;
    _quadMesh.render(renderer3);
  }
  /**
   * Frees the internal resources of this shadow node.
   */
  dispose() {
    this.shadowMap.dispose();
    this.shadowMap = null;
    if (this.vsmShadowMapVertical !== null) {
      this.vsmShadowMapVertical.dispose();
      this.vsmShadowMapVertical = null;
      this.vsmMaterialVertical.dispose();
      this.vsmMaterialVertical = null;
    }
    if (this.vsmShadowMapHorizontal !== null) {
      this.vsmShadowMapHorizontal.dispose();
      this.vsmShadowMapHorizontal = null;
      this.vsmMaterialHorizontal.dispose();
      this.vsmMaterialHorizontal = null;
    }
    super.dispose();
  }
  /**
   * The implementation performs the update of the shadow map if necessary.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  updateBefore(frame) {
    const { shadow: shadow3 } = this;
    let needsUpdate = shadow3.needsUpdate || shadow3.autoUpdate;
    if (needsUpdate) {
      if (this._cameraFrameId[frame.camera] === frame.frameId) {
        needsUpdate = false;
      }
      this._cameraFrameId[frame.camera] = frame.frameId;
    }
    if (needsUpdate) {
      this.updateShadow(frame);
      if (this.shadowMap.depthTexture.version === this._depthVersionCached) {
        shadow3.needsUpdate = false;
      }
    }
  }
};
var shadow = (light, shadow3) => nodeObject(new ShadowNode(light, shadow3));
var _clearColor$1 = new Color();
var cubeToUV = Fn(([pos, texelSizeY]) => {
  const v2 = pos.toVar();
  const absV = abs(v2);
  const scaleToCube = div(1, max$1(absV.x, max$1(absV.y, absV.z)));
  absV.mulAssign(scaleToCube);
  v2.mulAssign(scaleToCube.mul(texelSizeY.mul(2).oneMinus()));
  const planar = vec2(v2.xy).toVar();
  const almostATexel = texelSizeY.mul(1.5);
  const almostOne = almostATexel.oneMinus();
  If(absV.z.greaterThanEqual(almostOne), () => {
    If(v2.z.greaterThan(0), () => {
      planar.x.assign(sub(4, v2.x));
    });
  }).ElseIf(absV.x.greaterThanEqual(almostOne), () => {
    const signX = sign3(v2.x);
    planar.x.assign(v2.z.mul(signX).add(signX.mul(2)));
  }).ElseIf(absV.y.greaterThanEqual(almostOne), () => {
    const signY = sign3(v2.y);
    planar.x.assign(v2.x.add(signY.mul(2)).add(2));
    planar.y.assign(v2.z.mul(signY).sub(2));
  });
  return vec2(0.125, 0.25).mul(planar).add(vec2(0.375, 0.75)).flipY();
}).setLayout({
  name: "cubeToUV",
  type: "vec2",
  inputs: [
    { name: "pos", type: "vec3" },
    { name: "texelSizeY", type: "float" }
  ]
});
var BasicPointShadowFilter = Fn(({ depthTexture, bd3D, dp, texelSize }) => {
  return texture(depthTexture, cubeToUV(bd3D, texelSize.y)).compare(dp);
});
var PointShadowFilter = Fn(({ depthTexture, bd3D, dp, texelSize, shadow: shadow3 }) => {
  const radius = reference("radius", "float", shadow3).setGroup(renderGroup);
  const offset = vec2(-1, 1).mul(radius).mul(texelSize.y);
  return texture(depthTexture, cubeToUV(bd3D.add(offset.xyy), texelSize.y)).compare(dp).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yyy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xyx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yyx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D, texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xxy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yxy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xxx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yxx), texelSize.y)).compare(dp)).mul(1 / 9);
});
var pointShadowFilter = Fn(({ filterFn, depthTexture, shadowCoord, shadow: shadow3 }) => {
  const lightToPosition = shadowCoord.xyz.toVar();
  const lightToPositionLength = lightToPosition.length();
  const cameraNearLocal = uniform("float").setGroup(renderGroup).onRenderUpdate(() => shadow3.camera.near);
  const cameraFarLocal = uniform("float").setGroup(renderGroup).onRenderUpdate(() => shadow3.camera.far);
  const bias = reference("bias", "float", shadow3).setGroup(renderGroup);
  const mapSize = uniform(shadow3.mapSize).setGroup(renderGroup);
  const result = float(1).toVar();
  If(lightToPositionLength.sub(cameraFarLocal).lessThanEqual(0).and(lightToPositionLength.sub(cameraNearLocal).greaterThanEqual(0)), () => {
    const dp = lightToPositionLength.sub(cameraNearLocal).div(cameraFarLocal.sub(cameraNearLocal)).toVar();
    dp.addAssign(bias);
    const bd3D = lightToPosition.normalize();
    const texelSize = vec2(1).div(mapSize.mul(vec2(4, 2)));
    result.assign(filterFn({ depthTexture, bd3D, dp, texelSize, shadow: shadow3 }));
  });
  return result;
});
var _viewport = new Vector4();
var _viewportSize = new Vector2();
var _shadowMapSize = new Vector2();
var PointShadowNode = class extends ShadowNode {
  static get type() {
    return "PointShadowNode";
  }
  /**
   * Constructs a new point shadow node.
   *
   * @param {PointLight} light - The shadow casting point light.
   * @param {?PointLightShadow} [shadow=null] - An optional point light shadow.
   */
  constructor(light, shadow3 = null) {
    super(light, shadow3);
  }
  /**
   * Overwrites the default implementation to return point light shadow specific
   * filtering functions.
   *
   * @param {number} type - The shadow type.
   * @return {Function} The filtering function.
   */
  getShadowFilterFn(type) {
    return type === BasicShadowMap ? BasicPointShadowFilter : PointShadowFilter;
  }
  /**
   * Overwrites the default implementation so the unaltered shadow position is used.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @param {Node<vec3>} shadowPosition - A node representing the shadow position.
   * @return {Node<vec3>} The shadow coordinates.
   */
  setupShadowCoord(builder, shadowPosition) {
    return shadowPosition;
  }
  /**
   * Overwrites the default implementation to only use point light specific
   * shadow filter functions.
   *
   * @param {NodeBuilder} builder - A reference to the current node builder.
   * @param {Object} inputs - A configuration object that defines the shadow filtering.
   * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.
   * @param {Texture} inputs.shadowTexture - A reference to the shadow map's texture.
   * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.
   * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.
   * @param {LightShadow} inputs.shadow - The light shadow.
   * @return {Node<float>} The result node of the shadow filtering.
   */
  setupShadowFilter(builder, { filterFn, shadowTexture, depthTexture, shadowCoord, shadow: shadow3 }) {
    return pointShadowFilter({ filterFn, shadowTexture, depthTexture, shadowCoord, shadow: shadow3 });
  }
  /**
   * Overwrites the default implementation with point light specific
   * rendering code.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  renderShadow(frame) {
    const { shadow: shadow3, shadowMap, light } = this;
    const { renderer: renderer3, scene: scene3 } = frame;
    const shadowFrameExtents = shadow3.getFrameExtents();
    _shadowMapSize.copy(shadow3.mapSize);
    _shadowMapSize.multiply(shadowFrameExtents);
    shadowMap.setSize(_shadowMapSize.width, _shadowMapSize.height);
    _viewportSize.copy(shadow3.mapSize);
    const previousAutoClear = renderer3.autoClear;
    const previousClearColor = renderer3.getClearColor(_clearColor$1);
    const previousClearAlpha = renderer3.getClearAlpha();
    renderer3.autoClear = false;
    renderer3.setClearColor(shadow3.clearColor, shadow3.clearAlpha);
    renderer3.clear();
    const viewportCount = shadow3.getViewportCount();
    for (let vp = 0; vp < viewportCount; vp++) {
      const viewport3 = shadow3.getViewport(vp);
      const x2 = _viewportSize.x * viewport3.x;
      const y2 = _shadowMapSize.y - _viewportSize.y - _viewportSize.y * viewport3.y;
      _viewport.set(
        x2,
        y2,
        _viewportSize.x * viewport3.z,
        _viewportSize.y * viewport3.w
      );
      shadowMap.viewport.copy(_viewport);
      shadow3.updateMatrices(light, vp);
      renderer3.render(scene3, shadow3.camera);
    }
    renderer3.autoClear = previousAutoClear;
    renderer3.setClearColor(previousClearColor, previousClearAlpha);
  }
};
var pointShadow = (light, shadow3) => nodeObject(new PointShadowNode(light, shadow3));
var AnalyticLightNode = class extends LightingNode {
  static get type() {
    return "AnalyticLightNode";
  }
  /**
   * Constructs a new analytic light node.
   *
   * @param {?Light} [light=null] - The light source.
   */
  constructor(light = null) {
    super();
    this.light = light;
    this.color = new Color();
    this.colorNode = light && light.colorNode || uniform(this.color).setGroup(renderGroup);
    this.baseColorNode = null;
    this.shadowNode = null;
    this.shadowColorNode = null;
    this.isAnalyticLightNode = true;
    this.updateType = NodeUpdateType.FRAME;
  }
  getHash() {
    return this.light.uuid;
  }
  /**
   * Returns a node representing a direction vector which points from the current
   * position in view space to the light's position in view space.
   *
   * @param {NodeBuilder} builder - The builder object used for setting up the light.
   * @return {Node<vec3>} The light vector node.
   */
  getLightVector(builder) {
    return lightViewPosition(this.light).sub(builder.context.positionView || positionView);
  }
  /**
   * Sets up the direct lighting for the analytic light node.
   *
   * @abstract
   * @param {NodeBuilder} builder - The builder object used for setting up the light.
   * @return {Object|undefined} The direct light data (color and direction).
   */
  setupDirect() {
  }
  /**
   * Sets up the direct rect area lighting for the analytic light node.
   *
   * @abstract
   * @param {NodeBuilder} builder - The builder object used for setting up the light.
   * @return {Object|undefined} The direct rect area light data.
   */
  setupDirectRectArea() {
  }
  /**
   * Setups the shadow node for this light. The method exists so concrete light classes
   * can setup different types of shadow nodes.
   *
   * @return {ShadowNode} The created shadow node.
   */
  setupShadowNode() {
    return shadow(this.light);
  }
  /**
   * Setups the shadow for this light. This method is only executed if the light
   * cast shadows and the current build object receives shadows. It incorporates
   * shadows into the lighting computation.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setupShadow(builder) {
    const { renderer: renderer3 } = builder;
    if (renderer3.shadowMap.enabled === false)
      return;
    let shadowColorNode = this.shadowColorNode;
    if (shadowColorNode === null) {
      const customShadowNode = this.light.shadow.shadowNode;
      let shadowNode;
      if (customShadowNode !== void 0) {
        shadowNode = nodeObject(customShadowNode);
      } else {
        shadowNode = this.setupShadowNode();
      }
      this.shadowNode = shadowNode;
      this.shadowColorNode = shadowColorNode = this.colorNode.mul(shadowNode);
      this.baseColorNode = this.colorNode;
    }
    this.colorNode = shadowColorNode;
  }
  /**
   * Unlike most other nodes, lighting nodes do not return a output node in {@link Node#setup}.
   * The main purpose of lighting nodes is to configure the current {@link LightingModel} and/or
   * invocate the respective interface methods.
   *
   * @param {NodeBuilder} builder - The current node builder.
   */
  setup(builder) {
    this.colorNode = this.baseColorNode || this.colorNode;
    if (this.light.castShadow) {
      if (builder.object.receiveShadow) {
        this.setupShadow(builder);
      }
    } else if (this.shadowNode !== null) {
      this.shadowNode.dispose();
      this.shadowNode = null;
      this.shadowColorNode = null;
    }
    const directLightData = this.setupDirect(builder);
    const directRectAreaLightData = this.setupDirectRectArea(builder);
    if (directLightData) {
      builder.lightsNode.setupDirectLight(builder, this, directLightData);
    }
    if (directRectAreaLightData) {
      builder.lightsNode.setupDirectRectAreaLight(builder, this, directRectAreaLightData);
    }
  }
  /**
   * The update method is used to update light uniforms per frame.
   * Potentially overwritten in concrete light nodes to update light
   * specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update() {
    const { light } = this;
    this.color.copy(light.color).multiplyScalar(light.intensity);
  }
};
var getDistanceAttenuation = Fn(({ lightDistance, cutoffDistance, decayExponent }) => {
  const distanceFalloff = lightDistance.pow(decayExponent).max(0.01).reciprocal();
  return cutoffDistance.greaterThan(0).select(
    distanceFalloff.mul(lightDistance.div(cutoffDistance).pow4().oneMinus().clamp().pow2()),
    distanceFalloff
  );
});
var directPointLight = ({ color: color4, lightVector, cutoffDistance, decayExponent }) => {
  const lightDirection = lightVector.normalize();
  const lightDistance = lightVector.length();
  const attenuation = getDistanceAttenuation({
    lightDistance,
    cutoffDistance,
    decayExponent
  });
  const lightColor = color4.mul(attenuation);
  return { lightDirection, lightColor };
};
var PointLightNode = class extends AnalyticLightNode {
  static get type() {
    return "PointLightNode";
  }
  /**
   * Constructs a new point light node.
   *
   * @param {?PointLight} [light=null] - The point light source.
   */
  constructor(light = null) {
    super(light);
    this.cutoffDistanceNode = uniform(0).setGroup(renderGroup);
    this.decayExponentNode = uniform(2).setGroup(renderGroup);
  }
  /**
   * Overwritten to updated point light specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update(frame) {
    const { light } = this;
    super.update(frame);
    this.cutoffDistanceNode.value = light.distance;
    this.decayExponentNode.value = light.decay;
  }
  /**
   * Overwritten to setup point light specific shadow.
   *
   * @return {PointShadowNode}
   */
  setupShadowNode() {
    return pointShadow(this.light);
  }
  setupDirect(builder) {
    return directPointLight({
      color: this.colorNode,
      lightVector: this.getLightVector(builder),
      cutoffDistance: this.cutoffDistanceNode,
      decayExponent: this.decayExponentNode
    });
  }
};
var checker = Fn(([coord = uv$1()]) => {
  const uv3 = coord.mul(2);
  const cx = uv3.x.floor();
  const cy = uv3.y.floor();
  const result = cx.add(cy).mod(2);
  return result.sign();
});
var shapeCircle = Fn(([coord = uv$1()], { renderer: renderer3, material }) => {
  const len2 = lengthSq(coord.mul(2).sub(1));
  let alpha;
  if (material.alphaToCoverage && renderer3.samples > 1) {
    const dlen = float(len2.fwidth()).toVar();
    alpha = smoothstep(dlen.oneMinus(), dlen.add(1), len2).oneMinus();
  } else {
    alpha = select(len2.greaterThan(1), 0, 1);
  }
  return alpha;
});
var mx_select = Fn(([b_immutable, t_immutable, f_immutable]) => {
  const f2 = float(f_immutable).toVar();
  const t2 = float(t_immutable).toVar();
  const b = bool(b_immutable).toVar();
  return select(b, t2, f2);
}).setLayout({
  name: "mx_select",
  type: "float",
  inputs: [
    { name: "b", type: "bool" },
    { name: "t", type: "float" },
    { name: "f", type: "float" }
  ]
});
var mx_negate_if = Fn(([val_immutable, b_immutable]) => {
  const b = bool(b_immutable).toVar();
  const val = float(val_immutable).toVar();
  return select(b, val.negate(), val);
}).setLayout({
  name: "mx_negate_if",
  type: "float",
  inputs: [
    { name: "val", type: "float" },
    { name: "b", type: "bool" }
  ]
});
var mx_floor = Fn(([x_immutable]) => {
  const x2 = float(x_immutable).toVar();
  return int(floor(x2));
}).setLayout({
  name: "mx_floor",
  type: "int",
  inputs: [
    { name: "x", type: "float" }
  ]
});
var mx_floorfrac = Fn(([x_immutable, i2]) => {
  const x2 = float(x_immutable).toVar();
  i2.assign(mx_floor(x2));
  return x2.sub(float(i2));
});
var mx_bilerp_0 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable]) => {
  const t2 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v3 = float(v3_immutable).toVar();
  const v2 = float(v2_immutable).toVar();
  const v1 = float(v1_immutable).toVar();
  const v0 = float(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  return sub(1, t2).mul(v0.mul(s1).add(v1.mul(s2))).add(t2.mul(v2.mul(s1).add(v3.mul(s2))));
}).setLayout({
  name: "mx_bilerp_0",
  type: "float",
  inputs: [
    { name: "v0", type: "float" },
    { name: "v1", type: "float" },
    { name: "v2", type: "float" },
    { name: "v3", type: "float" },
    { name: "s", type: "float" },
    { name: "t", type: "float" }
  ]
});
var mx_bilerp_1 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable]) => {
  const t2 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v3 = vec3(v3_immutable).toVar();
  const v2 = vec3(v2_immutable).toVar();
  const v1 = vec3(v1_immutable).toVar();
  const v0 = vec3(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  return sub(1, t2).mul(v0.mul(s1).add(v1.mul(s2))).add(t2.mul(v2.mul(s1).add(v3.mul(s2))));
}).setLayout({
  name: "mx_bilerp_1",
  type: "vec3",
  inputs: [
    { name: "v0", type: "vec3" },
    { name: "v1", type: "vec3" },
    { name: "v2", type: "vec3" },
    { name: "v3", type: "vec3" },
    { name: "s", type: "float" },
    { name: "t", type: "float" }
  ]
});
var mx_bilerp = overloadingFn([mx_bilerp_0, mx_bilerp_1]);
var mx_trilerp_0 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable]) => {
  const r2 = float(r_immutable).toVar();
  const t2 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v7 = float(v7_immutable).toVar();
  const v6 = float(v6_immutable).toVar();
  const v5 = float(v5_immutable).toVar();
  const v4 = float(v4_immutable).toVar();
  const v3 = float(v3_immutable).toVar();
  const v2 = float(v2_immutable).toVar();
  const v1 = float(v1_immutable).toVar();
  const v0 = float(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  const t1 = float(sub(1, t2)).toVar();
  const r1 = float(sub(1, r2)).toVar();
  return r1.mul(t1.mul(v0.mul(s1).add(v1.mul(s2))).add(t2.mul(v2.mul(s1).add(v3.mul(s2))))).add(r2.mul(t1.mul(v4.mul(s1).add(v5.mul(s2))).add(t2.mul(v6.mul(s1).add(v7.mul(s2))))));
}).setLayout({
  name: "mx_trilerp_0",
  type: "float",
  inputs: [
    { name: "v0", type: "float" },
    { name: "v1", type: "float" },
    { name: "v2", type: "float" },
    { name: "v3", type: "float" },
    { name: "v4", type: "float" },
    { name: "v5", type: "float" },
    { name: "v6", type: "float" },
    { name: "v7", type: "float" },
    { name: "s", type: "float" },
    { name: "t", type: "float" },
    { name: "r", type: "float" }
  ]
});
var mx_trilerp_1 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable]) => {
  const r2 = float(r_immutable).toVar();
  const t2 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v7 = vec3(v7_immutable).toVar();
  const v6 = vec3(v6_immutable).toVar();
  const v5 = vec3(v5_immutable).toVar();
  const v4 = vec3(v4_immutable).toVar();
  const v3 = vec3(v3_immutable).toVar();
  const v2 = vec3(v2_immutable).toVar();
  const v1 = vec3(v1_immutable).toVar();
  const v0 = vec3(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  const t1 = float(sub(1, t2)).toVar();
  const r1 = float(sub(1, r2)).toVar();
  return r1.mul(t1.mul(v0.mul(s1).add(v1.mul(s2))).add(t2.mul(v2.mul(s1).add(v3.mul(s2))))).add(r2.mul(t1.mul(v4.mul(s1).add(v5.mul(s2))).add(t2.mul(v6.mul(s1).add(v7.mul(s2))))));
}).setLayout({
  name: "mx_trilerp_1",
  type: "vec3",
  inputs: [
    { name: "v0", type: "vec3" },
    { name: "v1", type: "vec3" },
    { name: "v2", type: "vec3" },
    { name: "v3", type: "vec3" },
    { name: "v4", type: "vec3" },
    { name: "v5", type: "vec3" },
    { name: "v6", type: "vec3" },
    { name: "v7", type: "vec3" },
    { name: "s", type: "float" },
    { name: "t", type: "float" },
    { name: "r", type: "float" }
  ]
});
var mx_trilerp = overloadingFn([mx_trilerp_0, mx_trilerp_1]);
var mx_gradient_float_0 = Fn(([hash_immutable, x_immutable, y_immutable]) => {
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash3 = uint(hash_immutable).toVar();
  const h2 = uint(hash3.bitAnd(uint(7))).toVar();
  const u2 = float(mx_select(h2.lessThan(uint(4)), x2, y2)).toVar();
  const v2 = float(mul(2, mx_select(h2.lessThan(uint(4)), y2, x2))).toVar();
  return mx_negate_if(u2, bool(h2.bitAnd(uint(1)))).add(mx_negate_if(v2, bool(h2.bitAnd(uint(2)))));
}).setLayout({
  name: "mx_gradient_float_0",
  type: "float",
  inputs: [
    { name: "hash", type: "uint" },
    { name: "x", type: "float" },
    { name: "y", type: "float" }
  ]
});
var mx_gradient_float_1 = Fn(([hash_immutable, x_immutable, y_immutable, z_immutable]) => {
  const z2 = float(z_immutable).toVar();
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash3 = uint(hash_immutable).toVar();
  const h2 = uint(hash3.bitAnd(uint(15))).toVar();
  const u2 = float(mx_select(h2.lessThan(uint(8)), x2, y2)).toVar();
  const v2 = float(mx_select(h2.lessThan(uint(4)), y2, mx_select(h2.equal(uint(12)).or(h2.equal(uint(14))), x2, z2))).toVar();
  return mx_negate_if(u2, bool(h2.bitAnd(uint(1)))).add(mx_negate_if(v2, bool(h2.bitAnd(uint(2)))));
}).setLayout({
  name: "mx_gradient_float_1",
  type: "float",
  inputs: [
    { name: "hash", type: "uint" },
    { name: "x", type: "float" },
    { name: "y", type: "float" },
    { name: "z", type: "float" }
  ]
});
var mx_gradient_float = overloadingFn([mx_gradient_float_0, mx_gradient_float_1]);
var mx_gradient_vec3_0 = Fn(([hash_immutable, x_immutable, y_immutable]) => {
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash3 = uvec3(hash_immutable).toVar();
  return vec3(mx_gradient_float(hash3.x, x2, y2), mx_gradient_float(hash3.y, x2, y2), mx_gradient_float(hash3.z, x2, y2));
}).setLayout({
  name: "mx_gradient_vec3_0",
  type: "vec3",
  inputs: [
    { name: "hash", type: "uvec3" },
    { name: "x", type: "float" },
    { name: "y", type: "float" }
  ]
});
var mx_gradient_vec3_1 = Fn(([hash_immutable, x_immutable, y_immutable, z_immutable]) => {
  const z2 = float(z_immutable).toVar();
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash3 = uvec3(hash_immutable).toVar();
  return vec3(mx_gradient_float(hash3.x, x2, y2, z2), mx_gradient_float(hash3.y, x2, y2, z2), mx_gradient_float(hash3.z, x2, y2, z2));
}).setLayout({
  name: "mx_gradient_vec3_1",
  type: "vec3",
  inputs: [
    { name: "hash", type: "uvec3" },
    { name: "x", type: "float" },
    { name: "y", type: "float" },
    { name: "z", type: "float" }
  ]
});
var mx_gradient_vec3 = overloadingFn([mx_gradient_vec3_0, mx_gradient_vec3_1]);
var mx_gradient_scale2d_0 = Fn(([v_immutable]) => {
  const v2 = float(v_immutable).toVar();
  return mul(0.6616, v2);
}).setLayout({
  name: "mx_gradient_scale2d_0",
  type: "float",
  inputs: [
    { name: "v", type: "float" }
  ]
});
var mx_gradient_scale3d_0 = Fn(([v_immutable]) => {
  const v2 = float(v_immutable).toVar();
  return mul(0.982, v2);
}).setLayout({
  name: "mx_gradient_scale3d_0",
  type: "float",
  inputs: [
    { name: "v", type: "float" }
  ]
});
var mx_gradient_scale2d_1 = Fn(([v_immutable]) => {
  const v2 = vec3(v_immutable).toVar();
  return mul(0.6616, v2);
}).setLayout({
  name: "mx_gradient_scale2d_1",
  type: "vec3",
  inputs: [
    { name: "v", type: "vec3" }
  ]
});
var mx_gradient_scale2d = overloadingFn([mx_gradient_scale2d_0, mx_gradient_scale2d_1]);
var mx_gradient_scale3d_1 = Fn(([v_immutable]) => {
  const v2 = vec3(v_immutable).toVar();
  return mul(0.982, v2);
}).setLayout({
  name: "mx_gradient_scale3d_1",
  type: "vec3",
  inputs: [
    { name: "v", type: "vec3" }
  ]
});
var mx_gradient_scale3d = overloadingFn([mx_gradient_scale3d_0, mx_gradient_scale3d_1]);
var mx_rotl32 = Fn(([x_immutable, k_immutable]) => {
  const k2 = int(k_immutable).toVar();
  const x2 = uint(x_immutable).toVar();
  return x2.shiftLeft(k2).bitOr(x2.shiftRight(int(32).sub(k2)));
}).setLayout({
  name: "mx_rotl32",
  type: "uint",
  inputs: [
    { name: "x", type: "uint" },
    { name: "k", type: "int" }
  ]
});
var mx_bjmix = Fn(([a2, b, c2]) => {
  a2.subAssign(c2);
  a2.bitXorAssign(mx_rotl32(c2, int(4)));
  c2.addAssign(b);
  b.subAssign(a2);
  b.bitXorAssign(mx_rotl32(a2, int(6)));
  a2.addAssign(c2);
  c2.subAssign(b);
  c2.bitXorAssign(mx_rotl32(b, int(8)));
  b.addAssign(a2);
  a2.subAssign(c2);
  a2.bitXorAssign(mx_rotl32(c2, int(16)));
  c2.addAssign(b);
  b.subAssign(a2);
  b.bitXorAssign(mx_rotl32(a2, int(19)));
  a2.addAssign(c2);
  c2.subAssign(b);
  c2.bitXorAssign(mx_rotl32(b, int(4)));
  b.addAssign(a2);
});
var mx_bjfinal = Fn(([a_immutable, b_immutable, c_immutable]) => {
  const c2 = uint(c_immutable).toVar();
  const b = uint(b_immutable).toVar();
  const a2 = uint(a_immutable).toVar();
  c2.bitXorAssign(b);
  c2.subAssign(mx_rotl32(b, int(14)));
  a2.bitXorAssign(c2);
  a2.subAssign(mx_rotl32(c2, int(11)));
  b.bitXorAssign(a2);
  b.subAssign(mx_rotl32(a2, int(25)));
  c2.bitXorAssign(b);
  c2.subAssign(mx_rotl32(b, int(16)));
  a2.bitXorAssign(c2);
  a2.subAssign(mx_rotl32(c2, int(4)));
  b.bitXorAssign(a2);
  b.subAssign(mx_rotl32(a2, int(14)));
  c2.bitXorAssign(b);
  c2.subAssign(mx_rotl32(b, int(24)));
  return c2;
}).setLayout({
  name: "mx_bjfinal",
  type: "uint",
  inputs: [
    { name: "a", type: "uint" },
    { name: "b", type: "uint" },
    { name: "c", type: "uint" }
  ]
});
var mx_bits_to_01 = Fn(([bits_immutable]) => {
  const bits = uint(bits_immutable).toVar();
  return float(bits).div(float(uint(int(4294967295))));
}).setLayout({
  name: "mx_bits_to_01",
  type: "float",
  inputs: [
    { name: "bits", type: "uint" }
  ]
});
var mx_fade = Fn(([t_immutable]) => {
  const t2 = float(t_immutable).toVar();
  return t2.mul(t2).mul(t2).mul(t2.mul(t2.mul(6).sub(15)).add(10));
}).setLayout({
  name: "mx_fade",
  type: "float",
  inputs: [
    { name: "t", type: "float" }
  ]
});
var mx_hash_int_0 = Fn(([x_immutable]) => {
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(1)).toVar();
  const seed = uint(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13))).toVar();
  return mx_bjfinal(seed.add(uint(x2)), seed, seed);
}).setLayout({
  name: "mx_hash_int_0",
  type: "uint",
  inputs: [
    { name: "x", type: "int" }
  ]
});
var mx_hash_int_1 = Fn(([x_immutable, y_immutable]) => {
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(2)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c2 = uint().toVar();
  a2.assign(b.assign(c2.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  return mx_bjfinal(a2, b, c2);
}).setLayout({
  name: "mx_hash_int_1",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" }
  ]
});
var mx_hash_int_2 = Fn(([x_immutable, y_immutable, z_immutable]) => {
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(3)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c2 = uint().toVar();
  a2.assign(b.assign(c2.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  c2.addAssign(uint(z2));
  return mx_bjfinal(a2, b, c2);
}).setLayout({
  name: "mx_hash_int_2",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" }
  ]
});
var mx_hash_int_3 = Fn(([x_immutable, y_immutable, z_immutable, xx_immutable]) => {
  const xx = int(xx_immutable).toVar();
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(4)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c2 = uint().toVar();
  a2.assign(b.assign(c2.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  c2.addAssign(uint(z2));
  mx_bjmix(a2, b, c2);
  a2.addAssign(uint(xx));
  return mx_bjfinal(a2, b, c2);
}).setLayout({
  name: "mx_hash_int_3",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" },
    { name: "xx", type: "int" }
  ]
});
var mx_hash_int_4 = Fn(([x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable]) => {
  const yy = int(yy_immutable).toVar();
  const xx = int(xx_immutable).toVar();
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(5)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c2 = uint().toVar();
  a2.assign(b.assign(c2.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  c2.addAssign(uint(z2));
  mx_bjmix(a2, b, c2);
  a2.addAssign(uint(xx));
  b.addAssign(uint(yy));
  return mx_bjfinal(a2, b, c2);
}).setLayout({
  name: "mx_hash_int_4",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" },
    { name: "xx", type: "int" },
    { name: "yy", type: "int" }
  ]
});
var mx_hash_int = overloadingFn([mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4]);
var mx_hash_vec3_0 = Fn(([x_immutable, y_immutable]) => {
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const h2 = uint(mx_hash_int(x2, y2)).toVar();
  const result = uvec3().toVar();
  result.x.assign(h2.bitAnd(int(255)));
  result.y.assign(h2.shiftRight(int(8)).bitAnd(int(255)));
  result.z.assign(h2.shiftRight(int(16)).bitAnd(int(255)));
  return result;
}).setLayout({
  name: "mx_hash_vec3_0",
  type: "uvec3",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" }
  ]
});
var mx_hash_vec3_1 = Fn(([x_immutable, y_immutable, z_immutable]) => {
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const h2 = uint(mx_hash_int(x2, y2, z2)).toVar();
  const result = uvec3().toVar();
  result.x.assign(h2.bitAnd(int(255)));
  result.y.assign(h2.shiftRight(int(8)).bitAnd(int(255)));
  result.z.assign(h2.shiftRight(int(16)).bitAnd(int(255)));
  return result;
}).setLayout({
  name: "mx_hash_vec3_1",
  type: "uvec3",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" }
  ]
});
var mx_hash_vec3 = overloadingFn([mx_hash_vec3_0, mx_hash_vec3_1]);
var mx_perlin_noise_float_0 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const u2 = float(mx_fade(fx)).toVar();
  const v2 = float(mx_fade(fy)).toVar();
  const result = float(mx_bilerp(mx_gradient_float(mx_hash_int(X, Y), fx, fy), mx_gradient_float(mx_hash_int(X.add(int(1)), Y), fx.sub(1), fy), mx_gradient_float(mx_hash_int(X, Y.add(int(1))), fx, fy.sub(1)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1))), fx.sub(1), fy.sub(1)), u2, v2)).toVar();
  return mx_gradient_scale2d(result);
}).setLayout({
  name: "mx_perlin_noise_float_0",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_perlin_noise_float_1 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const fz = float(mx_floorfrac(p2.z, Z)).toVar();
  const u2 = float(mx_fade(fx)).toVar();
  const v2 = float(mx_fade(fy)).toVar();
  const w4 = float(mx_fade(fz)).toVar();
  const result = float(mx_trilerp(mx_gradient_float(mx_hash_int(X, Y, Z), fx, fy, fz), mx_gradient_float(mx_hash_int(X.add(int(1)), Y, Z), fx.sub(1), fy, fz), mx_gradient_float(mx_hash_int(X, Y.add(int(1)), Z), fx, fy.sub(1), fz), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1)), Z), fx.sub(1), fy.sub(1), fz), mx_gradient_float(mx_hash_int(X, Y, Z.add(int(1))), fx, fy, fz.sub(1)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y, Z.add(int(1))), fx.sub(1), fy, fz.sub(1)), mx_gradient_float(mx_hash_int(X, Y.add(int(1)), Z.add(int(1))), fx, fy.sub(1), fz.sub(1)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1)), Z.add(int(1))), fx.sub(1), fy.sub(1), fz.sub(1)), u2, v2, w4)).toVar();
  return mx_gradient_scale3d(result);
}).setLayout({
  name: "mx_perlin_noise_float_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_perlin_noise_float = overloadingFn([mx_perlin_noise_float_0, mx_perlin_noise_float_1]);
var mx_perlin_noise_vec3_0 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const u2 = float(mx_fade(fx)).toVar();
  const v2 = float(mx_fade(fy)).toVar();
  const result = vec3(mx_bilerp(mx_gradient_vec3(mx_hash_vec3(X, Y), fx, fy), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y), fx.sub(1), fy), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1))), fx, fy.sub(1)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1))), fx.sub(1), fy.sub(1)), u2, v2)).toVar();
  return mx_gradient_scale2d(result);
}).setLayout({
  name: "mx_perlin_noise_vec3_0",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_perlin_noise_vec3_1 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const fz = float(mx_floorfrac(p2.z, Z)).toVar();
  const u2 = float(mx_fade(fx)).toVar();
  const v2 = float(mx_fade(fy)).toVar();
  const w4 = float(mx_fade(fz)).toVar();
  const result = vec3(mx_trilerp(mx_gradient_vec3(mx_hash_vec3(X, Y, Z), fx, fy, fz), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y, Z), fx.sub(1), fy, fz), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1)), Z), fx, fy.sub(1), fz), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1)), Z), fx.sub(1), fy.sub(1), fz), mx_gradient_vec3(mx_hash_vec3(X, Y, Z.add(int(1))), fx, fy, fz.sub(1)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y, Z.add(int(1))), fx.sub(1), fy, fz.sub(1)), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1)), Z.add(int(1))), fx, fy.sub(1), fz.sub(1)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1)), Z.add(int(1))), fx.sub(1), fy.sub(1), fz.sub(1)), u2, v2, w4)).toVar();
  return mx_gradient_scale3d(result);
}).setLayout({
  name: "mx_perlin_noise_vec3_1",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_perlin_noise_vec3 = overloadingFn([mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1]);
var mx_cell_noise_float_0 = Fn(([p_immutable]) => {
  const p2 = float(p_immutable).toVar();
  const ix = int(mx_floor(p2)).toVar();
  return mx_bits_to_01(mx_hash_int(ix));
}).setLayout({
  name: "mx_cell_noise_float_0",
  type: "float",
  inputs: [
    { name: "p", type: "float" }
  ]
});
var mx_cell_noise_float_1 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  return mx_bits_to_01(mx_hash_int(ix, iy));
}).setLayout({
  name: "mx_cell_noise_float_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_cell_noise_float_2 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  return mx_bits_to_01(mx_hash_int(ix, iy, iz));
}).setLayout({
  name: "mx_cell_noise_float_2",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_cell_noise_float_3 = Fn(([p_immutable]) => {
  const p2 = vec4(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  const iw = int(mx_floor(p2.w)).toVar();
  return mx_bits_to_01(mx_hash_int(ix, iy, iz, iw));
}).setLayout({
  name: "mx_cell_noise_float_3",
  type: "float",
  inputs: [
    { name: "p", type: "vec4" }
  ]
});
var mx_cell_noise_float$1 = overloadingFn([mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3]);
var mx_cell_noise_vec3_0 = Fn(([p_immutable]) => {
  const p2 = float(p_immutable).toVar();
  const ix = int(mx_floor(p2)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, int(0))), mx_bits_to_01(mx_hash_int(ix, int(1))), mx_bits_to_01(mx_hash_int(ix, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_0",
  type: "vec3",
  inputs: [
    { name: "p", type: "float" }
  ]
});
var mx_cell_noise_vec3_1 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, iy, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_1",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_cell_noise_vec3_2 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, iy, iz, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, iz, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, iz, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_2",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_cell_noise_vec3_3 = Fn(([p_immutable]) => {
  const p2 = vec4(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  const iw = int(mx_floor(p2.w)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_3",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec4" }
  ]
});
var mx_cell_noise_vec3 = overloadingFn([mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3]);
var mx_fractal_noise_float$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const result = float(0).toVar();
  const amplitude = float(1).toVar();
  Loop(octaves, () => {
    result.addAssign(amplitude.mul(mx_perlin_noise_float(p2)));
    amplitude.mulAssign(diminish);
    p2.mulAssign(lacunarity);
  });
  return result;
}).setLayout({
  name: "mx_fractal_noise_float",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_fractal_noise_vec3$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const result = vec3(0).toVar();
  const amplitude = float(1).toVar();
  Loop(octaves, () => {
    result.addAssign(amplitude.mul(mx_perlin_noise_vec3(p2)));
    amplitude.mulAssign(diminish);
    p2.mulAssign(lacunarity);
  });
  return result;
}).setLayout({
  name: "mx_fractal_noise_vec3",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_fractal_noise_vec2$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  return vec2(mx_fractal_noise_float$1(p2, octaves, lacunarity, diminish), mx_fractal_noise_float$1(p2.add(vec3(int(19), int(193), int(17))), octaves, lacunarity, diminish));
}).setLayout({
  name: "mx_fractal_noise_vec2",
  type: "vec2",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_fractal_noise_vec4$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const c2 = vec3(mx_fractal_noise_vec3$1(p2, octaves, lacunarity, diminish)).toVar();
  const f2 = float(mx_fractal_noise_float$1(p2.add(vec3(int(19), int(193), int(17))), octaves, lacunarity, diminish)).toVar();
  return vec4(c2, f2);
}).setLayout({
  name: "mx_fractal_noise_vec4",
  type: "vec4",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_worley_distance_0 = Fn(([p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const yoff = int(yoff_immutable).toVar();
  const xoff = int(xoff_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const tmp = vec3(mx_cell_noise_vec3(vec2(x2.add(xoff), y2.add(yoff)))).toVar();
  const off = vec2(tmp.x, tmp.y).toVar();
  off.subAssign(0.5);
  off.mulAssign(jitter);
  off.addAssign(0.5);
  const cellpos = vec2(vec2(float(x2), float(y2)).add(off)).toVar();
  const diff = vec2(cellpos.sub(p2)).toVar();
  If(metric.equal(int(2)), () => {
    return abs(diff.x).add(abs(diff.y));
  });
  If(metric.equal(int(3)), () => {
    return max$1(abs(diff.x), abs(diff.y));
  });
  return dot(diff, diff);
}).setLayout({
  name: "mx_worley_distance_0",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "xoff", type: "int" },
    { name: "yoff", type: "int" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_distance_1 = Fn(([p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const zoff = int(zoff_immutable).toVar();
  const yoff = int(yoff_immutable).toVar();
  const xoff = int(xoff_immutable).toVar();
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const off = vec3(mx_cell_noise_vec3(vec3(x2.add(xoff), y2.add(yoff), z2.add(zoff)))).toVar();
  off.subAssign(0.5);
  off.mulAssign(jitter);
  off.addAssign(0.5);
  const cellpos = vec3(vec3(float(x2), float(y2), float(z2)).add(off)).toVar();
  const diff = vec3(cellpos.sub(p2)).toVar();
  If(metric.equal(int(2)), () => {
    return abs(diff.x).add(abs(diff.y)).add(abs(diff.z));
  });
  If(metric.equal(int(3)), () => {
    return max$1(abs(diff.x), abs(diff.y), abs(diff.z));
  });
  return dot(diff, diff);
}).setLayout({
  name: "mx_worley_distance_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" },
    { name: "xoff", type: "int" },
    { name: "yoff", type: "int" },
    { name: "zoff", type: "int" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_distance = overloadingFn([mx_worley_distance_0, mx_worley_distance_1]);
var mx_worley_noise_float_0 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const localpos = vec2(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y)).toVar();
  const sqdist = float(1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      const dist = float(mx_worley_distance(localpos, x2, y2, X, Y, jitter, metric)).toVar();
      sqdist.assign(min$1(sqdist, dist));
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt2(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_float_0",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec2_0 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const localpos = vec2(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y)).toVar();
  const sqdist = vec2(1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      const dist = float(mx_worley_distance(localpos, x2, y2, X, Y, jitter, metric)).toVar();
      If(dist.lessThan(sqdist.x), () => {
        sqdist.y.assign(sqdist.x);
        sqdist.x.assign(dist);
      }).ElseIf(dist.lessThan(sqdist.y), () => {
        sqdist.y.assign(dist);
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt2(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec2_0",
  type: "vec2",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec3_0 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const localpos = vec2(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y)).toVar();
  const sqdist = vec3(1e6, 1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      const dist = float(mx_worley_distance(localpos, x2, y2, X, Y, jitter, metric)).toVar();
      If(dist.lessThan(sqdist.x), () => {
        sqdist.z.assign(sqdist.y);
        sqdist.y.assign(sqdist.x);
        sqdist.x.assign(dist);
      }).ElseIf(dist.lessThan(sqdist.y), () => {
        sqdist.z.assign(sqdist.y);
        sqdist.y.assign(dist);
      }).ElseIf(dist.lessThan(sqdist.z), () => {
        sqdist.z.assign(dist);
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt2(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec3_0",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_float_1 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const localpos = vec3(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y), mx_floorfrac(p2.z, Z)).toVar();
  const sqdist = float(1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      Loop({ start: -1, end: int(1), name: "z", condition: "<=" }, ({ z: z2 }) => {
        const dist = float(mx_worley_distance(localpos, x2, y2, z2, X, Y, Z, jitter, metric)).toVar();
        sqdist.assign(min$1(sqdist, dist));
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt2(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_float_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_float$1 = overloadingFn([mx_worley_noise_float_0, mx_worley_noise_float_1]);
var mx_worley_noise_vec2_1 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const localpos = vec3(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y), mx_floorfrac(p2.z, Z)).toVar();
  const sqdist = vec2(1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      Loop({ start: -1, end: int(1), name: "z", condition: "<=" }, ({ z: z2 }) => {
        const dist = float(mx_worley_distance(localpos, x2, y2, z2, X, Y, Z, jitter, metric)).toVar();
        If(dist.lessThan(sqdist.x), () => {
          sqdist.y.assign(sqdist.x);
          sqdist.x.assign(dist);
        }).ElseIf(dist.lessThan(sqdist.y), () => {
          sqdist.y.assign(dist);
        });
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt2(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec2_1",
  type: "vec2",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec2$1 = overloadingFn([mx_worley_noise_vec2_0, mx_worley_noise_vec2_1]);
var mx_worley_noise_vec3_1 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const localpos = vec3(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y), mx_floorfrac(p2.z, Z)).toVar();
  const sqdist = vec3(1e6, 1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      Loop({ start: -1, end: int(1), name: "z", condition: "<=" }, ({ z: z2 }) => {
        const dist = float(mx_worley_distance(localpos, x2, y2, z2, X, Y, Z, jitter, metric)).toVar();
        If(dist.lessThan(sqdist.x), () => {
          sqdist.z.assign(sqdist.y);
          sqdist.y.assign(sqdist.x);
          sqdist.x.assign(dist);
        }).ElseIf(dist.lessThan(sqdist.y), () => {
          sqdist.z.assign(sqdist.y);
          sqdist.y.assign(dist);
        }).ElseIf(dist.lessThan(sqdist.z), () => {
          sqdist.z.assign(dist);
        });
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt2(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec3_1",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec3$1 = overloadingFn([mx_worley_noise_vec3_0, mx_worley_noise_vec3_1]);
var mx_unifiednoise2d$1 = Fn(([
  noiseType_immutable,
  texcoord_immutable,
  freq_immutable,
  offset_immutable,
  jitter_immutable,
  outmin_immutable,
  outmax_immutable,
  clampoutput_immutable,
  octaves_immutable,
  lacunarity_immutable,
  diminish_immutable
]) => {
  const noiseType = int(noiseType_immutable).toVar();
  const texcoord = vec2(texcoord_immutable).toVar();
  const freq = vec2(freq_immutable).toVar();
  const offset = vec2(offset_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const outmin = float(outmin_immutable).toVar();
  const outmax = float(outmax_immutable).toVar();
  const clampoutput = bool(clampoutput_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const diminish = float(diminish_immutable).toVar();
  const p2 = texcoord.mul(freq).add(offset);
  const result = float(0).toVar();
  If(noiseType.equal(int(0)), () => {
    result.assign(mx_perlin_noise_vec3(p2));
  });
  If(noiseType.equal(int(1)), () => {
    result.assign(mx_cell_noise_vec3(p2));
  });
  If(noiseType.equal(int(2)), () => {
    result.assign(mx_worley_noise_vec3$1(p2, jitter, int(0)));
  });
  If(noiseType.equal(int(3)), () => {
    result.assign(mx_fractal_noise_vec3$1(vec3(p2, 0), octaves, lacunarity, diminish));
  });
  result.assign(result.mul(outmax.sub(outmin)).add(outmin));
  If(clampoutput, () => {
    result.assign(clamp(result, outmin, outmax));
  });
  return result;
}).setLayout({
  name: "mx_unifiednoise2d",
  type: "float",
  inputs: [
    { name: "noiseType", type: "int" },
    { name: "texcoord", type: "vec2" },
    { name: "freq", type: "vec2" },
    { name: "offset", type: "vec2" },
    { name: "jitter", type: "float" },
    { name: "outmin", type: "float" },
    { name: "outmax", type: "float" },
    { name: "clampoutput", type: "bool" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_unifiednoise3d$1 = Fn(([
  noiseType_immutable,
  position_immutable,
  freq_immutable,
  offset_immutable,
  jitter_immutable,
  outmin_immutable,
  outmax_immutable,
  clampoutput_immutable,
  octaves_immutable,
  lacunarity_immutable,
  diminish_immutable
]) => {
  const noiseType = int(noiseType_immutable).toVar();
  const position = vec3(position_immutable).toVar();
  const freq = vec3(freq_immutable).toVar();
  const offset = vec3(offset_immutable).toVar();
  const jitter = float(jitter_immutable).toVar();
  const outmin = float(outmin_immutable).toVar();
  const outmax = float(outmax_immutable).toVar();
  const clampoutput = bool(clampoutput_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const diminish = float(diminish_immutable).toVar();
  const p2 = position.mul(freq).add(offset);
  const result = float(0).toVar();
  If(noiseType.equal(int(0)), () => {
    result.assign(mx_perlin_noise_vec3(p2));
  });
  If(noiseType.equal(int(1)), () => {
    result.assign(mx_cell_noise_vec3(p2));
  });
  If(noiseType.equal(int(2)), () => {
    result.assign(mx_worley_noise_vec3$1(p2, jitter, int(0)));
  });
  If(noiseType.equal(int(3)), () => {
    result.assign(mx_fractal_noise_vec3$1(p2, octaves, lacunarity, diminish));
  });
  result.assign(result.mul(outmax.sub(outmin)).add(outmin));
  If(clampoutput, () => {
    result.assign(clamp(result, outmin, outmax));
  });
  return result;
}).setLayout({
  name: "mx_unifiednoise3d",
  type: "float",
  inputs: [
    { name: "noiseType", type: "int" },
    { name: "position", type: "vec3" },
    { name: "freq", type: "vec3" },
    { name: "offset", type: "vec3" },
    { name: "jitter", type: "float" },
    { name: "outmin", type: "float" },
    { name: "outmax", type: "float" },
    { name: "clampoutput", type: "bool" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_hsvtorgb = Fn(([hsv]) => {
  const s2 = hsv.y;
  const v2 = hsv.z;
  const result = vec3().toVar();
  If(s2.lessThan(1e-4), () => {
    result.assign(vec3(v2, v2, v2));
  }).Else(() => {
    let h2 = hsv.x;
    h2 = h2.sub(floor(h2)).mul(6).toVar();
    const hi = int(trunc(h2));
    const f2 = h2.sub(float(hi));
    const p2 = v2.mul(s2.oneMinus());
    const q2 = v2.mul(s2.mul(f2).oneMinus());
    const t2 = v2.mul(s2.mul(f2.oneMinus()).oneMinus());
    If(hi.equal(int(0)), () => {
      result.assign(vec3(v2, t2, p2));
    }).ElseIf(hi.equal(int(1)), () => {
      result.assign(vec3(q2, v2, p2));
    }).ElseIf(hi.equal(int(2)), () => {
      result.assign(vec3(p2, v2, t2));
    }).ElseIf(hi.equal(int(3)), () => {
      result.assign(vec3(p2, q2, v2));
    }).ElseIf(hi.equal(int(4)), () => {
      result.assign(vec3(t2, p2, v2));
    }).Else(() => {
      result.assign(vec3(v2, p2, q2));
    });
  });
  return result;
}).setLayout({
  name: "mx_hsvtorgb",
  type: "vec3",
  inputs: [
    { name: "hsv", type: "vec3" }
  ]
});
var mx_rgbtohsv = Fn(([c_immutable]) => {
  const c2 = vec3(c_immutable).toVar();
  const r2 = float(c2.x).toVar();
  const g2 = float(c2.y).toVar();
  const b = float(c2.z).toVar();
  const mincomp = float(min$1(r2, min$1(g2, b))).toVar();
  const maxcomp = float(max$1(r2, max$1(g2, b))).toVar();
  const delta = float(maxcomp.sub(mincomp)).toVar();
  const h2 = float().toVar(), s2 = float().toVar(), v2 = float().toVar();
  v2.assign(maxcomp);
  If(maxcomp.greaterThan(0), () => {
    s2.assign(delta.div(maxcomp));
  }).Else(() => {
    s2.assign(0);
  });
  If(s2.lessThanEqual(0), () => {
    h2.assign(0);
  }).Else(() => {
    If(r2.greaterThanEqual(maxcomp), () => {
      h2.assign(g2.sub(b).div(delta));
    }).ElseIf(g2.greaterThanEqual(maxcomp), () => {
      h2.assign(add3(2, b.sub(r2).div(delta)));
    }).Else(() => {
      h2.assign(add3(4, r2.sub(g2).div(delta)));
    });
    h2.mulAssign(1 / 6);
    If(h2.lessThan(0), () => {
      h2.addAssign(1);
    });
  });
  return vec3(h2, s2, v2);
}).setLayout({
  name: "mx_rgbtohsv",
  type: "vec3",
  inputs: [
    { name: "c", type: "vec3" }
  ]
});
var mx_srgb_texture_to_lin_rec709 = Fn(([color_immutable]) => {
  const color4 = vec3(color_immutable).toVar();
  const isAbove = bvec3(greaterThan(color4, vec3(0.04045))).toVar();
  const linSeg = vec3(color4.div(12.92)).toVar();
  const powSeg = vec3(pow(max$1(color4.add(vec3(0.055)), vec3(0)).div(1.055), vec3(2.4))).toVar();
  return mix(linSeg, powSeg, isAbove);
}).setLayout({
  name: "mx_srgb_texture_to_lin_rec709",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" }
  ]
});
var mx_aastep = (threshold, value) => {
  threshold = float(threshold);
  value = float(value);
  const afwidth = vec2(value.dFdx(), value.dFdy()).length().mul(0.7071067811865476);
  return smoothstep(threshold.sub(afwidth), threshold.add(afwidth), value);
};
var _ramp = (a2, b, uv3, p2) => mix(a2, b, uv3[p2].clamp());
var mx_ramplr = (valuel, valuer, texcoord = uv$1()) => _ramp(valuel, valuer, texcoord, "x");
var mx_ramptb = (valuet, valueb, texcoord = uv$1()) => _ramp(valuet, valueb, texcoord, "y");
var mx_ramp4 = (valuetl, valuetr, valuebl, valuebr, texcoord = uv$1()) => {
  const u2 = texcoord.x.clamp();
  const v2 = texcoord.y.clamp();
  const top = mix(valuetl, valuetr, u2);
  const bottom = mix(valuebl, valuebr, u2);
  return mix(top, bottom, v2);
};
var _split = (a2, b, center, uv3, p2) => mix(a2, b, mx_aastep(center, uv3[p2]));
var mx_splitlr = (valuel, valuer, center, texcoord = uv$1()) => _split(valuel, valuer, center, texcoord, "x");
var mx_splittb = (valuet, valueb, center, texcoord = uv$1()) => _split(valuet, valueb, center, texcoord, "y");
var mx_transform_uv = (uv_scale = 1, uv_offset = 0, uv_geo = uv$1()) => uv_geo.mul(uv_scale).add(uv_offset);
var mx_safepower = (in1, in2 = 1) => {
  in1 = float(in1);
  return in1.abs().pow(in2).mul(in1.sign());
};
var mx_contrast = (input, amount = 1, pivot = 0.5) => float(input).sub(pivot).mul(amount).add(pivot);
var mx_noise_float = (texcoord = uv$1(), amplitude = 1, pivot = 0) => mx_perlin_noise_float(texcoord.convert("vec2|vec3")).mul(amplitude).add(pivot);
var mx_noise_vec3 = (texcoord = uv$1(), amplitude = 1, pivot = 0) => mx_perlin_noise_vec3(texcoord.convert("vec2|vec3")).mul(amplitude).add(pivot);
var mx_noise_vec4 = (texcoord = uv$1(), amplitude = 1, pivot = 0) => {
  texcoord = texcoord.convert("vec2|vec3");
  const noise_vec4 = vec4(mx_perlin_noise_vec3(texcoord), mx_perlin_noise_float(texcoord.add(vec2(19, 73))));
  return noise_vec4.mul(amplitude).add(pivot);
};
var mx_unifiednoise2d = (noiseType, texcoord = uv$1(), freq = vec2(1, 1), offset = vec2(0, 0), jitter = 1, outmin = 0, outmax = 1, clampoutput = false, octaves = 1, lacunarity = 2, diminish = 0.5) => mx_unifiednoise2d$1(noiseType, texcoord.convert("vec2|vec3"), freq, offset, jitter, outmin, outmax, clampoutput, octaves, lacunarity, diminish);
var mx_unifiednoise3d = (noiseType, texcoord = uv$1(), freq = vec2(1, 1), offset = vec2(0, 0), jitter = 1, outmin = 0, outmax = 1, clampoutput = false, octaves = 1, lacunarity = 2, diminish = 0.5) => mx_unifiednoise3d$1(noiseType, texcoord.convert("vec2|vec3"), freq, offset, jitter, outmin, outmax, clampoutput, octaves, lacunarity, diminish);
var mx_worley_noise_float = (texcoord = uv$1(), jitter = 1) => mx_worley_noise_float$1(texcoord.convert("vec2|vec3"), jitter, int(1));
var mx_worley_noise_vec2 = (texcoord = uv$1(), jitter = 1) => mx_worley_noise_vec2$1(texcoord.convert("vec2|vec3"), jitter, int(1));
var mx_worley_noise_vec3 = (texcoord = uv$1(), jitter = 1) => mx_worley_noise_vec3$1(texcoord.convert("vec2|vec3"), jitter, int(1));
var mx_cell_noise_float = (texcoord = uv$1()) => mx_cell_noise_float$1(texcoord.convert("vec2|vec3"));
var mx_fractal_noise_float = (position = uv$1(), octaves = 3, lacunarity = 2, diminish = 0.5, amplitude = 1) => mx_fractal_noise_float$1(position, int(octaves), lacunarity, diminish).mul(amplitude);
var mx_fractal_noise_vec2 = (position = uv$1(), octaves = 3, lacunarity = 2, diminish = 0.5, amplitude = 1) => mx_fractal_noise_vec2$1(position, int(octaves), lacunarity, diminish).mul(amplitude);
var mx_fractal_noise_vec3 = (position = uv$1(), octaves = 3, lacunarity = 2, diminish = 0.5, amplitude = 1) => mx_fractal_noise_vec3$1(position, int(octaves), lacunarity, diminish).mul(amplitude);
var mx_fractal_noise_vec4 = (position = uv$1(), octaves = 3, lacunarity = 2, diminish = 0.5, amplitude = 1) => mx_fractal_noise_vec4$1(position, int(octaves), lacunarity, diminish).mul(amplitude);
var mx_add = (in1, in2 = float(0)) => add3(in1, in2);
var mx_subtract = (in1, in2 = float(0)) => sub(in1, in2);
var mx_multiply = (in1, in2 = float(1)) => mul(in1, in2);
var mx_divide = (in1, in2 = float(1)) => div(in1, in2);
var mx_modulo = (in1, in2 = float(1)) => mod(in1, in2);
var mx_power = (in1, in2 = float(1)) => pow(in1, in2);
var mx_atan2 = (in1 = float(0), in2 = float(1)) => atan(in1, in2);
var mx_timer = () => time;
var mx_frame = () => frameId;
var mx_invert = (in1, amount = float(1)) => sub(amount, in1);
var mx_ifgreater = (value1, value2, in1, in2) => value1.greaterThan(value2).mix(in1, in2);
var mx_ifgreatereq = (value1, value2, in1, in2) => value1.greaterThanEqual(value2).mix(in1, in2);
var mx_ifequal = (value1, value2, in1, in2) => value1.equal(value2).mix(in1, in2);
var mx_separate = (in1, channelOrOut = null) => {
  if (typeof channelOrOut === "string") {
    const map = { x: 0, r: 0, y: 1, g: 1, z: 2, b: 2, w: 3, a: 3 };
    const c2 = channelOrOut.replace(/^out/, "").toLowerCase();
    if (map[c2] !== void 0)
      return in1.element(map[c2]);
  }
  if (typeof channelOrOut === "number") {
    return in1.element(channelOrOut);
  }
  if (typeof channelOrOut === "string" && channelOrOut.length === 1) {
    const map = { x: 0, r: 0, y: 1, g: 1, z: 2, b: 2, w: 3, a: 3 };
    if (map[channelOrOut] !== void 0)
      return in1.element(map[channelOrOut]);
  }
  return in1;
};
var mx_place2d = (texcoord, pivot = vec2(0.5, 0.5), scale2 = vec2(1, 1), rotate3 = float(0), offset = vec2(0, 0)) => {
  let uv3 = texcoord;
  if (pivot)
    uv3 = uv3.sub(pivot);
  if (scale2)
    uv3 = uv3.mul(scale2);
  if (rotate3) {
    const rad = rotate3.mul(Math.PI / 180);
    const cosR = rad.cos();
    const sinR = rad.sin();
    uv3 = vec2(
      uv3.x.mul(cosR).sub(uv3.y.mul(sinR)),
      uv3.x.mul(sinR).add(uv3.y.mul(cosR))
    );
  }
  if (pivot)
    uv3 = uv3.add(pivot);
  if (offset)
    uv3 = uv3.add(offset);
  return uv3;
};
var mx_rotate2d = (input, amount) => {
  input = vec2(input);
  amount = float(amount);
  const radians4 = amount.mul(Math.PI / 180);
  return rotate(input, radians4);
};
var mx_rotate3d = (input, amount, axis) => {
  input = vec3(input);
  amount = float(amount);
  axis = vec3(axis);
  const radians4 = amount.mul(Math.PI / 180);
  const nAxis = axis.normalize();
  const cosA = radians4.cos();
  const sinA = radians4.sin();
  const oneMinusCosA = float(1).sub(cosA);
  const rot = input.mul(cosA).add(nAxis.cross(input).mul(sinA)).add(nAxis.mul(nAxis.dot(input)).mul(oneMinusCosA));
  return rot;
};
var mx_heighttonormal = (input, scale2) => {
  input = vec3(input);
  scale2 = float(scale2);
  return bumpMap(input, scale2);
};
var getParallaxCorrectNormal = Fn(([normal2, cubeSize, cubePos]) => {
  const nDir = normalize(normal2).toVar();
  const rbmax = sub(float(0.5).mul(cubeSize.sub(cubePos)), positionWorld).div(nDir).toVar();
  const rbmin = sub(float(-0.5).mul(cubeSize.sub(cubePos)), positionWorld).div(nDir).toVar();
  const rbminmax = vec3().toVar();
  rbminmax.x = nDir.x.greaterThan(float(0)).select(rbmax.x, rbmin.x);
  rbminmax.y = nDir.y.greaterThan(float(0)).select(rbmax.y, rbmin.y);
  rbminmax.z = nDir.z.greaterThan(float(0)).select(rbmax.z, rbmin.z);
  const correction = min$1(rbminmax.x, rbminmax.y, rbminmax.z).toVar();
  const boxIntersection = positionWorld.add(nDir.mul(correction)).toVar();
  return boxIntersection.sub(cubePos);
});
var getShIrradianceAt = Fn(([normal2, shCoefficients]) => {
  const x2 = normal2.x, y2 = normal2.y, z2 = normal2.z;
  let result = shCoefficients.element(0).mul(0.886227);
  result = result.add(shCoefficients.element(1).mul(2 * 0.511664).mul(y2));
  result = result.add(shCoefficients.element(2).mul(2 * 0.511664).mul(z2));
  result = result.add(shCoefficients.element(3).mul(2 * 0.511664).mul(x2));
  result = result.add(shCoefficients.element(4).mul(2 * 0.429043).mul(x2).mul(y2));
  result = result.add(shCoefficients.element(5).mul(2 * 0.429043).mul(y2).mul(z2));
  result = result.add(shCoefficients.element(6).mul(z2.mul(z2).mul(0.743125).sub(0.247708)));
  result = result.add(shCoefficients.element(7).mul(2 * 0.429043).mul(x2).mul(z2));
  result = result.add(shCoefficients.element(8).mul(0.429043).mul(mul(x2, x2).sub(mul(y2, y2))));
  return result;
});
var TSL = Object.freeze({
  __proto__: null,
  BRDF_GGX,
  BRDF_Lambert,
  BasicPointShadowFilter,
  BasicShadowFilter,
  Break,
  Const,
  Continue,
  DFGApprox,
  D_GGX,
  Discard,
  EPSILON,
  F_Schlick,
  Fn,
  INFINITY,
  If,
  Loop,
  NodeAccess,
  NodeShaderStage,
  NodeType,
  NodeUpdateType,
  OnMaterialUpdate,
  OnObjectUpdate,
  PCFShadowFilter,
  PCFSoftShadowFilter,
  PI,
  PI2,
  PointShadowFilter,
  Return,
  Schlick_to_F0,
  ScriptableNodeResources,
  ShaderNode,
  Stack,
  Switch,
  TBNViewMatrix,
  VSMShadowFilter,
  V_GGX_SmithCorrelated,
  Var,
  VarIntent,
  abs,
  acesFilmicToneMapping,
  acos,
  add: add3,
  addMethodChaining,
  addNodeElement,
  agxToneMapping,
  all,
  alphaT,
  and,
  anisotropy,
  anisotropyB,
  anisotropyT,
  any,
  append,
  array,
  arrayBuffer,
  asin: asin2,
  assign,
  atan,
  atan2: atan22,
  atomicAdd,
  atomicAnd,
  atomicFunc,
  atomicLoad,
  atomicMax,
  atomicMin,
  atomicOr,
  atomicStore,
  atomicSub,
  atomicXor,
  attenuationColor,
  attenuationDistance,
  attribute,
  attributeArray,
  backgroundBlurriness,
  backgroundIntensity,
  backgroundRotation,
  batch,
  bentNormalView,
  billboarding,
  bitAnd,
  bitNot,
  bitOr,
  bitXor,
  bitangentGeometry,
  bitangentLocal,
  bitangentView,
  bitangentWorld,
  bitcast,
  blendBurn,
  blendColor,
  blendDodge,
  blendOverlay,
  blendScreen,
  blur,
  bool,
  buffer,
  bufferAttribute,
  builtin,
  bumpMap,
  burn,
  bvec2,
  bvec3,
  bvec4,
  bypass,
  cache,
  call,
  cameraFar,
  cameraIndex,
  cameraNear,
  cameraNormalMatrix,
  cameraPosition,
  cameraProjectionMatrix,
  cameraProjectionMatrixInverse,
  cameraViewMatrix,
  cameraViewport,
  cameraWorldMatrix,
  cbrt,
  cdl,
  ceil,
  checker,
  cineonToneMapping,
  clamp,
  clearcoat,
  clearcoatNormalView,
  clearcoatRoughness,
  code,
  color: color2,
  colorSpaceToWorking,
  colorToDirection,
  compute,
  computeKernel,
  computeSkinning,
  context,
  convert,
  convertColorSpace,
  convertToTexture,
  cos: cos2,
  cross,
  cubeTexture,
  cubeTextureBase,
  cubeToUV,
  dFdx,
  dFdy,
  dashSize,
  debug,
  decrement,
  decrementBefore,
  defaultBuildStages,
  defaultShaderStages,
  defined,
  degrees: degrees2,
  deltaTime,
  densityFog,
  densityFogFactor,
  depth,
  depthPass,
  determinant,
  difference,
  diffuseColor,
  directPointLight,
  directionToColor,
  directionToFaceDirection,
  dispersion,
  distance: distance2,
  div,
  dodge,
  dot,
  drawIndex,
  dynamicBufferAttribute,
  element,
  emissive,
  equal,
  equals: equals2,
  equirectUV,
  exp,
  exp2,
  expression,
  faceDirection,
  faceForward,
  faceforward,
  float,
  floatBitsToInt,
  floatBitsToUint,
  floor,
  fog,
  fract,
  frameGroup,
  frameId,
  frontFacing,
  fwidth,
  gain,
  gapSize,
  getConstNodeType,
  getCurrentStack,
  getDirection,
  getDistanceAttenuation,
  getGeometryRoughness,
  getNormalFromDepth,
  getParallaxCorrectNormal,
  getRoughness,
  getScreenPosition,
  getShIrradianceAt,
  getShadowMaterial,
  getShadowRenderObjectFunction,
  getTextureIndex,
  getViewPosition,
  globalId,
  glsl,
  glslFn,
  grayscale,
  greaterThan,
  greaterThanEqual,
  hash,
  highpModelNormalViewMatrix,
  highpModelViewMatrix,
  hue,
  increment,
  incrementBefore,
  instance,
  instanceIndex,
  instancedArray,
  instancedBufferAttribute,
  instancedDynamicBufferAttribute,
  instancedMesh,
  int,
  intBitsToFloat,
  inverse,
  inverseSqrt,
  inversesqrt,
  invocationLocalIndex,
  invocationSubgroupIndex,
  ior,
  iridescence,
  iridescenceIOR,
  iridescenceThickness,
  ivec2,
  ivec3,
  ivec4,
  js,
  label,
  length,
  lengthSq,
  lessThan,
  lessThanEqual,
  lightPosition,
  lightProjectionUV,
  lightShadowMatrix,
  lightTargetDirection,
  lightTargetPosition,
  lightViewPosition,
  lightingContext,
  lights,
  linearDepth,
  linearToneMapping,
  localId,
  log,
  log2,
  logarithmicDepthToViewZ,
  luminance,
  mat2,
  mat3,
  mat4,
  matcapUV,
  materialAO,
  materialAlphaTest,
  materialAnisotropy,
  materialAnisotropyVector,
  materialAttenuationColor,
  materialAttenuationDistance,
  materialClearcoat,
  materialClearcoatNormal,
  materialClearcoatRoughness,
  materialColor,
  materialDispersion,
  materialEmissive,
  materialEnvIntensity,
  materialEnvRotation,
  materialIOR,
  materialIridescence,
  materialIridescenceIOR,
  materialIridescenceThickness,
  materialLightMap,
  materialLineDashOffset,
  materialLineDashSize,
  materialLineGapSize,
  materialLineScale,
  materialLineWidth,
  materialMetalness,
  materialNormal,
  materialOpacity,
  materialPointSize,
  materialReference,
  materialReflectivity,
  materialRefractionRatio,
  materialRotation,
  materialRoughness,
  materialSheen,
  materialSheenRoughness,
  materialShininess,
  materialSpecular,
  materialSpecularColor,
  materialSpecularIntensity,
  materialSpecularStrength,
  materialThickness,
  materialTransmission,
  max: max$1,
  maxMipLevel,
  mediumpModelViewMatrix,
  metalness,
  min: min$1,
  mix,
  mixElement,
  mod,
  modInt,
  modelDirection,
  modelNormalMatrix,
  modelPosition,
  modelRadius,
  modelScale,
  modelViewMatrix,
  modelViewPosition,
  modelViewProjection,
  modelWorldMatrix,
  modelWorldMatrixInverse,
  morphReference,
  mrt,
  mul,
  mx_aastep,
  mx_add,
  mx_atan2,
  mx_cell_noise_float,
  mx_contrast,
  mx_divide,
  mx_fractal_noise_float,
  mx_fractal_noise_vec2,
  mx_fractal_noise_vec3,
  mx_fractal_noise_vec4,
  mx_frame,
  mx_heighttonormal,
  mx_hsvtorgb,
  mx_ifequal,
  mx_ifgreater,
  mx_ifgreatereq,
  mx_invert,
  mx_modulo,
  mx_multiply,
  mx_noise_float,
  mx_noise_vec3,
  mx_noise_vec4,
  mx_place2d,
  mx_power,
  mx_ramp4,
  mx_ramplr,
  mx_ramptb,
  mx_rgbtohsv,
  mx_rotate2d,
  mx_rotate3d,
  mx_safepower,
  mx_separate,
  mx_splitlr,
  mx_splittb,
  mx_srgb_texture_to_lin_rec709,
  mx_subtract,
  mx_timer,
  mx_transform_uv,
  mx_unifiednoise2d,
  mx_unifiednoise3d,
  mx_worley_noise_float,
  mx_worley_noise_vec2,
  mx_worley_noise_vec3,
  negate,
  neutralToneMapping,
  nodeArray,
  nodeImmutable,
  nodeObject,
  nodeObjectIntent,
  nodeObjects,
  nodeProxy,
  nodeProxyIntent,
  normalFlat,
  normalGeometry,
  normalLocal,
  normalMap,
  normalView,
  normalViewGeometry,
  normalWorld,
  normalWorldGeometry,
  normalize,
  not,
  notEqual,
  numWorkgroups,
  objectDirection,
  objectGroup,
  objectPosition,
  objectRadius,
  objectScale,
  objectViewPosition,
  objectWorldMatrix,
  oneMinus,
  or,
  orthographicDepthToViewZ,
  oscSawtooth,
  oscSine,
  oscSquare,
  oscTriangle,
  output,
  outputStruct,
  overlay,
  overloadingFn,
  parabola,
  parallaxDirection,
  parallaxUV,
  parameter,
  pass,
  passTexture,
  pcurve,
  perspectiveDepthToViewZ,
  pmremTexture,
  pointShadow,
  pointUV,
  pointWidth,
  positionGeometry,
  positionLocal,
  positionPrevious,
  positionView,
  positionViewDirection,
  positionWorld,
  positionWorldDirection,
  posterize,
  pow,
  pow2,
  pow3,
  pow4,
  premultiplyAlpha,
  property,
  quadBroadcast,
  quadSwapDiagonal,
  quadSwapX,
  quadSwapY,
  radians: radians2,
  rand,
  range,
  rangeFog,
  rangeFogFactor,
  reciprocal,
  reference,
  referenceBuffer,
  reflect,
  reflectVector,
  reflectView,
  reflector,
  refract,
  refractVector,
  refractView,
  reinhardToneMapping,
  remap,
  remapClamp,
  renderGroup,
  renderOutput,
  rendererReference,
  rotate,
  rotateUV,
  roughness,
  round,
  rtt,
  sRGBTransferEOTF,
  sRGBTransferOETF,
  sample,
  sampler,
  samplerComparison,
  saturate: saturate2,
  saturation,
  screen,
  screenCoordinate,
  screenDPR,
  screenSize,
  screenUV,
  scriptable,
  scriptableValue,
  select,
  setCurrentStack,
  setName,
  shaderStages,
  shadow,
  shadowPositionWorld,
  shapeCircle,
  sharedUniformGroup,
  sheen,
  sheenRoughness,
  shiftLeft,
  shiftRight,
  shininess,
  sign: sign3,
  sin: sin2,
  sinc,
  skinning,
  smoothstep,
  smoothstepElement,
  specularColor,
  specularF90,
  spherizeUV,
  split,
  spritesheetUV,
  sqrt: sqrt2,
  stack,
  step,
  stepElement,
  storage,
  storageBarrier,
  storageObject,
  storageTexture,
  string,
  struct,
  sub,
  subBuild,
  subgroupAdd,
  subgroupAll,
  subgroupAnd,
  subgroupAny,
  subgroupBallot,
  subgroupBroadcast,
  subgroupBroadcastFirst,
  subgroupElect,
  subgroupExclusiveAdd,
  subgroupExclusiveMul,
  subgroupInclusiveAdd,
  subgroupInclusiveMul,
  subgroupIndex,
  subgroupMax,
  subgroupMin,
  subgroupMul,
  subgroupOr,
  subgroupShuffle,
  subgroupShuffleDown,
  subgroupShuffleUp,
  subgroupShuffleXor,
  subgroupSize,
  subgroupXor,
  tan,
  tangentGeometry,
  tangentLocal,
  tangentView,
  tangentWorld,
  texture,
  texture3D,
  textureBarrier,
  textureBicubic,
  textureBicubicLevel,
  textureCubeUV,
  textureLoad,
  textureSize,
  textureStore,
  thickness,
  time,
  toneMapping,
  toneMappingExposure,
  toonOutlinePass,
  transformDirection,
  transformNormal,
  transformNormalToView,
  transformedClearcoatNormalView,
  transformedNormalView,
  transformedNormalWorld,
  transmission,
  transpose,
  triNoise3D,
  triplanarTexture,
  triplanarTextures,
  trunc,
  uint,
  uintBitsToFloat,
  uniform,
  uniformArray,
  uniformCubeTexture,
  uniformFlow,
  uniformGroup,
  uniformTexture,
  unpremultiplyAlpha,
  userData,
  uv: uv$1,
  uvec2,
  uvec3,
  uvec4,
  varying,
  varyingProperty,
  vec2,
  vec3,
  vec4,
  vectorComponents,
  velocity,
  vertexColor,
  vertexIndex,
  vertexStage,
  vibrance,
  viewZToLogarithmicDepth,
  viewZToOrthographicDepth,
  viewZToPerspectiveDepth,
  viewport,
  viewportCoordinate,
  viewportDepthTexture,
  viewportLinearDepth,
  viewportMipTexture,
  viewportResolution,
  viewportSafeUV,
  viewportSharedTexture,
  viewportSize,
  viewportTexture,
  viewportUV,
  wgsl,
  wgslFn,
  workgroupArray,
  workgroupBarrier,
  workgroupId,
  workingToColorSpace,
  xor
});
var _clearColor = new Color4();
var Background = class extends DataMap {
  /**
   * Constructs a new background management component.
   *
   * @param {Renderer} renderer - The renderer.
   * @param {Nodes} nodes - Renderer component for managing nodes related logic.
   */
  constructor(renderer3, nodes) {
    super();
    this.renderer = renderer3;
    this.nodes = nodes;
  }
  /**
   * Updates the background for the given scene. Depending on how `Scene.background`
   * or `Scene.backgroundNode` are configured, this method might configure a simple clear
   * or add a mesh to the render list for rendering the background as a textured plane
   * or skybox.
   *
   * @param {Scene} scene - The scene.
   * @param {RenderList} renderList - The current render list.
   * @param {RenderContext} renderContext - The current render context.
   */
  update(scene3, renderList, renderContext) {
    const renderer3 = this.renderer;
    const background = this.nodes.getBackgroundNode(scene3) || scene3.background;
    let forceClear = false;
    if (background === null) {
      renderer3._clearColor.getRGB(_clearColor);
      _clearColor.a = renderer3._clearColor.a;
    } else if (background.isColor === true) {
      background.getRGB(_clearColor);
      _clearColor.a = 1;
      forceClear = true;
    } else if (background.isNode === true) {
      const sceneData = this.get(scene3);
      const backgroundNode = background;
      _clearColor.copy(renderer3._clearColor);
      let backgroundMesh = sceneData.backgroundMesh;
      if (backgroundMesh === void 0) {
        let onBackgroundDispose = function() {
          background.removeEventListener("dispose", onBackgroundDispose);
          backgroundMesh.material.dispose();
          backgroundMesh.geometry.dispose();
        };
        const backgroundMeshNode = context(vec4(backgroundNode).mul(backgroundIntensity), {
          // @TODO: Add Texture2D support using node context
          getUV: () => backgroundRotation.mul(normalWorldGeometry),
          getTextureLevel: () => backgroundBlurriness
        });
        let viewProj = modelViewProjection;
        viewProj = viewProj.setZ(viewProj.w);
        const nodeMaterial = new NodeMaterial();
        nodeMaterial.name = "Background.material";
        nodeMaterial.side = BackSide;
        nodeMaterial.depthTest = false;
        nodeMaterial.depthWrite = false;
        nodeMaterial.allowOverride = false;
        nodeMaterial.fog = false;
        nodeMaterial.lights = false;
        nodeMaterial.vertexNode = viewProj;
        nodeMaterial.colorNode = backgroundMeshNode;
        sceneData.backgroundMeshNode = backgroundMeshNode;
        sceneData.backgroundMesh = backgroundMesh = new Mesh(new SphereGeometry(1, 32, 32), nodeMaterial);
        backgroundMesh.frustumCulled = false;
        backgroundMesh.name = "Background.mesh";
        backgroundMesh.onBeforeRender = function(renderer4, scene4, camera3) {
          this.matrixWorld.copyPosition(camera3.matrixWorld);
        };
        background.addEventListener("dispose", onBackgroundDispose);
      }
      const backgroundCacheKey = backgroundNode.getCacheKey();
      if (sceneData.backgroundCacheKey !== backgroundCacheKey) {
        sceneData.backgroundMeshNode.node = vec4(backgroundNode).mul(backgroundIntensity);
        sceneData.backgroundMeshNode.needsUpdate = true;
        backgroundMesh.material.needsUpdate = true;
        sceneData.backgroundCacheKey = backgroundCacheKey;
      }
      renderList.unshift(backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null, null);
    } else {
      console.error("THREE.Renderer: Unsupported background configuration.", background);
    }
    const environmentBlendMode = renderer3.xr.getEnvironmentBlendMode();
    if (environmentBlendMode === "additive") {
      _clearColor.set(0, 0, 0, 1);
    } else if (environmentBlendMode === "alpha-blend") {
      _clearColor.set(0, 0, 0, 0);
    }
    if (renderer3.autoClear === true || forceClear === true) {
      const clearColorValue = renderContext.clearColorValue;
      clearColorValue.r = _clearColor.r;
      clearColorValue.g = _clearColor.g;
      clearColorValue.b = _clearColor.b;
      clearColorValue.a = _clearColor.a;
      if (renderer3.backend.isWebGLBackend === true || renderer3.alpha === true) {
        clearColorValue.r *= clearColorValue.a;
        clearColorValue.g *= clearColorValue.a;
        clearColorValue.b *= clearColorValue.a;
      }
      renderContext.depthClearValue = renderer3._clearDepth;
      renderContext.stencilClearValue = renderer3._clearStencil;
      renderContext.clearColor = renderer3.autoClearColor === true;
      renderContext.clearDepth = renderer3.autoClearDepth === true;
      renderContext.clearStencil = renderer3.autoClearStencil === true;
    } else {
      renderContext.clearColor = false;
      renderContext.clearDepth = false;
      renderContext.clearStencil = false;
    }
  }
};
var _id$6 = 0;
var BindGroup = class {
  /**
   * Constructs a new bind group.
   *
   * @param {string} name - The bind group's name.
   * @param {Array<Binding>} bindings - An array of bindings.
   * @param {number} index - The group index.
   * @param {Array<Binding>} bindingsReference - An array of reference bindings.
   */
  constructor(name = "", bindings = [], index6 = 0, bindingsReference = []) {
    this.name = name;
    this.bindings = bindings;
    this.index = index6;
    this.bindingsReference = bindingsReference;
    this.id = _id$6++;
  }
};
var NodeBuilderState = class {
  /**
   * Constructs a new node builder state.
   *
   * @param {string} vertexShader - The native vertex shader code.
   * @param {string} fragmentShader - The native fragment shader code.
   * @param {string} computeShader - The native compute shader code.
   * @param {Array<NodeAttribute>} nodeAttributes - An array of node attributes.
   * @param {Array<BindGroup>} bindings - An array of bind groups.
   * @param {Array<Node>} updateNodes - An array of nodes that implement their `update()` method.
   * @param {Array<Node>} updateBeforeNodes - An array of nodes that implement their `updateBefore()` method.
   * @param {Array<Node>} updateAfterNodes - An array of nodes that implement their `updateAfter()` method.
   * @param {NodeMaterialObserver} observer - A node material observer.
   * @param {Array<Object>} transforms - An array with transform attribute objects. Only relevant when using compute shaders with WebGL 2.
   */
  constructor(vertexShader2, fragmentShader2, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes, updateAfterNodes, observer, transforms = []) {
    this.vertexShader = vertexShader2;
    this.fragmentShader = fragmentShader2;
    this.computeShader = computeShader;
    this.transforms = transforms;
    this.nodeAttributes = nodeAttributes;
    this.bindings = bindings;
    this.updateNodes = updateNodes;
    this.updateBeforeNodes = updateBeforeNodes;
    this.updateAfterNodes = updateAfterNodes;
    this.observer = observer;
    this.usedTimes = 0;
  }
  /**
   * This method is used to create a array of bind groups based
   * on the existing bind groups of this state. Shared groups are
   * not cloned.
   *
   * @return {Array<BindGroup>} A array of bind groups.
   */
  createBindings() {
    const bindings = [];
    for (const instanceGroup of this.bindings) {
      const shared = instanceGroup.bindings[0].groupNode.shared;
      if (shared !== true) {
        const bindingsGroup = new BindGroup(instanceGroup.name, [], instanceGroup.index, instanceGroup.bindingsReference);
        bindings.push(bindingsGroup);
        for (const instanceBinding of instanceGroup.bindings) {
          bindingsGroup.bindings.push(instanceBinding.clone());
        }
      } else {
        bindings.push(instanceGroup);
      }
    }
    return bindings;
  }
};
var NodeAttribute = class {
  /**
   * Constructs a new node attribute.
   *
   * @param {string} name - The name of the attribute.
   * @param {string} type - The type of the attribute.
   * @param {?Node} node - An optional reference to the node.
   */
  constructor(name, type, node = null) {
    this.isNodeAttribute = true;
    this.name = name;
    this.type = type;
    this.node = node;
  }
};
var NodeUniform = class {
  /**
   * Constructs a new node uniform.
   *
   * @param {string} name - The name of the uniform.
   * @param {string} type - The type of the uniform.
   * @param {UniformNode} node - An reference to the node.
   */
  constructor(name, type, node) {
    this.isNodeUniform = true;
    this.name = name;
    this.type = type;
    this.node = node;
  }
  /**
   * The value of the uniform node.
   *
   * @type {any}
   */
  get value() {
    return this.node.value;
  }
  set value(val) {
    this.node.value = val;
  }
  /**
   * The id of the uniform node.
   *
   * @type {number}
   */
  get id() {
    return this.node.id;
  }
  /**
   * The uniform node's group.
   *
   * @type {UniformGroupNode}
   */
  get groupNode() {
    return this.node.groupNode;
  }
};
var NodeVar = class {
  /**
   * Constructs a new node variable.
   *
   * @param {string} name - The name of the variable.
   * @param {string} type - The type of the variable.
   * @param {boolean} [readOnly=false] - The read-only flag.
   * @param {?number} [count=null] - The size.
   */
  constructor(name, type, readOnly = false, count = null) {
    this.isNodeVar = true;
    this.name = name;
    this.type = type;
    this.readOnly = readOnly;
    this.count = count;
  }
};
var NodeVarying = class extends NodeVar {
  /**
   * Constructs a new node varying.
   *
   * @param {string} name - The name of the varying.
   * @param {string} type - The type of the varying.
   * @param {?string} interpolationType - The interpolation type of the varying.
   * @param {?string} interpolationSampling - The interpolation sampling type of the varying.
   */
  constructor(name, type, interpolationType = null, interpolationSampling = null) {
    super(name, type);
    this.needsInterpolation = false;
    this.isNodeVarying = true;
    this.interpolationType = interpolationType;
    this.interpolationSampling = interpolationSampling;
  }
};
var NodeCode = class {
  /**
   * Constructs a new code node.
   *
   * @param {string} name - The name of the code.
   * @param {string} type - The node type.
   * @param {string} [code=''] - The native shader code.
   */
  constructor(name, type, code3 = "") {
    this.name = name;
    this.type = type;
    this.code = code3;
    Object.defineProperty(this, "isNodeCode", { value: true });
  }
};
var _id$5 = 0;
var NodeCache = class {
  /**
   * Constructs a new node cache.
   *
   * @param {?NodeCache} parent - A reference to a parent cache.
   */
  constructor(parent = null) {
    this.id = _id$5++;
    this.nodesData = /* @__PURE__ */ new WeakMap();
    this.parent = parent;
  }
  /**
   * Returns the data for the given node.
   *
   * @param {Node} node - The node.
   * @return {?Object} The data for the node.
   */
  getData(node) {
    let data = this.nodesData.get(node);
    if (data === void 0 && this.parent !== null) {
      data = this.parent.getData(node);
    }
    return data;
  }
  /**
   * Sets the data for a given node.
   *
   * @param {Node} node - The node.
   * @param {Object} data - The data that should be cached.
   */
  setData(node, data) {
    this.nodesData.set(node, data);
  }
};
var StructType = class {
  constructor(name, members) {
    this.name = name;
    this.members = members;
    this.output = false;
  }
};
var Uniform2 = class {
  /**
   * Constructs a new uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {any} value - The uniform's value.
   */
  constructor(name, value) {
    this.name = name;
    this.value = value;
    this.boundary = 0;
    this.itemSize = 0;
    this.offset = 0;
  }
  /**
   * Sets the uniform's value.
   *
   * @param {any} value - The value to set.
   */
  setValue(value) {
    this.value = value;
  }
  /**
   * Returns the uniform's value.
   *
   * @return {any} The value.
   */
  getValue() {
    return this.value;
  }
};
var NumberUniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {number} value - The uniform's value.
   */
  constructor(name, value = 0) {
    super(name, value);
    this.isNumberUniform = true;
    this.boundary = 4;
    this.itemSize = 1;
  }
};
var Vector2Uniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {Vector2} value - The uniform's value.
   */
  constructor(name, value = new Vector2()) {
    super(name, value);
    this.isVector2Uniform = true;
    this.boundary = 8;
    this.itemSize = 2;
  }
};
var Vector3Uniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {Vector3} value - The uniform's value.
   */
  constructor(name, value = new Vector3()) {
    super(name, value);
    this.isVector3Uniform = true;
    this.boundary = 16;
    this.itemSize = 3;
  }
};
var Vector4Uniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {Vector4} value - The uniform's value.
   */
  constructor(name, value = new Vector4()) {
    super(name, value);
    this.isVector4Uniform = true;
    this.boundary = 16;
    this.itemSize = 4;
  }
};
var ColorUniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {Color} value - The uniform's value.
   */
  constructor(name, value = new Color()) {
    super(name, value);
    this.isColorUniform = true;
    this.boundary = 16;
    this.itemSize = 3;
  }
};
var Matrix2Uniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {Matrix2} value - The uniform's value.
   */
  constructor(name, value = new Matrix2()) {
    super(name, value);
    this.isMatrix2Uniform = true;
    this.boundary = 8;
    this.itemSize = 4;
  }
};
var Matrix3Uniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {Matrix3} value - The uniform's value.
   */
  constructor(name, value = new Matrix3()) {
    super(name, value);
    this.isMatrix3Uniform = true;
    this.boundary = 48;
    this.itemSize = 12;
  }
};
var Matrix4Uniform = class extends Uniform2 {
  /**
   * Constructs a new Number uniform.
   *
   * @param {string} name - The uniform's name.
   * @param {Matrix4} value - The uniform's value.
   */
  constructor(name, value = new Matrix4()) {
    super(name, value);
    this.isMatrix4Uniform = true;
    this.boundary = 64;
    this.itemSize = 16;
  }
};
var NumberNodeUniform = class extends NumberUniform {
  /**
   * Constructs a new node-based Number uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {number} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var Vector2NodeUniform = class extends Vector2Uniform {
  /**
   * Constructs a new node-based Vector2 uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {Vector2} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var Vector3NodeUniform = class extends Vector3Uniform {
  /**
   * Constructs a new node-based Vector3 uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {Vector3} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var Vector4NodeUniform = class extends Vector4Uniform {
  /**
   * Constructs a new node-based Vector4 uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {Vector4} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var ColorNodeUniform = class extends ColorUniform {
  /**
   * Constructs a new node-based Color uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {Color} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var Matrix2NodeUniform = class extends Matrix2Uniform {
  /**
   * Constructs a new node-based Matrix2 uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {Matrix2} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var Matrix3NodeUniform = class extends Matrix3Uniform {
  /**
   * Constructs a new node-based Matrix3 uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {Matrix3} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var Matrix4NodeUniform = class extends Matrix4Uniform {
  /**
   * Constructs a new node-based Matrix4 uniform.
   *
   * @param {NodeUniform} nodeUniform - The node uniform.
   */
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  /**
   * Overwritten to return the value of the node uniform.
   *
   * @return {Matrix4} The value.
   */
  getValue() {
    return this.nodeUniform.value;
  }
  /**
   * Returns the node uniform data type.
   *
   * @return {string} The data type.
   */
  getType() {
    return this.nodeUniform.type;
  }
};
var rendererCache = /* @__PURE__ */ new WeakMap();
var typeFromArray = /* @__PURE__ */ new Map([
  [Int8Array, "int"],
  [Int16Array, "int"],
  [Int32Array, "int"],
  [Uint8Array, "uint"],
  [Uint16Array, "uint"],
  [Uint32Array, "uint"],
  [Float32Array, "float"]
]);
var toFloat = (value) => {
  if (/e/g.test(value)) {
    return String(value).replace(/\+/g, "");
  } else {
    value = Number(value);
    return value + (value % 1 ? "" : ".0");
  }
};
var NodeBuilder = class {
  /**
   * Constructs a new node builder.
   *
   * @param {Object3D} object - The 3D object.
   * @param {Renderer} renderer - The current renderer.
   * @param {NodeParser} parser - A reference to a node parser.
   */
  constructor(object, renderer3, parser) {
    this.object = object;
    this.material = object && object.material || null;
    this.geometry = object && object.geometry || null;
    this.renderer = renderer3;
    this.parser = parser;
    this.scene = null;
    this.camera = null;
    this.nodes = [];
    this.sequentialNodes = [];
    this.updateNodes = [];
    this.updateBeforeNodes = [];
    this.updateAfterNodes = [];
    this.hashNodes = {};
    this.observer = null;
    this.lightsNode = null;
    this.environmentNode = null;
    this.fogNode = null;
    this.clippingContext = null;
    this.vertexShader = null;
    this.fragmentShader = null;
    this.computeShader = null;
    this.flowNodes = { vertex: [], fragment: [], compute: [] };
    this.flowCode = { vertex: "", fragment: "", compute: "" };
    this.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };
    this.structs = { vertex: [], fragment: [], compute: [], index: 0 };
    this.types = { vertex: [], fragment: [], compute: [], index: 0 };
    this.bindings = { vertex: {}, fragment: {}, compute: {} };
    this.bindingsIndexes = {};
    this.bindGroups = null;
    this.attributes = [];
    this.bufferAttributes = [];
    this.varyings = [];
    this.codes = {};
    this.vars = {};
    this.declarations = {};
    this.flow = { code: "" };
    this.chaining = [];
    this.stack = stack();
    this.stacks = [];
    this.tab = "	";
    this.currentFunctionNode = null;
    this.context = {
      material: this.material
    };
    this.cache = new NodeCache();
    this.globalCache = this.cache;
    this.flowsData = /* @__PURE__ */ new WeakMap();
    this.shaderStage = null;
    this.buildStage = null;
    this.subBuildLayers = [];
    this.currentStack = null;
    this.subBuildFn = null;
  }
  /**
   * Returns the bind groups of the current renderer.
   *
   * @return {ChainMap} The cache.
   */
  getBindGroupsCache() {
    let bindGroupsCache = rendererCache.get(this.renderer);
    if (bindGroupsCache === void 0) {
      bindGroupsCache = new ChainMap();
      rendererCache.set(this.renderer, bindGroupsCache);
    }
    return bindGroupsCache;
  }
  /**
   * Factory method for creating an instance of {@link RenderTarget} with the given
   * dimensions and options.
   *
   * @param {number} width - The width of the render target.
   * @param {number} height - The height of the render target.
   * @param {Object} options - The options of the render target.
   * @return {RenderTarget} The render target.
   */
  createRenderTarget(width, height, options) {
    return new RenderTarget(width, height, options);
  }
  /**
   * Factory method for creating an instance of {@link CubeRenderTarget} with the given
   * dimensions and options.
   *
   * @param {number} size - The size of the cube render target.
   * @param {Object} options - The options of the cube render target.
   * @return {CubeRenderTarget} The cube render target.
   */
  createCubeRenderTarget(size, options) {
    return new CubeRenderTarget(size, options);
  }
  /**
   * Whether the given node is included in the internal array of nodes or not.
   *
   * @param {Node} node - The node to test.
   * @return {boolean} Whether the given node is included in the internal array of nodes or not.
   */
  includes(node) {
    return this.nodes.includes(node);
  }
  /**
   * Returns the output struct name which is required by
   * {@link OutputStructNode}.
   *
   * @abstract
   * @return {string} The name of the output struct.
   */
  getOutputStructName() {
  }
  /**
   * Returns a bind group for the given group name and binding.
   *
   * @private
   * @param {string} groupName - The group name.
   * @param {Array<NodeUniformsGroup>} bindings - List of bindings.
   * @return {BindGroup} The bind group
   */
  _getBindGroup(groupName, bindings) {
    const bindGroupsCache = this.getBindGroupsCache();
    const bindingsArray = [];
    let sharedGroup = true;
    for (const binding of bindings) {
      bindingsArray.push(binding);
      sharedGroup = sharedGroup && binding.groupNode.shared !== true;
    }
    let bindGroup;
    if (sharedGroup) {
      bindGroup = bindGroupsCache.get(bindingsArray);
      if (bindGroup === void 0) {
        bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);
        bindGroupsCache.set(bindingsArray, bindGroup);
      }
    } else {
      bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);
    }
    return bindGroup;
  }
  /**
   * Returns an array of node uniform groups for the given group name and shader stage.
   *
   * @param {string} groupName - The group name.
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {Array<NodeUniformsGroup>} The array of node uniform groups.
   */
  getBindGroupArray(groupName, shaderStage) {
    const bindings = this.bindings[shaderStage];
    let bindGroup = bindings[groupName];
    if (bindGroup === void 0) {
      if (this.bindingsIndexes[groupName] === void 0) {
        this.bindingsIndexes[groupName] = { binding: 0, group: Object.keys(this.bindingsIndexes).length };
      }
      bindings[groupName] = bindGroup = [];
    }
    return bindGroup;
  }
  /**
   * Returns a list bindings of all shader stages separated by groups.
   *
   * @return {Array<BindGroup>} The list of bindings.
   */
  getBindings() {
    let bindingsGroups = this.bindGroups;
    if (bindingsGroups === null) {
      const groups = {};
      const bindings = this.bindings;
      for (const shaderStage of shaderStages) {
        for (const groupName in bindings[shaderStage]) {
          const uniforms = bindings[shaderStage][groupName];
          const groupUniforms = groups[groupName] || (groups[groupName] = []);
          groupUniforms.push(...uniforms);
        }
      }
      bindingsGroups = [];
      for (const groupName in groups) {
        const group = groups[groupName];
        const bindingsGroup = this._getBindGroup(groupName, group);
        bindingsGroups.push(bindingsGroup);
      }
      this.bindGroups = bindingsGroups;
    }
    return bindingsGroups;
  }
  /**
   * Sorts the bind groups and updates {@link NodeBuilder#bindingsIndexes}.
   */
  sortBindingGroups() {
    const bindingsGroups = this.getBindings();
    bindingsGroups.sort((a2, b) => a2.bindings[0].groupNode.order - b.bindings[0].groupNode.order);
    for (let i2 = 0; i2 < bindingsGroups.length; i2++) {
      const bindingGroup = bindingsGroups[i2];
      this.bindingsIndexes[bindingGroup.name].group = i2;
      bindingGroup.index = i2;
    }
  }
  /**
   * The builder maintains each node in a hash-based dictionary.
   * This method sets the given node (value) with the given hash (key) into this dictionary.
   *
   * @param {Node} node - The node to add.
   * @param {number} hash - The hash of the node.
   */
  setHashNode(node, hash3) {
    this.hashNodes[hash3] = node;
  }
  /**
   * Adds a node to this builder.
   *
   * @param {Node} node - The node to add.
   */
  addNode(node) {
    if (this.nodes.includes(node) === false) {
      this.nodes.push(node);
      this.setHashNode(node, node.getHash(this));
    }
  }
  /**
   * It is used to add Nodes that will be used as FRAME and RENDER events,
   * and need to follow a certain sequence in the calls to work correctly.
   * This function should be called after 'setup()' in the 'build()' process to ensure that the child nodes are processed first.
   *
   * @param {Node} node - The node to add.
   */
  addSequentialNode(node) {
    if (this.sequentialNodes.includes(node) === false) {
      this.sequentialNodes.push(node);
    }
  }
  /**
   * Checks the update types of nodes
   */
  buildUpdateNodes() {
    for (const node of this.nodes) {
      const updateType = node.getUpdateType();
      if (updateType !== NodeUpdateType.NONE) {
        this.updateNodes.push(node);
      }
    }
    for (const node of this.sequentialNodes) {
      const updateBeforeType = node.getUpdateBeforeType();
      const updateAfterType = node.getUpdateAfterType();
      if (updateBeforeType !== NodeUpdateType.NONE) {
        this.updateBeforeNodes.push(node);
      }
      if (updateAfterType !== NodeUpdateType.NONE) {
        this.updateAfterNodes.push(node);
      }
    }
  }
  /**
   * A reference the current node which is the
   * last node in the chain of nodes.
   *
   * @type {Node}
   */
  get currentNode() {
    return this.chaining[this.chaining.length - 1];
  }
  /**
   * Whether the given texture is filtered or not.
   *
   * @param {Texture} texture - The texture to check.
   * @return {boolean} Whether the given texture is filtered or not.
   */
  isFilteredTexture(texture3) {
    return texture3.magFilter === LinearFilter || texture3.magFilter === LinearMipmapNearestFilter || texture3.magFilter === NearestMipmapLinearFilter || texture3.magFilter === LinearMipmapLinearFilter || texture3.minFilter === LinearFilter || texture3.minFilter === LinearMipmapNearestFilter || texture3.minFilter === NearestMipmapLinearFilter || texture3.minFilter === LinearMipmapLinearFilter;
  }
  /**
   * Adds the given node to the internal node chain.
   * This is used to check recursive calls in node-graph.
   *
   * @param {Node} node - The node to add.
   */
  addChain(node) {
    this.chaining.push(node);
  }
  /**
   * Removes the given node from the internal node chain.
   *
   * @param {Node} node - The node to remove.
   */
  removeChain(node) {
    const lastChain = this.chaining.pop();
    if (lastChain !== node) {
      throw new Error("NodeBuilder: Invalid node chaining!");
    }
  }
  /**
   * Returns the native shader method name for a given generic name. E.g.
   * the method name `textureDimensions` matches the WGSL name but must be
   * resolved to `textureSize` in GLSL.
   *
   * @abstract
   * @param {string} method - The method name to resolve.
   * @return {string} The resolved method name.
   */
  getMethod(method) {
    return method;
  }
  /**
   * Returns the native snippet for a ternary operation. E.g. GLSL would output
   * a ternary op as `cond ? x : y` whereas WGSL would output it as `select(y, x, cond)`
   *
   * @abstract
   * @param {string} condSnippet - The condition determining which expression gets resolved.
   * @param {string} ifSnippet - The expression to resolve to if the condition is true.
   * @param {string} elseSnippet - The expression to resolve to if the condition is false.
   * @return {string} The resolved method name.
   */
  getTernary() {
    return null;
  }
  /**
   * Returns a node for the given hash, see {@link NodeBuilder#setHashNode}.
   *
   * @param {number} hash - The hash of the node.
   * @return {Node} The found node.
   */
  getNodeFromHash(hash3) {
    return this.hashNodes[hash3];
  }
  /**
   * Adds the Node to a target flow so that it can generate code in the 'generate' process.
   *
   * @param {('vertex'|'fragment'|'compute')} shaderStage - The shader stage.
   * @param {Node} node - The node to add.
   * @return {Node} The node.
   */
  addFlow(shaderStage, node) {
    this.flowNodes[shaderStage].push(node);
    return node;
  }
  /**
   * Sets builder's context.
   *
   * @param {Object} context - The context to set.
   */
  setContext(context3) {
    this.context = context3;
  }
  /**
   * Returns the builder's current context.
   *
   * @return {Object} The builder's current context.
   */
  getContext() {
    return this.context;
  }
  /**
   * Gets a context used in shader construction that can be shared across different materials.
   * This is necessary since the renderer cache can reuse shaders generated in one material and use them in another.
   *
   * @return {Object} The builder's current context without material.
   */
  getSharedContext() {
    ({ ...this.context });
    return this.context;
  }
  /**
   * Sets builder's cache.
   *
   * @param {NodeCache} cache - The cache to set.
   */
  setCache(cache3) {
    this.cache = cache3;
  }
  /**
   * Returns the builder's current cache.
   *
   * @return {NodeCache} The builder's current cache.
   */
  getCache() {
    return this.cache;
  }
  /**
   * Returns a cache for the given node.
   *
   * @param {Node} node - The node.
   * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.
   * @return {NodeCache} The cache.
   */
  getCacheFromNode(node, parent = true) {
    const data = this.getDataFromNode(node);
    if (data.cache === void 0)
      data.cache = new NodeCache(parent ? this.getCache() : null);
    return data.cache;
  }
  /**
   * Whether the requested feature is available or not.
   *
   * @abstract
   * @param {string} name - The requested feature.
   * @return {boolean} Whether the requested feature is supported or not.
   */
  isAvailable() {
    return false;
  }
  /**
   * Returns the vertexIndex input variable as a native shader string.
   *
   * @abstract
   * @return {string} The instanceIndex shader string.
   */
  getVertexIndex() {
    console.warn("Abstract function.");
  }
  /**
   * Returns the instanceIndex input variable as a native shader string.
   *
   * @abstract
   * @return {string} The instanceIndex shader string.
   */
  getInstanceIndex() {
    console.warn("Abstract function.");
  }
  /**
   * Returns the drawIndex input variable as a native shader string.
   * Only relevant for WebGL and its `WEBGL_multi_draw` extension.
   *
   * @abstract
   * @return {?string} The drawIndex shader string.
   */
  getDrawIndex() {
    console.warn("Abstract function.");
  }
  /**
   * Returns the frontFacing input variable as a native shader string.
   *
   * @abstract
   * @return {string} The frontFacing shader string.
   */
  getFrontFacing() {
    console.warn("Abstract function.");
  }
  /**
   * Returns the fragCoord input variable as a native shader string.
   *
   * @abstract
   * @return {string} The fragCoord shader string.
   */
  getFragCoord() {
    console.warn("Abstract function.");
  }
  /**
   * Whether to flip texture data along its vertical axis or not. WebGL needs
   * this method evaluate to `true`, WebGPU to `false`.
   *
   * @abstract
   * @return {boolean} Whether to flip texture data along its vertical axis or not.
   */
  isFlipY() {
    return false;
  }
  /**
   * Calling this method increases the usage count for the given node by one.
   *
   * @param {Node} node - The node to increase the usage count for.
   * @return {number} The updated usage count.
   */
  increaseUsage(node) {
    const nodeData = this.getDataFromNode(node);
    nodeData.usageCount = nodeData.usageCount === void 0 ? 1 : nodeData.usageCount + 1;
    return nodeData.usageCount;
  }
  /**
   * Generates a texture sample shader string for the given texture data.
   *
   * @abstract
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The texture property name.
   * @param {string} uvSnippet - Snippet defining the texture coordinates.
   * @return {string} The generated shader string.
   */
  generateTexture() {
    console.warn("Abstract function.");
  }
  /**
   * Generates a texture LOD shader string for the given texture data.
   *
   * @abstract
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The texture property name.
   * @param {string} uvSnippet - Snippet defining the texture coordinates.
   * @param {?string} depthSnippet - Snippet defining the 0-based texture array index to sample.
   * @param {string} levelSnippet - Snippet defining the mip level.
   * @return {string} The generated shader string.
   */
  generateTextureLod() {
    console.warn("Abstract function.");
  }
  /**
   * Generates the array declaration string.
   *
   * @param {string} type - The type.
   * @param {?number} [count] - The count.
   * @return {string} The generated value as a shader string.
   */
  generateArrayDeclaration(type, count) {
    return this.getType(type) + "[ " + count + " ]";
  }
  /**
   * Generates the array shader string for the given type and value.
   *
   * @param {string} type - The type.
   * @param {?number} [count] - The count.
   * @param {?Array<Node>} [values=null] - The default values.
   * @return {string} The generated value as a shader string.
   */
  generateArray(type, count, values = null) {
    let snippet = this.generateArrayDeclaration(type, count) + "( ";
    for (let i2 = 0; i2 < count; i2++) {
      const value = values ? values[i2] : null;
      if (value !== null) {
        snippet += value.build(this, type);
      } else {
        snippet += this.generateConst(type);
      }
      if (i2 < count - 1)
        snippet += ", ";
    }
    snippet += " )";
    return snippet;
  }
  /**
   * Generates the struct shader string.
   *
   * @param {string} type - The type.
   * @param {Array<Object>} [membersLayout] - The count.
   * @param {?Array<Node>} [values=null] - The default values.
   * @return {string} The generated value as a shader string.
   */
  generateStruct(type, membersLayout, values = null) {
    const snippets = [];
    for (const member of membersLayout) {
      const { name, type: type2 } = member;
      if (values && values[name] && values[name].isNode) {
        snippets.push(values[name].build(this, type2));
      } else {
        snippets.push(this.generateConst(type2));
      }
    }
    return type + "( " + snippets.join(", ") + " )";
  }
  /**
   * Generates the shader string for the given type and value.
   *
   * @param {string} type - The type.
   * @param {?any} [value=null] - The value.
   * @return {string} The generated value as a shader string.
   */
  generateConst(type, value = null) {
    if (value === null) {
      if (type === "float" || type === "int" || type === "uint")
        value = 0;
      else if (type === "bool")
        value = false;
      else if (type === "color")
        value = new Color();
      else if (type === "vec2")
        value = new Vector2();
      else if (type === "vec3")
        value = new Vector3();
      else if (type === "vec4")
        value = new Vector4();
    }
    if (type === "float")
      return toFloat(value);
    if (type === "int")
      return `${Math.round(value)}`;
    if (type === "uint")
      return value >= 0 ? `${Math.round(value)}u` : "0u";
    if (type === "bool")
      return value ? "true" : "false";
    if (type === "color")
      return `${this.getType("vec3")}( ${toFloat(value.r)}, ${toFloat(value.g)}, ${toFloat(value.b)} )`;
    const typeLength = this.getTypeLength(type);
    const componentType = this.getComponentType(type);
    const generateConst = (value2) => this.generateConst(componentType, value2);
    if (typeLength === 2) {
      return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)} )`;
    } else if (typeLength === 3) {
      return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)} )`;
    } else if (typeLength === 4 && type !== "mat2") {
      return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)}, ${generateConst(value.w)} )`;
    } else if (typeLength >= 4 && value && (value.isMatrix2 || value.isMatrix3 || value.isMatrix4)) {
      return `${this.getType(type)}( ${value.elements.map(generateConst).join(", ")} )`;
    } else if (typeLength > 4) {
      return `${this.getType(type)}()`;
    }
    throw new Error(`NodeBuilder: Type '${type}' not found in generate constant attempt.`);
  }
  /**
   * It might be necessary to convert certain data types to different ones
   * so this method can be used to hide the conversion.
   *
   * @param {string} type - The type.
   * @return {string} The updated type.
   */
  getType(type) {
    if (type === "color")
      return "vec3";
    return type;
  }
  /**
   * Whether the given attribute name is defined in the geometry or not.
   *
   * @param {string} name - The attribute name.
   * @return {boolean} Whether the given attribute name is defined in the geometry.
   */
  hasGeometryAttribute(name) {
    return this.geometry && this.geometry.getAttribute(name) !== void 0;
  }
  /**
   * Returns a node attribute for the given name and type.
   *
   * @param {string} name - The attribute's name.
   * @param {string} type - The attribute's type.
   * @return {NodeAttribute} The node attribute.
   */
  getAttribute(name, type) {
    const attributes = this.attributes;
    for (const attribute4 of attributes) {
      if (attribute4.name === name) {
        return attribute4;
      }
    }
    const attribute3 = new NodeAttribute(name, type);
    this.registerDeclaration(attribute3);
    attributes.push(attribute3);
    return attribute3;
  }
  /**
   * Returns for the given node and shader stage the property name for the shader.
   *
   * @param {Node} node - The node.
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {string} The property name.
   */
  getPropertyName(node) {
    return node.name;
  }
  /**
   * Whether the given type is a vector type or not.
   *
   * @param {string} type - The type to check.
   * @return {boolean} Whether the given type is a vector type or not.
   */
  isVector(type) {
    return /vec\d/.test(type);
  }
  /**
   * Whether the given type is a matrix type or not.
   *
   * @param {string} type - The type to check.
   * @return {boolean} Whether the given type is a matrix type or not.
   */
  isMatrix(type) {
    return /mat\d/.test(type);
  }
  /**
   * Whether the given type is a reference type or not.
   *
   * @param {string} type - The type to check.
   * @return {boolean} Whether the given type is a reference type or not.
   */
  isReference(type) {
    return type === "void" || type === "property" || type === "sampler" || type === "samplerComparison" || type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "depthTexture" || type === "texture3D";
  }
  /**
   * Checks if the given texture requires a manual conversion to the working color space.
   *
   * @abstract
   * @param {Texture} texture - The texture to check.
   * @return {boolean} Whether the given texture requires a conversion to working color space or not.
   */
  needsToWorkingColorSpace() {
    return false;
  }
  /**
   * Returns the component type of a given texture.
   *
   * @param {Texture} texture - The texture.
   * @return {string} The component type.
   */
  getComponentTypeFromTexture(texture3) {
    const type = texture3.type;
    if (texture3.isDataTexture) {
      if (type === IntType)
        return "int";
      if (type === UnsignedIntType)
        return "uint";
    }
    return "float";
  }
  /**
   * Returns the element type for a given type.
   *
   * @param {string} type - The type.
   * @return {string} The element type.
   */
  getElementType(type) {
    if (type === "mat2")
      return "vec2";
    if (type === "mat3")
      return "vec3";
    if (type === "mat4")
      return "vec4";
    return this.getComponentType(type);
  }
  /**
   * Returns the component type for a given type.
   *
   * @param {string} type - The type.
   * @return {string} The component type.
   */
  getComponentType(type) {
    type = this.getVectorType(type);
    if (type === "float" || type === "bool" || type === "int" || type === "uint")
      return type;
    const componentType = /(b|i|u|)(vec|mat)([2-4])/.exec(type);
    if (componentType === null)
      return null;
    if (componentType[1] === "b")
      return "bool";
    if (componentType[1] === "i")
      return "int";
    if (componentType[1] === "u")
      return "uint";
    return "float";
  }
  /**
   * Returns the vector type for a given type.
   *
   * @param {string} type - The type.
   * @return {string} The vector type.
   */
  getVectorType(type) {
    if (type === "color")
      return "vec3";
    if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D")
      return "vec4";
    return type;
  }
  /**
   * Returns the data type for the given the length and component type.
   *
   * @param {number} length - The length.
   * @param {string} [componentType='float'] - The component type.
   * @return {string} The type.
   */
  getTypeFromLength(length3, componentType = "float") {
    if (length3 === 1)
      return componentType;
    let baseType = getTypeFromLength(length3);
    const prefix = componentType === "float" ? "" : componentType[0];
    if (/mat2/.test(componentType) === true) {
      baseType = baseType.replace("vec", "mat");
    }
    return prefix + baseType;
  }
  /**
   * Returns the type for a given typed array.
   *
   * @param {TypedArray} array - The typed array.
   * @return {string} The type.
   */
  getTypeFromArray(array3) {
    return typeFromArray.get(array3.constructor);
  }
  /**
   * Returns the type is an integer type.
   *
   * @param {string} type - The type.
   * @return {boolean} Whether the type is an integer type or not.
   */
  isInteger(type) {
    return /int|uint|(i|u)vec/.test(type);
  }
  /**
   * Returns the type for a given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   * @return {string} The type.
   */
  getTypeFromAttribute(attribute3) {
    let dataAttribute = attribute3;
    if (attribute3.isInterleavedBufferAttribute)
      dataAttribute = attribute3.data;
    const array3 = dataAttribute.array;
    const itemSize = attribute3.itemSize;
    const normalized = attribute3.normalized;
    let arrayType;
    if (!(attribute3 instanceof Float16BufferAttribute) && normalized !== true) {
      arrayType = this.getTypeFromArray(array3);
    }
    return this.getTypeFromLength(itemSize, arrayType);
  }
  /**
   * Returns the length for the given data type.
   *
   * @param {string} type - The data type.
   * @return {number} The length.
   */
  getTypeLength(type) {
    const vecType = this.getVectorType(type);
    const vecNum = /vec([2-4])/.exec(vecType);
    if (vecNum !== null)
      return Number(vecNum[1]);
    if (vecType === "float" || vecType === "bool" || vecType === "int" || vecType === "uint")
      return 1;
    if (/mat2/.test(type) === true)
      return 4;
    if (/mat3/.test(type) === true)
      return 9;
    if (/mat4/.test(type) === true)
      return 16;
    return 0;
  }
  /**
   * Returns the vector type for a given matrix type.
   *
   * @param {string} type - The matrix type.
   * @return {string} The vector type.
   */
  getVectorFromMatrix(type) {
    return type.replace("mat", "vec");
  }
  /**
   * For a given type this method changes the component type to the
   * given value. E.g. `vec4` should be changed to the new component type
   * `uint` which results in `uvec4`.
   *
   * @param {string} type - The type.
   * @param {string} newComponentType - The new component type.
   * @return {string} The new type.
   */
  changeComponentType(type, newComponentType) {
    return this.getTypeFromLength(this.getTypeLength(type), newComponentType);
  }
  /**
   * Returns the integer type pendant for the given type.
   *
   * @param {string} type - The type.
   * @return {string} The integer type.
   */
  getIntegerType(type) {
    const componentType = this.getComponentType(type);
    if (componentType === "int" || componentType === "uint")
      return type;
    return this.changeComponentType(type, "int");
  }
  /**
   * Adds a stack node to the internal stack.
   *
   * @return {StackNode} The added stack node.
   */
  addStack() {
    this.stack = stack(this.stack);
    const previousStack = getCurrentStack();
    this.stacks.push(previousStack);
    setCurrentStack(this.stack);
    return this.stack;
  }
  /**
   * Removes the last stack node from the internal stack.
   *
   * @return {StackNode} The removed stack node.
   */
  removeStack() {
    const lastStack = this.stack;
    this.stack = lastStack.parent;
    setCurrentStack(this.stacks.pop());
    return lastStack;
  }
  /**
   * The builder maintains (cached) data for each node during the building process. This method
   * can be used to get these data for a specific shader stage and cache.
   *
   * @param {Node} node - The node to get the data for.
   * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
   * @param {?NodeCache} cache - An optional cache.
   * @return {Object} The node data.
   */
  getDataFromNode(node, shaderStage = this.shaderStage, cache3 = null) {
    cache3 = cache3 === null ? node.isGlobal(this) ? this.globalCache : this.cache : cache3;
    let nodeData = cache3.getData(node);
    if (nodeData === void 0) {
      nodeData = {};
      cache3.setData(node, nodeData);
    }
    if (nodeData[shaderStage] === void 0)
      nodeData[shaderStage] = {};
    let data = nodeData[shaderStage];
    const subBuilds = nodeData.any ? nodeData.any.subBuilds : null;
    const subBuild3 = this.getClosestSubBuild(subBuilds);
    if (subBuild3) {
      if (data.subBuildsCache === void 0)
        data.subBuildsCache = {};
      data = data.subBuildsCache[subBuild3] || (data.subBuildsCache[subBuild3] = {});
      data.subBuilds = subBuilds;
    }
    return data;
  }
  /**
   * Returns the properties for the given node and shader stage.
   *
   * @param {Node} node - The node to get the properties for.
   * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage='any'] - The shader stage.
   * @return {Object} The node properties.
   */
  getNodeProperties(node, shaderStage = "any") {
    const nodeData = this.getDataFromNode(node, shaderStage);
    return nodeData.properties || (nodeData.properties = { outputNode: null });
  }
  /**
   * Returns an instance of {@link NodeAttribute} for the given buffer attribute node.
   *
   * @param {BufferAttributeNode} node - The buffer attribute node.
   * @param {string} type - The node type.
   * @return {NodeAttribute} The node attribute.
   */
  getBufferAttributeFromNode(node, type) {
    const nodeData = this.getDataFromNode(node);
    let bufferAttribute3 = nodeData.bufferAttribute;
    if (bufferAttribute3 === void 0) {
      const index6 = this.uniforms.index++;
      bufferAttribute3 = new NodeAttribute("nodeAttribute" + index6, type, node);
      this.bufferAttributes.push(bufferAttribute3);
      nodeData.bufferAttribute = bufferAttribute3;
    }
    return bufferAttribute3;
  }
  /**
   * Returns an instance of {@link StructType} for the given struct name and shader stage
   * or null if not found.
   *
   * @param {string} name - The name of the struct.
   * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
   * @return {?StructType} The struct type or null if not found.
   */
  getStructTypeNode(name, shaderStage = this.shaderStage) {
    return this.types[shaderStage][name] || null;
  }
  /**
   * Returns an instance of {@link StructType} for the given output struct node.
   *
   * @param {OutputStructNode} node - The output struct node.
   * @param {Array<Object>} membersLayout - The output struct types.
   * @param {?string} [name=null] - The name of the struct.
   * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
   * @return {StructType} The struct type attribute.
   */
  getStructTypeFromNode(node, membersLayout, name = null, shaderStage = this.shaderStage) {
    const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
    let structType = nodeData.structType;
    if (structType === void 0) {
      const index6 = this.structs.index++;
      if (name === null)
        name = "StructType" + index6;
      structType = new StructType(name, membersLayout);
      this.structs[shaderStage].push(structType);
      this.types[shaderStage][name] = node;
      nodeData.structType = structType;
    }
    return structType;
  }
  /**
   * Returns an instance of {@link StructType} for the given output struct node.
   *
   * @param {OutputStructNode} node - The output struct node.
   * @param {Array<Object>} membersLayout - The output struct types.
   * @return {StructType} The struct type attribute.
   */
  getOutputStructTypeFromNode(node, membersLayout) {
    const structType = this.getStructTypeFromNode(node, membersLayout, "OutputType", "fragment");
    structType.output = true;
    return structType;
  }
  /**
   * Returns an instance of {@link NodeUniform} for the given uniform node.
   *
   * @param {UniformNode} node - The uniform node.
   * @param {string} type - The uniform type.
   * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
   * @param {?string} name - The name of the uniform.
   * @return {NodeUniform} The node uniform.
   */
  getUniformFromNode(node, type, shaderStage = this.shaderStage, name = null) {
    const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
    let nodeUniform = nodeData.uniform;
    if (nodeUniform === void 0) {
      const index6 = this.uniforms.index++;
      nodeUniform = new NodeUniform(name || "nodeUniform" + index6, type, node);
      this.uniforms[shaderStage].push(nodeUniform);
      this.registerDeclaration(nodeUniform);
      nodeData.uniform = nodeUniform;
    }
    return nodeUniform;
  }
  /**
   * Returns an instance of {@link NodeVar} for the given variable node.
   *
   * @param {VarNode} node - The variable node.
   * @param {?string} name - The variable's name.
   * @param {string} [type=node.getNodeType( this )] - The variable's type.
   * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
   * @param {boolean} [readOnly=false] - Whether the variable is read-only or not.
   *
   * @return {NodeVar} The node variable.
   */
  getVarFromNode(node, name = null, type = node.getNodeType(this), shaderStage = this.shaderStage, readOnly = false) {
    const nodeData = this.getDataFromNode(node, shaderStage);
    const subBuildVariable = this.getSubBuildProperty("variable", nodeData.subBuilds);
    let nodeVar = nodeData[subBuildVariable];
    if (nodeVar === void 0) {
      const idNS = readOnly ? "_const" : "_var";
      const vars = this.vars[shaderStage] || (this.vars[shaderStage] = []);
      const id = this.vars[idNS] || (this.vars[idNS] = 0);
      if (name === null) {
        name = (readOnly ? "nodeConst" : "nodeVar") + id;
        this.vars[idNS]++;
      }
      if (subBuildVariable !== "variable") {
        name = this.getSubBuildProperty(name, nodeData.subBuilds);
      }
      const count = node.getArrayCount(this);
      nodeVar = new NodeVar(name, type, readOnly, count);
      if (!readOnly) {
        vars.push(nodeVar);
      }
      this.registerDeclaration(nodeVar);
      nodeData[subBuildVariable] = nodeVar;
    }
    return nodeVar;
  }
  /**
   * Returns whether a Node or its flow is deterministic, useful for use in `const`.
   *
   * @param {Node} node - The varying node.
   * @return {boolean} Returns true if deterministic.
   */
  isDeterministic(node) {
    if (node.isMathNode) {
      return this.isDeterministic(node.aNode) && (node.bNode ? this.isDeterministic(node.bNode) : true) && (node.cNode ? this.isDeterministic(node.cNode) : true);
    } else if (node.isOperatorNode) {
      return this.isDeterministic(node.aNode) && (node.bNode ? this.isDeterministic(node.bNode) : true);
    } else if (node.isArrayNode) {
      if (node.values !== null) {
        for (const n2 of node.values) {
          if (!this.isDeterministic(n2)) {
            return false;
          }
        }
      }
      return true;
    } else if (node.isConstNode) {
      return true;
    }
    return false;
  }
  /**
   * Returns an instance of {@link NodeVarying} for the given varying node.
   *
   * @param {(VaryingNode|PropertyNode)} node - The varying node.
   * @param {?string} name - The varying's name.
   * @param {string} [type=node.getNodeType( this )] - The varying's type.
   * @param {?string} interpolationType - The interpolation type of the varying.
   * @param {?string} interpolationSampling - The interpolation sampling type of the varying.
   * @return {NodeVar} The node varying.
   */
  getVaryingFromNode(node, name = null, type = node.getNodeType(this), interpolationType = null, interpolationSampling = null) {
    const nodeData = this.getDataFromNode(node, "any");
    const subBuildVarying = this.getSubBuildProperty("varying", nodeData.subBuilds);
    let nodeVarying = nodeData[subBuildVarying];
    if (nodeVarying === void 0) {
      const varyings = this.varyings;
      const index6 = varyings.length;
      if (name === null)
        name = "nodeVarying" + index6;
      if (subBuildVarying !== "varying") {
        name = this.getSubBuildProperty(name, nodeData.subBuilds);
      }
      nodeVarying = new NodeVarying(name, type, interpolationType, interpolationSampling);
      varyings.push(nodeVarying);
      this.registerDeclaration(nodeVarying);
      nodeData[subBuildVarying] = nodeVarying;
    }
    return nodeVarying;
  }
  /**
   * Registers a node declaration in the current shader stage.
   *
   * @param {Object} node - The node to be registered.
   */
  registerDeclaration(node) {
    const shaderStage = this.shaderStage;
    const declarations = this.declarations[shaderStage] || (this.declarations[shaderStage] = {});
    const property3 = this.getPropertyName(node);
    let index6 = 1;
    let name = property3;
    while (declarations[name] !== void 0) {
      name = property3 + "_" + index6++;
    }
    if (index6 > 1) {
      node.name = name;
      console.warn(`THREE.TSL: Declaration name '${property3}' of '${node.type}' already in use. Renamed to '${name}'.`);
    }
    declarations[name] = node;
  }
  /**
   * Returns an instance of {@link NodeCode} for the given code node.
   *
   * @param {CodeNode} node - The code node.
   * @param {string} type - The node type.
   * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
   * @return {NodeCode} The node code.
   */
  getCodeFromNode(node, type, shaderStage = this.shaderStage) {
    const nodeData = this.getDataFromNode(node);
    let nodeCode = nodeData.code;
    if (nodeCode === void 0) {
      const codes = this.codes[shaderStage] || (this.codes[shaderStage] = []);
      const index6 = codes.length;
      nodeCode = new NodeCode("nodeCode" + index6, type);
      codes.push(nodeCode);
      nodeData.code = nodeCode;
    }
    return nodeCode;
  }
  /**
  	 * Adds a code flow based on the code-block hierarchy.
  
  	 * This is used so that code-blocks like If,Else create their variables locally if the Node
  	 * is only used inside one of these conditionals in the current shader stage.
  	 *
  	 * @param {Node} node - The node to add.
  	 * @param {Node} nodeBlock - Node-based code-block. Usually 'ConditionalNode'.
  	 */
  addFlowCodeHierarchy(node, nodeBlock) {
    const { flowCodes, flowCodeBlock } = this.getDataFromNode(node);
    let needsFlowCode = true;
    let nodeBlockHierarchy = nodeBlock;
    while (nodeBlockHierarchy) {
      if (flowCodeBlock.get(nodeBlockHierarchy) === true) {
        needsFlowCode = false;
        break;
      }
      nodeBlockHierarchy = this.getDataFromNode(nodeBlockHierarchy).parentNodeBlock;
    }
    if (needsFlowCode) {
      for (const flowCode of flowCodes) {
        this.addLineFlowCode(flowCode);
      }
    }
  }
  /**
   * Add a inline-code to the current flow code-block.
   *
   * @param {Node} node - The node to add.
   * @param {string} code - The code to add.
   * @param {Node} nodeBlock - Current ConditionalNode
   */
  addLineFlowCodeBlock(node, code3, nodeBlock) {
    const nodeData = this.getDataFromNode(node);
    const flowCodes = nodeData.flowCodes || (nodeData.flowCodes = []);
    const codeBlock = nodeData.flowCodeBlock || (nodeData.flowCodeBlock = /* @__PURE__ */ new WeakMap());
    flowCodes.push(code3);
    codeBlock.set(nodeBlock, true);
  }
  /**
   * Add a inline-code to the current flow.
   *
   * @param {string} code - The code to add.
   * @param {?Node} [node= null] - Optional Node, can help the system understand if the Node is part of a code-block.
   * @return {NodeBuilder} A reference to this node builder.
   */
  addLineFlowCode(code3, node = null) {
    if (code3 === "")
      return this;
    if (node !== null && this.context.nodeBlock) {
      this.addLineFlowCodeBlock(node, code3, this.context.nodeBlock);
    }
    code3 = this.tab + code3;
    if (!/;\s*$/.test(code3)) {
      code3 = code3 + ";\n";
    }
    this.flow.code += code3;
    return this;
  }
  /**
   * Adds a code to the current code flow.
   *
   * @param {string} code - Shader code.
   * @return {NodeBuilder} A reference to this node builder.
   */
  addFlowCode(code3) {
    this.flow.code += code3;
    return this;
  }
  /**
   * Add tab in the code that will be generated so that other snippets respect the current tabulation.
   * Typically used in codes with If,Else.
   *
   * @return {NodeBuilder} A reference to this node builder.
   */
  addFlowTab() {
    this.tab += "	";
    return this;
  }
  /**
   * Removes a tab.
   *
   * @return {NodeBuilder} A reference to this node builder.
   */
  removeFlowTab() {
    this.tab = this.tab.slice(0, -1);
    return this;
  }
  /**
   * Gets the current flow data based on a Node.
   *
   * @param {Node} node - Node that the flow was started.
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {Object} The flow data.
   */
  getFlowData(node) {
    return this.flowsData.get(node);
  }
  /**
   * Executes the node flow based on a root node to generate the final shader code.
   *
   * @param {Node} node - The node to execute.
   * @return {Object} The code flow.
   */
  flowNode(node) {
    const output3 = node.getNodeType(this);
    const flowData = this.flowChildNode(node, output3);
    this.flowsData.set(node, flowData);
    return flowData;
  }
  /**
   * Includes a node in the current function node.
   *
   * @param {Node} node - The node to include.
   * @returns {void}
   */
  addInclude(node) {
    if (this.currentFunctionNode !== null) {
      this.currentFunctionNode.includes.push(node);
    }
  }
  /**
   * Returns the native shader operator name for a given generic name.
   * It is a similar type of method like {@link NodeBuilder#getMethod}.
   *
   * @param {ShaderNodeInternal} shaderNode - The shader node to build the function node with.
   * @return {FunctionNode} The build function node.
   */
  buildFunctionNode(shaderNode) {
    const fn = new FunctionNode();
    const previous = this.currentFunctionNode;
    this.currentFunctionNode = fn;
    fn.code = this.buildFunctionCode(shaderNode);
    this.currentFunctionNode = previous;
    return fn;
  }
  /**
   * Generates a code flow based on a TSL function: Fn().
   *
   * @param {ShaderNodeInternal} shaderNode - A function code will be generated based on the input.
   * @return {Object}
   */
  flowShaderNode(shaderNode) {
    const layout = shaderNode.layout;
    const inputs = {
      [Symbol.iterator]() {
        let index6 = 0;
        const values = Object.values(this);
        return {
          next: () => ({
            value: values[index6],
            done: index6++ >= values.length
          })
        };
      }
    };
    for (const input of layout.inputs) {
      inputs[input.name] = new ParameterNode(input.type, input.name);
    }
    shaderNode.layout = null;
    const callNode = shaderNode.call(inputs);
    const flowData = this.flowStagesNode(callNode, layout.type);
    shaderNode.layout = layout;
    return flowData;
  }
  /**
   * Executes the node in a specific build stage.
   *
   * @param {Node} node - The node to execute.
   * @param {string} buildStage - The build stage to execute the node in.
   * @param {?(Node|string)} [output=null] - Expected output type. For example 'vec3'.
   * @return {?(Node|string)} The result of the node build.
   */
  flowBuildStage(node, buildStage, output3 = null) {
    const previousBuildStage = this.getBuildStage();
    this.setBuildStage(buildStage);
    const result = node.build(this, output3);
    this.setBuildStage(previousBuildStage);
    return result;
  }
  /**
   * Runs the node flow through all the steps of creation, 'setup', 'analyze', 'generate'.
   *
   * @param {Node} node - The node to execute.
   * @param {?string} output - Expected output type. For example 'vec3'.
   * @return {Object}
   */
  flowStagesNode(node, output3 = null) {
    const previousFlow = this.flow;
    const previousVars = this.vars;
    const previousDeclarations = this.declarations;
    const previousCache = this.cache;
    const previousBuildStage = this.buildStage;
    const previousStack = this.stack;
    const flow = {
      code: ""
    };
    this.flow = flow;
    this.vars = {};
    this.declarations = {};
    this.cache = new NodeCache();
    this.stack = stack();
    for (const buildStage of defaultBuildStages) {
      this.setBuildStage(buildStage);
      flow.result = node.build(this, output3);
    }
    flow.vars = this.getVars(this.shaderStage);
    this.flow = previousFlow;
    this.vars = previousVars;
    this.declarations = previousDeclarations;
    this.cache = previousCache;
    this.stack = previousStack;
    this.setBuildStage(previousBuildStage);
    return flow;
  }
  /**
   * Returns the native shader operator name for a given generic name.
   * It is a similar type of method like {@link NodeBuilder#getMethod}.
   *
   * @abstract
   * @param {string} op - The operator name to resolve.
   * @return {?string} The resolved operator name.
   */
  getFunctionOperator() {
    return null;
  }
  /**
   * Builds the given shader node.
   *
   * @abstract
   * @param {ShaderNodeInternal} shaderNode - The shader node.
   * @return {string} The function code.
   */
  buildFunctionCode() {
    console.warn("Abstract function.");
  }
  /**
   * Generates a code flow based on a child Node.
   *
   * @param {Node} node - The node to execute.
   * @param {?string} output - Expected output type. For example 'vec3'.
   * @return {Object} The code flow.
   */
  flowChildNode(node, output3 = null) {
    const previousFlow = this.flow;
    const flow = {
      code: ""
    };
    this.flow = flow;
    flow.result = node.build(this, output3);
    this.flow = previousFlow;
    return flow;
  }
  /**
   * Executes a flow of code in a different stage.
   *
   * Some nodes like `varying()` have the ability to compute code in vertex-stage and
   * return the value in fragment-stage even if it is being executed in an input fragment.
   *
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @param {Node} node - The node to execute.
   * @param {?string} output - Expected output type. For example 'vec3'.
   * @param {?string} propertyName - The property name to assign the result.
   * @return {?(Object|Node)} The code flow or node.build() result.
   */
  flowNodeFromShaderStage(shaderStage, node, output3 = null, propertyName = null) {
    const previousTab = this.tab;
    const previousCache = this.cache;
    const previousShaderStage = this.shaderStage;
    const previousContext = this.context;
    this.setShaderStage(shaderStage);
    const context3 = { ...this.context };
    delete context3.nodeBlock;
    this.cache = this.globalCache;
    this.tab = "	";
    this.context = context3;
    let result = null;
    if (this.buildStage === "generate") {
      const flowData = this.flowChildNode(node, output3);
      if (propertyName !== null) {
        flowData.code += `${this.tab + propertyName} = ${flowData.result};
`;
      }
      this.flowCode[shaderStage] = this.flowCode[shaderStage] + flowData.code;
      result = flowData;
    } else {
      result = node.build(this);
    }
    this.setShaderStage(previousShaderStage);
    this.cache = previousCache;
    this.tab = previousTab;
    this.context = previousContext;
    return result;
  }
  /**
   * Returns an array holding all node attributes of this node builder.
   *
   * @return {Array<NodeAttribute>} The node attributes of this builder.
   */
  getAttributesArray() {
    return this.attributes.concat(this.bufferAttributes);
  }
  /**
   * Returns the attribute definitions as a shader string for the given shader stage.
   *
   * @abstract
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {string} The attribute code section.
   */
  getAttributes() {
    console.warn("Abstract function.");
  }
  /**
   * Returns the varying definitions as a shader string for the given shader stage.
   *
   * @abstract
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {string} The varying code section.
   */
  getVaryings() {
    console.warn("Abstract function.");
  }
  /**
   * Returns a single variable definition as a shader string for the given variable type and name.
   *
   * @param {string} type - The variable's type.
   * @param {string} name - The variable's name.
   * @param {?number} [count=null] - The array length.
   * @return {string} The shader string.
   */
  getVar(type, name, count = null) {
    return `${count !== null ? this.generateArrayDeclaration(type, count) : this.getType(type)} ${name}`;
  }
  /**
   * Returns the variable definitions as a shader string for the given shader stage.
   *
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {string} The variable code section.
   */
  getVars(shaderStage) {
    let snippet = "";
    const vars = this.vars[shaderStage];
    if (vars !== void 0) {
      for (const variable of vars) {
        snippet += `${this.getVar(variable.type, variable.name)}; `;
      }
    }
    return snippet;
  }
  /**
   * Returns the uniform definitions as a shader string for the given shader stage.
   *
   * @abstract
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {string} The uniform code section.
   */
  getUniforms() {
    console.warn("Abstract function.");
  }
  /**
   * Returns the native code definitions as a shader string for the given shader stage.
   *
   * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
   * @return {string} The native code section.
   */
  getCodes(shaderStage) {
    const codes = this.codes[shaderStage];
    let code3 = "";
    if (codes !== void 0) {
      for (const nodeCode of codes) {
        code3 += nodeCode.code + "\n";
      }
    }
    return code3;
  }
  /**
   * Returns the hash of this node builder.
   *
   * @return {string} The hash.
   */
  getHash() {
    return this.vertexShader + this.fragmentShader + this.computeShader;
  }
  /**
   * Sets the current shader stage.
   *
   * @param {?('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage to set.
   */
  setShaderStage(shaderStage) {
    this.shaderStage = shaderStage;
  }
  /**
   * Returns the current shader stage.
   *
   * @return {?('vertex'|'fragment'|'compute'|'any')} The current shader stage.
   */
  getShaderStage() {
    return this.shaderStage;
  }
  /**
   * Sets the current build stage.
   *
   * @param {?('setup'|'analyze'|'generate')} buildStage - The build stage to set.
   */
  setBuildStage(buildStage) {
    this.buildStage = buildStage;
  }
  /**
   * Returns the current build stage.
   *
   * @return {?('setup'|'analyze'|'generate')} The current build stage.
   */
  getBuildStage() {
    return this.buildStage;
  }
  /**
   * Controls the code build of the shader stages.
   *
   * @abstract
   */
  buildCode() {
    console.warn("Abstract function.");
  }
  /**
   * Returns the current sub-build layer.
   *
   * @return {SubBuildNode} The current sub-build layers.
   */
  get subBuild() {
    return this.subBuildLayers[this.subBuildLayers.length - 1] || null;
  }
  /**
   * Adds a sub-build layer to the node builder.
   *
   * @param {SubBuildNode} subBuild - The sub-build layer to add.
   */
  addSubBuild(subBuild3) {
    this.subBuildLayers.push(subBuild3);
  }
  /**
   * Removes the last sub-build layer from the node builder.
   *
   * @return {SubBuildNode} The removed sub-build layer.
   */
  removeSubBuild() {
    return this.subBuildLayers.pop();
  }
  /**
   * Returns the closest sub-build layer for the given data.
   *
   * @param {Node|Set<string>|Array<string>} data - The data to get the closest sub-build layer from.
   * @return {?string} The closest sub-build name or null if none found.
   */
  getClosestSubBuild(data) {
    let subBuilds;
    if (data && data.isNode) {
      if (data.isShaderCallNodeInternal) {
        subBuilds = data.shaderNode.subBuilds;
      } else if (data.isStackNode) {
        subBuilds = [data.subBuild];
      } else {
        subBuilds = this.getDataFromNode(data, "any").subBuilds;
      }
    } else if (data instanceof Set) {
      subBuilds = [...data];
    } else {
      subBuilds = data;
    }
    if (!subBuilds)
      return null;
    const subBuildLayers = this.subBuildLayers;
    for (let i2 = subBuilds.length - 1; i2 >= 0; i2--) {
      const subBuild3 = subBuilds[i2];
      if (subBuildLayers.includes(subBuild3)) {
        return subBuild3;
      }
    }
    return null;
  }
  /**
   * Returns the output node of a sub-build layer.
   *
   * @param {Node} node - The node to get the output from.
   * @return {string} The output node name.
   */
  getSubBuildOutput(node) {
    return this.getSubBuildProperty("outputNode", node);
  }
  /**
   * Returns the sub-build property name for the given property and node.
   *
   * @param {string} [property=''] - The property name.
   * @param {?Node} [node=null] - The node to get the sub-build from.
   * @return {string} The sub-build property name.
   */
  getSubBuildProperty(property3 = "", node = null) {
    let subBuild3;
    if (node !== null) {
      subBuild3 = this.getClosestSubBuild(node);
    } else {
      subBuild3 = this.subBuildFn;
    }
    let result;
    if (subBuild3) {
      result = property3 ? subBuild3 + "_" + property3 : subBuild3;
    } else {
      result = property3;
    }
    return result;
  }
  /**
   * Central build method which controls the build for the given object.
   *
   * @return {NodeBuilder} A reference to this node builder.
   */
  build() {
    const { object, material, renderer: renderer3 } = this;
    if (material !== null) {
      let nodeMaterial = renderer3.library.fromMaterial(material);
      if (nodeMaterial === null) {
        console.error(`NodeMaterial: Material "${material.type}" is not compatible.`);
        nodeMaterial = new NodeMaterial();
      }
      nodeMaterial.build(this);
    } else {
      this.addFlow("compute", object);
    }
    for (const buildStage of defaultBuildStages) {
      this.setBuildStage(buildStage);
      if (this.context.vertex && this.context.vertex.isNode) {
        this.flowNodeFromShaderStage("vertex", this.context.vertex);
      }
      for (const shaderStage of shaderStages) {
        this.setShaderStage(shaderStage);
        const flowNodes = this.flowNodes[shaderStage];
        for (const node of flowNodes) {
          if (buildStage === "generate") {
            this.flowNode(node);
          } else {
            node.build(this);
          }
        }
      }
    }
    this.setBuildStage(null);
    this.setShaderStage(null);
    this.buildCode();
    this.buildUpdateNodes();
    return this;
  }
  /**
   * Returns a uniform representation which is later used for UBO generation and rendering.
   *
   * @param {NodeUniform} uniformNode - The uniform node.
   * @param {string} type - The requested type.
   * @return {Uniform} The uniform.
   */
  getNodeUniform(uniformNode, type) {
    if (type === "float" || type === "int" || type === "uint")
      return new NumberNodeUniform(uniformNode);
    if (type === "vec2" || type === "ivec2" || type === "uvec2")
      return new Vector2NodeUniform(uniformNode);
    if (type === "vec3" || type === "ivec3" || type === "uvec3")
      return new Vector3NodeUniform(uniformNode);
    if (type === "vec4" || type === "ivec4" || type === "uvec4")
      return new Vector4NodeUniform(uniformNode);
    if (type === "color")
      return new ColorNodeUniform(uniformNode);
    if (type === "mat2")
      return new Matrix2NodeUniform(uniformNode);
    if (type === "mat3")
      return new Matrix3NodeUniform(uniformNode);
    if (type === "mat4")
      return new Matrix4NodeUniform(uniformNode);
    throw new Error(`Uniform "${type}" not declared.`);
  }
  /**
   * Formats the given shader snippet from a given type into another one. E.g.
   * this method might be used to convert a simple float string `"1.0"` into a
   * `vec3` representation: `"vec3<f32>( 1.0 )"`.
   *
   * @param {string} snippet - The shader snippet.
   * @param {string} fromType - The source type.
   * @param {string} toType - The target type.
   * @return {string} The updated shader string.
   */
  format(snippet, fromType, toType) {
    fromType = this.getVectorType(fromType);
    toType = this.getVectorType(toType);
    if (fromType === toType || toType === null || this.isReference(toType)) {
      return snippet;
    }
    const fromTypeLength = this.getTypeLength(fromType);
    const toTypeLength = this.getTypeLength(toType);
    if (fromTypeLength === 16 && toTypeLength === 9) {
      return `${this.getType(toType)}( ${snippet}[ 0 ].xyz, ${snippet}[ 1 ].xyz, ${snippet}[ 2 ].xyz )`;
    }
    if (fromTypeLength === 9 && toTypeLength === 4) {
      return `${this.getType(toType)}( ${snippet}[ 0 ].xy, ${snippet}[ 1 ].xy )`;
    }
    if (fromTypeLength > 4) {
      return snippet;
    }
    if (toTypeLength > 4 || toTypeLength === 0) {
      return snippet;
    }
    if (fromTypeLength === toTypeLength) {
      return `${this.getType(toType)}( ${snippet} )`;
    }
    if (fromTypeLength > toTypeLength) {
      snippet = toType === "bool" ? `all( ${snippet} )` : `${snippet}.${"xyz".slice(0, toTypeLength)}`;
      return this.format(snippet, this.getTypeFromLength(toTypeLength, this.getComponentType(fromType)), toType);
    }
    if (toTypeLength === 4 && fromTypeLength > 1) {
      return `${this.getType(toType)}( ${this.format(snippet, fromType, "vec3")}, 1.0 )`;
    }
    if (fromTypeLength === 2) {
      return `${this.getType(toType)}( ${this.format(snippet, fromType, "vec2")}, 0.0 )`;
    }
    if (fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType(toType)) {
      snippet = `${this.getType(this.getComponentType(toType))}( ${snippet} )`;
    }
    return `${this.getType(toType)}( ${snippet} )`;
  }
  /**
   * Returns a signature with the engine's current revision.
   *
   * @return {string} The signature.
   */
  getSignature() {
    return `// Three.js r${REVISION} - Node System
`;
  }
};
var NodeFrame = class {
  /**
   * Constructs a new node fame.
   */
  constructor() {
    this.time = 0;
    this.deltaTime = 0;
    this.frameId = 0;
    this.renderId = 0;
    this.updateMap = /* @__PURE__ */ new WeakMap();
    this.updateBeforeMap = /* @__PURE__ */ new WeakMap();
    this.updateAfterMap = /* @__PURE__ */ new WeakMap();
    this.renderer = null;
    this.material = null;
    this.camera = null;
    this.object = null;
    this.scene = null;
  }
  /**
   * Returns a dictionary for a given node and update map which
   * is used to correctly call node update methods per frame or render.
   *
   * @private
   * @param {WeakMap<Node, Object>} referenceMap - The reference weak map.
   * @param {Node} nodeRef - The reference to the current node.
   * @return {Object<string,WeakMap<Object, number>>} The dictionary.
   */
  _getMaps(referenceMap, nodeRef) {
    let maps = referenceMap.get(nodeRef);
    if (maps === void 0) {
      maps = {
        renderMap: /* @__PURE__ */ new WeakMap(),
        frameMap: /* @__PURE__ */ new WeakMap()
      };
      referenceMap.set(nodeRef, maps);
    }
    return maps;
  }
  /**
   * This method executes the {@link Node#updateBefore} for the given node.
   * It makes sure {@link Node#updateBeforeType} is honored meaning the update
   * is only executed once per frame, render or object depending on the update
   * type.
   *
   * @param {Node} node - The node that should be updated.
   */
  updateBeforeNode(node) {
    const updateType = node.getUpdateBeforeType();
    const reference3 = node.updateReference(this);
    if (updateType === NodeUpdateType.FRAME) {
      const { frameMap } = this._getMaps(this.updateBeforeMap, reference3);
      if (frameMap.get(reference3) !== this.frameId) {
        if (node.updateBefore(this) !== false) {
          frameMap.set(reference3, this.frameId);
        }
      }
    } else if (updateType === NodeUpdateType.RENDER) {
      const { renderMap } = this._getMaps(this.updateBeforeMap, reference3);
      if (renderMap.get(reference3) !== this.renderId) {
        if (node.updateBefore(this) !== false) {
          renderMap.set(reference3, this.renderId);
        }
      }
    } else if (updateType === NodeUpdateType.OBJECT) {
      node.updateBefore(this);
    }
  }
  /**
   * This method executes the {@link Node#updateAfter} for the given node.
   * It makes sure {@link Node#updateAfterType} is honored meaning the update
   * is only executed once per frame, render or object depending on the update
   * type.
   *
   * @param {Node} node - The node that should be updated.
   */
  updateAfterNode(node) {
    const updateType = node.getUpdateAfterType();
    const reference3 = node.updateReference(this);
    if (updateType === NodeUpdateType.FRAME) {
      const { frameMap } = this._getMaps(this.updateAfterMap, reference3);
      if (frameMap.get(reference3) !== this.frameId) {
        if (node.updateAfter(this) !== false) {
          frameMap.set(reference3, this.frameId);
        }
      }
    } else if (updateType === NodeUpdateType.RENDER) {
      const { renderMap } = this._getMaps(this.updateAfterMap, reference3);
      if (renderMap.get(reference3) !== this.renderId) {
        if (node.updateAfter(this) !== false) {
          renderMap.set(reference3, this.renderId);
        }
      }
    } else if (updateType === NodeUpdateType.OBJECT) {
      node.updateAfter(this);
    }
  }
  /**
   * This method executes the {@link Node#update} for the given node.
   * It makes sure {@link Node#updateType} is honored meaning the update
   * is only executed once per frame, render or object depending on the update
   * type.
   *
   * @param {Node} node - The node that should be updated.
   */
  updateNode(node) {
    const updateType = node.getUpdateType();
    const reference3 = node.updateReference(this);
    if (updateType === NodeUpdateType.FRAME) {
      const { frameMap } = this._getMaps(this.updateMap, reference3);
      if (frameMap.get(reference3) !== this.frameId) {
        if (node.update(this) !== false) {
          frameMap.set(reference3, this.frameId);
        }
      }
    } else if (updateType === NodeUpdateType.RENDER) {
      const { renderMap } = this._getMaps(this.updateMap, reference3);
      if (renderMap.get(reference3) !== this.renderId) {
        if (node.update(this) !== false) {
          renderMap.set(reference3, this.renderId);
        }
      }
    } else if (updateType === NodeUpdateType.OBJECT) {
      node.update(this);
    }
  }
  /**
   * Updates the internal state of the node frame. This method is
   * called by the renderer in its internal animation loop.
   */
  update() {
    this.frameId++;
    if (this.lastTime === void 0)
      this.lastTime = performance.now();
    this.deltaTime = (performance.now() - this.lastTime) / 1e3;
    this.lastTime = performance.now();
    this.time += this.deltaTime;
  }
};
var NodeFunctionInput = class {
  /**
   * Constructs a new node function input.
   *
   * @param {string} type - The input type.
   * @param {string} name - The input name.
   * @param {?number} [count=null] - If the input is an Array, count will be the length.
   * @param {('in'|'out'|'inout')} [qualifier=''] - The parameter qualifier (only relevant for GLSL).
   * @param {boolean} [isConst=false] - Whether the input uses a const qualifier or not (only relevant for GLSL).
   */
  constructor(type, name, count = null, qualifier = "", isConst = false) {
    this.type = type;
    this.name = name;
    this.count = count;
    this.qualifier = qualifier;
    this.isConst = isConst;
  }
};
NodeFunctionInput.isNodeFunctionInput = true;
var DirectionalLightNode = class extends AnalyticLightNode {
  static get type() {
    return "DirectionalLightNode";
  }
  /**
   * Constructs a new directional light node.
   *
   * @param {?DirectionalLight} [light=null] - The directional light source.
   */
  constructor(light = null) {
    super(light);
  }
  setupDirect() {
    const lightColor = this.colorNode;
    const lightDirection = lightTargetDirection(this.light);
    return { lightDirection, lightColor };
  }
};
var _matrix41 = new Matrix4();
var _matrix42 = new Matrix4();
var _ltcLib = null;
var RectAreaLightNode = class extends AnalyticLightNode {
  static get type() {
    return "RectAreaLightNode";
  }
  /**
   * Constructs a new rect area light node.
   *
   * @param {?RectAreaLight} [light=null] - The rect area light source.
   */
  constructor(light = null) {
    super(light);
    this.halfHeight = uniform(new Vector3()).setGroup(renderGroup);
    this.halfWidth = uniform(new Vector3()).setGroup(renderGroup);
    this.updateType = NodeUpdateType.RENDER;
  }
  /**
   * Overwritten to updated rect area light specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update(frame) {
    super.update(frame);
    const { light } = this;
    const viewMatrix = frame.camera.matrixWorldInverse;
    _matrix42.identity();
    _matrix41.copy(light.matrixWorld);
    _matrix41.premultiply(viewMatrix);
    _matrix42.extractRotation(_matrix41);
    this.halfWidth.value.set(light.width * 0.5, 0, 0);
    this.halfHeight.value.set(0, light.height * 0.5, 0);
    this.halfWidth.value.applyMatrix4(_matrix42);
    this.halfHeight.value.applyMatrix4(_matrix42);
  }
  setupDirectRectArea(builder) {
    let ltc_1, ltc_2;
    if (builder.isAvailable("float32Filterable")) {
      ltc_1 = texture(_ltcLib.LTC_FLOAT_1);
      ltc_2 = texture(_ltcLib.LTC_FLOAT_2);
    } else {
      ltc_1 = texture(_ltcLib.LTC_HALF_1);
      ltc_2 = texture(_ltcLib.LTC_HALF_2);
    }
    const { colorNode, light } = this;
    const lightPosition3 = lightViewPosition(light);
    return {
      lightColor: colorNode,
      lightPosition: lightPosition3,
      halfWidth: this.halfWidth,
      halfHeight: this.halfHeight,
      ltc_1,
      ltc_2
    };
  }
  /**
   * Used to configure the internal BRDF approximation texture data.
   *
   * @param {RectAreaLightTexturesLib} ltc - The BRDF approximation texture data.
   */
  static setLTC(ltc) {
    _ltcLib = ltc;
  }
};
var SpotLightNode = class extends AnalyticLightNode {
  static get type() {
    return "SpotLightNode";
  }
  /**
   * Constructs a new spot light node.
   *
   * @param {?SpotLight} [light=null] - The spot light source.
   */
  constructor(light = null) {
    super(light);
    this.coneCosNode = uniform(0).setGroup(renderGroup);
    this.penumbraCosNode = uniform(0).setGroup(renderGroup);
    this.cutoffDistanceNode = uniform(0).setGroup(renderGroup);
    this.decayExponentNode = uniform(0).setGroup(renderGroup);
    this.colorNode = uniform(this.color).setGroup(renderGroup);
  }
  /**
   * Overwritten to updated spot light specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update(frame) {
    super.update(frame);
    const { light } = this;
    this.coneCosNode.value = Math.cos(light.angle);
    this.penumbraCosNode.value = Math.cos(light.angle * (1 - light.penumbra));
    this.cutoffDistanceNode.value = light.distance;
    this.decayExponentNode.value = light.decay;
  }
  /**
   * Computes the spot attenuation for the given angle.
   *
   * @param {NodeBuilder} builder - The node builder.
   * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.
   * @return {Node<float>} The spot attenuation.
   */
  getSpotAttenuation(builder, angleCosine) {
    const { coneCosNode, penumbraCosNode } = this;
    return smoothstep(coneCosNode, penumbraCosNode, angleCosine);
  }
  getLightCoord(builder) {
    const properties = builder.getNodeProperties(this);
    let projectionUV = properties.projectionUV;
    if (projectionUV === void 0) {
      projectionUV = lightProjectionUV(this.light, builder.context.positionWorld);
      properties.projectionUV = projectionUV;
    }
    return projectionUV;
  }
  setupDirect(builder) {
    const { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;
    const lightVector = this.getLightVector(builder);
    const lightDirection = lightVector.normalize();
    const angleCos = lightDirection.dot(lightTargetDirection(light));
    const spotAttenuation = this.getSpotAttenuation(builder, angleCos);
    const lightDistance = lightVector.length();
    const lightAttenuation = getDistanceAttenuation({
      lightDistance,
      cutoffDistance: cutoffDistanceNode,
      decayExponent: decayExponentNode
    });
    let lightColor = colorNode.mul(spotAttenuation).mul(lightAttenuation);
    let projected, lightCoord;
    if (light.colorNode) {
      lightCoord = this.getLightCoord(builder);
      projected = light.colorNode(lightCoord);
    } else if (light.map) {
      lightCoord = this.getLightCoord(builder);
      projected = texture(light.map, lightCoord.xy).onRenderUpdate(() => light.map);
    }
    if (projected) {
      const inSpotLightMap = lightCoord.mul(2).sub(1).abs().lessThan(1).all();
      lightColor = inSpotLightMap.select(lightColor.mul(projected), lightColor);
    }
    return { lightColor, lightDirection };
  }
};
var IESSpotLightNode = class extends SpotLightNode {
  static get type() {
    return "IESSpotLightNode";
  }
  /**
   * Overwrites the default implementation to compute an IES conform spot attenuation.
   *
   * @param {NodeBuilder} builder - The node builder.
   * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.
   * @return {Node<float>} The spot attenuation.
   */
  getSpotAttenuation(builder, angleCosine) {
    const iesMap = this.light.iesMap;
    let spotAttenuation = null;
    if (iesMap && iesMap.isTexture === true) {
      const angle = angleCosine.acos().mul(1 / Math.PI);
      spotAttenuation = texture(iesMap, vec2(angle, 0), 0).r;
    } else {
      spotAttenuation = super.getSpotAttenuation(angleCosine);
    }
    return spotAttenuation;
  }
};
var sdBox = Fn(([p2, b]) => {
  const d2 = p2.abs().sub(b);
  return length(max$1(d2, 0)).add(min$1(max$1(d2.x, d2.y), 0));
});
var ProjectorLightNode = class extends SpotLightNode {
  static get type() {
    return "ProjectorLightNode";
  }
  update(frame) {
    super.update(frame);
    const light = this.light;
    this.penumbraCosNode.value = Math.min(Math.cos(light.angle * (1 - light.penumbra)), 0.99999);
    if (light.aspect === null) {
      let aspect = 1;
      if (light.map !== null) {
        aspect = light.map.width / light.map.height;
      }
      light.shadow.aspect = aspect;
    } else {
      light.shadow.aspect = light.aspect;
    }
  }
  /**
   * Overwrites the default implementation to compute projection attenuation.
   *
   * @param {NodeBuilder} builder - The node builder.
   * @return {Node<float>} The spot attenuation.
   */
  getSpotAttenuation(builder) {
    const attenuation = float(0);
    const penumbraCos = this.penumbraCosNode;
    const spotLightCoord = lightShadowMatrix(this.light).mul(builder.context.positionWorld || positionWorld);
    If(spotLightCoord.w.greaterThan(0), () => {
      const projectionUV = spotLightCoord.xyz.div(spotLightCoord.w);
      const boxDist = sdBox(projectionUV.xy.sub(vec2(0.5)), vec2(0.5));
      const angleFactor = div(-1, sub(1, acos(penumbraCos)).sub(1));
      attenuation.assign(saturate2(boxDist.mul(-2).mul(angleFactor)));
    });
    return attenuation;
  }
};
var AmbientLightNode = class extends AnalyticLightNode {
  static get type() {
    return "AmbientLightNode";
  }
  /**
   * Constructs a new ambient light node.
   *
   * @param {?AmbientLight} [light=null] - The ambient light source.
   */
  constructor(light = null) {
    super(light);
  }
  setup({ context: context3 }) {
    context3.irradiance.addAssign(this.colorNode);
  }
};
var HemisphereLightNode = class extends AnalyticLightNode {
  static get type() {
    return "HemisphereLightNode";
  }
  /**
   * Constructs a new hemisphere light node.
   *
   * @param {?HemisphereLight} [light=null] - The hemisphere light source.
   */
  constructor(light = null) {
    super(light);
    this.lightPositionNode = lightPosition(light);
    this.lightDirectionNode = this.lightPositionNode.normalize();
    this.groundColorNode = uniform(new Color()).setGroup(renderGroup);
  }
  /**
   * Overwritten to updated hemisphere light specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update(frame) {
    const { light } = this;
    super.update(frame);
    this.lightPositionNode.object3d = light;
    this.groundColorNode.value.copy(light.groundColor).multiplyScalar(light.intensity);
  }
  setup(builder) {
    const { colorNode, groundColorNode, lightDirectionNode } = this;
    const dotNL = normalWorld.dot(lightDirectionNode);
    const hemiDiffuseWeight = dotNL.mul(0.5).add(0.5);
    const irradiance = mix(groundColorNode, colorNode, hemiDiffuseWeight);
    builder.context.irradiance.addAssign(irradiance);
  }
};
var LightProbeNode = class extends AnalyticLightNode {
  static get type() {
    return "LightProbeNode";
  }
  /**
   * Constructs a new light probe node.
   *
   * @param {?LightProbe} [light=null] - The light probe.
   */
  constructor(light = null) {
    super(light);
    const array3 = [];
    for (let i2 = 0; i2 < 9; i2++)
      array3.push(new Vector3());
    this.lightProbe = uniformArray(array3);
  }
  /**
   * Overwritten to updated light probe specific uniforms.
   *
   * @param {NodeFrame} frame - A reference to the current node frame.
   */
  update(frame) {
    const { light } = this;
    super.update(frame);
    for (let i2 = 0; i2 < 9; i2++) {
      this.lightProbe.array[i2].copy(light.sh.coefficients[i2]).multiplyScalar(light.intensity);
    }
  }
  setup(builder) {
    const irradiance = getShIrradianceAt(normalWorld, this.lightProbe);
    builder.context.irradiance.addAssign(irradiance);
  }
};
var NodeParser = class {
  /**
   * The method parses the given native code an returns a node function.
   *
   * @abstract
   * @param {string} source - The native shader code.
   * @return {NodeFunction} A node function.
   */
  parseFunction() {
    console.warn("Abstract function.");
  }
};
var NodeFunction = class {
  /**
   * Constructs a new node function.
   *
   * @param {string} type - The node type. This type is the return type of the node function.
   * @param {Array<NodeFunctionInput>} inputs - The function's inputs.
   * @param {string} [name=''] - The function's name.
   * @param {string} [precision=''] - The precision qualifier.
   */
  constructor(type, inputs, name = "", precision = "") {
    this.type = type;
    this.inputs = inputs;
    this.name = name;
    this.precision = precision;
  }
  /**
   * This method returns the native code of the node function.
   *
   * @abstract
   * @param {string} name - The function's name.
   * @return {string} A shader code.
   */
  getCode() {
    console.warn("Abstract function.");
  }
};
NodeFunction.isNodeFunction = true;
var declarationRegexp$1 = /^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i;
var propertiesRegexp$1 = /[a-z_0-9]+/ig;
var pragmaMain = "#pragma main";
var parse$1 = (source) => {
  source = source.trim();
  const pragmaMainIndex = source.indexOf(pragmaMain);
  const mainCode = pragmaMainIndex !== -1 ? source.slice(pragmaMainIndex + pragmaMain.length) : source;
  const declaration = mainCode.match(declarationRegexp$1);
  if (declaration !== null && declaration.length === 5) {
    const inputsCode = declaration[4];
    const propsMatches = [];
    let nameMatch = null;
    while ((nameMatch = propertiesRegexp$1.exec(inputsCode)) !== null) {
      propsMatches.push(nameMatch);
    }
    const inputs = [];
    let i2 = 0;
    while (i2 < propsMatches.length) {
      const isConst = propsMatches[i2][0] === "const";
      if (isConst === true) {
        i2++;
      }
      let qualifier = propsMatches[i2][0];
      if (qualifier === "in" || qualifier === "out" || qualifier === "inout") {
        i2++;
      } else {
        qualifier = "";
      }
      const type2 = propsMatches[i2++][0];
      let count = Number.parseInt(propsMatches[i2][0]);
      if (Number.isNaN(count) === false)
        i2++;
      else
        count = null;
      const name2 = propsMatches[i2++][0];
      inputs.push(new NodeFunctionInput(type2, name2, count, qualifier, isConst));
    }
    const blockCode = mainCode.substring(declaration[0].length);
    const name = declaration[3] !== void 0 ? declaration[3] : "";
    const type = declaration[2];
    const precision = declaration[1] !== void 0 ? declaration[1] : "";
    const headerCode = pragmaMainIndex !== -1 ? source.slice(0, pragmaMainIndex) : "";
    return {
      type,
      inputs,
      name,
      precision,
      inputsCode,
      blockCode,
      headerCode
    };
  } else {
    throw new Error("FunctionNode: Function is not a GLSL code.");
  }
};
var GLSLNodeFunction = class extends NodeFunction {
  /**
   * Constructs a new GLSL node function.
   *
   * @param {string} source - The GLSL source.
   */
  constructor(source) {
    const { type, inputs, name, precision, inputsCode, blockCode, headerCode } = parse$1(source);
    super(type, inputs, name, precision);
    this.inputsCode = inputsCode;
    this.blockCode = blockCode;
    this.headerCode = headerCode;
  }
  /**
   * This method returns the GLSL code of the node function.
   *
   * @param {string} [name=this.name] - The function's name.
   * @return {string} The shader code.
   */
  getCode(name = this.name) {
    let code3;
    const blockCode = this.blockCode;
    if (blockCode !== "") {
      const { type, inputsCode, headerCode, precision } = this;
      let declarationCode = `${type} ${name} ( ${inputsCode.trim()} )`;
      if (precision !== "") {
        declarationCode = `${precision} ${declarationCode}`;
      }
      code3 = headerCode + declarationCode + blockCode;
    } else {
      code3 = "";
    }
    return code3;
  }
};
var GLSLNodeParser = class extends NodeParser {
  /**
   * The method parses the given GLSL code an returns a node function.
   *
   * @param {string} source - The GLSL code.
   * @return {GLSLNodeFunction} A node function.
   */
  parseFunction(source) {
    return new GLSLNodeFunction(source);
  }
};
var _outputNodeMap = /* @__PURE__ */ new WeakMap();
var _chainKeys$2 = [];
var _cacheKeyValues = [];
var Nodes = class extends DataMap {
  /**
   * Constructs a new nodes management component.
   *
   * @param {Renderer} renderer - The renderer.
   * @param {Backend} backend - The renderer's backend.
   */
  constructor(renderer3, backend) {
    super();
    this.renderer = renderer3;
    this.backend = backend;
    this.nodeFrame = new NodeFrame();
    this.nodeBuilderCache = /* @__PURE__ */ new Map();
    this.callHashCache = new ChainMap();
    this.groupsData = new ChainMap();
    this.cacheLib = {};
  }
  /**
   * Returns `true` if the given node uniforms group must be updated or not.
   *
   * @param {NodeUniformsGroup} nodeUniformsGroup - The node uniforms group.
   * @return {boolean} Whether the node uniforms group requires an update or not.
   */
  updateGroup(nodeUniformsGroup) {
    const groupNode = nodeUniformsGroup.groupNode;
    const name = groupNode.name;
    if (name === objectGroup.name)
      return true;
    if (name === renderGroup.name) {
      const uniformsGroupData = this.get(nodeUniformsGroup);
      const renderId = this.nodeFrame.renderId;
      if (uniformsGroupData.renderId !== renderId) {
        uniformsGroupData.renderId = renderId;
        return true;
      }
      return false;
    }
    if (name === frameGroup.name) {
      const uniformsGroupData = this.get(nodeUniformsGroup);
      const frameId3 = this.nodeFrame.frameId;
      if (uniformsGroupData.frameId !== frameId3) {
        uniformsGroupData.frameId = frameId3;
        return true;
      }
      return false;
    }
    _chainKeys$2[0] = groupNode;
    _chainKeys$2[1] = nodeUniformsGroup;
    let groupData = this.groupsData.get(_chainKeys$2);
    if (groupData === void 0)
      this.groupsData.set(_chainKeys$2, groupData = {});
    _chainKeys$2.length = 0;
    if (groupData.version !== groupNode.version) {
      groupData.version = groupNode.version;
      return true;
    }
    return false;
  }
  /**
   * Returns the cache key for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {number} The cache key.
   */
  getForRenderCacheKey(renderObject) {
    return renderObject.initialCacheKey;
  }
  /**
   * Returns a node builder state for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {NodeBuilderState} The node builder state.
   */
  getForRender(renderObject) {
    const renderObjectData = this.get(renderObject);
    let nodeBuilderState = renderObjectData.nodeBuilderState;
    if (nodeBuilderState === void 0) {
      const { nodeBuilderCache } = this;
      const cacheKey = this.getForRenderCacheKey(renderObject);
      nodeBuilderState = nodeBuilderCache.get(cacheKey);
      if (nodeBuilderState === void 0) {
        const nodeBuilder = this.backend.createNodeBuilder(renderObject.object, this.renderer);
        nodeBuilder.scene = renderObject.scene;
        nodeBuilder.material = renderObject.material;
        nodeBuilder.camera = renderObject.camera;
        nodeBuilder.context.material = renderObject.material;
        nodeBuilder.lightsNode = renderObject.lightsNode;
        nodeBuilder.environmentNode = this.getEnvironmentNode(renderObject.scene);
        nodeBuilder.fogNode = this.getFogNode(renderObject.scene);
        nodeBuilder.clippingContext = renderObject.clippingContext;
        if (this.renderer.getOutputRenderTarget() ? this.renderer.getOutputRenderTarget().multiview : false) {
          nodeBuilder.enableMultiview();
        }
        nodeBuilder.build();
        nodeBuilderState = this._createNodeBuilderState(nodeBuilder);
        nodeBuilderCache.set(cacheKey, nodeBuilderState);
      }
      nodeBuilderState.usedTimes++;
      renderObjectData.nodeBuilderState = nodeBuilderState;
    }
    return nodeBuilderState;
  }
  /**
   * Deletes the given object from the internal data map
   *
   * @param {any} object - The object to delete.
   * @return {?Object} The deleted dictionary.
   */
  delete(object) {
    if (object.isRenderObject) {
      const nodeBuilderState = this.get(object).nodeBuilderState;
      nodeBuilderState.usedTimes--;
      if (nodeBuilderState.usedTimes === 0) {
        this.nodeBuilderCache.delete(this.getForRenderCacheKey(object));
      }
    }
    return super.delete(object);
  }
  /**
   * Returns a node builder state for the given compute node.
   *
   * @param {Node} computeNode - The compute node.
   * @return {NodeBuilderState} The node builder state.
   */
  getForCompute(computeNode) {
    const computeData = this.get(computeNode);
    let nodeBuilderState = computeData.nodeBuilderState;
    if (nodeBuilderState === void 0) {
      const nodeBuilder = this.backend.createNodeBuilder(computeNode, this.renderer);
      nodeBuilder.build();
      nodeBuilderState = this._createNodeBuilderState(nodeBuilder);
      computeData.nodeBuilderState = nodeBuilderState;
    }
    return nodeBuilderState;
  }
  /**
   * Creates a node builder state for the given node builder.
   *
   * @private
   * @param {NodeBuilder} nodeBuilder - The node builder.
   * @return {NodeBuilderState} The node builder state.
   */
  _createNodeBuilderState(nodeBuilder) {
    return new NodeBuilderState(
      nodeBuilder.vertexShader,
      nodeBuilder.fragmentShader,
      nodeBuilder.computeShader,
      nodeBuilder.getAttributesArray(),
      nodeBuilder.getBindings(),
      nodeBuilder.updateNodes,
      nodeBuilder.updateBeforeNodes,
      nodeBuilder.updateAfterNodes,
      nodeBuilder.observer,
      nodeBuilder.transforms
    );
  }
  /**
   * Returns an environment node for the current configured
   * scene environment.
   *
   * @param {Scene} scene - The scene.
   * @return {Node} A node representing the current scene environment.
   */
  getEnvironmentNode(scene3) {
    this.updateEnvironment(scene3);
    let environmentNode = null;
    if (scene3.environmentNode && scene3.environmentNode.isNode) {
      environmentNode = scene3.environmentNode;
    } else {
      const sceneData = this.get(scene3);
      if (sceneData.environmentNode) {
        environmentNode = sceneData.environmentNode;
      }
    }
    return environmentNode;
  }
  /**
   * Returns a background node for the current configured
   * scene background.
   *
   * @param {Scene} scene - The scene.
   * @return {Node} A node representing the current scene background.
   */
  getBackgroundNode(scene3) {
    this.updateBackground(scene3);
    let backgroundNode = null;
    if (scene3.backgroundNode && scene3.backgroundNode.isNode) {
      backgroundNode = scene3.backgroundNode;
    } else {
      const sceneData = this.get(scene3);
      if (sceneData.backgroundNode) {
        backgroundNode = sceneData.backgroundNode;
      }
    }
    return backgroundNode;
  }
  /**
   * Returns a fog node for the current configured scene fog.
   *
   * @param {Scene} scene - The scene.
   * @return {Node} A node representing the current scene fog.
   */
  getFogNode(scene3) {
    this.updateFog(scene3);
    return scene3.fogNode || this.get(scene3).fogNode || null;
  }
  /**
   * Returns a cache key for the given scene and lights node.
   * This key is used by `RenderObject` as a part of the dynamic
   * cache key (a key that must be checked every time the render
   * objects is drawn).
   *
   * @param {Scene} scene - The scene.
   * @param {LightsNode} lightsNode - The lights node.
   * @return {number} The cache key.
   */
  getCacheKey(scene3, lightsNode) {
    _chainKeys$2[0] = scene3;
    _chainKeys$2[1] = lightsNode;
    const callId = this.renderer.info.calls;
    const cacheKeyData = this.callHashCache.get(_chainKeys$2) || {};
    if (cacheKeyData.callId !== callId) {
      const environmentNode = this.getEnvironmentNode(scene3);
      const fogNode = this.getFogNode(scene3);
      if (lightsNode)
        _cacheKeyValues.push(lightsNode.getCacheKey(true));
      if (environmentNode)
        _cacheKeyValues.push(environmentNode.getCacheKey());
      if (fogNode)
        _cacheKeyValues.push(fogNode.getCacheKey());
      _cacheKeyValues.push(this.renderer.getOutputRenderTarget() && this.renderer.getOutputRenderTarget().multiview ? 1 : 0);
      _cacheKeyValues.push(this.renderer.shadowMap.enabled ? 1 : 0);
      cacheKeyData.callId = callId;
      cacheKeyData.cacheKey = hashArray(_cacheKeyValues);
      this.callHashCache.set(_chainKeys$2, cacheKeyData);
      _cacheKeyValues.length = 0;
    }
    _chainKeys$2.length = 0;
    return cacheKeyData.cacheKey;
  }
  /**
   * A boolean that indicates whether tone mapping should be enabled
   * or not.
   *
   * @type {boolean}
   */
  get isToneMappingState() {
    return this.renderer.getRenderTarget() ? false : true;
  }
  /**
   * If a scene background is configured, this method makes sure to
   * represent the background with a corresponding node-based implementation.
   *
   * @param {Scene} scene - The scene.
   */
  updateBackground(scene3) {
    const sceneData = this.get(scene3);
    const background = scene3.background;
    if (background) {
      const forceUpdate = scene3.backgroundBlurriness === 0 && sceneData.backgroundBlurriness > 0 || scene3.backgroundBlurriness > 0 && sceneData.backgroundBlurriness === 0;
      if (sceneData.background !== background || forceUpdate) {
        const backgroundNode = this.getCacheNode("background", background, () => {
          if (background.isCubeTexture === true || (background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping || background.mapping === CubeUVReflectionMapping)) {
            if (scene3.backgroundBlurriness > 0 || background.mapping === CubeUVReflectionMapping) {
              return pmremTexture(background);
            } else {
              let envMap;
              if (background.isCubeTexture === true) {
                envMap = cubeTexture(background);
              } else {
                envMap = texture(background);
              }
              return cubeMapNode(envMap);
            }
          } else if (background.isTexture === true) {
            return texture(background, screenUV.flipY()).setUpdateMatrix(true);
          } else if (background.isColor !== true) {
            console.error("WebGPUNodes: Unsupported background configuration.", background);
          }
        }, forceUpdate);
        sceneData.backgroundNode = backgroundNode;
        sceneData.background = background;
        sceneData.backgroundBlurriness = scene3.backgroundBlurriness;
      }
    } else if (sceneData.backgroundNode) {
      delete sceneData.backgroundNode;
      delete sceneData.background;
    }
  }
  /**
   * This method is part of the caching of nodes which are used to represents the
   * scene's background, fog or environment.
   *
   * @param {string} type - The type of object to cache.
   * @param {Object} object - The object.
   * @param {Function} callback - A callback that produces a node representation for the given object.
   * @param {boolean} [forceUpdate=false] - Whether an update should be enforced or not.
   * @return {Node} The node representation.
   */
  getCacheNode(type, object, callback, forceUpdate = false) {
    const nodeCache = this.cacheLib[type] || (this.cacheLib[type] = /* @__PURE__ */ new WeakMap());
    let node = nodeCache.get(object);
    if (node === void 0 || forceUpdate) {
      node = callback();
      nodeCache.set(object, node);
    }
    return node;
  }
  /**
   * If a scene fog is configured, this method makes sure to
   * represent the fog with a corresponding node-based implementation.
   *
   * @param {Scene} scene - The scene.
   */
  updateFog(scene3) {
    const sceneData = this.get(scene3);
    const sceneFog = scene3.fog;
    if (sceneFog) {
      if (sceneData.fog !== sceneFog) {
        const fogNode = this.getCacheNode("fog", sceneFog, () => {
          if (sceneFog.isFogExp2) {
            const color4 = reference("color", "color", sceneFog).setGroup(renderGroup);
            const density = reference("density", "float", sceneFog).setGroup(renderGroup);
            return fog(color4, densityFogFactor(density));
          } else if (sceneFog.isFog) {
            const color4 = reference("color", "color", sceneFog).setGroup(renderGroup);
            const near = reference("near", "float", sceneFog).setGroup(renderGroup);
            const far = reference("far", "float", sceneFog).setGroup(renderGroup);
            return fog(color4, rangeFogFactor(near, far));
          } else {
            console.error("THREE.Renderer: Unsupported fog configuration.", sceneFog);
          }
        });
        sceneData.fogNode = fogNode;
        sceneData.fog = sceneFog;
      }
    } else {
      delete sceneData.fogNode;
      delete sceneData.fog;
    }
  }
  /**
   * If a scene environment is configured, this method makes sure to
   * represent the environment with a corresponding node-based implementation.
   *
   * @param {Scene} scene - The scene.
   */
  updateEnvironment(scene3) {
    const sceneData = this.get(scene3);
    const environment = scene3.environment;
    if (environment) {
      if (sceneData.environment !== environment) {
        const environmentNode = this.getCacheNode("environment", environment, () => {
          if (environment.isCubeTexture === true) {
            return cubeTexture(environment);
          } else if (environment.isTexture === true) {
            return texture(environment);
          } else {
            console.error("Nodes: Unsupported environment configuration.", environment);
          }
        });
        sceneData.environmentNode = environmentNode;
        sceneData.environment = environment;
      }
    } else if (sceneData.environmentNode) {
      delete sceneData.environmentNode;
      delete sceneData.environment;
    }
  }
  getNodeFrame(renderer3 = this.renderer, scene3 = null, object = null, camera3 = null, material = null) {
    const nodeFrame = this.nodeFrame;
    nodeFrame.renderer = renderer3;
    nodeFrame.scene = scene3;
    nodeFrame.object = object;
    nodeFrame.camera = camera3;
    nodeFrame.material = material;
    return nodeFrame;
  }
  getNodeFrameForRender(renderObject) {
    return this.getNodeFrame(renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material);
  }
  /**
   * Returns the current output cache key.
   *
   * @return {string} The output cache key.
   */
  getOutputCacheKey() {
    const renderer3 = this.renderer;
    return renderer3.toneMapping + "," + renderer3.currentColorSpace + "," + renderer3.xr.isPresenting;
  }
  /**
   * Checks if the output configuration (tone mapping and color space) for
   * the given target has changed.
   *
   * @param {Texture} outputTarget - The output target.
   * @return {boolean} Whether the output configuration has changed or not.
   */
  hasOutputChange(outputTarget) {
    const cacheKey = _outputNodeMap.get(outputTarget);
    return cacheKey !== this.getOutputCacheKey();
  }
  /**
   * Returns a node that represents the output configuration (tone mapping and
   * color space) for the current target.
   *
   * @param {Texture} outputTarget - The output target.
   * @return {Node} The output node.
   */
  getOutputNode(outputTarget) {
    const renderer3 = this.renderer;
    const cacheKey = this.getOutputCacheKey();
    const output3 = outputTarget.isArrayTexture ? texture3D(outputTarget, vec3(screenUV, builtin("gl_ViewID_OVR"))).renderOutput(renderer3.toneMapping, renderer3.currentColorSpace) : texture(outputTarget, screenUV).renderOutput(renderer3.toneMapping, renderer3.currentColorSpace);
    _outputNodeMap.set(outputTarget, cacheKey);
    return output3;
  }
  /**
   * Triggers the call of `updateBefore()` methods
   * for all nodes of the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  updateBefore(renderObject) {
    const nodeBuilder = renderObject.getNodeBuilderState();
    for (const node of nodeBuilder.updateBeforeNodes) {
      this.getNodeFrameForRender(renderObject).updateBeforeNode(node);
    }
  }
  /**
   * Triggers the call of `updateAfter()` methods
   * for all nodes of the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  updateAfter(renderObject) {
    const nodeBuilder = renderObject.getNodeBuilderState();
    for (const node of nodeBuilder.updateAfterNodes) {
      this.getNodeFrameForRender(renderObject).updateAfterNode(node);
    }
  }
  /**
   * Triggers the call of `update()` methods
   * for all nodes of the given compute node.
   *
   * @param {Node} computeNode - The compute node.
   */
  updateForCompute(computeNode) {
    const nodeFrame = this.getNodeFrame();
    const nodeBuilder = this.getForCompute(computeNode);
    for (const node of nodeBuilder.updateNodes) {
      nodeFrame.updateNode(node);
    }
  }
  /**
   * Triggers the call of `update()` methods
   * for all nodes of the given compute node.
   *
   * @param {RenderObject} renderObject - The render object.
   */
  updateForRender(renderObject) {
    const nodeFrame = this.getNodeFrameForRender(renderObject);
    const nodeBuilder = renderObject.getNodeBuilderState();
    for (const node of nodeBuilder.updateNodes) {
      nodeFrame.updateNode(node);
    }
  }
  /**
   * Returns `true` if the given render object requires a refresh.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {boolean} Whether the given render object requires a refresh or not.
   */
  needsRefresh(renderObject) {
    const nodeFrame = this.getNodeFrameForRender(renderObject);
    const monitor = renderObject.getMonitor();
    return monitor.needsRefresh(renderObject, nodeFrame);
  }
  /**
   * Frees the internal resources.
   */
  dispose() {
    super.dispose();
    this.nodeFrame = new NodeFrame();
    this.nodeBuilderCache = /* @__PURE__ */ new Map();
    this.cacheLib = {};
  }
};
var _plane = new Plane();
var ClippingContext = class _ClippingContext {
  /**
   * Constructs a new clipping context.
   *
   * @param {?ClippingContext} [parentContext=null] - A reference to the parent clipping context.
   */
  constructor(parentContext = null) {
    this.version = 0;
    this.clipIntersection = null;
    this.cacheKey = "";
    this.shadowPass = false;
    this.viewNormalMatrix = new Matrix3();
    this.clippingGroupContexts = /* @__PURE__ */ new WeakMap();
    this.intersectionPlanes = [];
    this.unionPlanes = [];
    this.parentVersion = null;
    if (parentContext !== null) {
      this.viewNormalMatrix = parentContext.viewNormalMatrix;
      this.clippingGroupContexts = parentContext.clippingGroupContexts;
      this.shadowPass = parentContext.shadowPass;
      this.viewMatrix = parentContext.viewMatrix;
    }
  }
  /**
   * Projects the given source clipping planes and writes the result into the
   * destination array.
   *
   * @param {Array<Plane>} source - The source clipping planes.
   * @param {Array<Vector4>} destination - The destination.
   * @param {number} offset - The offset.
   */
  projectPlanes(source, destination, offset) {
    const l2 = source.length;
    for (let i2 = 0; i2 < l2; i2++) {
      _plane.copy(source[i2]).applyMatrix4(this.viewMatrix, this.viewNormalMatrix);
      const v2 = destination[offset + i2];
      const normal2 = _plane.normal;
      v2.x = -normal2.x;
      v2.y = -normal2.y;
      v2.z = -normal2.z;
      v2.w = _plane.constant;
    }
  }
  /**
   * Updates the root clipping context of a scene.
   *
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera that is used to render the scene.
   */
  updateGlobal(scene3, camera3) {
    this.shadowPass = scene3.overrideMaterial !== null && scene3.overrideMaterial.isShadowPassMaterial;
    this.viewMatrix = camera3.matrixWorldInverse;
    this.viewNormalMatrix.getNormalMatrix(this.viewMatrix);
  }
  /**
   * Updates the clipping context.
   *
   * @param {ClippingContext} parentContext - The parent context.
   * @param {ClippingGroup} clippingGroup - The clipping group this context belongs to.
   */
  update(parentContext, clippingGroup) {
    let update20 = false;
    if (parentContext.version !== this.parentVersion) {
      this.intersectionPlanes = Array.from(parentContext.intersectionPlanes);
      this.unionPlanes = Array.from(parentContext.unionPlanes);
      this.parentVersion = parentContext.version;
    }
    if (this.clipIntersection !== clippingGroup.clipIntersection) {
      this.clipIntersection = clippingGroup.clipIntersection;
      if (this.clipIntersection) {
        this.unionPlanes.length = parentContext.unionPlanes.length;
      } else {
        this.intersectionPlanes.length = parentContext.intersectionPlanes.length;
      }
    }
    const srcClippingPlanes = clippingGroup.clippingPlanes;
    const l2 = srcClippingPlanes.length;
    let dstClippingPlanes;
    let offset;
    if (this.clipIntersection) {
      dstClippingPlanes = this.intersectionPlanes;
      offset = parentContext.intersectionPlanes.length;
    } else {
      dstClippingPlanes = this.unionPlanes;
      offset = parentContext.unionPlanes.length;
    }
    if (dstClippingPlanes.length !== offset + l2) {
      dstClippingPlanes.length = offset + l2;
      for (let i2 = 0; i2 < l2; i2++) {
        dstClippingPlanes[offset + i2] = new Vector4();
      }
      update20 = true;
    }
    this.projectPlanes(srcClippingPlanes, dstClippingPlanes, offset);
    if (update20) {
      this.version++;
      this.cacheKey = `${this.intersectionPlanes.length}:${this.unionPlanes.length}`;
    }
  }
  /**
   * Returns a clipping context for the given clipping group.
   *
   * @param {ClippingGroup} clippingGroup - The clipping group.
   * @return {ClippingContext} The clipping context.
   */
  getGroupContext(clippingGroup) {
    if (this.shadowPass && !clippingGroup.clipShadows)
      return this;
    let context3 = this.clippingGroupContexts.get(clippingGroup);
    if (context3 === void 0) {
      context3 = new _ClippingContext(this);
      this.clippingGroupContexts.set(clippingGroup, context3);
    }
    context3.update(this, clippingGroup);
    return context3;
  }
  /**
   * The count of union clipping planes.
   *
   * @type {number}
   * @readonly
   */
  get unionClippingCount() {
    return this.unionPlanes.length;
  }
};
var RenderBundle = class {
  /**
   * Constructs a new bundle group.
   *
   * @param {BundleGroup} bundleGroup - The bundle group.
   * @param {Camera} camera - The camera the bundle group is rendered with.
   */
  constructor(bundleGroup, camera3) {
    this.bundleGroup = bundleGroup;
    this.camera = camera3;
  }
};
var _chainKeys$1 = [];
var RenderBundles = class {
  /**
   * Constructs a new render bundle management component.
   */
  constructor() {
    this.bundles = new ChainMap();
  }
  /**
   * Returns a render bundle for the given bundle group and camera.
   *
   * @param {BundleGroup} bundleGroup - The bundle group.
   * @param {Camera} camera - The camera the bundle group is rendered with.
   * @return {RenderBundle} The render bundle.
   */
  get(bundleGroup, camera3) {
    const bundles = this.bundles;
    _chainKeys$1[0] = bundleGroup;
    _chainKeys$1[1] = camera3;
    let bundle = bundles.get(_chainKeys$1);
    if (bundle === void 0) {
      bundle = new RenderBundle(bundleGroup, camera3);
      bundles.set(_chainKeys$1, bundle);
    }
    _chainKeys$1.length = 0;
    return bundle;
  }
  /**
   * Frees all internal resources.
   */
  dispose() {
    this.bundles = new ChainMap();
  }
};
var NodeLibrary = class {
  /**
   * Constructs a new node library.
   */
  constructor() {
    this.lightNodes = /* @__PURE__ */ new WeakMap();
    this.materialNodes = /* @__PURE__ */ new Map();
    this.toneMappingNodes = /* @__PURE__ */ new Map();
  }
  /**
   * Returns a matching node material instance for the given material object.
   *
   * This method also assigns/copies the properties of the given material object
   * to the node material. This is done to make sure the current material
   * configuration carries over to the node version.
   *
   * @param {Material} material - A material.
   * @return {NodeMaterial} The corresponding node material.
   */
  fromMaterial(material) {
    if (material.isNodeMaterial)
      return material;
    let nodeMaterial = null;
    const nodeMaterialClass = this.getMaterialNodeClass(material.type);
    if (nodeMaterialClass !== null) {
      nodeMaterial = new nodeMaterialClass();
      for (const key in material) {
        nodeMaterial[key] = material[key];
      }
    }
    return nodeMaterial;
  }
  /**
   * Adds a tone mapping node function for a tone mapping technique (constant).
   *
   * @param {Function} toneMappingNode - The tone mapping node function.
   * @param {number} toneMapping - The tone mapping.
   */
  addToneMapping(toneMappingNode, toneMapping3) {
    this.addType(toneMappingNode, toneMapping3, this.toneMappingNodes);
  }
  /**
   * Returns a tone mapping node function for a tone mapping technique (constant).
   *
   * @param {number} toneMapping - The tone mapping.
   * @return {?Function} The tone mapping node function. Returns `null` if no node function is found.
   */
  getToneMappingFunction(toneMapping3) {
    return this.toneMappingNodes.get(toneMapping3) || null;
  }
  /**
   * Returns a node material class definition for a material type.
   *
   * @param {string} materialType - The material type.
   * @return {?NodeMaterial.constructor} The node material class definition. Returns `null` if no node material is found.
   */
  getMaterialNodeClass(materialType) {
    return this.materialNodes.get(materialType) || null;
  }
  /**
   * Adds a node material class definition for a given material type.
   *
   * @param {NodeMaterial.constructor} materialNodeClass - The node material class definition.
   * @param {string} materialClassType - The material type.
   */
  addMaterial(materialNodeClass, materialClassType) {
    this.addType(materialNodeClass, materialClassType, this.materialNodes);
  }
  /**
   * Returns a light node class definition for a light class definition.
   *
   * @param {Light.constructor} light - The light class definition.
   * @return {?AnalyticLightNode.constructor} The light node class definition. Returns `null` if no light node is found.
   */
  getLightNodeClass(light) {
    return this.lightNodes.get(light) || null;
  }
  /**
   * Adds a light node class definition for a given light class definition.
   *
   * @param {AnalyticLightNode.constructor} lightNodeClass - The light node class definition.
   * @param {Light.constructor} lightClass - The light class definition.
   */
  addLight(lightNodeClass, lightClass) {
    this.addClass(lightNodeClass, lightClass, this.lightNodes);
  }
  /**
   * Adds a node class definition for the given type to the provided type library.
   *
   * @param {Node.constructor} nodeClass - The node class definition.
   * @param {number|string} type - The object type.
   * @param {Map<number|string,Node.constructor>} library - The type library.
   */
  addType(nodeClass, type, library) {
    if (library.has(type)) {
      console.warn(`Redefinition of node ${type}`);
      return;
    }
    if (typeof nodeClass !== "function")
      throw new Error(`Node class ${nodeClass.name} is not a class.`);
    if (typeof type === "function" || typeof type === "object")
      throw new Error(`Base class ${type} is not a class.`);
    library.set(type, nodeClass);
  }
  /**
   * Adds a node class definition for the given class definition to the provided type library.
   *
   * @param {Node.constructor} nodeClass - The node class definition.
   * @param {Node.constructor} baseClass - The class definition.
   * @param {WeakMap<Node.constructor, Node.constructor>} library - The type library.
   */
  addClass(nodeClass, baseClass, library) {
    if (library.has(baseClass)) {
      console.warn(`Redefinition of node ${baseClass.name}`);
      return;
    }
    if (typeof nodeClass !== "function")
      throw new Error(`Node class ${nodeClass.name} is not a class.`);
    if (typeof baseClass !== "function")
      throw new Error(`Base class ${baseClass.name} is not a class.`);
    library.set(baseClass, nodeClass);
  }
};
var _defaultLights = new LightsNode();
var _chainKeys = [];
var Lighting = class extends ChainMap {
  /**
   * Constructs a lighting management component.
   */
  constructor() {
    super();
  }
  /**
   * Creates a new lights node for the given array of lights.
   *
   * @param {Array<Light>} lights - The render object.
   * @return {LightsNode} The lights node.
   */
  createNode(lights3 = []) {
    return new LightsNode().setLights(lights3);
  }
  /**
   * Returns a lights node for the given scene and camera.
   *
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera.
   * @return {LightsNode} The lights node.
   */
  getNode(scene3, camera3) {
    if (scene3.isQuadMesh)
      return _defaultLights;
    _chainKeys[0] = scene3;
    _chainKeys[1] = camera3;
    let node = this.get(_chainKeys);
    if (node === void 0) {
      node = this.createNode();
      this.set(_chainKeys, node);
    }
    _chainKeys.length = 0;
    return node;
  }
};
var XRRenderTarget = class extends RenderTarget {
  /**
   * Constructs a new XR render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {Object} [options={}] - The configuration options.
   */
  constructor(width = 1, height = 1, options = {}) {
    super(width, height, options);
    this.isXRRenderTarget = true;
    this._hasExternalTextures = false;
    this._autoAllocateDepthBuffer = true;
    this._isOpaqueFramebuffer = false;
  }
  copy(source) {
    super.copy(source);
    this._hasExternalTextures = source._hasExternalTextures;
    this._autoAllocateDepthBuffer = source._autoAllocateDepthBuffer;
    this._isOpaqueFramebuffer = source._isOpaqueFramebuffer;
    return this;
  }
};
var _cameraLPos = new Vector3();
var _cameraRPos = new Vector3();
var XRManager = class extends EventDispatcher {
  /**
   * Constructs a new XR manager.
   *
   * @param {Renderer} renderer - The renderer.
   * @param {boolean} [multiview=false] - Enables multiview if the device supports it.
   */
  constructor(renderer3, multiview = false) {
    super();
    this.enabled = false;
    this.isPresenting = false;
    this.cameraAutoUpdate = true;
    this._renderer = renderer3;
    this._cameraL = new PerspectiveCamera();
    this._cameraL.viewport = new Vector4();
    this._cameraR = new PerspectiveCamera();
    this._cameraR.viewport = new Vector4();
    this._cameras = [this._cameraL, this._cameraR];
    this._cameraXR = new ArrayCamera();
    this._currentDepthNear = null;
    this._currentDepthFar = null;
    this._controllers = [];
    this._controllerInputSources = [];
    this._xrRenderTarget = null;
    this._layers = [];
    this._sessionUsesLayers = false;
    this._supportsGlBinding = typeof XRWebGLBinding !== "undefined";
    this._frameBufferTargets = null;
    this._createXRLayer = createXRLayer.bind(this);
    this._gl = null;
    this._currentAnimationContext = null;
    this._currentAnimationLoop = null;
    this._currentPixelRatio = null;
    this._currentSize = new Vector2();
    this._onSessionEvent = onSessionEvent.bind(this);
    this._onSessionEnd = onSessionEnd.bind(this);
    this._onInputSourcesChange = onInputSourcesChange.bind(this);
    this._onAnimationFrame = onAnimationFrame.bind(this);
    this._referenceSpace = null;
    this._referenceSpaceType = "local-floor";
    this._customReferenceSpace = null;
    this._framebufferScaleFactor = 1;
    this._foveation = 1;
    this._session = null;
    this._glBaseLayer = null;
    this._glBinding = null;
    this._glProjLayer = null;
    this._xrFrame = null;
    this._supportsLayers = this._supportsGlBinding && "createProjectionLayer" in XRWebGLBinding.prototype;
    this._useMultiviewIfPossible = multiview;
    this._useMultiview = false;
  }
  /**
   * Returns an instance of `THREE.Group` that represents the transformation
   * of a XR controller in target ray space. The requested controller is defined
   * by the given index.
   *
   * @param {number} index - The index of the XR controller.
   * @return {Group} A group that represents the controller's transformation.
   */
  getController(index6) {
    const controller = this._getController(index6);
    return controller.getTargetRaySpace();
  }
  /**
   * Returns an instance of `THREE.Group` that represents the transformation
   * of a XR controller in grip space. The requested controller is defined
   * by the given index.
   *
   * @param {number} index - The index of the XR controller.
   * @return {Group} A group that represents the controller's transformation.
   */
  getControllerGrip(index6) {
    const controller = this._getController(index6);
    return controller.getGripSpace();
  }
  /**
   * Returns an instance of `THREE.Group` that represents the transformation
   * of a XR controller in hand space. The requested controller is defined
   * by the given index.
   *
   * @param {number} index - The index of the XR controller.
   * @return {Group} A group that represents the controller's transformation.
   */
  getHand(index6) {
    const controller = this._getController(index6);
    return controller.getHandSpace();
  }
  /**
   * Returns the foveation value.
   *
   * @return {number|undefined} The foveation value. Returns `undefined` if no base or projection layer is defined.
   */
  getFoveation() {
    if (this._glProjLayer === null && this._glBaseLayer === null) {
      return void 0;
    }
    return this._foveation;
  }
  /**
   * Sets the foveation value.
   *
   * @param {number} foveation - A number in the range `[0,1]` where `0` means no foveation (full resolution)
   * and `1` means maximum foveation (the edges render at lower resolution).
   */
  setFoveation(foveation) {
    this._foveation = foveation;
    if (this._glProjLayer !== null) {
      this._glProjLayer.fixedFoveation = foveation;
    }
    if (this._glBaseLayer !== null && this._glBaseLayer.fixedFoveation !== void 0) {
      this._glBaseLayer.fixedFoveation = foveation;
    }
  }
  /**
   * Returns the framebuffer scale factor.
   *
   * @return {number} The framebuffer scale factor.
   */
  getFramebufferScaleFactor() {
    return this._framebufferScaleFactor;
  }
  /**
   * Sets the framebuffer scale factor.
   *
   * This method can not be used during a XR session.
   *
   * @param {number} factor - The framebuffer scale factor.
   */
  setFramebufferScaleFactor(factor) {
    this._framebufferScaleFactor = factor;
    if (this.isPresenting === true) {
      console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.");
    }
  }
  /**
   * Returns the reference space type.
   *
   * @return {XRReferenceSpaceType} The reference space type.
   */
  getReferenceSpaceType() {
    return this._referenceSpaceType;
  }
  /**
   * Sets the reference space type.
   *
   * This method can not be used during a XR session.
   *
   * @param {XRReferenceSpaceType} type - The reference space type.
   */
  setReferenceSpaceType(type) {
    this._referenceSpaceType = type;
    if (this.isPresenting === true) {
      console.warn("THREE.XRManager: Cannot change reference space type while presenting.");
    }
  }
  /**
   * Returns the XR reference space.
   *
   * @return {XRReferenceSpace} The XR reference space.
   */
  getReferenceSpace() {
    return this._customReferenceSpace || this._referenceSpace;
  }
  /**
   * Sets a custom XR reference space.
   *
   * @param {XRReferenceSpace} space - The XR reference space.
   */
  setReferenceSpace(space) {
    this._customReferenceSpace = space;
  }
  /**
   * Returns the XR camera.
   *
   * @return {ArrayCamera} The XR camera.
   */
  getCamera() {
    return this._cameraXR;
  }
  /**
   * Returns the environment blend mode from the current XR session.
   *
   * @return {'opaque'|'additive'|'alpha-blend'|undefined} The environment blend mode. Returns `undefined` when used outside of a XR session.
   */
  getEnvironmentBlendMode() {
    if (this._session !== null) {
      return this._session.environmentBlendMode;
    }
  }
  /**
   * Returns the current XR binding.
   *
   * Creates a new binding if needed and the browser is
   * capable of doing so.
   *
   * @return {?XRWebGLBinding} The XR binding. Returns `null` if one cannot be created.
   */
  getBinding() {
    if (this._glBinding === null && this._supportsGlBinding) {
      this._glBinding = new XRWebGLBinding(this._session, this._gl);
    }
    return this._glBinding;
  }
  /**
   * Returns the current XR frame.
   *
   * @return {?XRFrame} The XR frame. Returns `null` when used outside a XR session.
   */
  getFrame() {
    return this._xrFrame;
  }
  /**
   * Returns `true` if the engine renders to a multiview target.
   *
   * @return {boolean} Whether the engine renders to a multiview render target or not.
   */
  useMultiview() {
    return this._useMultiview;
  }
  /**
   * This method can be used in XR applications to create a quadratic layer that presents a separate
   * rendered scene.
   *
   * @param {number} width - The width of the layer plane in world units.
   * @param {number} height - The height of the layer plane in world units.
   * @param {Vector3} translation - The position/translation of the layer plane in world units.
   * @param {Quaternion} quaternion - The orientation of the layer plane expressed as a quaternion.
   * @param {number} pixelwidth - The width of the layer's render target in pixels.
   * @param {number} pixelheight - The height of the layer's render target in pixels.
   * @param {Function} rendercall - A callback function that renders the layer. Similar to code in
   * the default animation loop, this method can be used to update/transform 3D object in the layer's scene.
   * @param {Object} [attributes={}] - Allows to configure the layer's render target.
   * @return {Mesh} A mesh representing the quadratic XR layer. This mesh should be added to the XR scene.
   */
  createQuadLayer(width, height, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = {}) {
    const geometry = new PlaneGeometry(width, height);
    const renderTarget = new XRRenderTarget(
      pixelwidth,
      pixelheight,
      {
        format: RGBAFormat,
        type: UnsignedByteType,
        depthTexture: new DepthTexture(
          pixelwidth,
          pixelheight,
          attributes.stencil ? UnsignedInt248Type : UnsignedIntType,
          void 0,
          void 0,
          void 0,
          void 0,
          void 0,
          void 0,
          attributes.stencil ? DepthStencilFormat : DepthFormat
        ),
        stencilBuffer: attributes.stencil,
        resolveDepthBuffer: false,
        resolveStencilBuffer: false
      }
    );
    renderTarget._autoAllocateDepthBuffer = true;
    const material = new MeshBasicMaterial({ color: 16777215, side: FrontSide });
    material.map = renderTarget.texture;
    material.map.offset.y = 1;
    material.map.repeat.y = -1;
    const plane = new Mesh(geometry, material);
    plane.position.copy(translation);
    plane.quaternion.copy(quaternion);
    const layer = {
      type: "quad",
      width,
      height,
      translation,
      quaternion,
      pixelwidth,
      pixelheight,
      plane,
      material,
      rendercall,
      renderTarget
    };
    this._layers.push(layer);
    if (this._session !== null) {
      layer.plane.material = new MeshBasicMaterial({ color: 16777215, side: FrontSide });
      layer.plane.material.blending = CustomBlending;
      layer.plane.material.blendEquation = AddEquation;
      layer.plane.material.blendSrc = ZeroFactor;
      layer.plane.material.blendDst = ZeroFactor;
      layer.xrlayer = this._createXRLayer(layer);
      const xrlayers = this._session.renderState.layers;
      xrlayers.unshift(layer.xrlayer);
      this._session.updateRenderState({ layers: xrlayers });
    } else {
      renderTarget.isXRRenderTarget = false;
    }
    return plane;
  }
  /**
   * This method can be used in XR applications to create a cylindrical layer that presents a separate
   * rendered scene.
   *
   * @param {number} radius - The radius of the cylinder in world units.
   * @param {number} centralAngle - The central angle of the cylinder in radians.
   * @param {number} aspectratio - The aspect ratio.
   * @param {Vector3} translation - The position/translation of the layer plane in world units.
   * @param {Quaternion} quaternion - The orientation of the layer plane expressed as a quaternion.
   * @param {number} pixelwidth - The width of the layer's render target in pixels.
   * @param {number} pixelheight - The height of the layer's render target in pixels.
   * @param {Function} rendercall - A callback function that renders the layer. Similar to code in
   * the default animation loop, this method can be used to update/transform 3D object in the layer's scene.
   * @param {Object} [attributes={}] - Allows to configure the layer's render target.
   * @return {Mesh} A mesh representing the cylindrical XR layer. This mesh should be added to the XR scene.
   */
  createCylinderLayer(radius, centralAngle, aspectratio, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = {}) {
    const geometry = new CylinderGeometry(radius, radius, radius * centralAngle / aspectratio, 64, 64, true, Math.PI - centralAngle / 2, centralAngle);
    const renderTarget = new XRRenderTarget(
      pixelwidth,
      pixelheight,
      {
        format: RGBAFormat,
        type: UnsignedByteType,
        depthTexture: new DepthTexture(
          pixelwidth,
          pixelheight,
          attributes.stencil ? UnsignedInt248Type : UnsignedIntType,
          void 0,
          void 0,
          void 0,
          void 0,
          void 0,
          void 0,
          attributes.stencil ? DepthStencilFormat : DepthFormat
        ),
        stencilBuffer: attributes.stencil,
        resolveDepthBuffer: false,
        resolveStencilBuffer: false
      }
    );
    renderTarget._autoAllocateDepthBuffer = true;
    const material = new MeshBasicMaterial({ color: 16777215, side: BackSide });
    material.map = renderTarget.texture;
    material.map.offset.y = 1;
    material.map.repeat.y = -1;
    const plane = new Mesh(geometry, material);
    plane.position.copy(translation);
    plane.quaternion.copy(quaternion);
    const layer = {
      type: "cylinder",
      radius,
      centralAngle,
      aspectratio,
      translation,
      quaternion,
      pixelwidth,
      pixelheight,
      plane,
      material,
      rendercall,
      renderTarget
    };
    this._layers.push(layer);
    if (this._session !== null) {
      layer.plane.material = new MeshBasicMaterial({ color: 16777215, side: BackSide });
      layer.plane.material.blending = CustomBlending;
      layer.plane.material.blendEquation = AddEquation;
      layer.plane.material.blendSrc = ZeroFactor;
      layer.plane.material.blendDst = ZeroFactor;
      layer.xrlayer = this._createXRLayer(layer);
      const xrlayers = this._session.renderState.layers;
      xrlayers.unshift(layer.xrlayer);
      this._session.updateRenderState({ layers: xrlayers });
    } else {
      renderTarget.isXRRenderTarget = false;
    }
    return plane;
  }
  /**
   * Renders the XR layers that have been previously added to the scene.
   *
   * This method is usually called in your animation loop before rendering
   * the actual scene via `renderer.render( scene, camera );`.
   */
  renderLayers() {
    const translationObject = new Vector3();
    const quaternionObject = new Quaternion();
    const renderer3 = this._renderer;
    const wasPresenting = this.isPresenting;
    const rendererOutputTarget = renderer3.getOutputRenderTarget();
    const rendererFramebufferTarget = renderer3._frameBufferTarget;
    this.isPresenting = false;
    const rendererSize = new Vector2();
    renderer3.getSize(rendererSize);
    const rendererQuad = renderer3._quad;
    for (const layer of this._layers) {
      layer.renderTarget.isXRRenderTarget = this._session !== null;
      layer.renderTarget._hasExternalTextures = layer.renderTarget.isXRRenderTarget;
      if (layer.renderTarget.isXRRenderTarget && this._sessionUsesLayers) {
        layer.xrlayer.transform = new XRRigidTransform(layer.plane.getWorldPosition(translationObject), layer.plane.getWorldQuaternion(quaternionObject));
        const glSubImage = this._glBinding.getSubImage(layer.xrlayer, this._xrFrame);
        renderer3.backend.setXRRenderTargetTextures(
          layer.renderTarget,
          glSubImage.colorTexture,
          void 0
        );
        renderer3._setXRLayerSize(layer.renderTarget.width, layer.renderTarget.height);
        renderer3.setOutputRenderTarget(layer.renderTarget);
        renderer3.setRenderTarget(null);
        renderer3._frameBufferTarget = null;
        this._frameBufferTargets || (this._frameBufferTargets = /* @__PURE__ */ new WeakMap());
        const { frameBufferTarget, quad } = this._frameBufferTargets.get(layer.renderTarget) || { frameBufferTarget: null, quad: null };
        if (!frameBufferTarget) {
          renderer3._quad = new QuadMesh(new NodeMaterial());
          this._frameBufferTargets.set(layer.renderTarget, { frameBufferTarget: renderer3._getFrameBufferTarget(), quad: renderer3._quad });
        } else {
          renderer3._frameBufferTarget = frameBufferTarget;
          renderer3._quad = quad;
        }
        layer.rendercall();
        renderer3._frameBufferTarget = null;
      } else {
        renderer3.setRenderTarget(layer.renderTarget);
        layer.rendercall();
      }
    }
    renderer3.setRenderTarget(null);
    renderer3.setOutputRenderTarget(rendererOutputTarget);
    renderer3._frameBufferTarget = rendererFramebufferTarget;
    renderer3._setXRLayerSize(rendererSize.x, rendererSize.y);
    renderer3._quad = rendererQuad;
    this.isPresenting = wasPresenting;
  }
  /**
   * Returns the current XR session.
   *
   * @return {?XRSession} The XR session. Returns `null` when used outside a XR session.
   */
  getSession() {
    return this._session;
  }
  /**
   * After a XR session has been requested usually with one of the `*Button` modules, it
   * is injected into the renderer with this method. This method triggers the start of
   * the actual XR rendering.
   *
   * @async
   * @param {XRSession} session - The XR session to set.
   * @return {Promise} A Promise that resolves when the session has been set.
   */
  async setSession(session) {
    const renderer3 = this._renderer;
    const backend = renderer3.backend;
    this._gl = renderer3.getContext();
    const gl = this._gl;
    const attributes = gl.getContextAttributes();
    this._session = session;
    if (session !== null) {
      if (backend.isWebGPUBackend === true)
        throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');
      session.addEventListener("select", this._onSessionEvent);
      session.addEventListener("selectstart", this._onSessionEvent);
      session.addEventListener("selectend", this._onSessionEvent);
      session.addEventListener("squeeze", this._onSessionEvent);
      session.addEventListener("squeezestart", this._onSessionEvent);
      session.addEventListener("squeezeend", this._onSessionEvent);
      session.addEventListener("end", this._onSessionEnd);
      session.addEventListener("inputsourceschange", this._onInputSourcesChange);
      await backend.makeXRCompatible();
      this._currentPixelRatio = renderer3.getPixelRatio();
      renderer3.getSize(this._currentSize);
      this._currentAnimationContext = renderer3._animation.getContext();
      this._currentAnimationLoop = renderer3._animation.getAnimationLoop();
      renderer3._animation.stop();
      if (this._supportsLayers === true) {
        let depthFormat = null;
        let depthType = null;
        let glDepthFormat = null;
        if (renderer3.depth) {
          glDepthFormat = renderer3.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
          depthFormat = renderer3.stencil ? DepthStencilFormat : DepthFormat;
          depthType = renderer3.stencil ? UnsignedInt248Type : UnsignedIntType;
        }
        const projectionlayerInit = {
          colorFormat: gl.RGBA8,
          depthFormat: glDepthFormat,
          scaleFactor: this._framebufferScaleFactor,
          clearOnAccess: false
        };
        if (this._useMultiviewIfPossible && renderer3.hasFeature("OVR_multiview2")) {
          projectionlayerInit.textureType = "texture-array";
          this._useMultiview = true;
        }
        this._glBinding = this.getBinding();
        const glProjLayer = this._glBinding.createProjectionLayer(projectionlayerInit);
        const layersArray = [glProjLayer];
        this._glProjLayer = glProjLayer;
        renderer3.setPixelRatio(1);
        renderer3._setXRLayerSize(glProjLayer.textureWidth, glProjLayer.textureHeight);
        const depth3 = this._useMultiview ? 2 : 1;
        const depthTexture = new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat, depth3);
        this._xrRenderTarget = new XRRenderTarget(
          glProjLayer.textureWidth,
          glProjLayer.textureHeight,
          {
            format: RGBAFormat,
            type: UnsignedByteType,
            colorSpace: renderer3.outputColorSpace,
            depthTexture,
            stencilBuffer: renderer3.stencil,
            samples: attributes.antialias ? 4 : 0,
            resolveDepthBuffer: glProjLayer.ignoreDepthValues === false,
            resolveStencilBuffer: glProjLayer.ignoreDepthValues === false,
            depth: this._useMultiview ? 2 : 1,
            multiview: this._useMultiview
          }
        );
        this._xrRenderTarget._hasExternalTextures = true;
        this._xrRenderTarget.depth = this._useMultiview ? 2 : 1;
        this._sessionUsesLayers = session.enabledFeatures.includes("layers");
        this._referenceSpace = await session.requestReferenceSpace(this.getReferenceSpaceType());
        if (this._sessionUsesLayers) {
          for (const layer of this._layers) {
            layer.plane.material = new MeshBasicMaterial({ color: 16777215, side: layer.type === "cylinder" ? BackSide : FrontSide });
            layer.plane.material.blending = CustomBlending;
            layer.plane.material.blendEquation = AddEquation;
            layer.plane.material.blendSrc = ZeroFactor;
            layer.plane.material.blendDst = ZeroFactor;
            layer.xrlayer = this._createXRLayer(layer);
            layersArray.unshift(layer.xrlayer);
          }
        }
        session.updateRenderState({ layers: layersArray });
      } else {
        const layerInit = {
          antialias: renderer3.samples > 0,
          alpha: true,
          depth: renderer3.depth,
          stencil: renderer3.stencil,
          framebufferScaleFactor: this.getFramebufferScaleFactor()
        };
        const glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
        this._glBaseLayer = glBaseLayer;
        session.updateRenderState({ baseLayer: glBaseLayer });
        renderer3.setPixelRatio(1);
        renderer3._setXRLayerSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight);
        this._xrRenderTarget = new XRRenderTarget(
          glBaseLayer.framebufferWidth,
          glBaseLayer.framebufferHeight,
          {
            format: RGBAFormat,
            type: UnsignedByteType,
            colorSpace: renderer3.outputColorSpace,
            stencilBuffer: renderer3.stencil,
            resolveDepthBuffer: glBaseLayer.ignoreDepthValues === false,
            resolveStencilBuffer: glBaseLayer.ignoreDepthValues === false
          }
        );
        this._xrRenderTarget._isOpaqueFramebuffer = true;
        this._referenceSpace = await session.requestReferenceSpace(this.getReferenceSpaceType());
      }
      this.setFoveation(this.getFoveation());
      renderer3._animation.setAnimationLoop(this._onAnimationFrame);
      renderer3._animation.setContext(session);
      renderer3._animation.start();
      this.isPresenting = true;
      this.dispatchEvent({ type: "sessionstart" });
    }
  }
  /**
   * This method is called by the renderer per frame and updates the XR camera
   * and it sub cameras based on the given camera. The given camera is the "user"
   * camera created on application level and used for non-XR rendering.
   *
   * @param {PerspectiveCamera} camera - The camera.
   */
  updateCamera(camera3) {
    const session = this._session;
    if (session === null)
      return;
    const depthNear = camera3.near;
    const depthFar = camera3.far;
    const cameraXR = this._cameraXR;
    const cameraL = this._cameraL;
    const cameraR = this._cameraR;
    cameraXR.near = cameraR.near = cameraL.near = depthNear;
    cameraXR.far = cameraR.far = cameraL.far = depthFar;
    cameraXR.isMultiViewCamera = this._useMultiview;
    if (this._currentDepthNear !== cameraXR.near || this._currentDepthFar !== cameraXR.far) {
      session.updateRenderState({
        depthNear: cameraXR.near,
        depthFar: cameraXR.far
      });
      this._currentDepthNear = cameraXR.near;
      this._currentDepthFar = cameraXR.far;
    }
    cameraXR.layers.mask = camera3.layers.mask | 6;
    cameraL.layers.mask = cameraXR.layers.mask & 3;
    cameraR.layers.mask = cameraXR.layers.mask & 5;
    const parent = camera3.parent;
    const cameras = cameraXR.cameras;
    updateCamera(cameraXR, parent);
    for (let i2 = 0; i2 < cameras.length; i2++) {
      updateCamera(cameras[i2], parent);
    }
    if (cameras.length === 2) {
      setProjectionFromUnion(cameraXR, cameraL, cameraR);
    } else {
      cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
    }
    updateUserCamera(camera3, cameraXR, parent);
  }
  /**
   * Returns a WebXR controller for the given controller index.
   *
   * @private
   * @param {number} index - The controller index.
   * @return {WebXRController} The XR controller.
   */
  _getController(index6) {
    let controller = this._controllers[index6];
    if (controller === void 0) {
      controller = new WebXRController();
      this._controllers[index6] = controller;
    }
    return controller;
  }
};
function setProjectionFromUnion(camera3, cameraL, cameraR) {
  _cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
  _cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
  const ipd = _cameraLPos.distanceTo(_cameraRPos);
  const projL = cameraL.projectionMatrix.elements;
  const projR = cameraR.projectionMatrix.elements;
  const near = projL[14] / (projL[10] - 1);
  const far = projL[14] / (projL[10] + 1);
  const topFov = (projL[9] + 1) / projL[5];
  const bottomFov = (projL[9] - 1) / projL[5];
  const leftFov = (projL[8] - 1) / projL[0];
  const rightFov = (projR[8] + 1) / projR[0];
  const left = near * leftFov;
  const right = near * rightFov;
  const zOffset = ipd / (-leftFov + rightFov);
  const xOffset = zOffset * -leftFov;
  cameraL.matrixWorld.decompose(camera3.position, camera3.quaternion, camera3.scale);
  camera3.translateX(xOffset);
  camera3.translateZ(zOffset);
  camera3.matrixWorld.compose(camera3.position, camera3.quaternion, camera3.scale);
  camera3.matrixWorldInverse.copy(camera3.matrixWorld).invert();
  if (projL[10] === -1) {
    camera3.projectionMatrix.copy(cameraL.projectionMatrix);
    camera3.projectionMatrixInverse.copy(cameraL.projectionMatrixInverse);
  } else {
    const near2 = near + zOffset;
    const far2 = far + zOffset;
    const left2 = left - xOffset;
    const right2 = right + (ipd - xOffset);
    const top2 = topFov * far / far2 * near2;
    const bottom2 = bottomFov * far / far2 * near2;
    camera3.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
    camera3.projectionMatrixInverse.copy(camera3.projectionMatrix).invert();
  }
}
function updateCamera(camera3, parent) {
  if (parent === null) {
    camera3.matrixWorld.copy(camera3.matrix);
  } else {
    camera3.matrixWorld.multiplyMatrices(parent.matrixWorld, camera3.matrix);
  }
  camera3.matrixWorldInverse.copy(camera3.matrixWorld).invert();
}
function updateUserCamera(camera3, cameraXR, parent) {
  if (parent === null) {
    camera3.matrix.copy(cameraXR.matrixWorld);
  } else {
    camera3.matrix.copy(parent.matrixWorld);
    camera3.matrix.invert();
    camera3.matrix.multiply(cameraXR.matrixWorld);
  }
  camera3.matrix.decompose(camera3.position, camera3.quaternion, camera3.scale);
  camera3.updateMatrixWorld(true);
  camera3.projectionMatrix.copy(cameraXR.projectionMatrix);
  camera3.projectionMatrixInverse.copy(cameraXR.projectionMatrixInverse);
  if (camera3.isPerspectiveCamera) {
    camera3.fov = RAD2DEG * 2 * Math.atan(1 / camera3.projectionMatrix.elements[5]);
    camera3.zoom = 1;
  }
}
function onSessionEvent(event) {
  const controllerIndex = this._controllerInputSources.indexOf(event.inputSource);
  if (controllerIndex === -1) {
    return;
  }
  const controller = this._controllers[controllerIndex];
  if (controller !== void 0) {
    const referenceSpace = this.getReferenceSpace();
    controller.update(event.inputSource, event.frame, referenceSpace);
    controller.dispatchEvent({ type: event.type, data: event.inputSource });
  }
}
function onSessionEnd() {
  const session = this._session;
  const renderer3 = this._renderer;
  session.removeEventListener("select", this._onSessionEvent);
  session.removeEventListener("selectstart", this._onSessionEvent);
  session.removeEventListener("selectend", this._onSessionEvent);
  session.removeEventListener("squeeze", this._onSessionEvent);
  session.removeEventListener("squeezestart", this._onSessionEvent);
  session.removeEventListener("squeezeend", this._onSessionEvent);
  session.removeEventListener("end", this._onSessionEnd);
  session.removeEventListener("inputsourceschange", this._onInputSourcesChange);
  for (let i2 = 0; i2 < this._controllers.length; i2++) {
    const inputSource = this._controllerInputSources[i2];
    if (inputSource === null)
      continue;
    this._controllerInputSources[i2] = null;
    this._controllers[i2].disconnect(inputSource);
  }
  this._currentDepthNear = null;
  this._currentDepthFar = null;
  renderer3._resetXRState();
  this._session = null;
  this._xrRenderTarget = null;
  if (this._sessionUsesLayers === true) {
    for (const layer of this._layers) {
      layer.renderTarget = new XRRenderTarget(
        layer.pixelwidth,
        layer.pixelheight,
        {
          format: RGBAFormat,
          type: UnsignedByteType,
          depthTexture: new DepthTexture(
            layer.pixelwidth,
            layer.pixelheight,
            layer.stencilBuffer ? UnsignedInt248Type : UnsignedIntType,
            void 0,
            void 0,
            void 0,
            void 0,
            void 0,
            void 0,
            layer.stencilBuffer ? DepthStencilFormat : DepthFormat
          ),
          stencilBuffer: layer.stencilBuffer,
          resolveDepthBuffer: false,
          resolveStencilBuffer: false
        }
      );
      layer.renderTarget.isXRRenderTarget = false;
      layer.plane.material = layer.material;
      layer.material.map = layer.renderTarget.texture;
      layer.material.map.offset.y = 1;
      layer.material.map.repeat.y = -1;
      delete layer.xrlayer;
    }
  }
  this.isPresenting = false;
  this._useMultiview = false;
  renderer3._animation.stop();
  renderer3._animation.setAnimationLoop(this._currentAnimationLoop);
  renderer3._animation.setContext(this._currentAnimationContext);
  renderer3._animation.start();
  renderer3.setPixelRatio(this._currentPixelRatio);
  renderer3.setSize(this._currentSize.width, this._currentSize.height, false);
  this.dispatchEvent({ type: "sessionend" });
}
function onInputSourcesChange(event) {
  const controllers = this._controllers;
  const controllerInputSources = this._controllerInputSources;
  for (let i2 = 0; i2 < event.removed.length; i2++) {
    const inputSource = event.removed[i2];
    const index6 = controllerInputSources.indexOf(inputSource);
    if (index6 >= 0) {
      controllerInputSources[index6] = null;
      controllers[index6].disconnect(inputSource);
    }
  }
  for (let i2 = 0; i2 < event.added.length; i2++) {
    const inputSource = event.added[i2];
    let controllerIndex = controllerInputSources.indexOf(inputSource);
    if (controllerIndex === -1) {
      for (let i3 = 0; i3 < controllers.length; i3++) {
        if (i3 >= controllerInputSources.length) {
          controllerInputSources.push(inputSource);
          controllerIndex = i3;
          break;
        } else if (controllerInputSources[i3] === null) {
          controllerInputSources[i3] = inputSource;
          controllerIndex = i3;
          break;
        }
      }
      if (controllerIndex === -1)
        break;
    }
    const controller = controllers[controllerIndex];
    if (controller) {
      controller.connect(inputSource);
    }
  }
}
function createXRLayer(layer) {
  if (layer.type === "quad") {
    return this._glBinding.createQuadLayer({
      transform: new XRRigidTransform(layer.translation, layer.quaternion),
      width: layer.width / 2,
      height: layer.height / 2,
      space: this._referenceSpace,
      viewPixelWidth: layer.pixelwidth,
      viewPixelHeight: layer.pixelheight,
      clearOnAccess: false
    });
  } else {
    return this._glBinding.createCylinderLayer({
      transform: new XRRigidTransform(layer.translation, layer.quaternion),
      radius: layer.radius,
      centralAngle: layer.centralAngle,
      aspectRatio: layer.aspectRatio,
      space: this._referenceSpace,
      viewPixelWidth: layer.pixelwidth,
      viewPixelHeight: layer.pixelheight,
      clearOnAccess: false
    });
  }
}
function onAnimationFrame(time3, frame) {
  if (frame === void 0)
    return;
  const cameraXR = this._cameraXR;
  const renderer3 = this._renderer;
  const backend = renderer3.backend;
  const glBaseLayer = this._glBaseLayer;
  const referenceSpace = this.getReferenceSpace();
  const pose = frame.getViewerPose(referenceSpace);
  this._xrFrame = frame;
  if (pose !== null) {
    const views = pose.views;
    if (this._glBaseLayer !== null) {
      backend.setXRTarget(glBaseLayer.framebuffer);
    }
    let cameraXRNeedsUpdate = false;
    if (views.length !== cameraXR.cameras.length) {
      cameraXR.cameras.length = 0;
      cameraXRNeedsUpdate = true;
    }
    for (let i2 = 0; i2 < views.length; i2++) {
      const view = views[i2];
      let viewport3;
      if (this._supportsLayers === true) {
        const glSubImage = this._glBinding.getViewSubImage(this._glProjLayer, view);
        viewport3 = glSubImage.viewport;
        if (i2 === 0) {
          backend.setXRRenderTargetTextures(
            this._xrRenderTarget,
            glSubImage.colorTexture,
            this._glProjLayer.ignoreDepthValues && !this._useMultiview ? void 0 : glSubImage.depthStencilTexture
          );
        }
      } else {
        viewport3 = glBaseLayer.getViewport(view);
      }
      let camera3 = this._cameras[i2];
      if (camera3 === void 0) {
        camera3 = new PerspectiveCamera();
        camera3.layers.enable(i2);
        camera3.viewport = new Vector4();
        this._cameras[i2] = camera3;
      }
      camera3.matrix.fromArray(view.transform.matrix);
      camera3.matrix.decompose(camera3.position, camera3.quaternion, camera3.scale);
      camera3.projectionMatrix.fromArray(view.projectionMatrix);
      camera3.projectionMatrixInverse.copy(camera3.projectionMatrix).invert();
      camera3.viewport.set(viewport3.x, viewport3.y, viewport3.width, viewport3.height);
      if (i2 === 0) {
        cameraXR.matrix.copy(camera3.matrix);
        cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
      }
      if (cameraXRNeedsUpdate === true) {
        cameraXR.cameras.push(camera3);
      }
    }
    renderer3.setOutputRenderTarget(this._xrRenderTarget);
  }
  for (let i2 = 0; i2 < this._controllers.length; i2++) {
    const inputSource = this._controllerInputSources[i2];
    const controller = this._controllers[i2];
    if (inputSource !== null && controller !== void 0) {
      controller.update(inputSource, frame, referenceSpace);
    }
  }
  if (this._currentAnimationLoop)
    this._currentAnimationLoop(time3, frame);
  if (frame.detectedPlanes) {
    this.dispatchEvent({ type: "planesdetected", data: frame });
  }
  this._xrFrame = null;
}
var _scene = new Scene();
var _drawingBufferSize = new Vector2();
var _screen = new Vector4();
var _frustum = new Frustum();
var _frustumArray = new FrustumArray();
var _projScreenMatrix = new Matrix4();
var _vector4 = new Vector4();
var Renderer = class {
  /**
   * Renderer options.
   *
   * @typedef {Object} Renderer~Options
   * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
   * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
   * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
   * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
   * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
   * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. This parameter can set to any other integer value than 0
   * to overwrite the default.
   * @property {?Function} [getFallback=null] - This callback function can be used to provide a fallback backend, if the primary backend can't be targeted.
   * @property {number} [colorBufferType=HalfFloatType] - Defines the type of color buffers. The default `HalfFloatType` is recommend for best
   * quality. To save memory and bandwidth, `UnsignedByteType` might be used. This will reduce rendering quality though.
   * @property {boolean} [multiview=false] - If set to `true`, the renderer will use multiview during WebXR rendering if supported.
   */
  /**
  	 * Constructs a new renderer.
  	 *
  	 * @param {Backend} backend - The backend the renderer is targeting (e.g. WebGPU or WebGL 2).
  	 * @param {Renderer~Options} [parameters] - The configuration parameter.
  
  	 */
  constructor(backend, parameters = {}) {
    this.isRenderer = true;
    const {
      logarithmicDepthBuffer = false,
      alpha = true,
      depth: depth3 = true,
      stencil = false,
      antialias = false,
      samples = 0,
      getFallback = null,
      colorBufferType = HalfFloatType,
      multiview = false
    } = parameters;
    this.domElement = backend.getDomElement();
    this.backend = backend;
    this.samples = samples || antialias === true ? 4 : 0;
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.alpha = alpha;
    this.logarithmicDepthBuffer = logarithmicDepthBuffer;
    this.outputColorSpace = SRGBColorSpace;
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    this.sortObjects = true;
    this.depth = depth3;
    this.stencil = stencil;
    this.info = new Info();
    this.overrideNodes = {
      modelViewMatrix: null,
      modelNormalViewMatrix: null
    };
    this.library = new NodeLibrary();
    this.lighting = new Lighting();
    this._getFallback = getFallback;
    this._pixelRatio = 1;
    this._width = this.domElement.width;
    this._height = this.domElement.height;
    this._viewport = new Vector4(0, 0, this._width, this._height);
    this._scissor = new Vector4(0, 0, this._width, this._height);
    this._scissorTest = false;
    this._attributes = null;
    this._geometries = null;
    this._nodes = null;
    this._animation = null;
    this._bindings = null;
    this._objects = null;
    this._pipelines = null;
    this._bundles = null;
    this._renderLists = null;
    this._renderContexts = null;
    this._textures = null;
    this._background = null;
    this._quad = new QuadMesh(new NodeMaterial());
    this._quad.material.name = "Renderer_output";
    this._currentRenderContext = null;
    this._opaqueSort = null;
    this._transparentSort = null;
    this._frameBufferTarget = null;
    const alphaClear = this.alpha === true ? 0 : 1;
    this._clearColor = new Color4(0, 0, 0, alphaClear);
    this._clearDepth = 1;
    this._clearStencil = 0;
    this._renderTarget = null;
    this._activeCubeFace = 0;
    this._activeMipmapLevel = 0;
    this._outputRenderTarget = null;
    this._mrt = null;
    this._renderObjectFunction = null;
    this._currentRenderObjectFunction = null;
    this._currentRenderBundle = null;
    this._handleObjectFunction = this._renderObjectDirect;
    this._isDeviceLost = false;
    this.onDeviceLost = this._onDeviceLost;
    this._colorBufferType = colorBufferType;
    this._initialized = false;
    this._initPromise = null;
    this._compilationPromises = null;
    this.transparent = true;
    this.opaque = true;
    this.shadowMap = {
      enabled: false,
      type: PCFShadowMap
    };
    this.xr = new XRManager(this, multiview);
    this.debug = {
      checkShaderErrors: true,
      onShaderError: null,
      getShaderAsync: async (scene3, camera3, object) => {
        await this.compileAsync(scene3, camera3);
        const renderList = this._renderLists.get(scene3, camera3);
        const renderContext = this._renderContexts.get(scene3, camera3, this._renderTarget);
        const material = scene3.overrideMaterial || object.material;
        const renderObject = this._objects.get(object, material, scene3, camera3, renderList.lightsNode, renderContext, renderContext.clippingContext);
        const { fragmentShader: fragmentShader2, vertexShader: vertexShader2 } = renderObject.getNodeBuilderState();
        return { fragmentShader: fragmentShader2, vertexShader: vertexShader2 };
      }
    };
  }
  /**
   * Initializes the renderer so it is ready for usage.
   *
   * @async
   * @return {Promise<this>} A Promise that resolves when the renderer has been initialized.
   */
  async init() {
    if (this._initialized) {
      throw new Error("Renderer: Backend has already been initialized.");
    }
    if (this._initPromise !== null) {
      return this._initPromise;
    }
    this._initPromise = new Promise(async (resolve, reject) => {
      let backend = this.backend;
      try {
        await backend.init(this);
      } catch (error) {
        if (this._getFallback !== null) {
          try {
            this.backend = backend = this._getFallback(error);
            await backend.init(this);
          } catch (error2) {
            reject(error2);
            return;
          }
        } else {
          reject(error);
          return;
        }
      }
      this._nodes = new Nodes(this, backend);
      this._animation = new Animation(this._nodes, this.info);
      this._attributes = new Attributes(backend);
      this._background = new Background(this, this._nodes);
      this._geometries = new Geometries(this._attributes, this.info);
      this._textures = new Textures(this, backend, this.info);
      this._pipelines = new Pipelines(backend, this._nodes);
      this._bindings = new Bindings(backend, this._nodes, this._textures, this._attributes, this._pipelines, this.info);
      this._objects = new RenderObjects(this, this._nodes, this._geometries, this._pipelines, this._bindings, this.info);
      this._renderLists = new RenderLists(this.lighting);
      this._bundles = new RenderBundles();
      this._renderContexts = new RenderContexts();
      this._animation.start();
      this._initialized = true;
      resolve(this);
    });
    return this._initPromise;
  }
  /**
   * The coordinate system of the renderer. The value of this property
   * depends on the selected backend. Either `THREE.WebGLCoordinateSystem` or
   * `THREE.WebGPUCoordinateSystem`.
   *
   * @readonly
   * @type {number}
   */
  get coordinateSystem() {
    return this.backend.coordinateSystem;
  }
  /**
   * Compiles all materials in the given scene. This can be useful to avoid a
   * phenomenon which is called "shader compilation stutter", which occurs when
   * rendering an object with a new shader for the first time.
   *
   * If you want to add a 3D object to an existing scene, use the third optional
   * parameter for applying the target scene. Note that the (target) scene's lighting
   * and environment must be configured before calling this method.
   *
   * @async
   * @param {Object3D} scene - The scene or 3D object to precompile.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {?Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.
   * @return {Promise<Array|undefined>} A Promise that resolves when the compile has been finished.
   */
  async compileAsync(scene3, camera3, targetScene = null) {
    if (this._isDeviceLost === true)
      return;
    if (this._initialized === false)
      await this.init();
    const nodeFrame = this._nodes.nodeFrame;
    const previousRenderId = nodeFrame.renderId;
    const previousRenderContext = this._currentRenderContext;
    const previousRenderObjectFunction = this._currentRenderObjectFunction;
    const previousCompilationPromises = this._compilationPromises;
    const sceneRef = scene3.isScene === true ? scene3 : _scene;
    if (targetScene === null)
      targetScene = scene3;
    const renderTarget = this._renderTarget;
    const renderContext = this._renderContexts.get(targetScene, camera3, renderTarget);
    const activeMipmapLevel = this._activeMipmapLevel;
    const compilationPromises = [];
    this._currentRenderContext = renderContext;
    this._currentRenderObjectFunction = this.renderObject;
    this._handleObjectFunction = this._createObjectPipeline;
    this._compilationPromises = compilationPromises;
    nodeFrame.renderId++;
    nodeFrame.update();
    renderContext.depth = this.depth;
    renderContext.stencil = this.stencil;
    if (!renderContext.clippingContext)
      renderContext.clippingContext = new ClippingContext();
    renderContext.clippingContext.updateGlobal(sceneRef, camera3);
    sceneRef.onBeforeRender(this, scene3, camera3, renderTarget);
    const renderList = this._renderLists.get(scene3, camera3);
    renderList.begin();
    this._projectObject(scene3, camera3, 0, renderList, renderContext.clippingContext);
    if (targetScene !== scene3) {
      targetScene.traverseVisible(function(object) {
        if (object.isLight && object.layers.test(camera3.layers)) {
          renderList.pushLight(object);
        }
      });
    }
    renderList.finish();
    if (renderTarget !== null) {
      this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);
      const renderTargetData = this._textures.get(renderTarget);
      renderContext.textures = renderTargetData.textures;
      renderContext.depthTexture = renderTargetData.depthTexture;
    } else {
      renderContext.textures = null;
      renderContext.depthTexture = null;
    }
    this._background.update(sceneRef, renderList, renderContext);
    const opaqueObjects = renderList.opaque;
    const transparentObjects = renderList.transparent;
    const transparentDoublePassObjects = renderList.transparentDoublePass;
    const lightsNode = renderList.lightsNode;
    if (this.opaque === true && opaqueObjects.length > 0)
      this._renderObjects(opaqueObjects, camera3, sceneRef, lightsNode);
    if (this.transparent === true && transparentObjects.length > 0)
      this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera3, sceneRef, lightsNode);
    nodeFrame.renderId = previousRenderId;
    this._currentRenderContext = previousRenderContext;
    this._currentRenderObjectFunction = previousRenderObjectFunction;
    this._compilationPromises = previousCompilationPromises;
    this._handleObjectFunction = this._renderObjectDirect;
    await Promise.all(compilationPromises);
  }
  /**
   * Renders the scene in an async fashion.
   *
   * @async
   * @param {Object3D} scene - The scene or 3D object to render.
   * @param {Camera} camera - The camera.
   * @return {Promise} A Promise that resolves when the render has been finished.
   */
  async renderAsync(scene3, camera3) {
    if (this._initialized === false)
      await this.init();
    this._renderScene(scene3, camera3);
  }
  /**
   * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
   * the CPU waits for the GPU to complete its operation (e.g. a compute task).
   *
   * @async
   * @return {Promise} A Promise that resolves when synchronization has been finished.
   */
  async waitForGPU() {
    await this.backend.waitForGPU();
  }
  /**
   * Enables or disables high precision for model-view and normal-view matrices.
   * When enabled, will use CPU 64-bit precision for higher precision instead of GPU 32-bit for higher performance.
   *
   * NOTE: 64-bit precision is not compatible with `InstancedMesh` and `SkinnedMesh`.
   *
   * @param {boolean} value - Whether to enable or disable high precision.
   * @type {boolean}
   */
  set highPrecision(value) {
    if (value === true) {
      this.overrideNodes.modelViewMatrix = highpModelViewMatrix;
      this.overrideNodes.modelNormalViewMatrix = highpModelNormalViewMatrix;
    } else if (this.highPrecision) {
      this.overrideNodes.modelViewMatrix = null;
      this.overrideNodes.modelNormalViewMatrix = null;
    }
  }
  /**
   * Returns whether high precision is enabled or not.
   *
   * @return {boolean} Whether high precision is enabled or not.
   * @type {boolean}
   */
  get highPrecision() {
    return this.overrideNodes.modelViewMatrix === highpModelViewMatrix && this.overrideNodes.modelNormalViewMatrix === highpModelNormalViewMatrix;
  }
  /**
   * Sets the given MRT configuration.
   *
   * @param {MRTNode} mrt - The MRT node to set.
   * @return {Renderer} A reference to this renderer.
   */
  setMRT(mrt3) {
    this._mrt = mrt3;
    return this;
  }
  /**
   * Returns the MRT configuration.
   *
   * @return {MRTNode} The MRT configuration.
   */
  getMRT() {
    return this._mrt;
  }
  /**
   * Returns the color buffer type.
   *
   * @return {number} The color buffer type.
   */
  getColorBufferType() {
    return this._colorBufferType;
  }
  /**
   * Default implementation of the device lost callback.
   *
   * @private
   * @param {Object} info - Information about the context lost.
   */
  _onDeviceLost(info) {
    let errorMessage = `THREE.WebGPURenderer: ${info.api} Device Lost:

Message: ${info.message}`;
    if (info.reason) {
      errorMessage += `
Reason: ${info.reason}`;
    }
    console.error(errorMessage);
    this._isDeviceLost = true;
  }
  /**
   * Renders the given render bundle.
   *
   * @private
   * @param {Object} bundle - Render bundle data.
   * @param {Scene} sceneRef - The scene the render bundle belongs to.
   * @param {LightsNode} lightsNode - The lights node.
   */
  _renderBundle(bundle, sceneRef, lightsNode) {
    const { bundleGroup, camera: camera3, renderList } = bundle;
    const renderContext = this._currentRenderContext;
    const renderBundle = this._bundles.get(bundleGroup, camera3);
    const renderBundleData = this.backend.get(renderBundle);
    if (renderBundleData.renderContexts === void 0)
      renderBundleData.renderContexts = /* @__PURE__ */ new Set();
    const needsUpdate = bundleGroup.version !== renderBundleData.version;
    const renderBundleNeedsUpdate = renderBundleData.renderContexts.has(renderContext) === false || needsUpdate;
    renderBundleData.renderContexts.add(renderContext);
    if (renderBundleNeedsUpdate) {
      this.backend.beginBundle(renderContext);
      if (renderBundleData.renderObjects === void 0 || needsUpdate) {
        renderBundleData.renderObjects = [];
      }
      this._currentRenderBundle = renderBundle;
      const {
        transparentDoublePass: transparentDoublePassObjects,
        transparent: transparentObjects,
        opaque: opaqueObjects
      } = renderList;
      if (this.opaque === true && opaqueObjects.length > 0)
        this._renderObjects(opaqueObjects, camera3, sceneRef, lightsNode);
      if (this.transparent === true && transparentObjects.length > 0)
        this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera3, sceneRef, lightsNode);
      this._currentRenderBundle = null;
      this.backend.finishBundle(renderContext, renderBundle);
      renderBundleData.version = bundleGroup.version;
    } else {
      const { renderObjects } = renderBundleData;
      for (let i2 = 0, l2 = renderObjects.length; i2 < l2; i2++) {
        const renderObject = renderObjects[i2];
        if (this._nodes.needsRefresh(renderObject)) {
          this._nodes.updateBefore(renderObject);
          this._nodes.updateForRender(renderObject);
          this._bindings.updateForRender(renderObject);
          this._nodes.updateAfter(renderObject);
        }
      }
    }
    this.backend.addBundle(renderContext, renderBundle);
  }
  /**
   * Renders the scene or 3D object with the given camera. This method can only be called
   * if the renderer has been initialized.
   *
   * The target of the method is the default framebuffer (meaning the canvas)
   * or alternatively a render target when specified via `setRenderTarget()`.
   *
   * @param {Object3D} scene - The scene or 3D object to render.
   * @param {Camera} camera - The camera to render the scene with.
   * @return {?Promise} A Promise that resolve when the scene has been rendered.
   * Only returned when the renderer has not been initialized.
   */
  render(scene3, camera3) {
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead.");
      return this.renderAsync(scene3, camera3);
    }
    this._renderScene(scene3, camera3);
  }
  /**
   * Returns an internal render target which is used when computing the output tone mapping
   * and color space conversion. Unlike in `WebGLRenderer`, this is done in a separate render
   * pass and not inline to achieve more correct results.
   *
   * @private
   * @return {?RenderTarget} The render target. The method returns `null` if no output conversion should be applied.
   */
  _getFrameBufferTarget() {
    const { currentToneMapping, currentColorSpace } = this;
    const useToneMapping = currentToneMapping !== NoToneMapping;
    const useColorSpace = currentColorSpace !== ColorManagement.workingColorSpace;
    if (useToneMapping === false && useColorSpace === false)
      return null;
    const { width, height } = this.getDrawingBufferSize(_drawingBufferSize);
    const { depth: depth3, stencil } = this;
    let frameBufferTarget = this._frameBufferTarget;
    if (frameBufferTarget === null) {
      frameBufferTarget = new RenderTarget(width, height, {
        depthBuffer: depth3,
        stencilBuffer: stencil,
        type: this._colorBufferType,
        format: RGBAFormat,
        colorSpace: ColorManagement.workingColorSpace,
        generateMipmaps: false,
        minFilter: LinearFilter,
        magFilter: LinearFilter,
        samples: this.samples
      });
      frameBufferTarget.isPostProcessingRenderTarget = true;
      this._frameBufferTarget = frameBufferTarget;
    }
    const outputRenderTarget = this.getOutputRenderTarget();
    frameBufferTarget.depthBuffer = depth3;
    frameBufferTarget.stencilBuffer = stencil;
    if (outputRenderTarget !== null) {
      frameBufferTarget.setSize(outputRenderTarget.width, outputRenderTarget.height, outputRenderTarget.depth);
    } else {
      frameBufferTarget.setSize(width, height, 1);
    }
    frameBufferTarget.viewport.copy(this._viewport);
    frameBufferTarget.scissor.copy(this._scissor);
    frameBufferTarget.viewport.multiplyScalar(this._pixelRatio);
    frameBufferTarget.scissor.multiplyScalar(this._pixelRatio);
    frameBufferTarget.scissorTest = this._scissorTest;
    frameBufferTarget.multiview = outputRenderTarget !== null ? outputRenderTarget.multiview : false;
    frameBufferTarget.resolveDepthBuffer = outputRenderTarget !== null ? outputRenderTarget.resolveDepthBuffer : true;
    frameBufferTarget._autoAllocateDepthBuffer = outputRenderTarget !== null ? outputRenderTarget._autoAllocateDepthBuffer : false;
    return frameBufferTarget;
  }
  /**
   * Renders the scene or 3D object with the given camera.
   *
   * @private
   * @param {Object3D} scene - The scene or 3D object to render.
   * @param {Camera} camera - The camera to render the scene with.
   * @param {boolean} [useFrameBufferTarget=true] - Whether to use a framebuffer target or not.
   * @return {RenderContext} The current render context.
   */
  _renderScene(scene3, camera3, useFrameBufferTarget = true) {
    if (this._isDeviceLost === true)
      return;
    const frameBufferTarget = useFrameBufferTarget ? this._getFrameBufferTarget() : null;
    const nodeFrame = this._nodes.nodeFrame;
    const previousRenderId = nodeFrame.renderId;
    const previousRenderContext = this._currentRenderContext;
    const previousRenderObjectFunction = this._currentRenderObjectFunction;
    const sceneRef = scene3.isScene === true ? scene3 : _scene;
    const outputRenderTarget = this._renderTarget || this._outputRenderTarget;
    const activeCubeFace = this._activeCubeFace;
    const activeMipmapLevel = this._activeMipmapLevel;
    let renderTarget;
    if (frameBufferTarget !== null) {
      renderTarget = frameBufferTarget;
      this.setRenderTarget(renderTarget);
    } else {
      renderTarget = outputRenderTarget;
    }
    const renderContext = this._renderContexts.get(scene3, camera3, renderTarget);
    this._currentRenderContext = renderContext;
    this._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;
    this.info.calls++;
    this.info.render.calls++;
    this.info.render.frameCalls++;
    nodeFrame.renderId = this.info.calls;
    const coordinateSystem = this.coordinateSystem;
    const xr = this.xr;
    if (camera3.coordinateSystem !== coordinateSystem && xr.isPresenting === false) {
      camera3.coordinateSystem = coordinateSystem;
      camera3.updateProjectionMatrix();
      if (camera3.isArrayCamera) {
        for (const subCamera of camera3.cameras) {
          subCamera.coordinateSystem = coordinateSystem;
          subCamera.updateProjectionMatrix();
        }
      }
    }
    if (scene3.matrixWorldAutoUpdate === true)
      scene3.updateMatrixWorld();
    if (camera3.parent === null && camera3.matrixWorldAutoUpdate === true)
      camera3.updateMatrixWorld();
    if (xr.enabled === true && xr.isPresenting === true) {
      if (xr.cameraAutoUpdate === true)
        xr.updateCamera(camera3);
      camera3 = xr.getCamera();
    }
    let viewport3 = this._viewport;
    let scissor = this._scissor;
    let pixelRatio = this._pixelRatio;
    if (renderTarget !== null) {
      viewport3 = renderTarget.viewport;
      scissor = renderTarget.scissor;
      pixelRatio = 1;
    }
    this.getDrawingBufferSize(_drawingBufferSize);
    _screen.set(0, 0, _drawingBufferSize.width, _drawingBufferSize.height);
    const minDepth = viewport3.minDepth === void 0 ? 0 : viewport3.minDepth;
    const maxDepth = viewport3.maxDepth === void 0 ? 1 : viewport3.maxDepth;
    renderContext.viewportValue.copy(viewport3).multiplyScalar(pixelRatio).floor();
    renderContext.viewportValue.width >>= activeMipmapLevel;
    renderContext.viewportValue.height >>= activeMipmapLevel;
    renderContext.viewportValue.minDepth = minDepth;
    renderContext.viewportValue.maxDepth = maxDepth;
    renderContext.viewport = renderContext.viewportValue.equals(_screen) === false;
    renderContext.scissorValue.copy(scissor).multiplyScalar(pixelRatio).floor();
    renderContext.scissor = this._scissorTest && renderContext.scissorValue.equals(_screen) === false;
    renderContext.scissorValue.width >>= activeMipmapLevel;
    renderContext.scissorValue.height >>= activeMipmapLevel;
    if (!renderContext.clippingContext)
      renderContext.clippingContext = new ClippingContext();
    renderContext.clippingContext.updateGlobal(sceneRef, camera3);
    sceneRef.onBeforeRender(this, scene3, camera3, renderTarget);
    const frustum = camera3.isArrayCamera ? _frustumArray : _frustum;
    if (!camera3.isArrayCamera) {
      _projScreenMatrix.multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse);
      frustum.setFromProjectionMatrix(_projScreenMatrix, camera3.coordinateSystem, camera3.reversedDepth);
    }
    const renderList = this._renderLists.get(scene3, camera3);
    renderList.begin();
    this._projectObject(scene3, camera3, 0, renderList, renderContext.clippingContext);
    renderList.finish();
    if (this.sortObjects === true) {
      renderList.sort(this._opaqueSort, this._transparentSort);
    }
    if (renderTarget !== null) {
      this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);
      const renderTargetData = this._textures.get(renderTarget);
      renderContext.textures = renderTargetData.textures;
      renderContext.depthTexture = renderTargetData.depthTexture;
      renderContext.width = renderTargetData.width;
      renderContext.height = renderTargetData.height;
      renderContext.renderTarget = renderTarget;
      renderContext.depth = renderTarget.depthBuffer;
      renderContext.stencil = renderTarget.stencilBuffer;
    } else {
      renderContext.textures = null;
      renderContext.depthTexture = null;
      renderContext.width = _drawingBufferSize.width;
      renderContext.height = _drawingBufferSize.height;
      renderContext.depth = this.depth;
      renderContext.stencil = this.stencil;
    }
    renderContext.width >>= activeMipmapLevel;
    renderContext.height >>= activeMipmapLevel;
    renderContext.activeCubeFace = activeCubeFace;
    renderContext.activeMipmapLevel = activeMipmapLevel;
    renderContext.occlusionQueryCount = renderList.occlusionQueryCount;
    renderContext.scissorValue.max(_vector4.set(0, 0, 0, 0));
    if (renderContext.scissorValue.x + renderContext.scissorValue.width > renderContext.width) {
      renderContext.scissorValue.width = Math.max(renderContext.width - renderContext.scissorValue.x, 0);
    }
    if (renderContext.scissorValue.y + renderContext.scissorValue.height > renderContext.height) {
      renderContext.scissorValue.height = Math.max(renderContext.height - renderContext.scissorValue.y, 0);
    }
    this._background.update(sceneRef, renderList, renderContext);
    renderContext.camera = camera3;
    this.backend.beginRender(renderContext);
    const {
      bundles,
      lightsNode,
      transparentDoublePass: transparentDoublePassObjects,
      transparent: transparentObjects,
      opaque: opaqueObjects
    } = renderList;
    if (bundles.length > 0)
      this._renderBundles(bundles, sceneRef, lightsNode);
    if (this.opaque === true && opaqueObjects.length > 0)
      this._renderObjects(opaqueObjects, camera3, sceneRef, lightsNode);
    if (this.transparent === true && transparentObjects.length > 0)
      this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera3, sceneRef, lightsNode);
    this.backend.finishRender(renderContext);
    nodeFrame.renderId = previousRenderId;
    this._currentRenderContext = previousRenderContext;
    this._currentRenderObjectFunction = previousRenderObjectFunction;
    if (frameBufferTarget !== null) {
      this.setRenderTarget(outputRenderTarget, activeCubeFace, activeMipmapLevel);
      this._renderOutput(renderTarget);
    }
    sceneRef.onAfterRender(this, scene3, camera3, renderTarget);
    return renderContext;
  }
  _setXRLayerSize(width, height) {
    this._width = width;
    this._height = height;
    this.setViewport(0, 0, width, height);
  }
  /**
   * The output pass performs tone mapping and color space conversion.
   *
   * @private
   * @param {RenderTarget} renderTarget - The current render target.
   */
  _renderOutput(renderTarget) {
    const quad = this._quad;
    if (this._nodes.hasOutputChange(renderTarget.texture)) {
      quad.material.fragmentNode = this._nodes.getOutputNode(renderTarget.texture);
      quad.material.needsUpdate = true;
    }
    const currentAutoClear = this.autoClear;
    const currentXR = this.xr.enabled;
    this.autoClear = false;
    this.xr.enabled = false;
    this._renderScene(quad, quad.camera, false);
    this.autoClear = currentAutoClear;
    this.xr.enabled = currentXR;
  }
  /**
   * Returns the maximum available anisotropy for texture filtering.
   *
   * @return {number} The maximum available anisotropy.
   */
  getMaxAnisotropy() {
    return this.backend.getMaxAnisotropy();
  }
  /**
   * Returns the active cube face.
   *
   * @return {number} The active cube face.
   */
  getActiveCubeFace() {
    return this._activeCubeFace;
  }
  /**
   * Returns the active mipmap level.
   *
   * @return {number} The active mipmap level.
   */
  getActiveMipmapLevel() {
    return this._activeMipmapLevel;
  }
  /**
   * Applications are advised to always define the animation loop
   * with this method and not manually with `requestAnimationFrame()`
   * for best compatibility.
   *
   * @async
   * @param {?Function} callback - The application's animation loop.
   * @return {Promise} A Promise that resolves when the set has been executed.
   */
  async setAnimationLoop(callback) {
    if (this._initialized === false)
      await this.init();
    this._animation.setAnimationLoop(callback);
  }
  /**
   * Can be used to transfer buffer data from a storage buffer attribute
   * from the GPU to the CPU in context of compute shaders.
   *
   * @async
   * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
   * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
   */
  async getArrayBufferAsync(attribute3) {
    return await this.backend.getArrayBufferAsync(attribute3);
  }
  /**
   * Returns the rendering context.
   *
   * @return {GPUCanvasContext|WebGL2RenderingContext} The rendering context.
   */
  getContext() {
    return this.backend.getContext();
  }
  /**
   * Returns the pixel ratio.
   *
   * @return {number} The pixel ratio.
   */
  getPixelRatio() {
    return this._pixelRatio;
  }
  /**
   * Returns the drawing buffer size in physical pixels. This method honors the pixel ratio.
   *
   * @param {Vector2} target - The method writes the result in this target object.
   * @return {Vector2} The drawing buffer size.
   */
  getDrawingBufferSize(target) {
    return target.set(this._width * this._pixelRatio, this._height * this._pixelRatio).floor();
  }
  /**
   * Returns the renderer's size in logical pixels. This method does not honor the pixel ratio.
   *
   * @param {Vector2} target - The method writes the result in this target object.
   * @return {Vector2} The renderer's size in logical pixels.
   */
  getSize(target) {
    return target.set(this._width, this._height);
  }
  /**
   * Sets the given pixel ratio and resizes the canvas if necessary.
   *
   * @param {number} [value=1] - The pixel ratio.
   */
  setPixelRatio(value = 1) {
    if (this._pixelRatio === value)
      return;
    this._pixelRatio = value;
    this.setSize(this._width, this._height, false);
  }
  /**
   * This method allows to define the drawing buffer size by specifying
   * width, height and pixel ratio all at once. The size of the drawing
   * buffer is computed with this formula:
   * ```js
   * size.x = width * pixelRatio;
   * size.y = height * pixelRatio;
   * ```
   *
   * @param {number} width - The width in logical pixels.
   * @param {number} height - The height in logical pixels.
   * @param {number} pixelRatio - The pixel ratio.
   */
  setDrawingBufferSize(width, height, pixelRatio) {
    if (this.xr && this.xr.isPresenting)
      return;
    this._width = width;
    this._height = height;
    this._pixelRatio = pixelRatio;
    this.domElement.width = Math.floor(width * pixelRatio);
    this.domElement.height = Math.floor(height * pixelRatio);
    this.setViewport(0, 0, width, height);
    if (this._initialized)
      this.backend.updateSize();
  }
  /**
   * Sets the size of the renderer.
   *
   * @param {number} width - The width in logical pixels.
   * @param {number} height - The height in logical pixels.
   * @param {boolean} [updateStyle=true] - Whether to update the `style` attribute of the canvas or not.
   */
  setSize(width, height, updateStyle = true) {
    if (this.xr && this.xr.isPresenting)
      return;
    this._width = width;
    this._height = height;
    this.domElement.width = Math.floor(width * this._pixelRatio);
    this.domElement.height = Math.floor(height * this._pixelRatio);
    if (updateStyle === true) {
      this.domElement.style.width = width + "px";
      this.domElement.style.height = height + "px";
    }
    this.setViewport(0, 0, width, height);
    if (this._initialized)
      this.backend.updateSize();
  }
  /**
   * Defines a manual sort function for the opaque render list.
   * Pass `null` to use the default sort.
   *
   * @param {Function} method - The sort function.
   */
  setOpaqueSort(method) {
    this._opaqueSort = method;
  }
  /**
   * Defines a manual sort function for the transparent render list.
   * Pass `null` to use the default sort.
   *
   * @param {Function} method - The sort function.
   */
  setTransparentSort(method) {
    this._transparentSort = method;
  }
  /**
   * Returns the scissor rectangle.
   *
   * @param {Vector4} target - The method writes the result in this target object.
   * @return {Vector4} The scissor rectangle.
   */
  getScissor(target) {
    const scissor = this._scissor;
    target.x = scissor.x;
    target.y = scissor.y;
    target.width = scissor.width;
    target.height = scissor.height;
    return target;
  }
  /**
   * Defines the scissor rectangle.
   *
   * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the box in logical pixel unit.
   * Instead of passing four arguments, the method also works with a single four-dimensional vector.
   * @param {number} y - The vertical coordinate for the lower left corner of the box in logical pixel unit.
   * @param {number} width - The width of the scissor box in logical pixel unit.
   * @param {number} height - The height of the scissor box in logical pixel unit.
   */
  setScissor(x2, y2, width, height) {
    const scissor = this._scissor;
    if (x2.isVector4) {
      scissor.copy(x2);
    } else {
      scissor.set(x2, y2, width, height);
    }
  }
  /**
   * Returns the scissor test value.
   *
   * @return {boolean} Whether the scissor test should be enabled or not.
   */
  getScissorTest() {
    return this._scissorTest;
  }
  /**
   * Defines the scissor test.
   *
   * @param {boolean} boolean - Whether the scissor test should be enabled or not.
   */
  setScissorTest(boolean) {
    this._scissorTest = boolean;
    this.backend.setScissorTest(boolean);
  }
  /**
   * Returns the viewport definition.
   *
   * @param {Vector4} target - The method writes the result in this target object.
   * @return {Vector4} The viewport definition.
   */
  getViewport(target) {
    return target.copy(this._viewport);
  }
  /**
   * Defines the viewport.
   *
   * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.
   * @param {number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.
   * @param {number} width - The width of the viewport in logical pixel unit.
   * @param {number} height - The height of the viewport in logical pixel unit.
   * @param {number} minDepth - The minimum depth value of the viewport. WebGPU only.
   * @param {number} maxDepth - The maximum depth value of the viewport. WebGPU only.
   */
  setViewport(x2, y2, width, height, minDepth = 0, maxDepth = 1) {
    const viewport3 = this._viewport;
    if (x2.isVector4) {
      viewport3.copy(x2);
    } else {
      viewport3.set(x2, y2, width, height);
    }
    viewport3.minDepth = minDepth;
    viewport3.maxDepth = maxDepth;
  }
  /**
   * Returns the clear color.
   *
   * @param {Color} target - The method writes the result in this target object.
   * @return {Color} The clear color.
   */
  getClearColor(target) {
    return target.copy(this._clearColor);
  }
  /**
   * Defines the clear color and optionally the clear alpha.
   *
   * @param {Color} color - The clear color.
   * @param {number} [alpha=1] - The clear alpha.
   */
  setClearColor(color4, alpha = 1) {
    this._clearColor.set(color4);
    this._clearColor.a = alpha;
  }
  /**
   * Returns the clear alpha.
   *
   * @return {number} The clear alpha.
   */
  getClearAlpha() {
    return this._clearColor.a;
  }
  /**
   * Defines the clear alpha.
   *
   * @param {number} alpha - The clear alpha.
   */
  setClearAlpha(alpha) {
    this._clearColor.a = alpha;
  }
  /**
   * Returns the clear depth.
   *
   * @return {number} The clear depth.
   */
  getClearDepth() {
    return this._clearDepth;
  }
  /**
   * Defines the clear depth.
   *
   * @param {number} depth - The clear depth.
   */
  setClearDepth(depth3) {
    this._clearDepth = depth3;
  }
  /**
   * Returns the clear stencil.
   *
   * @return {number} The clear stencil.
   */
  getClearStencil() {
    return this._clearStencil;
  }
  /**
   * Defines the clear stencil.
   *
   * @param {number} stencil - The clear stencil.
   */
  setClearStencil(stencil) {
    this._clearStencil = stencil;
  }
  /**
   * This method performs an occlusion query for the given 3D object.
   * It returns `true` if the given 3D object is fully occluded by other
   * 3D objects in the scene.
   *
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object is fully occluded or not.
   */
  isOccluded(object) {
    const renderContext = this._currentRenderContext;
    return renderContext && this.backend.isOccluded(renderContext, object);
  }
  /**
   * Performs a manual clear operation. This method ignores `autoClear` properties.
   *
   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   * Only returned when the renderer has not been initialized.
   */
  clear(color4 = true, depth3 = true, stencil = true) {
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead.");
      return this.clearAsync(color4, depth3, stencil);
    }
    const renderTarget = this._renderTarget || this._getFrameBufferTarget();
    let renderContext = null;
    if (renderTarget !== null) {
      this._textures.updateRenderTarget(renderTarget);
      const renderTargetData = this._textures.get(renderTarget);
      renderContext = this._renderContexts.getForClear(renderTarget);
      renderContext.textures = renderTargetData.textures;
      renderContext.depthTexture = renderTargetData.depthTexture;
      renderContext.width = renderTargetData.width;
      renderContext.height = renderTargetData.height;
      renderContext.renderTarget = renderTarget;
      renderContext.depth = renderTarget.depthBuffer;
      renderContext.stencil = renderTarget.stencilBuffer;
      renderContext.clearColorValue = this.backend.getClearColor();
      renderContext.activeCubeFace = this.getActiveCubeFace();
      renderContext.activeMipmapLevel = this.getActiveMipmapLevel();
    }
    this.backend.clear(color4, depth3, stencil, renderContext);
    if (renderTarget !== null && this._renderTarget === null) {
      this._renderOutput(renderTarget);
    }
  }
  /**
   * Performs a manual clear operation of the color buffer. This method ignores `autoClear` properties.
   *
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   * Only returned when the renderer has not been initialized.
   */
  clearColor() {
    return this.clear(true, false, false);
  }
  /**
   * Performs a manual clear operation of the depth buffer. This method ignores `autoClear` properties.
   *
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   * Only returned when the renderer has not been initialized.
   */
  clearDepth() {
    return this.clear(false, true, false);
  }
  /**
   * Performs a manual clear operation of the stencil buffer. This method ignores `autoClear` properties.
   *
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   * Only returned when the renderer has not been initialized.
   */
  clearStencil() {
    return this.clear(false, false, true);
  }
  /**
   * Async version of {@link Renderer#clear}.
   *
   * @async
   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   */
  async clearAsync(color4 = true, depth3 = true, stencil = true) {
    if (this._initialized === false)
      await this.init();
    this.clear(color4, depth3, stencil);
  }
  /**
   * Async version of {@link Renderer#clearColor}.
   *
   * @async
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   */
  async clearColorAsync() {
    this.clearAsync(true, false, false);
  }
  /**
   * Async version of {@link Renderer#clearDepth}.
   *
   * @async
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   */
  async clearDepthAsync() {
    this.clearAsync(false, true, false);
  }
  /**
   * Async version of {@link Renderer#clearStencil}.
   *
   * @async
   * @return {Promise} A Promise that resolves when the clear operation has been executed.
   */
  async clearStencilAsync() {
    this.clearAsync(false, false, true);
  }
  /**
   * The current tone mapping of the renderer. When not producing screen output,
   * the tone mapping is always `NoToneMapping`.
   *
   * @type {number}
   */
  get currentToneMapping() {
    return this.isOutputTarget ? this.toneMapping : NoToneMapping;
  }
  /**
   * The current color space of the renderer. When not producing screen output,
   * the color space is always the working color space.
   *
   * @type {string}
   */
  get currentColorSpace() {
    return this.isOutputTarget ? this.outputColorSpace : ColorManagement.workingColorSpace;
  }
  /**
   * Returns `true` if the rendering settings are set to screen output.
   *
   * @returns {boolean} True if the current render target is the same of output render target or `null`, otherwise false.
   */
  get isOutputTarget() {
    return this._renderTarget === this._outputRenderTarget || this._renderTarget === null;
  }
  /**
   * Frees all internal resources of the renderer. Call this method if the renderer
   * is no longer in use by your app.
   */
  dispose() {
    if (this._initialized === true) {
      this.info.dispose();
      this.backend.dispose();
      this._animation.dispose();
      this._objects.dispose();
      this._pipelines.dispose();
      this._nodes.dispose();
      this._bindings.dispose();
      this._renderLists.dispose();
      this._renderContexts.dispose();
      this._textures.dispose();
      if (this._frameBufferTarget !== null)
        this._frameBufferTarget.dispose();
      Object.values(this.backend.timestampQueryPool).forEach((queryPool) => {
        if (queryPool !== null)
          queryPool.dispose();
      });
    }
    this.setRenderTarget(null);
    this.setAnimationLoop(null);
  }
  /**
   * Sets the given render target. Calling this method means the renderer does not
   * target the default framebuffer (meaning the canvas) anymore but a custom framebuffer.
   * Use `null` as the first argument to reset the state.
   *
   * @param {?RenderTarget} renderTarget - The render target to set.
   * @param {number} [activeCubeFace=0] - The active cube face.
   * @param {number} [activeMipmapLevel=0] - The active mipmap level.
   */
  setRenderTarget(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
    this._renderTarget = renderTarget;
    this._activeCubeFace = activeCubeFace;
    this._activeMipmapLevel = activeMipmapLevel;
  }
  /**
   * Returns the current render target.
   *
   * @return {?RenderTarget} The render target. Returns `null` if no render target is set.
   */
  getRenderTarget() {
    return this._renderTarget;
  }
  /**
   * Sets the output render target for the renderer.
   *
   * @param {Object} renderTarget - The render target to set as the output target.
   */
  setOutputRenderTarget(renderTarget) {
    this._outputRenderTarget = renderTarget;
  }
  /**
   * Returns the current output target.
   *
   * @return {?RenderTarget} The current output render target. Returns `null` if no output target is set.
   */
  getOutputRenderTarget() {
    return this._outputRenderTarget;
  }
  /**
   * Resets the renderer to the initial state before WebXR started.
   *
   */
  _resetXRState() {
    this.backend.setXRTarget(null);
    this.setOutputRenderTarget(null);
    this.setRenderTarget(null);
    this._frameBufferTarget.dispose();
    this._frameBufferTarget = null;
  }
  /**
   * Callback for {@link Renderer#setRenderObjectFunction}.
   *
   * @callback renderObjectFunction
   * @param {Object3D} object - The 3D object.
   * @param {Scene} scene - The scene the 3D object belongs to.
   * @param {Camera} camera - The camera the object should be rendered with.
   * @param {BufferGeometry} geometry - The object's geometry.
   * @param {Material} material - The object's material.
   * @param {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
   * @param {LightsNode} lightsNode - The current lights node.
   * @param {ClippingContext} clippingContext - The clipping context.
   * @param {?string} [passId=null] - An optional ID for identifying the pass.
   */
  /**
   * Sets the given render object function. Calling this method overwrites the default implementation
   * which is {@link Renderer#renderObject}. Defining a custom function can be useful
   * if you want to modify the way objects are rendered. For example you can define things like "every
   * object that has material of a certain type should perform a pre-pass with a special overwrite material".
   * The custom function must always call `renderObject()` in its implementation.
   *
   * Use `null` as the first argument to reset the state.
   *
   * @param {?renderObjectFunction} renderObjectFunction - The render object function.
   */
  setRenderObjectFunction(renderObjectFunction) {
    this._renderObjectFunction = renderObjectFunction;
  }
  /**
   * Returns the current render object function.
   *
   * @return {?Function} The current render object function. Returns `null` if no function is set.
   */
  getRenderObjectFunction() {
    return this._renderObjectFunction;
  }
  /**
   * Execute a single or an array of compute nodes. This method can only be called
   * if the renderer has been initialized.
   *
   * @param {Node|Array<Node>} computeNodes - The compute node(s).
   * @param {?(Array<number>|number)} [dispatchSizeOrCount=null] - Array with [ x, y, z ] values for dispatch or a single number for the count.
   * @return {Promise|undefined} A Promise that resolve when the compute has finished. Only returned when the renderer has not been initialized.
   */
  compute(computeNodes, dispatchSizeOrCount = null) {
    if (this._isDeviceLost === true)
      return;
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead.");
      return this.computeAsync(computeNodes);
    }
    const nodeFrame = this._nodes.nodeFrame;
    const previousRenderId = nodeFrame.renderId;
    this.info.calls++;
    this.info.compute.calls++;
    this.info.compute.frameCalls++;
    nodeFrame.renderId = this.info.calls;
    const backend = this.backend;
    const pipelines = this._pipelines;
    const bindings = this._bindings;
    const nodes = this._nodes;
    const computeList = Array.isArray(computeNodes) ? computeNodes : [computeNodes];
    if (computeList[0] === void 0 || computeList[0].isComputeNode !== true) {
      throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");
    }
    backend.beginCompute(computeNodes);
    for (const computeNode of computeList) {
      if (pipelines.has(computeNode) === false) {
        const dispose = () => {
          computeNode.removeEventListener("dispose", dispose);
          pipelines.delete(computeNode);
          bindings.delete(computeNode);
          nodes.delete(computeNode);
        };
        computeNode.addEventListener("dispose", dispose);
        const onInitFn = computeNode.onInitFunction;
        if (onInitFn !== null) {
          onInitFn.call(computeNode, { renderer: this });
        }
      }
      nodes.updateForCompute(computeNode);
      bindings.updateForCompute(computeNode);
      const computeBindings = bindings.getForCompute(computeNode);
      const computePipeline = pipelines.getForCompute(computeNode, computeBindings);
      backend.compute(computeNodes, computeNode, computeBindings, computePipeline, dispatchSizeOrCount);
    }
    backend.finishCompute(computeNodes);
    nodeFrame.renderId = previousRenderId;
  }
  /**
   * Execute a single or an array of compute nodes.
   *
   * @async
   * @param {Node|Array<Node>} computeNodes - The compute node(s).
   * @param {?(Array<number>|number)} [dispatchSizeOrCount=null] - Array with [ x, y, z ] values for dispatch or a single number for the count.
   * @return {Promise} A Promise that resolve when the compute has finished.
   */
  async computeAsync(computeNodes, dispatchSizeOrCount = null) {
    if (this._initialized === false)
      await this.init();
    this.compute(computeNodes, dispatchSizeOrCount);
  }
  /**
   * Checks if the given feature is supported by the selected backend.
   *
   * @async
   * @param {string} name - The feature's name.
   * @return {Promise<boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.
   */
  async hasFeatureAsync(name) {
    if (this._initialized === false)
      await this.init();
    return this.backend.hasFeature(name);
  }
  async resolveTimestampsAsync(type = "render") {
    if (this._initialized === false)
      await this.init();
    return this.backend.resolveTimestampsAsync(type);
  }
  /**
   * Checks if the given feature is supported by the selected backend. If the
   * renderer has not been initialized, this method always returns `false`.
   *
   * @param {string} name - The feature's name.
   * @return {boolean} Whether the feature is supported or not.
   */
  hasFeature(name) {
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead.");
      return false;
    }
    return this.backend.hasFeature(name);
  }
  /**
   * Returns `true` when the renderer has been initialized.
   *
   * @return {boolean} Whether the renderer has been initialized or not.
   */
  hasInitialized() {
    return this._initialized;
  }
  /**
   * Initializes the given textures. Useful for preloading a texture rather than waiting until first render
   * (which can cause noticeable lags due to decode and GPU upload overhead).
   *
   * @async
   * @param {Texture} texture - The texture.
   * @return {Promise} A Promise that resolves when the texture has been initialized.
   */
  async initTextureAsync(texture3) {
    if (this._initialized === false)
      await this.init();
    this._textures.updateTexture(texture3);
  }
  /**
   * Initializes the given texture. Useful for preloading a texture rather than waiting until first render
   * (which can cause noticeable lags due to decode and GPU upload overhead).
   *
   * This method can only be used if the renderer has been initialized.
   *
   * @param {Texture} texture - The texture.
   */
  initTexture(texture3) {
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead.");
    }
    this._textures.updateTexture(texture3);
  }
  /**
   * Copies the current bound framebuffer into the given texture.
   *
   * @param {FramebufferTexture} framebufferTexture - The texture.
   * @param {?(Vector2|Vector4)} [rectangle=null] - A two or four dimensional vector that defines the rectangular portion of the framebuffer that should be copied.
   */
  copyFramebufferToTexture(framebufferTexture, rectangle = null) {
    if (rectangle !== null) {
      if (rectangle.isVector2) {
        rectangle = _vector4.set(rectangle.x, rectangle.y, framebufferTexture.image.width, framebufferTexture.image.height).floor();
      } else if (rectangle.isVector4) {
        rectangle = _vector4.copy(rectangle).floor();
      } else {
        console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");
        return;
      }
    } else {
      rectangle = _vector4.set(0, 0, framebufferTexture.image.width, framebufferTexture.image.height);
    }
    let renderContext = this._currentRenderContext;
    let renderTarget;
    if (renderContext !== null) {
      renderTarget = renderContext.renderTarget;
    } else {
      renderTarget = this._renderTarget || this._getFrameBufferTarget();
      if (renderTarget !== null) {
        this._textures.updateRenderTarget(renderTarget);
        renderContext = this._textures.get(renderTarget);
      }
    }
    this._textures.updateTexture(framebufferTexture, { renderTarget });
    this.backend.copyFramebufferToTexture(framebufferTexture, renderContext, rectangle);
  }
  /**
   * Copies data of the given source texture into a destination texture.
   *
   * @param {Texture} srcTexture - The source texture.
   * @param {Texture} dstTexture - The destination texture.
   * @param {Box2|Box3} [srcRegion=null] - A bounding box which describes the source region. Can be two or three-dimensional.
   * @param {Vector2|Vector3} [dstPosition=null] - A vector that represents the origin of the destination region. Can be two or three-dimensional.
   * @param {number} [srcLevel=0] - The source mip level to copy from.
   * @param {number} [dstLevel=0] - The destination mip level to copy to.
   */
  copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
    this._textures.updateTexture(srcTexture);
    this._textures.updateTexture(dstTexture);
    this.backend.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, srcLevel, dstLevel);
  }
  /**
   * Reads pixel data from the given render target.
   *
   * @async
   * @param {RenderTarget} renderTarget - The render target to read from.
   * @param {number} x - The `x` coordinate of the copy region's origin.
   * @param {number} y - The `y` coordinate of the copy region's origin.
   * @param {number} width - The width of the copy region.
   * @param {number} height - The height of the copy region.
   * @param {number} [textureIndex=0] - The texture index of a MRT render target.
   * @param {number} [faceIndex=0] - The active cube face index.
   * @return {Promise<TypedArray>} A Promise that resolves when the read has been finished. The resolve provides the read data as a typed array.
   */
  async readRenderTargetPixelsAsync(renderTarget, x2, y2, width, height, textureIndex = 0, faceIndex = 0) {
    return this.backend.copyTextureToBuffer(renderTarget.textures[textureIndex], x2, y2, width, height, faceIndex);
  }
  /**
   * Analyzes the given 3D object's hierarchy and builds render lists from the
   * processed hierarchy.
   *
   * @param {Object3D} object - The 3D object to process (usually a scene).
   * @param {Camera} camera - The camera the object is rendered with.
   * @param {number} groupOrder - The group order is derived from the `renderOrder` of groups and is used to group 3D objects within groups.
   * @param {RenderList} renderList - The current render list.
   * @param {ClippingContext} clippingContext - The current clipping context.
   */
  _projectObject(object, camera3, groupOrder, renderList, clippingContext) {
    if (object.visible === false)
      return;
    const visible = object.layers.test(camera3.layers);
    if (visible) {
      if (object.isGroup) {
        groupOrder = object.renderOrder;
        if (object.isClippingGroup && object.enabled)
          clippingContext = clippingContext.getGroupContext(object);
      } else if (object.isLOD) {
        if (object.autoUpdate === true)
          object.update(camera3);
      } else if (object.isLight) {
        renderList.pushLight(object);
      } else if (object.isSprite) {
        const frustum = camera3.isArrayCamera ? _frustumArray : _frustum;
        if (!object.frustumCulled || frustum.intersectsSprite(object, camera3)) {
          if (this.sortObjects === true) {
            _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          const { geometry, material } = object;
          if (material.visible) {
            renderList.push(object, geometry, material, groupOrder, _vector4.z, null, clippingContext);
          }
        }
      } else if (object.isLineLoop) {
        console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");
      } else if (object.isMesh || object.isLine || object.isPoints) {
        const frustum = camera3.isArrayCamera ? _frustumArray : _frustum;
        if (!object.frustumCulled || frustum.intersectsObject(object, camera3)) {
          const { geometry, material } = object;
          if (this.sortObjects === true) {
            if (geometry.boundingSphere === null)
              geometry.computeBoundingSphere();
            _vector4.copy(geometry.boundingSphere.center).applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let i2 = 0, l2 = groups.length; i2 < l2; i2++) {
              const group = groups[i2];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                renderList.push(object, geometry, groupMaterial, groupOrder, _vector4.z, group, clippingContext);
              }
            }
          } else if (material.visible) {
            renderList.push(object, geometry, material, groupOrder, _vector4.z, null, clippingContext);
          }
        }
      }
    }
    if (object.isBundleGroup === true && this.backend.beginBundle !== void 0) {
      const baseRenderList = renderList;
      renderList = this._renderLists.get(object, camera3);
      renderList.begin();
      baseRenderList.pushBundle({
        bundleGroup: object,
        camera: camera3,
        renderList
      });
      renderList.finish();
    }
    const children = object.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      this._projectObject(children[i2], camera3, groupOrder, renderList, clippingContext);
    }
  }
  /**
   * Renders the given render bundles.
   *
   * @private
   * @param {Array<Object>} bundles - Array with render bundle data.
   * @param {Scene} sceneRef - The scene the render bundles belong to.
   * @param {LightsNode} lightsNode - The current lights node.
   */
  _renderBundles(bundles, sceneRef, lightsNode) {
    for (const bundle of bundles) {
      this._renderBundle(bundle, sceneRef, lightsNode);
    }
  }
  /**
   * Renders the transparent objects from the given render lists.
   *
   * @private
   * @param {Array<Object>} renderList - The transparent render list.
   * @param {Array<Object>} doublePassList - The list of transparent objects which require a double pass (e.g. because of transmission).
   * @param {Camera} camera - The camera the render list should be rendered with.
   * @param {Scene} scene - The scene the render list belongs to.
   * @param {LightsNode} lightsNode - The current lights node.
   */
  _renderTransparents(renderList, doublePassList, camera3, scene3, lightsNode) {
    if (doublePassList.length > 0) {
      for (const { material } of doublePassList) {
        material.side = BackSide;
      }
      this._renderObjects(doublePassList, camera3, scene3, lightsNode, "backSide");
      for (const { material } of doublePassList) {
        material.side = FrontSide;
      }
      this._renderObjects(renderList, camera3, scene3, lightsNode);
      for (const { material } of doublePassList) {
        material.side = DoubleSide;
      }
    } else {
      this._renderObjects(renderList, camera3, scene3, lightsNode);
    }
  }
  /**
   * Renders the objects from the given render list.
   *
   * @private
   * @param {Array<Object>} renderList - The render list.
   * @param {Camera} camera - The camera the render list should be rendered with.
   * @param {Scene} scene - The scene the render list belongs to.
   * @param {LightsNode} lightsNode - The current lights node.
   * @param {?string} [passId=null] - An optional ID for identifying the pass.
   */
  _renderObjects(renderList, camera3, scene3, lightsNode, passId = null) {
    for (let i2 = 0, il = renderList.length; i2 < il; i2++) {
      const { object, geometry, material, group, clippingContext } = renderList[i2];
      this._currentRenderObjectFunction(object, scene3, camera3, geometry, material, group, lightsNode, clippingContext, passId);
    }
  }
  /**
   * This method represents the default render object function that manages the render lifecycle
   * of the object.
   *
   * @param {Object3D} object - The 3D object.
   * @param {Scene} scene - The scene the 3D object belongs to.
   * @param {Camera} camera - The camera the object should be rendered with.
   * @param {BufferGeometry} geometry - The object's geometry.
   * @param {Material} material - The object's material.
   * @param {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
   * @param {LightsNode} lightsNode - The current lights node.
   * @param {?ClippingContext} clippingContext - The clipping context.
   * @param {?string} [passId=null] - An optional ID for identifying the pass.
   */
  renderObject(object, scene3, camera3, geometry, material, group, lightsNode, clippingContext = null, passId = null) {
    let overridePositionNode;
    let overrideColorNode;
    let overrideDepthNode;
    object.onBeforeRender(this, scene3, camera3, geometry, material, group);
    if (material.allowOverride === true && scene3.overrideMaterial !== null) {
      const overrideMaterial = scene3.overrideMaterial;
      if (material.positionNode && material.positionNode.isNode) {
        overridePositionNode = overrideMaterial.positionNode;
        overrideMaterial.positionNode = material.positionNode;
      }
      overrideMaterial.alphaTest = material.alphaTest;
      overrideMaterial.alphaMap = material.alphaMap;
      overrideMaterial.transparent = material.transparent || material.transmission > 0;
      if (overrideMaterial.isShadowPassMaterial) {
        overrideMaterial.side = material.shadowSide === null ? material.side : material.shadowSide;
        if (material.depthNode && material.depthNode.isNode) {
          overrideDepthNode = overrideMaterial.depthNode;
          overrideMaterial.depthNode = material.depthNode;
        }
        if (material.castShadowNode && material.castShadowNode.isNode) {
          overrideColorNode = overrideMaterial.colorNode;
          overrideMaterial.colorNode = material.castShadowNode;
        }
        if (material.castShadowPositionNode && material.castShadowPositionNode.isNode) {
          overridePositionNode = overrideMaterial.positionNode;
          overrideMaterial.positionNode = material.castShadowPositionNode;
        }
      }
      material = overrideMaterial;
    }
    if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
      material.side = BackSide;
      this._handleObjectFunction(object, material, scene3, camera3, lightsNode, group, clippingContext, "backSide");
      material.side = FrontSide;
      this._handleObjectFunction(object, material, scene3, camera3, lightsNode, group, clippingContext, passId);
      material.side = DoubleSide;
    } else {
      this._handleObjectFunction(object, material, scene3, camera3, lightsNode, group, clippingContext, passId);
    }
    if (overridePositionNode !== void 0) {
      scene3.overrideMaterial.positionNode = overridePositionNode;
    }
    if (overrideDepthNode !== void 0) {
      scene3.overrideMaterial.depthNode = overrideDepthNode;
    }
    if (overrideColorNode !== void 0) {
      scene3.overrideMaterial.colorNode = overrideColorNode;
    }
    object.onAfterRender(this, scene3, camera3, geometry, material, group);
  }
  /**
   * This method represents the default `_handleObjectFunction` implementation which creates
   * a render object from the given data and performs the draw command with the selected backend.
   *
   * @private
   * @param {Object3D} object - The 3D object.
   * @param {Material} material - The object's material.
   * @param {Scene} scene - The scene the 3D object belongs to.
   * @param {Camera} camera - The camera the object should be rendered with.
   * @param {LightsNode} lightsNode - The current lights node.
   * @param {?{start: number, count: number}} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
   * @param {ClippingContext} clippingContext - The clipping context.
   * @param {string} [passId] - An optional ID for identifying the pass.
   */
  _renderObjectDirect(object, material, scene3, camera3, lightsNode, group, clippingContext, passId) {
    const renderObject = this._objects.get(object, material, scene3, camera3, lightsNode, this._currentRenderContext, clippingContext, passId);
    renderObject.drawRange = object.geometry.drawRange;
    renderObject.group = group;
    const needsRefresh = this._nodes.needsRefresh(renderObject);
    if (needsRefresh) {
      this._nodes.updateBefore(renderObject);
      this._geometries.updateForRender(renderObject);
      this._nodes.updateForRender(renderObject);
      this._bindings.updateForRender(renderObject);
    }
    this._pipelines.updateForRender(renderObject);
    if (this._currentRenderBundle !== null) {
      const renderBundleData = this.backend.get(this._currentRenderBundle);
      renderBundleData.renderObjects.push(renderObject);
      renderObject.bundle = this._currentRenderBundle.bundleGroup;
    }
    this.backend.draw(renderObject, this.info);
    if (needsRefresh)
      this._nodes.updateAfter(renderObject);
  }
  /**
   * A different implementation for `_handleObjectFunction` which only makes sure the object is ready for rendering.
   * Used in `compileAsync()`.
   *
   * @private
   * @param {Object3D} object - The 3D object.
   * @param {Material} material - The object's material.
   * @param {Scene} scene - The scene the 3D object belongs to.
   * @param {Camera} camera - The camera the object should be rendered with.
   * @param {LightsNode} lightsNode - The current lights node.
   * @param {?{start: number, count: number}} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
   * @param {ClippingContext} clippingContext - The clipping context.
   * @param {string} [passId] - An optional ID for identifying the pass.
   */
  _createObjectPipeline(object, material, scene3, camera3, lightsNode, group, clippingContext, passId) {
    const renderObject = this._objects.get(object, material, scene3, camera3, lightsNode, this._currentRenderContext, clippingContext, passId);
    renderObject.drawRange = object.geometry.drawRange;
    renderObject.group = group;
    this._nodes.updateBefore(renderObject);
    this._geometries.updateForRender(renderObject);
    this._nodes.updateForRender(renderObject);
    this._bindings.updateForRender(renderObject);
    this._pipelines.getForRender(renderObject, this._compilationPromises);
    this._nodes.updateAfter(renderObject);
  }
  /**
   * Alias for `compileAsync()`.
   *
   * @method
   * @param {Object3D} scene - The scene or 3D object to precompile.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.
   * @return {function(Object3D, Camera, ?Scene): Promise|undefined} A Promise that resolves when the compile has been finished.
   */
  get compile() {
    return this.compileAsync;
  }
};
var Binding = class {
  /**
   * Constructs a new binding.
   *
   * @param {string} [name=''] - The binding's name.
   */
  constructor(name = "") {
    this.name = name;
    this.visibility = 0;
  }
  /**
   * Makes sure binding's resource is visible for the given shader stage.
   *
   * @param {number} visibility - The shader stage.
   */
  setVisibility(visibility) {
    this.visibility |= visibility;
  }
  /**
   * Clones the binding.
   *
   * @return {Binding} The cloned binding.
   */
  clone() {
    return Object.assign(new this.constructor(), this);
  }
};
function getFloatLength(floatLength) {
  return floatLength + (GPU_CHUNK_BYTES - floatLength % GPU_CHUNK_BYTES) % GPU_CHUNK_BYTES;
}
var Buffer = class extends Binding {
  /**
   * Constructs a new buffer.
   *
   * @param {string} name - The buffer's name.
   * @param {TypedArray} [buffer=null] - The buffer.
   */
  constructor(name, buffer3 = null) {
    super(name);
    this.isBuffer = true;
    this.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;
    this._buffer = buffer3;
  }
  /**
   * The buffer's byte length.
   *
   * @type {number}
   * @readonly
   */
  get byteLength() {
    return getFloatLength(this._buffer.byteLength);
  }
  /**
   * A reference to the internal buffer.
   *
   * @type {Float32Array}
   * @readonly
   */
  get buffer() {
    return this._buffer;
  }
  /**
   * Updates the binding.
   *
   * @return {boolean} Whether the buffer has been updated and must be
   * uploaded to the GPU.
   */
  update() {
    return true;
  }
};
var UniformBuffer = class extends Buffer {
  /**
   * Constructs a new uniform buffer.
   *
   * @param {string} name - The buffer's name.
   * @param {TypedArray} [buffer=null] - The buffer.
   */
  constructor(name, buffer3 = null) {
    super(name, buffer3);
    this.isUniformBuffer = true;
  }
};
var _id$4 = 0;
var NodeUniformBuffer = class extends UniformBuffer {
  /**
   * Constructs a new node-based uniform buffer.
   *
   * @param {BufferNode} nodeUniform - The uniform buffer node.
   * @param {UniformGroupNode} groupNode - The uniform group node.
   */
  constructor(nodeUniform, groupNode) {
    super("UniformBuffer_" + _id$4++, nodeUniform ? nodeUniform.value : null);
    this.nodeUniform = nodeUniform;
    this.groupNode = groupNode;
  }
  /**
   * The uniform buffer.
   *
   * @type {Float32Array}
   */
  get buffer() {
    return this.nodeUniform.value;
  }
};
var UniformsGroup2 = class extends UniformBuffer {
  /**
   * Constructs a new uniforms group.
   *
   * @param {string} name - The group's name.
   */
  constructor(name) {
    super(name);
    this.isUniformsGroup = true;
    this._values = null;
    this.uniforms = [];
  }
  /**
   * Adds a uniform to this group.
   *
   * @param {Uniform} uniform - The uniform to add.
   * @return {UniformsGroup} A reference to this group.
   */
  addUniform(uniform3) {
    this.uniforms.push(uniform3);
    return this;
  }
  /**
   * Removes a uniform from this group.
   *
   * @param {Uniform} uniform - The uniform to remove.
   * @return {UniformsGroup} A reference to this group.
   */
  removeUniform(uniform3) {
    const index6 = this.uniforms.indexOf(uniform3);
    if (index6 !== -1) {
      this.uniforms.splice(index6, 1);
    }
    return this;
  }
  /**
   * An array with the raw uniform values.
   *
   * @type {Array<number>}
   */
  get values() {
    if (this._values === null) {
      this._values = Array.from(this.buffer);
    }
    return this._values;
  }
  /**
   * A Float32 array buffer with the uniform values.
   *
   * @type {Float32Array}
   */
  get buffer() {
    let buffer3 = this._buffer;
    if (buffer3 === null) {
      const byteLength = this.byteLength;
      buffer3 = new Float32Array(new ArrayBuffer(byteLength));
      this._buffer = buffer3;
    }
    return buffer3;
  }
  /**
   * The byte length of the buffer with correct buffer alignment.
   *
   * @type {number}
   */
  get byteLength() {
    const bytesPerElement = this.bytesPerElement;
    let offset = 0;
    for (let i2 = 0, l2 = this.uniforms.length; i2 < l2; i2++) {
      const uniform3 = this.uniforms[i2];
      const boundary = uniform3.boundary;
      const itemSize = uniform3.itemSize * bytesPerElement;
      const chunkOffset = offset % GPU_CHUNK_BYTES;
      const chunkPadding = chunkOffset % boundary;
      const chunkStart = chunkOffset + chunkPadding;
      offset += chunkPadding;
      if (chunkStart !== 0 && GPU_CHUNK_BYTES - chunkStart < itemSize) {
        offset += GPU_CHUNK_BYTES - chunkStart;
      }
      uniform3.offset = offset / bytesPerElement;
      offset += itemSize;
    }
    return Math.ceil(offset / GPU_CHUNK_BYTES) * GPU_CHUNK_BYTES;
  }
  /**
   * Updates this group by updating each uniform object of
   * the internal uniform list. The uniform objects check if their
   * values has actually changed so this method only returns
   * `true` if there is a real value change.
   *
   * @return {boolean} Whether the uniforms have been updated and
   * must be uploaded to the GPU.
   */
  update() {
    let updated = false;
    for (const uniform3 of this.uniforms) {
      if (this.updateByType(uniform3) === true) {
        updated = true;
      }
    }
    return updated;
  }
  /**
   * Updates a given uniform by calling an update method matching
   * the uniforms type.
   *
   * @param {Uniform} uniform - The uniform to update.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateByType(uniform3) {
    if (uniform3.isNumberUniform)
      return this.updateNumber(uniform3);
    if (uniform3.isVector2Uniform)
      return this.updateVector2(uniform3);
    if (uniform3.isVector3Uniform)
      return this.updateVector3(uniform3);
    if (uniform3.isVector4Uniform)
      return this.updateVector4(uniform3);
    if (uniform3.isColorUniform)
      return this.updateColor(uniform3);
    if (uniform3.isMatrix3Uniform)
      return this.updateMatrix3(uniform3);
    if (uniform3.isMatrix4Uniform)
      return this.updateMatrix4(uniform3);
    console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.", uniform3);
  }
  /**
   * Updates a given Number uniform.
   *
   * @param {NumberUniform} uniform - The Number uniform.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateNumber(uniform3) {
    let updated = false;
    const a2 = this.values;
    const v2 = uniform3.getValue();
    const offset = uniform3.offset;
    const type = uniform3.getType();
    if (a2[offset] !== v2) {
      const b = this._getBufferForType(type);
      b[offset] = a2[offset] = v2;
      updated = true;
    }
    return updated;
  }
  /**
   * Updates a given Vector2 uniform.
   *
   * @param {Vector2Uniform} uniform - The Vector2 uniform.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateVector2(uniform3) {
    let updated = false;
    const a2 = this.values;
    const v2 = uniform3.getValue();
    const offset = uniform3.offset;
    const type = uniform3.getType();
    if (a2[offset + 0] !== v2.x || a2[offset + 1] !== v2.y) {
      const b = this._getBufferForType(type);
      b[offset + 0] = a2[offset + 0] = v2.x;
      b[offset + 1] = a2[offset + 1] = v2.y;
      updated = true;
    }
    return updated;
  }
  /**
   * Updates a given Vector3 uniform.
   *
   * @param {Vector3Uniform} uniform - The Vector3 uniform.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateVector3(uniform3) {
    let updated = false;
    const a2 = this.values;
    const v2 = uniform3.getValue();
    const offset = uniform3.offset;
    const type = uniform3.getType();
    if (a2[offset + 0] !== v2.x || a2[offset + 1] !== v2.y || a2[offset + 2] !== v2.z) {
      const b = this._getBufferForType(type);
      b[offset + 0] = a2[offset + 0] = v2.x;
      b[offset + 1] = a2[offset + 1] = v2.y;
      b[offset + 2] = a2[offset + 2] = v2.z;
      updated = true;
    }
    return updated;
  }
  /**
   * Updates a given Vector4 uniform.
   *
   * @param {Vector4Uniform} uniform - The Vector4 uniform.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateVector4(uniform3) {
    let updated = false;
    const a2 = this.values;
    const v2 = uniform3.getValue();
    const offset = uniform3.offset;
    const type = uniform3.getType();
    if (a2[offset + 0] !== v2.x || a2[offset + 1] !== v2.y || a2[offset + 2] !== v2.z || a2[offset + 4] !== v2.w) {
      const b = this._getBufferForType(type);
      b[offset + 0] = a2[offset + 0] = v2.x;
      b[offset + 1] = a2[offset + 1] = v2.y;
      b[offset + 2] = a2[offset + 2] = v2.z;
      b[offset + 3] = a2[offset + 3] = v2.w;
      updated = true;
    }
    return updated;
  }
  /**
   * Updates a given Color uniform.
   *
   * @param {ColorUniform} uniform - The Color uniform.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateColor(uniform3) {
    let updated = false;
    const a2 = this.values;
    const c2 = uniform3.getValue();
    const offset = uniform3.offset;
    if (a2[offset + 0] !== c2.r || a2[offset + 1] !== c2.g || a2[offset + 2] !== c2.b) {
      const b = this.buffer;
      b[offset + 0] = a2[offset + 0] = c2.r;
      b[offset + 1] = a2[offset + 1] = c2.g;
      b[offset + 2] = a2[offset + 2] = c2.b;
      updated = true;
    }
    return updated;
  }
  /**
   * Updates a given Matrix3 uniform.
   *
   * @param {Matrix3Uniform} uniform - The Matrix3 uniform.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateMatrix3(uniform3) {
    let updated = false;
    const a2 = this.values;
    const e2 = uniform3.getValue().elements;
    const offset = uniform3.offset;
    if (a2[offset + 0] !== e2[0] || a2[offset + 1] !== e2[1] || a2[offset + 2] !== e2[2] || a2[offset + 4] !== e2[3] || a2[offset + 5] !== e2[4] || a2[offset + 6] !== e2[5] || a2[offset + 8] !== e2[6] || a2[offset + 9] !== e2[7] || a2[offset + 10] !== e2[8]) {
      const b = this.buffer;
      b[offset + 0] = a2[offset + 0] = e2[0];
      b[offset + 1] = a2[offset + 1] = e2[1];
      b[offset + 2] = a2[offset + 2] = e2[2];
      b[offset + 4] = a2[offset + 4] = e2[3];
      b[offset + 5] = a2[offset + 5] = e2[4];
      b[offset + 6] = a2[offset + 6] = e2[5];
      b[offset + 8] = a2[offset + 8] = e2[6];
      b[offset + 9] = a2[offset + 9] = e2[7];
      b[offset + 10] = a2[offset + 10] = e2[8];
      updated = true;
    }
    return updated;
  }
  /**
   * Updates a given Matrix4 uniform.
   *
   * @param {Matrix4Uniform} uniform - The Matrix4 uniform.
   * @return {boolean} Whether the uniform has been updated or not.
   */
  updateMatrix4(uniform3) {
    let updated = false;
    const a2 = this.values;
    const e2 = uniform3.getValue().elements;
    const offset = uniform3.offset;
    if (arraysEqual(a2, e2, offset) === false) {
      const b = this.buffer;
      b.set(e2, offset);
      setArray(a2, e2, offset);
      updated = true;
    }
    return updated;
  }
  /**
   * Returns a typed array that matches the given data type.
   *
   * @param {string} type - The data type.
   * @return {TypedArray} The typed array.
   */
  _getBufferForType(type) {
    if (type === "int" || type === "ivec2" || type === "ivec3" || type === "ivec4")
      return new Int32Array(this.buffer.buffer);
    if (type === "uint" || type === "uvec2" || type === "uvec3" || type === "uvec4")
      return new Uint32Array(this.buffer.buffer);
    return this.buffer;
  }
};
function setArray(a2, b, offset) {
  for (let i2 = 0, l2 = b.length; i2 < l2; i2++) {
    a2[offset + i2] = b[i2];
  }
}
function arraysEqual(a2, b, offset) {
  for (let i2 = 0, l2 = b.length; i2 < l2; i2++) {
    if (a2[offset + i2] !== b[i2])
      return false;
  }
  return true;
}
var _id$3 = 0;
var NodeUniformsGroup = class extends UniformsGroup2 {
  /**
   * Constructs a new node-based uniforms group.
   *
   * @param {string} name - The group's name.
   * @param {UniformGroupNode} groupNode - The uniform group node.
   */
  constructor(name, groupNode) {
    super(name);
    this.id = _id$3++;
    this.groupNode = groupNode;
    this.isNodeUniformsGroup = true;
  }
};
var Sampler = class extends Binding {
  /**
   * Constructs a new sampler.
   *
   * @param {string} name - The samplers's name.
   * @param {?Texture} texture - The texture this binding is referring to.
   */
  constructor(name, texture3) {
    super(name);
    this.texture = texture3;
    this.version = texture3 ? texture3.version : 0;
    this.generation = null;
    this.isSampler = true;
  }
  /**
   * Sets the texture of this sampler.
   * @param {?Texture} value - The texture to set.
   */
  set texture(value) {
    if (this._texture === value)
      return;
    const onDispose = () => {
      this._texture = null;
      this.generation = null;
      this.version = 0;
    };
    if (this._texture) {
      this._texture.removeEventListener("dispose", onDispose);
    }
    this._texture = value;
    this.generation = null;
    this.version = 0;
    if (this._texture) {
      this._texture.addEventListener("dispose", onDispose);
    }
  }
  /**
   * Gets the texture of this sampler.
   * @return {?Texture} The texture.
   */
  get texture() {
    return this._texture;
  }
  /**
   * Updates the binding.
   *
   * @return {boolean} Whether the texture has been updated and must be
   * uploaded to the GPU.
   */
  update() {
    const { texture: texture3, version } = this;
    if (version !== texture3.version) {
      this.version = texture3.version;
      return true;
    }
    return false;
  }
  clone() {
    const clonedSampler = super.clone();
    clonedSampler._texture = null;
    clonedSampler.texture = this.texture;
    return clonedSampler;
  }
};
var _id$2 = 0;
var SampledTexture = class extends Sampler {
  /**
   * Constructs a new sampled texture.
   *
   * @param {string} name - The sampled texture's name.
   * @param {?Texture} texture - The texture this binding is referring to.
   */
  constructor(name, texture3) {
    super(name, texture3);
    this.id = _id$2++;
    this.store = false;
    this.isSampledTexture = true;
  }
};
var NodeSampledTexture = class extends SampledTexture {
  /**
   * Constructs a new node-based sampled texture.
   *
   * @param {string} name - The textures's name.
   * @param {TextureNode} textureNode - The texture node.
   * @param {UniformGroupNode} groupNode - The uniform group node.
   * @param {?string} [access=null] - The access type.
   */
  constructor(name, textureNode, groupNode, access = null) {
    super(name, textureNode ? textureNode.value : null);
    this.textureNode = textureNode;
    this.groupNode = groupNode;
    this.access = access;
  }
  /**
   * Updates the binding.
   *
   * @return {boolean} Whether the texture has been updated and must be
   * uploaded to the GPU.
   */
  update() {
    const { textureNode } = this;
    if (this.texture !== textureNode.value) {
      this.texture = textureNode.value;
      return true;
    }
    return super.update();
  }
};
var NodeSampledCubeTexture = class extends NodeSampledTexture {
  /**
   * Constructs a new node-based sampled cube texture.
   *
   * @param {string} name - The textures's name.
   * @param {TextureNode} textureNode - The texture node.
   * @param {UniformGroupNode} groupNode - The uniform group node.
   * @param {?string} [access=null] - The access type.
   */
  constructor(name, textureNode, groupNode, access = null) {
    super(name, textureNode, groupNode, access);
    this.isSampledCubeTexture = true;
  }
};
var NodeSampledTexture3D = class extends NodeSampledTexture {
  /**
   * Constructs a new node-based sampled 3D texture.
   *
   * @param {string} name - The textures's name.
   * @param {TextureNode} textureNode - The texture node.
   * @param {UniformGroupNode} groupNode - The uniform group node.
   * @param {?string} [access=null] - The access type.
   */
  constructor(name, textureNode, groupNode, access = null) {
    super(name, textureNode, groupNode, access);
    this.isSampledTexture3D = true;
  }
};
var glslMethods = {
  textureDimensions: "textureSize",
  equals: "equal",
  bitcast_float_int: "floatBitsToInt",
  bitcast_int_float: "intBitsToFloat",
  bitcast_uint_float: "uintBitsToFloat",
  bitcast_float_uint: "floatBitsToUint"
};
var precisionLib = {
  low: "lowp",
  medium: "mediump",
  high: "highp"
};
var supports$1 = {
  swizzleAssign: true,
  storageBuffer: false
};
var interpolationTypeMap = {
  perspective: "smooth",
  linear: "noperspective"
};
var interpolationModeMap = {
  "centroid": "centroid"
};
var defaultPrecisions = `
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
precision lowp sampler2DArrayShadow;
precision lowp samplerCubeShadow;
`;
var GLSLNodeBuilder = class extends NodeBuilder {
  /**
   * Constructs a new GLSL node builder renderer.
   *
   * @param {Object3D} object - The 3D object.
   * @param {Renderer} renderer - The renderer.
   */
  constructor(object, renderer3) {
    super(object, renderer3, new GLSLNodeParser());
    this.uniformGroups = {};
    this.transforms = [];
    this.extensions = {};
    this.builtins = { vertex: [], fragment: [], compute: [] };
  }
  /**
   * Checks if the given texture requires a manual conversion to the working color space.
   *
   * @param {Texture} texture - The texture to check.
   * @return {boolean} Whether the given texture requires a conversion to working color space or not.
   */
  needsToWorkingColorSpace(texture3) {
    return texture3.isVideoTexture === true && texture3.colorSpace !== NoColorSpace;
  }
  /**
   * Returns the native shader method name for a given generic name.
   *
   * @param {string} method - The method name to resolve.
   * @return {string} The resolved GLSL method name.
   */
  getMethod(method) {
    return glslMethods[method] || method;
  }
  /**
   * Returns the bitcast method name for a given input and outputType.
   *
   * @param {string} type - The output type to bitcast to.
   * @param {string} inputType - The input type of the.
   * @return {string} The resolved WGSL bitcast invocation.
   */
  getBitcastMethod(type, inputType) {
    return glslMethods[`bitcast_${inputType}_${type}`];
  }
  /**
   * Returns the native snippet for a ternary operation.
   *
   * @param {string} condSnippet - The condition determining which expression gets resolved.
   * @param {string} ifSnippet - The expression to resolve to if the condition is true.
   * @param {string} elseSnippet - The expression to resolve to if the condition is false.
   * @return {string} The resolved method name.
   */
  getTernary(condSnippet, ifSnippet, elseSnippet) {
    return `${condSnippet} ? ${ifSnippet} : ${elseSnippet}`;
  }
  /**
   * Returns the output struct name. Not relevant for GLSL.
   *
   * @return {string}
   */
  getOutputStructName() {
    return "";
  }
  /**
   * Builds the given shader node.
   *
   * @param {ShaderNodeInternal} shaderNode - The shader node.
   * @return {string} The GLSL function code.
   */
  buildFunctionCode(shaderNode) {
    const layout = shaderNode.layout;
    const flowData = this.flowShaderNode(shaderNode);
    const parameters = [];
    for (const input of layout.inputs) {
      parameters.push(this.getType(input.type) + " " + input.name);
    }
    const code3 = `${this.getType(layout.type)} ${layout.name}( ${parameters.join(", ")} ) {

	${flowData.vars}

${flowData.code}
	return ${flowData.result};

}`;
    return code3;
  }
  /**
   * Setups the Pixel Buffer Object (PBO) for the given storage
   * buffer node.
   *
   * @param {StorageBufferNode} storageBufferNode - The storage buffer node.
   */
  setupPBO(storageBufferNode) {
    const attribute3 = storageBufferNode.value;
    if (attribute3.pbo === void 0) {
      const originalArray = attribute3.array;
      const numElements = attribute3.count * attribute3.itemSize;
      const { itemSize } = attribute3;
      const isInteger = attribute3.array.constructor.name.toLowerCase().includes("int");
      let format2 = isInteger ? RedIntegerFormat : RedFormat;
      if (itemSize === 2) {
        format2 = isInteger ? RGIntegerFormat : RGFormat;
      } else if (itemSize === 3) {
        format2 = isInteger ? RGBIntegerFormat : RGBFormat;
      } else if (itemSize === 4) {
        format2 = isInteger ? RGBAIntegerFormat : RGBAFormat;
      }
      const typeMap = {
        Float32Array: FloatType,
        Uint8Array: UnsignedByteType,
        Uint16Array: UnsignedShortType,
        Uint32Array: UnsignedIntType,
        Int8Array: ByteType,
        Int16Array: ShortType,
        Int32Array: IntType,
        Uint8ClampedArray: UnsignedByteType
      };
      const width = Math.pow(2, Math.ceil(Math.log2(Math.sqrt(numElements / itemSize))));
      let height = Math.ceil(numElements / itemSize / width);
      if (width * height * itemSize < numElements)
        height++;
      const newSize = width * height * itemSize;
      const newArray = new originalArray.constructor(newSize);
      newArray.set(originalArray, 0);
      attribute3.array = newArray;
      const pboTexture = new DataTexture(attribute3.array, width, height, format2, typeMap[attribute3.array.constructor.name] || FloatType);
      pboTexture.needsUpdate = true;
      pboTexture.isPBOTexture = true;
      const pbo = new TextureNode(pboTexture, null, null);
      pbo.setPrecision("high");
      attribute3.pboNode = pbo;
      attribute3.pbo = pbo.value;
      this.getUniformFromNode(attribute3.pboNode, "texture", this.shaderStage, this.context.nodeName);
    }
  }
  /**
   * Returns a GLSL snippet that represents the property name of the given node.
   *
   * @param {Node} node - The node.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The property name.
   */
  getPropertyName(node, shaderStage = this.shaderStage) {
    if (node.isNodeUniform && node.node.isTextureNode !== true && node.node.isBufferNode !== true) {
      return shaderStage.charAt(0) + "_" + node.name;
    }
    return super.getPropertyName(node, shaderStage);
  }
  /**
   * Setups the Pixel Buffer Object (PBO) for the given storage
   * buffer node.
   *
   * @param {StorageArrayElementNode} storageArrayElementNode - The storage array element node.
   * @return {string} The property name.
   */
  generatePBO(storageArrayElementNode) {
    const { node, indexNode } = storageArrayElementNode;
    const attribute3 = node.value;
    if (this.renderer.backend.has(attribute3)) {
      const attributeData = this.renderer.backend.get(attribute3);
      attributeData.pbo = attribute3.pbo;
    }
    const nodeUniform = this.getUniformFromNode(attribute3.pboNode, "texture", this.shaderStage, this.context.nodeName);
    const textureName = this.getPropertyName(nodeUniform);
    this.increaseUsage(indexNode);
    const indexSnippet = indexNode.build(this, "uint");
    const elementNodeData = this.getDataFromNode(storageArrayElementNode);
    let propertyName = elementNodeData.propertyName;
    if (propertyName === void 0) {
      const nodeVar = this.getVarFromNode(storageArrayElementNode);
      propertyName = this.getPropertyName(nodeVar);
      const bufferNodeData = this.getDataFromNode(node);
      let propertySizeName = bufferNodeData.propertySizeName;
      if (propertySizeName === void 0) {
        propertySizeName = propertyName + "Size";
        this.getVarFromNode(node, propertySizeName, "uint");
        this.addLineFlowCode(`${propertySizeName} = uint( textureSize( ${textureName}, 0 ).x )`, storageArrayElementNode);
        bufferNodeData.propertySizeName = propertySizeName;
      }
      const { itemSize } = attribute3;
      const channel = "." + vectorComponents.join("").slice(0, itemSize);
      const uvSnippet = `ivec2(${indexSnippet} % ${propertySizeName}, ${indexSnippet} / ${propertySizeName})`;
      const snippet = this.generateTextureLoad(null, textureName, uvSnippet, null, null, "0");
      let prefix = "vec4";
      if (attribute3.pbo.type === UnsignedIntType) {
        prefix = "uvec4";
      } else if (attribute3.pbo.type === IntType) {
        prefix = "ivec4";
      }
      this.addLineFlowCode(`${propertyName} = ${prefix}(${snippet})${channel}`, storageArrayElementNode);
      elementNodeData.propertyName = propertyName;
    }
    return propertyName;
  }
  /**
   * Generates the GLSL snippet that reads a single texel from a texture without sampling or filtering.
   *
   * @param {?Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvIndexSnippet - A GLSL snippet that represents texture coordinates used for sampling.
   * @param {?string} depthSnippet - A GLSL snippet that represents the 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A GLSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [levelSnippet='0u'] - A GLSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @return {string} The GLSL snippet.
   */
  generateTextureLoad(texture3, textureProperty, uvIndexSnippet, depthSnippet, offsetSnippet, levelSnippet = "0") {
    let snippet;
    if (depthSnippet) {
      if (offsetSnippet) {
        snippet = `texelFetchOffset( ${textureProperty}, ivec3( ${uvIndexSnippet}, ${depthSnippet} ), ${levelSnippet}, ${offsetSnippet} )`;
      } else {
        snippet = `texelFetch( ${textureProperty}, ivec3( ${uvIndexSnippet}, ${depthSnippet} ), ${levelSnippet} )`;
      }
    } else {
      if (offsetSnippet) {
        snippet = `texelFetchOffset( ${textureProperty}, ${uvIndexSnippet}, ${levelSnippet}, ${offsetSnippet} )`;
      } else {
        snippet = `texelFetch( ${textureProperty}, ${uvIndexSnippet}, ${levelSnippet} )`;
      }
    }
    if (texture3 !== null && texture3.isDepthTexture) {
      snippet += ".x";
    }
    return snippet;
  }
  /**
   * Generates the GLSL snippet for sampling/loading the given texture.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
   * @param {?string} depthSnippet -  A GLSL snippet that represents the 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A GLSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @return {string} The GLSL snippet.
   */
  generateTexture(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet) {
    if (depthSnippet)
      uvSnippet = `vec3( ${uvSnippet}, ${depthSnippet} )`;
    if (texture3.isDepthTexture) {
      if (offsetSnippet)
        return `textureOffset( ${textureProperty}, ${uvSnippet}, ${offsetSnippet} ).x`;
      return `texture( ${textureProperty}, ${uvSnippet} ).x`;
    }
    if (offsetSnippet)
      return `textureOffset( ${textureProperty}, ${uvSnippet}, ${offsetSnippet} )`;
    return `texture( ${textureProperty}, ${uvSnippet} )`;
  }
  /**
   * Generates the GLSL snippet when sampling textures with explicit mip level.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
   * @param {string} levelSnippet - A GLSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @param {?string} offsetSnippet - A GLSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @return {string} The GLSL snippet.
   */
  generateTextureLevel(texture3, textureProperty, uvSnippet, levelSnippet, offsetSnippet) {
    if (offsetSnippet) {
      return `textureLodOffset( ${textureProperty}, ${uvSnippet}, ${levelSnippet}, ${offsetSnippet} )`;
    }
    return `textureLod( ${textureProperty}, ${uvSnippet}, ${levelSnippet} )`;
  }
  /**
   * Generates the GLSL snippet when sampling textures with a bias to the mip level.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
   * @param {string} biasSnippet - A GLSL snippet that represents the bias to apply to the mip level before sampling.
   * @param {?string} offsetSnippet - A GLSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @return {string} The GLSL snippet.
   */
  generateTextureBias(texture3, textureProperty, uvSnippet, biasSnippet, offsetSnippet) {
    if (offsetSnippet) {
      return `textureOffset( ${textureProperty}, ${uvSnippet}, ${offsetSnippet}, ${biasSnippet} )`;
    }
    return `texture( ${textureProperty}, ${uvSnippet}, ${biasSnippet} )`;
  }
  /**
   * Generates the GLSL snippet for sampling/loading the given texture using explicit gradients.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
   * @param {Array<string>} gradSnippet - An array holding both gradient GLSL snippets.
   * @param {?string} offsetSnippet - A GLSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @return {string} The GLSL snippet.
   */
  generateTextureGrad(texture3, textureProperty, uvSnippet, gradSnippet, offsetSnippet) {
    if (offsetSnippet) {
      return `textureGradOffset( ${textureProperty}, ${uvSnippet}, ${gradSnippet[0]}, ${gradSnippet[1]}, ${offsetSnippet} )`;
    }
    return `textureGrad( ${textureProperty}, ${uvSnippet}, ${gradSnippet[0]}, ${gradSnippet[1]} )`;
  }
  /**
   * Generates the GLSL snippet for sampling a depth texture and comparing the sampled depth values
   * against a reference value.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
   * @param {string} compareSnippet -  A GLSL snippet that represents the reference value.
   * @param {?string} depthSnippet - A GLSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A GLSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The GLSL snippet.
   */
  generateTextureCompare(texture3, textureProperty, uvSnippet, compareSnippet, depthSnippet, offsetSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      if (depthSnippet) {
        if (offsetSnippet) {
          return `textureOffset( ${textureProperty}, vec4( ${uvSnippet}, ${depthSnippet}, ${compareSnippet} ), ${offsetSnippet} )`;
        }
        return `texture( ${textureProperty}, vec4( ${uvSnippet}, ${depthSnippet}, ${compareSnippet} ) )`;
      }
      if (offsetSnippet) {
        return `textureOffset( ${textureProperty}, vec3( ${uvSnippet}, ${compareSnippet} ), ${offsetSnippet} )`;
      }
      return `texture( ${textureProperty}, vec3( ${uvSnippet}, ${compareSnippet} ) )`;
    } else {
      console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);
    }
  }
  /**
   * Returns the variables of the given shader stage as a GLSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The GLSL snippet that defines the variables.
   */
  getVars(shaderStage) {
    const snippets = [];
    const vars = this.vars[shaderStage];
    if (vars !== void 0) {
      for (const variable of vars) {
        snippets.push(`${this.getVar(variable.type, variable.name, variable.count)};`);
      }
    }
    return snippets.join("\n	");
  }
  /**
   * Returns the uniforms of the given shader stage as a GLSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The GLSL snippet that defines the uniforms.
   */
  getUniforms(shaderStage) {
    const uniforms = this.uniforms[shaderStage];
    const bindingSnippets = [];
    const uniformGroups = {};
    for (const uniform3 of uniforms) {
      let snippet = null;
      let group = false;
      if (uniform3.type === "texture" || uniform3.type === "texture3D") {
        const texture3 = uniform3.node.value;
        let typePrefix = "";
        if (texture3.isDataTexture === true || texture3.isData3DTexture === true) {
          if (texture3.type === UnsignedIntType) {
            typePrefix = "u";
          } else if (texture3.type === IntType) {
            typePrefix = "i";
          }
        }
        if (uniform3.type === "texture3D" && texture3.isArrayTexture === false) {
          snippet = `${typePrefix}sampler3D ${uniform3.name};`;
        } else if (texture3.compareFunction) {
          if (texture3.isArrayTexture === true) {
            snippet = `sampler2DArrayShadow ${uniform3.name};`;
          } else {
            snippet = `sampler2DShadow ${uniform3.name};`;
          }
        } else if (texture3.isArrayTexture === true || texture3.isDataArrayTexture === true || texture3.isCompressedArrayTexture === true) {
          snippet = `${typePrefix}sampler2DArray ${uniform3.name};`;
        } else {
          snippet = `${typePrefix}sampler2D ${uniform3.name};`;
        }
      } else if (uniform3.type === "cubeTexture") {
        snippet = `samplerCube ${uniform3.name};`;
      } else if (uniform3.type === "buffer") {
        const bufferNode = uniform3.node;
        const bufferType = this.getType(bufferNode.bufferType);
        const bufferCount = bufferNode.bufferCount;
        const bufferCountSnippet = bufferCount > 0 ? bufferCount : "";
        snippet = `${bufferNode.name} {
	${bufferType} ${uniform3.name}[${bufferCountSnippet}];
};
`;
      } else {
        const vectorType = this.getVectorType(uniform3.type);
        snippet = `${vectorType} ${this.getPropertyName(uniform3, shaderStage)};`;
        group = true;
      }
      const precision = uniform3.node.precision;
      if (precision !== null) {
        snippet = precisionLib[precision] + " " + snippet;
      }
      if (group) {
        snippet = "	" + snippet;
        const groupName = uniform3.groupNode.name;
        const groupSnippets = uniformGroups[groupName] || (uniformGroups[groupName] = []);
        groupSnippets.push(snippet);
      } else {
        snippet = "uniform " + snippet;
        bindingSnippets.push(snippet);
      }
    }
    let output3 = "";
    for (const name in uniformGroups) {
      const groupSnippets = uniformGroups[name];
      output3 += this._getGLSLUniformStruct(shaderStage + "_" + name, groupSnippets.join("\n")) + "\n";
    }
    output3 += bindingSnippets.join("\n");
    return output3;
  }
  /**
   * Returns the type for a given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   * @return {string} The type.
   */
  getTypeFromAttribute(attribute3) {
    let nodeType = super.getTypeFromAttribute(attribute3);
    if (/^[iu]/.test(nodeType) && attribute3.gpuType !== IntType) {
      let dataAttribute = attribute3;
      if (attribute3.isInterleavedBufferAttribute)
        dataAttribute = attribute3.data;
      const array3 = dataAttribute.array;
      if ((array3 instanceof Uint32Array || array3 instanceof Int32Array) === false) {
        nodeType = nodeType.slice(1);
      }
    }
    return nodeType;
  }
  /**
   * Returns the shader attributes of the given shader stage as a GLSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The GLSL snippet that defines the shader attributes.
   */
  getAttributes(shaderStage) {
    let snippet = "";
    if (shaderStage === "vertex" || shaderStage === "compute") {
      const attributes = this.getAttributesArray();
      let location = 0;
      for (const attribute3 of attributes) {
        snippet += `layout( location = ${location++} ) in ${attribute3.type} ${attribute3.name};
`;
      }
    }
    return snippet;
  }
  /**
   * Returns the members of the given struct type node as a GLSL string.
   *
   * @param {StructTypeNode} struct - The struct type node.
   * @return {string} The GLSL snippet that defines the struct members.
   */
  getStructMembers(struct3) {
    const snippets = [];
    for (const member of struct3.members) {
      snippets.push(`	${member.type} ${member.name};`);
    }
    return snippets.join("\n");
  }
  /**
   * Returns the structs of the given shader stage as a GLSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The GLSL snippet that defines the structs.
   */
  getStructs(shaderStage) {
    const snippets = [];
    const structs = this.structs[shaderStage];
    const outputSnippet = [];
    for (const struct3 of structs) {
      if (struct3.output) {
        for (const member of struct3.members) {
          outputSnippet.push(`layout( location = ${member.index} ) out ${member.type} ${member.name};`);
        }
      } else {
        let snippet = "struct " + struct3.name + " {\n";
        snippet += this.getStructMembers(struct3);
        snippet += "\n};\n";
        snippets.push(snippet);
      }
    }
    if (outputSnippet.length === 0) {
      outputSnippet.push("layout( location = 0 ) out vec4 fragColor;");
    }
    return "\n" + outputSnippet.join("\n") + "\n\n" + snippets.join("\n");
  }
  /**
   * Returns the varyings of the given shader stage as a GLSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The GLSL snippet that defines the varyings.
   */
  getVaryings(shaderStage) {
    let snippet = "";
    const varyings = this.varyings;
    if (shaderStage === "vertex" || shaderStage === "compute") {
      for (const varying3 of varyings) {
        if (shaderStage === "compute")
          varying3.needsInterpolation = true;
        const type = this.getType(varying3.type);
        if (varying3.needsInterpolation) {
          if (varying3.interpolationType) {
            const interpolationType = interpolationTypeMap[varying3.interpolationType] || varying3.interpolationType;
            const sampling = interpolationModeMap[varying3.interpolationSampling] || "";
            snippet += `${interpolationType} ${sampling} out ${type} ${varying3.name};
`;
          } else {
            const flat = type.includes("int") || type.includes("uv") || type.includes("iv") ? "flat " : "";
            snippet += `${flat}out ${type} ${varying3.name};
`;
          }
        } else {
          snippet += `${type} ${varying3.name};
`;
        }
      }
    } else if (shaderStage === "fragment") {
      for (const varying3 of varyings) {
        if (varying3.needsInterpolation) {
          const type = this.getType(varying3.type);
          if (varying3.interpolationType) {
            const interpolationType = interpolationTypeMap[varying3.interpolationType] || varying3.interpolationType;
            const sampling = interpolationModeMap[varying3.interpolationSampling] || "";
            snippet += `${interpolationType} ${sampling} in ${type} ${varying3.name};
`;
          } else {
            const flat = type.includes("int") || type.includes("uv") || type.includes("iv") ? "flat " : "";
            snippet += `${flat}in ${type} ${varying3.name};
`;
          }
        }
      }
    }
    for (const builtin3 of this.builtins[shaderStage]) {
      snippet += `${builtin3};
`;
    }
    return snippet;
  }
  /**
   * Returns the vertex index builtin.
   *
   * @return {string} The vertex index.
   */
  getVertexIndex() {
    return "uint( gl_VertexID )";
  }
  /**
   * Returns the instance index builtin.
   *
   * @return {string} The instance index.
   */
  getInstanceIndex() {
    return "uint( gl_InstanceID )";
  }
  /**
   * Returns the invocation local index builtin.
   *
   * @return {string} The invocation local index.
   */
  getInvocationLocalIndex() {
    const workgroupSize = this.object.workgroupSize;
    const size = workgroupSize.reduce((acc, curr) => acc * curr, 1);
    return `uint( gl_InstanceID ) % ${size}u`;
  }
  /**
   * Returns the draw index builtin.
   *
   * @return {?string} The drawIndex shader string. Returns `null` if `WEBGL_multi_draw` isn't supported by the device.
   */
  getDrawIndex() {
    const extensions = this.renderer.backend.extensions;
    if (extensions.has("WEBGL_multi_draw")) {
      return "uint( gl_DrawID )";
    }
    return null;
  }
  /**
   * Returns the front facing builtin.
   *
   * @return {string} The front facing builtin.
   */
  getFrontFacing() {
    return "gl_FrontFacing";
  }
  /**
   * Returns the frag coord builtin.
   *
   * @return {string} The frag coord builtin.
   */
  getFragCoord() {
    return "gl_FragCoord.xy";
  }
  /**
   * Returns the frag depth builtin.
   *
   * @return {string} The frag depth builtin.
   */
  getFragDepth() {
    return "gl_FragDepth";
  }
  /**
   * Enables the given extension.
   *
   * @param {string} name - The extension name.
   * @param {string} behavior - The extension behavior.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage.
   */
  enableExtension(name, behavior, shaderStage = this.shaderStage) {
    const map = this.extensions[shaderStage] || (this.extensions[shaderStage] = /* @__PURE__ */ new Map());
    if (map.has(name) === false) {
      map.set(name, {
        name,
        behavior
      });
    }
  }
  /**
   * Returns the enabled extensions of the given shader stage as a GLSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The GLSL snippet that defines the enabled extensions.
   */
  getExtensions(shaderStage) {
    const snippets = [];
    if (shaderStage === "vertex") {
      const ext = this.renderer.backend.extensions;
      const isBatchedMesh = this.object.isBatchedMesh;
      if (isBatchedMesh && ext.has("WEBGL_multi_draw")) {
        this.enableExtension("GL_ANGLE_multi_draw", "require", shaderStage);
      }
    }
    const extensions = this.extensions[shaderStage];
    if (extensions !== void 0) {
      for (const { name, behavior } of extensions.values()) {
        snippets.push(`#extension ${name} : ${behavior}`);
      }
    }
    return snippets.join("\n");
  }
  /**
   * Returns the clip distances builtin.
   *
   * @return {string} The clip distances builtin.
   */
  getClipDistance() {
    return "gl_ClipDistance";
  }
  /**
   * Whether the requested feature is available or not.
   *
   * @param {string} name - The requested feature.
   * @return {boolean} Whether the requested feature is supported or not.
   */
  isAvailable(name) {
    let result = supports$1[name];
    if (result === void 0) {
      let extensionName;
      result = false;
      switch (name) {
        case "float32Filterable":
          extensionName = "OES_texture_float_linear";
          break;
        case "clipDistance":
          extensionName = "WEBGL_clip_cull_distance";
          break;
      }
      if (extensionName !== void 0) {
        const extensions = this.renderer.backend.extensions;
        if (extensions.has(extensionName)) {
          extensions.get(extensionName);
          result = true;
        }
      }
      supports$1[name] = result;
    }
    return result;
  }
  /**
   * Whether to flip texture data along its vertical axis or not.
   *
   * @return {boolean} Returns always `true` in context of GLSL.
   */
  isFlipY() {
    return true;
  }
  /**
   * Enables hardware clipping.
   *
   * @param {string} planeCount - The clipping plane count.
   */
  enableHardwareClipping(planeCount) {
    this.enableExtension("GL_ANGLE_clip_cull_distance", "require");
    this.builtins["vertex"].push(`out float gl_ClipDistance[ ${planeCount} ]`);
  }
  /**
   * Enables multiview.
   */
  enableMultiview() {
    this.enableExtension("GL_OVR_multiview2", "require", "fragment");
    this.enableExtension("GL_OVR_multiview2", "require", "vertex");
    this.builtins["vertex"].push("layout(num_views = 2) in");
  }
  /**
   * Registers a transform in context of Transform Feedback.
   *
   * @param {string} varyingName - The varying name.
   * @param {AttributeNode} attributeNode - The attribute node.
   */
  registerTransform(varyingName, attributeNode) {
    this.transforms.push({ varyingName, attributeNode });
  }
  /**
   * Returns the transforms of the given shader stage as a GLSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The GLSL snippet that defines the transforms.
   */
  getTransforms() {
    const transforms = this.transforms;
    let snippet = "";
    for (let i2 = 0; i2 < transforms.length; i2++) {
      const transform = transforms[i2];
      const attributeName = this.getPropertyName(transform.attributeNode);
      if (attributeName)
        snippet += `${transform.varyingName} = ${attributeName};
	`;
    }
    return snippet;
  }
  /**
   * Returns a GLSL struct based on the given name and variables.
   *
   * @private
   * @param {string} name - The struct name.
   * @param {string} vars - The struct variables.
   * @return {string} The GLSL snippet representing a struct.
   */
  _getGLSLUniformStruct(name, vars) {
    return `
layout( std140 ) uniform ${name} {
${vars}
};`;
  }
  /**
   * Returns a GLSL vertex shader based on the given shader data.
   *
   * @private
   * @param {Object} shaderData - The shader data.
   * @return {string} The vertex shader.
   */
  _getGLSLVertexCode(shaderData) {
    return `#version 300 es

${this.getSignature()}

// extensions
${shaderData.extensions}

// precision
${defaultPrecisions}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// attributes
${shaderData.attributes}

// codes
${shaderData.codes}

void main() {

	// vars
	${shaderData.vars}

	// transforms
	${shaderData.transforms}

	// flow
	${shaderData.flow}

	gl_PointSize = 1.0;

}
`;
  }
  /**
   * Returns a GLSL fragment shader based on the given shader data.
   *
   * @private
   * @param {Object} shaderData - The shader data.
   * @return {string} The vertex shader.
   */
  _getGLSLFragmentCode(shaderData) {
    return `#version 300 es

${this.getSignature()}

// extensions
${shaderData.extensions}

// precision
${defaultPrecisions}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// codes
${shaderData.codes}

// structs
${shaderData.structs}

void main() {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
  }
  /**
   * Controls the code build of the shader stages.
   */
  buildCode() {
    const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };
    this.sortBindingGroups();
    for (const shaderStage in shadersData) {
      let flow = "// code\n\n";
      flow += this.flowCode[shaderStage];
      const flowNodes = this.flowNodes[shaderStage];
      const mainNode = flowNodes[flowNodes.length - 1];
      for (const node of flowNodes) {
        const flowSlotData = this.getFlowData(
          node
          /*, shaderStage*/
        );
        const slotName = node.name;
        if (slotName) {
          if (flow.length > 0)
            flow += "\n";
          flow += `	// flow -> ${slotName}
	`;
        }
        flow += `${flowSlotData.code}
	`;
        if (node === mainNode && shaderStage !== "compute") {
          flow += "// result\n	";
          if (shaderStage === "vertex") {
            flow += "gl_Position = ";
            flow += `${flowSlotData.result};`;
          } else if (shaderStage === "fragment") {
            if (!node.outputNode.isOutputStructNode) {
              flow += "fragColor = ";
              flow += `${flowSlotData.result};`;
            }
          }
        }
      }
      const stageData = shadersData[shaderStage];
      stageData.extensions = this.getExtensions(shaderStage);
      stageData.uniforms = this.getUniforms(shaderStage);
      stageData.attributes = this.getAttributes(shaderStage);
      stageData.varyings = this.getVaryings(shaderStage);
      stageData.vars = this.getVars(shaderStage);
      stageData.structs = this.getStructs(shaderStage);
      stageData.codes = this.getCodes(shaderStage);
      stageData.transforms = this.getTransforms(shaderStage);
      stageData.flow = flow;
    }
    if (this.material !== null) {
      this.vertexShader = this._getGLSLVertexCode(shadersData.vertex);
      this.fragmentShader = this._getGLSLFragmentCode(shadersData.fragment);
    } else {
      this.computeShader = this._getGLSLVertexCode(shadersData.compute);
    }
  }
  /**
   * This method is one of the more important ones since it's responsible
   * for generating a matching binding instance for the given uniform node.
   *
   * These bindings are later used in the renderer to create bind groups
   * and layouts.
   *
   * @param {UniformNode} node - The uniform node.
   * @param {string} type - The node data type.
   * @param {string} shaderStage - The shader stage.
   * @param {?string} [name=null] - An optional uniform name.
   * @return {NodeUniform} The node uniform object.
   */
  getUniformFromNode(node, type, shaderStage, name = null) {
    const uniformNode = super.getUniformFromNode(node, type, shaderStage, name);
    const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
    let uniformGPU = nodeData.uniformGPU;
    if (uniformGPU === void 0) {
      const group = node.groupNode;
      const groupName = group.name;
      const bindings = this.getBindGroupArray(groupName, shaderStage);
      if (type === "texture") {
        uniformGPU = new NodeSampledTexture(uniformNode.name, uniformNode.node, group);
        bindings.push(uniformGPU);
      } else if (type === "cubeTexture") {
        uniformGPU = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group);
        bindings.push(uniformGPU);
      } else if (type === "texture3D") {
        uniformGPU = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group);
        bindings.push(uniformGPU);
      } else if (type === "buffer") {
        node.name = `NodeBuffer_${node.id}`;
        uniformNode.name = `buffer${node.id}`;
        const buffer3 = new NodeUniformBuffer(node, group);
        buffer3.name = node.name;
        bindings.push(buffer3);
        uniformGPU = buffer3;
      } else {
        const uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});
        let uniformsGroup = uniformsStage[groupName];
        if (uniformsGroup === void 0) {
          uniformsGroup = new NodeUniformsGroup(shaderStage + "_" + groupName, group);
          uniformsStage[groupName] = uniformsGroup;
          bindings.push(uniformsGroup);
        }
        uniformGPU = this.getNodeUniform(uniformNode, type);
        uniformsGroup.addUniform(uniformGPU);
      }
      nodeData.uniformGPU = uniformGPU;
    }
    return uniformNode;
  }
};
var _vector2 = null;
var _color4 = null;
var Backend = class {
  /**
   * Constructs a new backend.
   *
   * @param {Object} parameters - An object holding parameters for the backend.
   */
  constructor(parameters = {}) {
    this.parameters = Object.assign({}, parameters);
    this.data = /* @__PURE__ */ new WeakMap();
    this.renderer = null;
    this.domElement = null;
    this.timestampQueryPool = {
      "render": null,
      "compute": null
    };
    this.trackTimestamp = parameters.trackTimestamp === true;
  }
  /**
   * Initializes the backend so it is ready for usage. Concrete backends
   * are supposed to implement their rendering context creation and related
   * operations in this method.
   *
   * @async
   * @param {Renderer} renderer - The renderer.
   * @return {Promise} A Promise that resolves when the backend has been initialized.
   */
  async init(renderer3) {
    this.renderer = renderer3;
  }
  /**
   * The coordinate system of the backend.
   *
   * @abstract
   * @type {number}
   * @readonly
   */
  get coordinateSystem() {
  }
  // render context
  /**
   * This method is executed at the beginning of a render call and
   * can be used by the backend to prepare the state for upcoming
   * draw calls.
   *
   * @abstract
   * @param {RenderContext} renderContext - The render context.
   */
  beginRender() {
  }
  /**
   * This method is executed at the end of a render call and
   * can be used by the backend to finalize work after draw
   * calls.
   *
   * @abstract
   * @param {RenderContext} renderContext - The render context.
   */
  finishRender() {
  }
  /**
   * This method is executed at the beginning of a compute call and
   * can be used by the backend to prepare the state for upcoming
   * compute tasks.
   *
   * @abstract
   * @param {Node|Array<Node>} computeGroup - The compute node(s).
   */
  beginCompute() {
  }
  /**
   * This method is executed at the end of a compute call and
   * can be used by the backend to finalize work after compute
   * tasks.
   *
   * @abstract
   * @param {Node|Array<Node>} computeGroup - The compute node(s).
   */
  finishCompute() {
  }
  // render object
  /**
   * Executes a draw command for the given render object.
   *
   * @abstract
   * @param {RenderObject} renderObject - The render object to draw.
   * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.
   */
  draw() {
  }
  // compute node
  /**
   * Executes a compute command for the given compute node.
   *
   * @abstract
   * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.
   * @param {Node} computeNode - The compute node.
   * @param {Array<BindGroup>} bindings - The bindings.
   * @param {ComputePipeline} computePipeline - The compute pipeline.
   */
  compute() {
  }
  // program
  /**
   * Creates a shader program from the given programmable stage.
   *
   * @abstract
   * @param {ProgrammableStage} program - The programmable stage.
   */
  createProgram() {
  }
  /**
   * Destroys the shader program of the given programmable stage.
   *
   * @abstract
   * @param {ProgrammableStage} program - The programmable stage.
   */
  destroyProgram() {
  }
  // bindings
  /**
   * Creates bindings from the given bind group definition.
   *
   * @abstract
   * @param {BindGroup} bindGroup - The bind group.
   * @param {Array<BindGroup>} bindings - Array of bind groups.
   * @param {number} cacheIndex - The cache index.
   * @param {number} version - The version.
   */
  createBindings() {
  }
  /**
   * Updates the given bind group definition.
   *
   * @abstract
   * @param {BindGroup} bindGroup - The bind group.
   * @param {Array<BindGroup>} bindings - Array of bind groups.
   * @param {number} cacheIndex - The cache index.
   * @param {number} version - The version.
   */
  updateBindings() {
  }
  /**
   * Updates a buffer binding.
   *
   * @abstract
   * @param {Buffer} binding - The buffer binding to update.
   */
  updateBinding() {
  }
  // pipeline
  /**
   * Creates a render pipeline for the given render object.
   *
   * @abstract
   * @param {RenderObject} renderObject - The render object.
   * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
   */
  createRenderPipeline() {
  }
  /**
   * Creates a compute pipeline for the given compute node.
   *
   * @abstract
   * @param {ComputePipeline} computePipeline - The compute pipeline.
   * @param {Array<BindGroup>} bindings - The bindings.
   */
  createComputePipeline() {
  }
  // cache key
  /**
   * Returns `true` if the render pipeline requires an update.
   *
   * @abstract
   * @param {RenderObject} renderObject - The render object.
   * @return {boolean} Whether the render pipeline requires an update or not.
   */
  needsRenderUpdate() {
  }
  /**
   * Returns a cache key that is used to identify render pipelines.
   *
   * @abstract
   * @param {RenderObject} renderObject - The render object.
   * @return {string} The cache key.
   */
  getRenderCacheKey() {
  }
  // node builder
  /**
   * Returns a node builder for the given render object.
   *
   * @abstract
   * @param {RenderObject} renderObject - The render object.
   * @param {Renderer} renderer - The renderer.
   * @return {NodeBuilder} The node builder.
   */
  createNodeBuilder() {
  }
  // textures
  /**
   * Creates a GPU sampler for the given texture.
   *
   * @abstract
   * @param {Texture} texture - The texture to create the sampler for.
   */
  createSampler() {
  }
  /**
   * Destroys the GPU sampler for the given texture.
   *
   * @abstract
   * @param {Texture} texture - The texture to destroy the sampler for.
   */
  destroySampler() {
  }
  /**
   * Creates a default texture for the given texture that can be used
   * as a placeholder until the actual texture is ready for usage.
   *
   * @abstract
   * @param {Texture} texture - The texture to create a default texture for.
   */
  createDefaultTexture() {
  }
  /**
   * Defines a texture on the GPU for the given texture object.
   *
   * @abstract
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  createTexture() {
  }
  /**
   * Uploads the updated texture data to the GPU.
   *
   * @abstract
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  updateTexture() {
  }
  /**
   * Generates mipmaps for the given texture.
   *
   * @abstract
   * @param {Texture} texture - The texture.
   */
  generateMipmaps() {
  }
  /**
   * Destroys the GPU data for the given texture object.
   *
   * @abstract
   * @param {Texture} texture - The texture.
   */
  destroyTexture() {
  }
  /**
   * Returns texture data as a typed array.
   *
   * @abstract
   * @async
   * @param {Texture} texture - The texture to copy.
   * @param {number} x - The x coordinate of the copy origin.
   * @param {number} y - The y coordinate of the copy origin.
   * @param {number} width - The width of the copy.
   * @param {number} height - The height of the copy.
   * @param {number} faceIndex - The face index.
   * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
   */
  async copyTextureToBuffer() {
  }
  /**
   * Copies data of the given source texture to the given destination texture.
   *
   * @abstract
   * @param {Texture} srcTexture - The source texture.
   * @param {Texture} dstTexture - The destination texture.
   * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
   * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
   * @param {number} [srcLevel=0] - The source mip level to copy from.
   * @param {number} [dstLevel=0] - The destination mip level to copy to.
   */
  copyTextureToTexture() {
  }
  /**
  * Copies the current bound framebuffer to the given texture.
  *
  * @abstract
  * @param {Texture} texture - The destination texture.
  * @param {RenderContext} renderContext - The render context.
  * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
  */
  copyFramebufferToTexture() {
  }
  // attributes
  /**
   * Creates the GPU buffer of a shader attribute.
   *
   * @abstract
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  createAttribute() {
  }
  /**
   * Creates the GPU buffer of an indexed shader attribute.
   *
   * @abstract
   * @param {BufferAttribute} attribute - The indexed buffer attribute.
   */
  createIndexAttribute() {
  }
  /**
   * Creates the GPU buffer of a storage attribute.
   *
   * @abstract
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  createStorageAttribute() {
  }
  /**
   * Updates the GPU buffer of a shader attribute.
   *
   * @abstract
   * @param {BufferAttribute} attribute - The buffer attribute to update.
   */
  updateAttribute() {
  }
  /**
   * Destroys the GPU buffer of a shader attribute.
   *
   * @abstract
   * @param {BufferAttribute} attribute - The buffer attribute to destroy.
   */
  destroyAttribute() {
  }
  // canvas
  /**
   * Returns the backend's rendering context.
   *
   * @abstract
   * @return {Object} The rendering context.
   */
  getContext() {
  }
  /**
   * Backends can use this method if they have to run
   * logic when the renderer gets resized.
   *
   * @abstract
   */
  updateSize() {
  }
  /**
   * Updates the viewport with the values from the given render context.
   *
   * @abstract
   * @param {RenderContext} renderContext - The render context.
   */
  updateViewport() {
  }
  // utils
  /**
   * Returns a unique identifier for the given render context that can be used
   * to allocate resources like occlusion queries or timestamp queries.
   *
   * @param {RenderContext|ComputeNode} abstractRenderContext - The render context.
   * @return {string} The unique identifier.
   */
  getTimestampUID(abstractRenderContext) {
    const contextData = this.get(abstractRenderContext);
    let uid = abstractRenderContext.isComputeNode === true ? "c" : "r";
    uid += ":" + contextData.frameCalls + ":" + abstractRenderContext.id;
    return uid;
  }
  /**
   * Returns `true` if the given 3D object is fully occluded by other
   * 3D objects in the scene. Backends must implement this method by using
   * a Occlusion Query API.
   *
   * @abstract
   * @param {RenderContext} renderContext - The render context.
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object is fully occluded or not.
   */
  isOccluded() {
  }
  /**
   * Resolves the time stamp for the given render context and type.
   *
   * @async
   * @abstract
   * @param {string} [type='render'] - The type of the time stamp.
   * @return {Promise<number>} A Promise that resolves with the time stamp.
   */
  async resolveTimestampsAsync(type = "render") {
    if (!this.trackTimestamp) {
      warnOnce("WebGPURenderer: Timestamp tracking is disabled.");
      return;
    }
    const queryPool = this.timestampQueryPool[type];
    if (!queryPool) {
      warnOnce(`WebGPURenderer: No timestamp query pool for type '${type}' found.`);
      return;
    }
    const duration = await queryPool.resolveQueriesAsync();
    this.renderer.info[type].timestamp = duration;
    return duration;
  }
  /**
   * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
   * the CPU waits for the GPU to complete its operation (e.g. a compute task).
   *
   * @async
   * @abstract
   * @return {Promise} A Promise that resolves when synchronization has been finished.
   */
  async waitForGPU() {
  }
  /**
   * This method performs a readback operation by moving buffer data from
   * a storage buffer attribute from the GPU to the CPU.
   *
   * @async
   * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
   * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
   */
  async getArrayBufferAsync() {
  }
  /**
   * Checks if the given feature is supported by the backend.
   *
   * @async
   * @abstract
   * @param {string} name - The feature's name.
   * @return {Promise<boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.
   */
  async hasFeatureAsync() {
  }
  /**
   * Checks if the given feature is supported  by the backend.
   *
   * @abstract
   * @param {string} name - The feature's name.
   * @return {boolean} Whether the feature is supported or not.
   */
  hasFeature() {
  }
  /**
   * Returns the maximum anisotropy texture filtering value.
   *
   * @abstract
   * @return {number} The maximum anisotropy texture filtering value.
   */
  getMaxAnisotropy() {
  }
  /**
   * Returns the drawing buffer size.
   *
   * @return {Vector2} The drawing buffer size.
   */
  getDrawingBufferSize() {
    _vector2 = _vector2 || new Vector2();
    return this.renderer.getDrawingBufferSize(_vector2);
  }
  /**
   * Defines the scissor test.
   *
   * @abstract
   * @param {boolean} boolean - Whether the scissor test should be enabled or not.
   */
  setScissorTest() {
  }
  /**
   * Returns the clear color and alpha into a single
   * color object.
   *
   * @return {Color4} The clear color.
   */
  getClearColor() {
    const renderer3 = this.renderer;
    _color4 = _color4 || new Color4();
    renderer3.getClearColor(_color4);
    _color4.getRGB(_color4);
    return _color4;
  }
  /**
   * Returns the DOM element. If no DOM element exists, the backend
   * creates a new one.
   *
   * @return {HTMLCanvasElement} The DOM element.
   */
  getDomElement() {
    let domElement = this.domElement;
    if (domElement === null) {
      domElement = this.parameters.canvas !== void 0 ? this.parameters.canvas : createCanvasElement();
      if ("setAttribute" in domElement)
        domElement.setAttribute("data-engine", `three.js r${REVISION} webgpu`);
      this.domElement = domElement;
    }
    return domElement;
  }
  /**
   * Sets a dictionary for the given object into the
   * internal data structure.
   *
   * @param {Object} object - The object.
   * @param {Object} value - The dictionary to set.
   */
  set(object, value) {
    this.data.set(object, value);
  }
  /**
   * Returns the dictionary for the given object.
   *
   * @param {Object} object - The object.
   * @return {Object} The object's dictionary.
   */
  get(object) {
    let map = this.data.get(object);
    if (map === void 0) {
      map = {};
      this.data.set(object, map);
    }
    return map;
  }
  /**
   * Checks if the given object has a dictionary
   * with data defined.
   *
   * @param {Object} object - The object.
   * @return {boolean} Whether a dictionary for the given object as been defined or not.
   */
  has(object) {
    return this.data.has(object);
  }
  /**
   * Deletes an object from the internal data structure.
   *
   * @param {Object} object - The object to delete.
   */
  delete(object) {
    this.data.delete(object);
  }
  /**
   * Frees internal resources.
   *
   * @abstract
   */
  dispose() {
  }
};
var _id$1 = 0;
var DualAttributeData = class {
  constructor(attributeData, dualBuffer) {
    this.buffers = [attributeData.bufferGPU, dualBuffer];
    this.type = attributeData.type;
    this.bufferType = attributeData.bufferType;
    this.pbo = attributeData.pbo;
    this.byteLength = attributeData.byteLength;
    this.bytesPerElement = attributeData.BYTES_PER_ELEMENT;
    this.version = attributeData.version;
    this.isInteger = attributeData.isInteger;
    this.activeBufferIndex = 0;
    this.baseId = attributeData.id;
  }
  get id() {
    return `${this.baseId}|${this.activeBufferIndex}`;
  }
  get bufferGPU() {
    return this.buffers[this.activeBufferIndex];
  }
  get transformBuffer() {
    return this.buffers[this.activeBufferIndex ^ 1];
  }
  switchBuffers() {
    this.activeBufferIndex ^= 1;
  }
};
var WebGLAttributeUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGLBackend} backend - The WebGL 2 backend.
   */
  constructor(backend) {
    this.backend = backend;
  }
  /**
   * Creates the GPU buffer for the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   * @param {GLenum } bufferType - A flag that indicates the buffer type and thus binding point target.
   */
  createAttribute(attribute3, bufferType) {
    const backend = this.backend;
    const { gl } = backend;
    const array3 = attribute3.array;
    const usage = attribute3.usage || gl.STATIC_DRAW;
    const bufferAttribute3 = attribute3.isInterleavedBufferAttribute ? attribute3.data : attribute3;
    const bufferData = backend.get(bufferAttribute3);
    let bufferGPU = bufferData.bufferGPU;
    if (bufferGPU === void 0) {
      bufferGPU = this._createBuffer(gl, bufferType, array3, usage);
      bufferData.bufferGPU = bufferGPU;
      bufferData.bufferType = bufferType;
      bufferData.version = bufferAttribute3.version;
    }
    let type;
    if (array3 instanceof Float32Array) {
      type = gl.FLOAT;
    } else if (typeof Float16Array !== "undefined" && array3 instanceof Float16Array) {
      type = gl.HALF_FLOAT;
    } else if (array3 instanceof Uint16Array) {
      if (attribute3.isFloat16BufferAttribute) {
        type = gl.HALF_FLOAT;
      } else {
        type = gl.UNSIGNED_SHORT;
      }
    } else if (array3 instanceof Int16Array) {
      type = gl.SHORT;
    } else if (array3 instanceof Uint32Array) {
      type = gl.UNSIGNED_INT;
    } else if (array3 instanceof Int32Array) {
      type = gl.INT;
    } else if (array3 instanceof Int8Array) {
      type = gl.BYTE;
    } else if (array3 instanceof Uint8Array) {
      type = gl.UNSIGNED_BYTE;
    } else if (array3 instanceof Uint8ClampedArray) {
      type = gl.UNSIGNED_BYTE;
    } else {
      throw new Error("THREE.WebGLBackend: Unsupported buffer data format: " + array3);
    }
    let attributeData = {
      bufferGPU,
      bufferType,
      type,
      byteLength: array3.byteLength,
      bytesPerElement: array3.BYTES_PER_ELEMENT,
      version: attribute3.version,
      pbo: attribute3.pbo,
      isInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute3.gpuType === IntType,
      id: _id$1++
    };
    if (attribute3.isStorageBufferAttribute || attribute3.isStorageInstancedBufferAttribute) {
      const bufferGPUDual = this._createBuffer(gl, bufferType, array3, usage);
      attributeData = new DualAttributeData(attributeData, bufferGPUDual);
    }
    backend.set(attribute3, attributeData);
  }
  /**
   * Updates the GPU buffer of the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  updateAttribute(attribute3) {
    const backend = this.backend;
    const { gl } = backend;
    const array3 = attribute3.array;
    const bufferAttribute3 = attribute3.isInterleavedBufferAttribute ? attribute3.data : attribute3;
    const bufferData = backend.get(bufferAttribute3);
    const bufferType = bufferData.bufferType;
    const updateRanges = attribute3.isInterleavedBufferAttribute ? attribute3.data.updateRanges : attribute3.updateRanges;
    gl.bindBuffer(bufferType, bufferData.bufferGPU);
    if (updateRanges.length === 0) {
      gl.bufferSubData(bufferType, 0, array3);
    } else {
      for (let i2 = 0, l2 = updateRanges.length; i2 < l2; i2++) {
        const range3 = updateRanges[i2];
        gl.bufferSubData(
          bufferType,
          range3.start * array3.BYTES_PER_ELEMENT,
          array3,
          range3.start,
          range3.count
        );
      }
      bufferAttribute3.clearUpdateRanges();
    }
    gl.bindBuffer(bufferType, null);
    bufferData.version = bufferAttribute3.version;
  }
  /**
   * Destroys the GPU buffer of the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  destroyAttribute(attribute3) {
    const backend = this.backend;
    const { gl } = backend;
    if (attribute3.isInterleavedBufferAttribute) {
      backend.delete(attribute3.data);
    }
    const attributeData = backend.get(attribute3);
    gl.deleteBuffer(attributeData.bufferGPU);
    backend.delete(attribute3);
  }
  /**
   * This method performs a readback operation by moving buffer data from
   * a storage buffer attribute from the GPU to the CPU.
   *
   * @async
   * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
   * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
   */
  async getArrayBufferAsync(attribute3) {
    const backend = this.backend;
    const { gl } = backend;
    const bufferAttribute3 = attribute3.isInterleavedBufferAttribute ? attribute3.data : attribute3;
    const { bufferGPU } = backend.get(bufferAttribute3);
    const array3 = attribute3.array;
    const byteLength = array3.byteLength;
    gl.bindBuffer(gl.COPY_READ_BUFFER, bufferGPU);
    const writeBuffer = gl.createBuffer();
    gl.bindBuffer(gl.COPY_WRITE_BUFFER, writeBuffer);
    gl.bufferData(gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ);
    gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength);
    await backend.utils._clientWaitAsync();
    const dstBuffer = new attribute3.array.constructor(array3.length);
    gl.bindBuffer(gl.COPY_WRITE_BUFFER, writeBuffer);
    gl.getBufferSubData(gl.COPY_WRITE_BUFFER, 0, dstBuffer);
    gl.deleteBuffer(writeBuffer);
    gl.bindBuffer(gl.COPY_READ_BUFFER, null);
    gl.bindBuffer(gl.COPY_WRITE_BUFFER, null);
    return dstBuffer.buffer;
  }
  /**
   * Creates a WebGL buffer with the given data.
   *
   * @private
   * @param {WebGL2RenderingContext} gl - The rendering context.
   * @param {GLenum } bufferType - A flag that indicates the buffer type and thus binding point target.
   * @param {TypedArray} array - The array of the buffer attribute.
   * @param {GLenum} usage - The usage.
   * @return {WebGLBuffer} The WebGL buffer.
   */
  _createBuffer(gl, bufferType, array3, usage) {
    const bufferGPU = gl.createBuffer();
    gl.bindBuffer(bufferType, bufferGPU);
    gl.bufferData(bufferType, array3, usage);
    gl.bindBuffer(bufferType, null);
    return bufferGPU;
  }
};
var equationToGL;
var factorToGL;
var WebGLState = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGLBackend} backend - The WebGL 2 backend.
   */
  constructor(backend) {
    this.backend = backend;
    this.gl = this.backend.gl;
    this.enabled = {};
    this.currentFlipSided = null;
    this.currentCullFace = null;
    this.currentProgram = null;
    this.currentBlendingEnabled = false;
    this.currentBlending = null;
    this.currentBlendSrc = null;
    this.currentBlendDst = null;
    this.currentBlendSrcAlpha = null;
    this.currentBlendDstAlpha = null;
    this.currentPremultipledAlpha = null;
    this.currentPolygonOffsetFactor = null;
    this.currentPolygonOffsetUnits = null;
    this.currentColorMask = null;
    this.currentDepthFunc = null;
    this.currentDepthMask = null;
    this.currentStencilFunc = null;
    this.currentStencilRef = null;
    this.currentStencilFuncMask = null;
    this.currentStencilFail = null;
    this.currentStencilZFail = null;
    this.currentStencilZPass = null;
    this.currentStencilMask = null;
    this.currentLineWidth = null;
    this.currentClippingPlanes = 0;
    this.currentVAO = null;
    this.currentIndex = null;
    this.currentBoundFramebuffers = {};
    this.currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    this.maxTextures = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);
    this.currentTextureSlot = null;
    this.currentBoundTextures = {};
    this.currentBoundBufferBases = {};
    this._init();
  }
  /**
   * Inits the state of the utility.
   *
   * @private
   */
  _init() {
    const gl = this.gl;
    equationToGL = {
      [AddEquation]: gl.FUNC_ADD,
      [SubtractEquation]: gl.FUNC_SUBTRACT,
      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
    };
    factorToGL = {
      [ZeroFactor]: gl.ZERO,
      [OneFactor]: gl.ONE,
      [SrcColorFactor]: gl.SRC_COLOR,
      [SrcAlphaFactor]: gl.SRC_ALPHA,
      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
      [DstColorFactor]: gl.DST_COLOR,
      [DstAlphaFactor]: gl.DST_ALPHA,
      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
    };
    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
    const viewportParam = gl.getParameter(gl.VIEWPORT);
    this.currentScissor = new Vector4().fromArray(scissorParam);
    this.currentViewport = new Vector4().fromArray(viewportParam);
    this._tempVec4 = new Vector4();
  }
  /**
   * Enables the given WebGL capability.
   *
   * This method caches the capability state so
   * `gl.enable()` is only called when necessary.
   *
   * @param {GLenum} id - The capability to enable.
   */
  enable(id) {
    const { enabled } = this;
    if (enabled[id] !== true) {
      this.gl.enable(id);
      enabled[id] = true;
    }
  }
  /**
   * Disables the given WebGL capability.
   *
   * This method caches the capability state so
   * `gl.disable()` is only called when necessary.
   *
   * @param {GLenum} id - The capability to enable.
   */
  disable(id) {
    const { enabled } = this;
    if (enabled[id] !== false) {
      this.gl.disable(id);
      enabled[id] = false;
    }
  }
  /**
   * Specifies whether polygons are front- or back-facing
   * by setting the winding orientation.
   *
   * This method caches the state so `gl.frontFace()` is only
   * called when necessary.
   *
   * @param {boolean} flipSided - Whether triangles flipped their sides or not.
   */
  setFlipSided(flipSided) {
    if (this.currentFlipSided !== flipSided) {
      const { gl } = this;
      if (flipSided) {
        gl.frontFace(gl.CW);
      } else {
        gl.frontFace(gl.CCW);
      }
      this.currentFlipSided = flipSided;
    }
  }
  /**
   * Specifies whether or not front- and/or back-facing
   * polygons can be culled.
   *
   * This method caches the state so `gl.cullFace()` is only
   * called when necessary.
   *
   * @param {number} cullFace - Defines which polygons are candidates for culling.
   */
  setCullFace(cullFace) {
    const { gl } = this;
    if (cullFace !== CullFaceNone) {
      this.enable(gl.CULL_FACE);
      if (cullFace !== this.currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl.cullFace(gl.BACK);
        } else if (cullFace === CullFaceFront) {
          gl.cullFace(gl.FRONT);
        } else {
          gl.cullFace(gl.FRONT_AND_BACK);
        }
      }
    } else {
      this.disable(gl.CULL_FACE);
    }
    this.currentCullFace = cullFace;
  }
  /**
   * Specifies the width of line primitives.
   *
   * This method caches the state so `gl.lineWidth()` is only
   * called when necessary.
   *
   * @param {number} width - The line width.
   */
  setLineWidth(width) {
    const { currentLineWidth, gl } = this;
    if (width !== currentLineWidth) {
      gl.lineWidth(width);
      this.currentLineWidth = width;
    }
  }
  /**
   * Defines the blending.
   *
   * This method caches the state so `gl.blendEquation()`, `gl.blendEquationSeparate()`,
   * `gl.blendFunc()` and  `gl.blendFuncSeparate()` are only called when necessary.
   *
   * @param {number} blending - The blending type.
   * @param {number} blendEquation - The blending equation.
   * @param {number} blendSrc - Only relevant for custom blending. The RGB source blending factor.
   * @param {number} blendDst - Only relevant for custom blending. The RGB destination blending factor.
   * @param {number} blendEquationAlpha - Only relevant for custom blending. The blending equation for alpha.
   * @param {number} blendSrcAlpha - Only relevant for custom blending. The alpha source blending factor.
   * @param {number} blendDstAlpha - Only relevant for custom blending. The alpha destination blending factor.
   * @param {boolean} premultipliedAlpha - Whether premultiplied alpha is enabled or not.
   */
  setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
    const { gl } = this;
    if (blending === NoBlending) {
      if (this.currentBlendingEnabled === true) {
        this.disable(gl.BLEND);
        this.currentBlendingEnabled = false;
      }
      return;
    }
    if (this.currentBlendingEnabled === false) {
      this.enable(gl.BLEND);
      this.currentBlendingEnabled = true;
    }
    if (blending !== CustomBlending) {
      if (blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha) {
        if (this.currentBlendEquation !== AddEquation || this.currentBlendEquationAlpha !== AddEquation) {
          gl.blendEquation(gl.FUNC_ADD);
          this.currentBlendEquation = AddEquation;
          this.currentBlendEquationAlpha = AddEquation;
        }
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl.blendFunc(gl.ONE, gl.ONE);
              break;
            case SubtractiveBlending:
              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
              break;
            case MultiplyBlending:
              gl.blendFuncSeparate(gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE);
              break;
            case SubtractiveBlending:
              console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");
              break;
            case MultiplyBlending:
              console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        }
        this.currentBlendSrc = null;
        this.currentBlendDst = null;
        this.currentBlendSrcAlpha = null;
        this.currentBlendDstAlpha = null;
        this.currentBlending = blending;
        this.currentPremultipledAlpha = premultipliedAlpha;
      }
      return;
    }
    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;
    if (blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha) {
      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
      this.currentBlendEquation = blendEquation;
      this.currentBlendEquationAlpha = blendEquationAlpha;
    }
    if (blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha) {
      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
      this.currentBlendSrc = blendSrc;
      this.currentBlendDst = blendDst;
      this.currentBlendSrcAlpha = blendSrcAlpha;
      this.currentBlendDstAlpha = blendDstAlpha;
    }
    this.currentBlending = blending;
    this.currentPremultipledAlpha = false;
  }
  /**
   * Specifies whether colors can be written when rendering
   * into a framebuffer or not.
   *
   * This method caches the state so `gl.colorMask()` is only
   * called when necessary.
   *
   * @param {boolean} colorMask - The color mask.
   */
  setColorMask(colorMask) {
    if (this.currentColorMask !== colorMask) {
      this.gl.colorMask(colorMask, colorMask, colorMask, colorMask);
      this.currentColorMask = colorMask;
    }
  }
  /**
   * Specifies whether the depth test is enabled or not.
   *
   * @param {boolean} depthTest - Whether the depth test is enabled or not.
   */
  setDepthTest(depthTest) {
    const { gl } = this;
    if (depthTest) {
      this.enable(gl.DEPTH_TEST);
    } else {
      this.disable(gl.DEPTH_TEST);
    }
  }
  /**
   * Specifies whether depth values can be written when rendering
   * into a framebuffer or not.
   *
   * This method caches the state so `gl.depthMask()` is only
   * called when necessary.
   *
   * @param {boolean} depthMask - The depth mask.
   */
  setDepthMask(depthMask) {
    if (this.currentDepthMask !== depthMask) {
      this.gl.depthMask(depthMask);
      this.currentDepthMask = depthMask;
    }
  }
  /**
   * Specifies the depth compare function.
   *
   * This method caches the state so `gl.depthFunc()` is only
   * called when necessary.
   *
   * @param {number} depthFunc - The depth compare function.
   */
  setDepthFunc(depthFunc) {
    if (this.currentDepthFunc !== depthFunc) {
      const { gl } = this;
      switch (depthFunc) {
        case NeverDepth:
          gl.depthFunc(gl.NEVER);
          break;
        case AlwaysDepth:
          gl.depthFunc(gl.ALWAYS);
          break;
        case LessDepth:
          gl.depthFunc(gl.LESS);
          break;
        case LessEqualDepth:
          gl.depthFunc(gl.LEQUAL);
          break;
        case EqualDepth:
          gl.depthFunc(gl.EQUAL);
          break;
        case GreaterEqualDepth:
          gl.depthFunc(gl.GEQUAL);
          break;
        case GreaterDepth:
          gl.depthFunc(gl.GREATER);
          break;
        case NotEqualDepth:
          gl.depthFunc(gl.NOTEQUAL);
          break;
        default:
          gl.depthFunc(gl.LEQUAL);
      }
      this.currentDepthFunc = depthFunc;
    }
  }
  /**
   * Specifies the scissor box.
   *
   * @param {number} x - The x-coordinate of the lower left corner of the viewport.
   * @param {number} y - The y-coordinate of the lower left corner of the viewport.
   * @param {number} width - The width of the viewport.
   * @param {number} height - The height of the viewport.
   *
   */
  scissor(x2, y2, width, height) {
    const scissor = this._tempVec4.set(x2, y2, width, height);
    if (this.currentScissor.equals(scissor) === false) {
      const { gl } = this;
      gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
      this.currentScissor.copy(scissor);
    }
  }
  /**
   * Specifies the viewport.
   *
   * @param {number} x - The x-coordinate of the lower left corner of the viewport.
   * @param {number} y - The y-coordinate of the lower left corner of the viewport.
   * @param {number} width - The width of the viewport.
   * @param {number} height - The height of the viewport.
   *
   */
  viewport(x2, y2, width, height) {
    const viewport3 = this._tempVec4.set(x2, y2, width, height);
    if (this.currentViewport.equals(viewport3) === false) {
      const { gl } = this;
      gl.viewport(viewport3.x, viewport3.y, viewport3.z, viewport3.w);
      this.currentViewport.copy(viewport3);
    }
  }
  /**
   * Defines the scissor test.
   *
   * @param {boolean} boolean - Whether the scissor test should be enabled or not.
   */
  setScissorTest(boolean) {
    const gl = this.gl;
    if (boolean) {
      gl.enable(gl.SCISSOR_TEST);
    } else {
      gl.disable(gl.SCISSOR_TEST);
    }
  }
  /**
   * Specifies whether the stencil test is enabled or not.
   *
   * @param {boolean} stencilTest - Whether the stencil test is enabled or not.
   */
  setStencilTest(stencilTest) {
    const { gl } = this;
    if (stencilTest) {
      this.enable(gl.STENCIL_TEST);
    } else {
      this.disable(gl.STENCIL_TEST);
    }
  }
  /**
   * Specifies whether stencil values can be written when rendering
   * into a framebuffer or not.
   *
   * This method caches the state so `gl.stencilMask()` is only
   * called when necessary.
   *
   * @param {boolean} stencilMask - The stencil mask.
   */
  setStencilMask(stencilMask) {
    if (this.currentStencilMask !== stencilMask) {
      this.gl.stencilMask(stencilMask);
      this.currentStencilMask = stencilMask;
    }
  }
  /**
   * Specifies whether the stencil test functions.
   *
   * This method caches the state so `gl.stencilFunc()` is only
   * called when necessary.
   *
   * @param {number} stencilFunc - The stencil compare function.
   * @param {number} stencilRef - The reference value for the stencil test.
   * @param {number} stencilMask - A bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done.
   */
  setStencilFunc(stencilFunc, stencilRef, stencilMask) {
    if (this.currentStencilFunc !== stencilFunc || this.currentStencilRef !== stencilRef || this.currentStencilFuncMask !== stencilMask) {
      this.gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
      this.currentStencilFunc = stencilFunc;
      this.currentStencilRef = stencilRef;
      this.currentStencilFuncMask = stencilMask;
    }
  }
  /**
   * Specifies whether the stencil test operation.
   *
   * This method caches the state so `gl.stencilOp()` is only
   * called when necessary.
   *
   * @param {number} stencilFail - The function to use when the stencil test fails.
   * @param {number} stencilZFail - The function to use when the stencil test passes, but the depth test fail.
   * @param {number} stencilZPass - The function to use when both the stencil test and the depth test pass,
   * or when the stencil test passes and there is no depth buffer or depth testing is disabled.
   */
  setStencilOp(stencilFail, stencilZFail, stencilZPass) {
    if (this.currentStencilFail !== stencilFail || this.currentStencilZFail !== stencilZFail || this.currentStencilZPass !== stencilZPass) {
      this.gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
      this.currentStencilFail = stencilFail;
      this.currentStencilZFail = stencilZFail;
      this.currentStencilZPass = stencilZPass;
    }
  }
  /**
   * Configures the WebGL state for the given material.
   *
   * @param {Material} material - The material to configure the state for.
   * @param {number} frontFaceCW - Whether the front faces are counter-clockwise or not.
   * @param {number} hardwareClippingPlanes - The number of hardware clipping planes.
   */
  setMaterial(material, frontFaceCW, hardwareClippingPlanes) {
    const { gl } = this;
    material.side === DoubleSide ? this.disable(gl.CULL_FACE) : this.enable(gl.CULL_FACE);
    let flipSided = material.side === BackSide;
    if (frontFaceCW)
      flipSided = !flipSided;
    this.setFlipSided(flipSided);
    material.blending === NormalBlending && material.transparent === false ? this.setBlending(NoBlending) : this.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
    this.setDepthFunc(material.depthFunc);
    this.setDepthTest(material.depthTest);
    this.setDepthMask(material.depthWrite);
    this.setColorMask(material.colorWrite);
    const stencilWrite = material.stencilWrite;
    this.setStencilTest(stencilWrite);
    if (stencilWrite) {
      this.setStencilMask(material.stencilWriteMask);
      this.setStencilFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
      this.setStencilOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
    }
    this.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
    material.alphaToCoverage === true && this.backend.renderer.samples > 1 ? this.enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : this.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    if (hardwareClippingPlanes > 0) {
      if (this.currentClippingPlanes !== hardwareClippingPlanes) {
        const CLIP_DISTANCE0_WEBGL = 12288;
        for (let i2 = 0; i2 < 8; i2++) {
          if (i2 < hardwareClippingPlanes) {
            this.enable(CLIP_DISTANCE0_WEBGL + i2);
          } else {
            this.disable(CLIP_DISTANCE0_WEBGL + i2);
          }
        }
      }
    }
  }
  /**
   * Specifies the polygon offset.
   *
   * This method caches the state so `gl.polygonOffset()` is only
   * called when necessary.
   *
   * @param {boolean} polygonOffset - Whether polygon offset is enabled or not.
   * @param {number} factor - The scale factor for the variable depth offset for each polygon.
   * @param {number} units - The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset.
   */
  setPolygonOffset(polygonOffset, factor, units) {
    const { gl } = this;
    if (polygonOffset) {
      this.enable(gl.POLYGON_OFFSET_FILL);
      if (this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        this.currentPolygonOffsetFactor = factor;
        this.currentPolygonOffsetUnits = units;
      }
    } else {
      this.disable(gl.POLYGON_OFFSET_FILL);
    }
  }
  /**
   * Defines the usage of the given WebGL program.
   *
   * This method caches the state so `gl.useProgram()` is only
   * called when necessary.
   *
   * @param {WebGLProgram} program - The WebGL program to use.
   * @return {boolean} Whether a program change has been executed or not.
   */
  useProgram(program) {
    if (this.currentProgram !== program) {
      this.gl.useProgram(program);
      this.currentProgram = program;
      return true;
    }
    return false;
  }
  /**
   * Sets the vertex state by binding the given VAO and element buffer.
   *
   * @param {WebGLVertexArrayObject} vao - The VAO.
   * @param {?WebGLBuffer} indexBuffer - The index buffer.
   * @return {boolean} Whether a vertex state has been changed or not.
   */
  setVertexState(vao, indexBuffer = null) {
    const gl = this.gl;
    if (this.currentVAO !== vao || this.currentIndex !== indexBuffer) {
      gl.bindVertexArray(vao);
      if (indexBuffer !== null) {
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
      }
      this.currentVAO = vao;
      this.currentIndex = indexBuffer;
      return true;
    }
    return false;
  }
  /**
   * Resets the vertex array state by resetting the VAO and element buffer.
   */
  resetVertexState() {
    const gl = this.gl;
    gl.bindVertexArray(null);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    this.currentVAO = null;
    this.currentIndex = null;
  }
  // framebuffer
  /**
   * Binds the given framebuffer.
   *
   * This method caches the state so `gl.bindFramebuffer()` is only
   * called when necessary.
   *
   * @param {number} target - The binding point (target).
   * @param {WebGLFramebuffer} framebuffer - The WebGL framebuffer to bind.
   * @return {boolean} Whether a bind has been executed or not.
   */
  bindFramebuffer(target, framebuffer) {
    const { gl, currentBoundFramebuffers } = this;
    if (currentBoundFramebuffers[target] !== framebuffer) {
      gl.bindFramebuffer(target, framebuffer);
      currentBoundFramebuffers[target] = framebuffer;
      if (target === gl.DRAW_FRAMEBUFFER) {
        currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
      }
      if (target === gl.FRAMEBUFFER) {
        currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
      }
      return true;
    }
    return false;
  }
  /**
   * Defines draw buffers to which fragment colors are written into.
   * Configures the MRT setup of custom framebuffers.
   *
   * This method caches the state so `gl.drawBuffers()` is only
   * called when necessary.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {WebGLFramebuffer} framebuffer - The WebGL framebuffer.
   */
  drawBuffers(renderContext, framebuffer) {
    const { gl } = this;
    let drawBuffers = [];
    let needsUpdate = false;
    if (renderContext.textures !== null) {
      drawBuffers = this.currentDrawbuffers.get(framebuffer);
      if (drawBuffers === void 0) {
        drawBuffers = [];
        this.currentDrawbuffers.set(framebuffer, drawBuffers);
      }
      const textures = renderContext.textures;
      if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
        for (let i2 = 0, il = textures.length; i2 < il; i2++) {
          drawBuffers[i2] = gl.COLOR_ATTACHMENT0 + i2;
        }
        drawBuffers.length = textures.length;
        needsUpdate = true;
      }
    } else {
      if (drawBuffers[0] !== gl.BACK) {
        drawBuffers[0] = gl.BACK;
        needsUpdate = true;
      }
    }
    if (needsUpdate) {
      gl.drawBuffers(drawBuffers);
    }
  }
  // texture
  /**
   * Makes the given texture unit active.
   *
   * This method caches the state so `gl.activeTexture()` is only
   * called when necessary.
   *
   * @param {number} webglSlot - The texture unit to make active.
   */
  activeTexture(webglSlot) {
    const { gl, currentTextureSlot, maxTextures } = this;
    if (webglSlot === void 0)
      webglSlot = gl.TEXTURE0 + maxTextures - 1;
    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      this.currentTextureSlot = webglSlot;
    }
  }
  /**
   * Binds the given WebGL texture to a target.
   *
   * This method caches the state so `gl.bindTexture()` is only
   * called when necessary.
   *
   * @param {number} webglType - The binding point (target).
   * @param {WebGLTexture} webglTexture - The WebGL texture to bind.
   * @param {number} webglSlot - The texture.
   */
  bindTexture(webglType, webglTexture, webglSlot) {
    const { gl, currentTextureSlot, currentBoundTextures, maxTextures } = this;
    if (webglSlot === void 0) {
      if (currentTextureSlot === null) {
        webglSlot = gl.TEXTURE0 + maxTextures - 1;
      } else {
        webglSlot = currentTextureSlot;
      }
    }
    let boundTexture = currentBoundTextures[webglSlot];
    if (boundTexture === void 0) {
      boundTexture = { type: void 0, texture: void 0 };
      currentBoundTextures[webglSlot] = boundTexture;
    }
    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        this.currentTextureSlot = webglSlot;
      }
      gl.bindTexture(webglType, webglTexture);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }
  /**
   * Binds a given WebGL buffer to a given binding point (target) at a given index.
   *
   * This method caches the state so `gl.bindBufferBase()` is only
   * called when necessary.
   *
   * @param {number} target - The target for the bind operation.
   * @param {number} index - The index of the target.
   * @param {WebGLBuffer} buffer - The WebGL buffer.
   * @return {boolean} Whether a bind has been executed or not.
   */
  bindBufferBase(target, index6, buffer3) {
    const { gl } = this;
    const key = `${target}-${index6}`;
    if (this.currentBoundBufferBases[key] !== buffer3) {
      gl.bindBufferBase(target, index6, buffer3);
      this.currentBoundBufferBases[key] = buffer3;
      return true;
    }
    return false;
  }
  /**
   * Unbinds the current bound texture.
   *
   * This method caches the state so `gl.bindTexture()` is only
   * called when necessary.
   */
  unbindTexture() {
    const { gl, currentTextureSlot, currentBoundTextures } = this;
    const boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture !== void 0 && boundTexture.type !== void 0) {
      gl.bindTexture(boundTexture.type, null);
      boundTexture.type = void 0;
      boundTexture.texture = void 0;
    }
  }
};
var WebGLUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGLBackend} backend - The WebGL 2 backend.
   */
  constructor(backend) {
    this.backend = backend;
    this.gl = this.backend.gl;
    this.extensions = backend.extensions;
  }
  /**
   * Converts the given three.js constant into a WebGL constant.
   * The method currently supports the conversion of texture formats
   * and types.
   *
   * @param {number} p - The three.js constant.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   * @return {?number} The corresponding WebGL constant.
   */
  convert(p2, colorSpace = NoColorSpace) {
    const { gl, extensions } = this;
    let extension;
    const transfer = ColorManagement.getTransfer(colorSpace);
    if (p2 === UnsignedByteType)
      return gl.UNSIGNED_BYTE;
    if (p2 === UnsignedShort4444Type)
      return gl.UNSIGNED_SHORT_4_4_4_4;
    if (p2 === UnsignedShort5551Type)
      return gl.UNSIGNED_SHORT_5_5_5_1;
    if (p2 === UnsignedInt5999Type)
      return gl.UNSIGNED_INT_5_9_9_9_REV;
    if (p2 === UnsignedInt101111Type)
      return gl.UNSIGNED_INT_10F_11F_11F_REV;
    if (p2 === ByteType)
      return gl.BYTE;
    if (p2 === ShortType)
      return gl.SHORT;
    if (p2 === UnsignedShortType)
      return gl.UNSIGNED_SHORT;
    if (p2 === IntType)
      return gl.INT;
    if (p2 === UnsignedIntType)
      return gl.UNSIGNED_INT;
    if (p2 === FloatType)
      return gl.FLOAT;
    if (p2 === HalfFloatType) {
      return gl.HALF_FLOAT;
    }
    if (p2 === AlphaFormat)
      return gl.ALPHA;
    if (p2 === RGBFormat)
      return gl.RGB;
    if (p2 === RGBAFormat)
      return gl.RGBA;
    if (p2 === DepthFormat)
      return gl.DEPTH_COMPONENT;
    if (p2 === DepthStencilFormat)
      return gl.DEPTH_STENCIL;
    if (p2 === RedFormat)
      return gl.RED;
    if (p2 === RedIntegerFormat)
      return gl.RED_INTEGER;
    if (p2 === RGFormat)
      return gl.RG;
    if (p2 === RGIntegerFormat)
      return gl.RG_INTEGER;
    if (p2 === RGBAIntegerFormat)
      return gl.RGBA_INTEGER;
    if (p2 === RGB_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT3_Format || p2 === RGBA_S3TC_DXT5_Format) {
      if (transfer === SRGBTransfer) {
        extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format)
            return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format)
            return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format)
            return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format)
            return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      } else {
        extension = extensions.get("WEBGL_compressed_texture_s3tc");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format)
            return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format)
            return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
    }
    if (p2 === RGB_PVRTC_4BPPV1_Format || p2 === RGB_PVRTC_2BPPV1_Format || p2 === RGBA_PVRTC_4BPPV1_Format || p2 === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_pvrtc");
      if (extension !== null) {
        if (p2 === RGB_PVRTC_4BPPV1_Format)
          return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p2 === RGB_PVRTC_2BPPV1_Format)
          return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p2 === RGBA_PVRTC_4BPPV1_Format)
          return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p2 === RGBA_PVRTC_2BPPV1_Format)
          return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (p2 === RGB_ETC1_Format || p2 === RGB_ETC2_Format || p2 === RGBA_ETC2_EAC_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc");
      if (extension !== null) {
        if (p2 === RGB_ETC1_Format || p2 === RGB_ETC2_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
        if (p2 === RGBA_ETC2_EAC_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_ASTC_4x4_Format || p2 === RGBA_ASTC_5x4_Format || p2 === RGBA_ASTC_5x5_Format || p2 === RGBA_ASTC_6x5_Format || p2 === RGBA_ASTC_6x6_Format || p2 === RGBA_ASTC_8x5_Format || p2 === RGBA_ASTC_8x6_Format || p2 === RGBA_ASTC_8x8_Format || p2 === RGBA_ASTC_10x5_Format || p2 === RGBA_ASTC_10x6_Format || p2 === RGBA_ASTC_10x8_Format || p2 === RGBA_ASTC_10x10_Format || p2 === RGBA_ASTC_12x10_Format || p2 === RGBA_ASTC_12x12_Format) {
      extension = extensions.get("WEBGL_compressed_texture_astc");
      if (extension !== null) {
        if (p2 === RGBA_ASTC_4x4_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (p2 === RGBA_ASTC_5x4_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (p2 === RGBA_ASTC_5x5_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (p2 === RGBA_ASTC_6x5_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (p2 === RGBA_ASTC_6x6_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (p2 === RGBA_ASTC_8x5_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (p2 === RGBA_ASTC_8x6_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (p2 === RGBA_ASTC_8x8_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (p2 === RGBA_ASTC_10x5_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (p2 === RGBA_ASTC_10x6_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (p2 === RGBA_ASTC_10x8_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (p2 === RGBA_ASTC_10x10_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (p2 === RGBA_ASTC_12x10_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (p2 === RGBA_ASTC_12x12_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_BPTC_Format) {
      extension = extensions.get("EXT_texture_compression_bptc");
      if (extension !== null) {
        if (p2 === RGBA_BPTC_Format)
          return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
      } else {
        return null;
      }
    }
    if (p2 === RED_RGTC1_Format || p2 === SIGNED_RED_RGTC1_Format || p2 === RED_GREEN_RGTC2_Format || p2 === SIGNED_RED_GREEN_RGTC2_Format) {
      extension = extensions.get("EXT_texture_compression_rgtc");
      if (extension !== null) {
        if (p2 === RED_RGTC1_Format)
          return extension.COMPRESSED_RED_RGTC1_EXT;
        if (p2 === SIGNED_RED_RGTC1_Format)
          return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (p2 === RED_GREEN_RGTC2_Format)
          return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (p2 === SIGNED_RED_GREEN_RGTC2_Format)
          return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else {
        return null;
      }
    }
    if (p2 === UnsignedInt248Type) {
      return gl.UNSIGNED_INT_24_8;
    }
    return gl[p2] !== void 0 ? gl[p2] : null;
  }
  /**
   * This method can be used to synchronize the CPU with the GPU by waiting until
   * ongoing GPU commands have been completed.
   *
   * @private
   * @return {Promise} A promise that resolves when all ongoing GPU commands have been completed.
   */
  _clientWaitAsync() {
    const { gl } = this;
    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    gl.flush();
    return new Promise((resolve, reject) => {
      function test() {
        const res = gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0);
        if (res === gl.WAIT_FAILED) {
          gl.deleteSync(sync);
          reject();
          return;
        }
        if (res === gl.TIMEOUT_EXPIRED) {
          requestAnimationFrame(test);
          return;
        }
        gl.deleteSync(sync);
        resolve();
      }
      test();
    });
  }
};
var initialized = false;
var wrappingToGL;
var filterToGL;
var compareToGL;
var WebGLTextureUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGLBackend} backend - The WebGL 2 backend.
   */
  constructor(backend) {
    this.backend = backend;
    this.gl = backend.gl;
    this.extensions = backend.extensions;
    this.defaultTextures = {};
    if (initialized === false) {
      this._init();
      initialized = true;
    }
  }
  /**
   * Inits the state of the utility.
   *
   * @private
   */
  _init() {
    const gl = this.gl;
    wrappingToGL = {
      [RepeatWrapping]: gl.REPEAT,
      [ClampToEdgeWrapping]: gl.CLAMP_TO_EDGE,
      [MirroredRepeatWrapping]: gl.MIRRORED_REPEAT
    };
    filterToGL = {
      [NearestFilter]: gl.NEAREST,
      [NearestMipmapNearestFilter]: gl.NEAREST_MIPMAP_NEAREST,
      [NearestMipmapLinearFilter]: gl.NEAREST_MIPMAP_LINEAR,
      [LinearFilter]: gl.LINEAR,
      [LinearMipmapNearestFilter]: gl.LINEAR_MIPMAP_NEAREST,
      [LinearMipmapLinearFilter]: gl.LINEAR_MIPMAP_LINEAR
    };
    compareToGL = {
      [NeverCompare]: gl.NEVER,
      [AlwaysCompare]: gl.ALWAYS,
      [LessCompare]: gl.LESS,
      [LessEqualCompare]: gl.LEQUAL,
      [EqualCompare]: gl.EQUAL,
      [GreaterEqualCompare]: gl.GEQUAL,
      [GreaterCompare]: gl.GREATER,
      [NotEqualCompare]: gl.NOTEQUAL
    };
  }
  /**
   * Returns the native texture type for the given texture.
   *
   * @param {Texture} texture - The texture.
   * @return {GLenum} The native texture type.
   */
  getGLTextureType(texture3) {
    const { gl } = this;
    let glTextureType;
    if (texture3.isCubeTexture === true) {
      glTextureType = gl.TEXTURE_CUBE_MAP;
    } else if (texture3.isArrayTexture === true || texture3.isDataArrayTexture === true || texture3.isCompressedArrayTexture === true) {
      glTextureType = gl.TEXTURE_2D_ARRAY;
    } else if (texture3.isData3DTexture === true) {
      glTextureType = gl.TEXTURE_3D;
    } else {
      glTextureType = gl.TEXTURE_2D;
    }
    return glTextureType;
  }
  /**
   * Returns the native texture type for the given texture.
   *
   * @param {?string} internalFormatName - The internal format name. When `null`, the internal format is derived from the subsequent parameters.
   * @param {GLenum} glFormat - The WebGL format.
   * @param {GLenum} glType - The WebGL type.
   * @param {string} colorSpace - The texture's color space.
   * @param {boolean} [forceLinearTransfer=false] - Whether to force a linear transfer or not.
   * @return {GLenum} The internal format.
   */
  getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
    const { gl, extensions } = this;
    if (internalFormatName !== null) {
      if (gl[internalFormatName] !== void 0)
        return gl[internalFormatName];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
    }
    let internalFormat = glFormat;
    if (glFormat === gl.RED) {
      if (glType === gl.FLOAT)
        internalFormat = gl.R32F;
      if (glType === gl.HALF_FLOAT)
        internalFormat = gl.R16F;
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.R8;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.R16;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.R32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.R8I;
      if (glType === gl.SHORT)
        internalFormat = gl.R16I;
      if (glType === gl.INT)
        internalFormat = gl.R32I;
    }
    if (glFormat === gl.RED_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.R8UI;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.R16UI;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.R32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.R8I;
      if (glType === gl.SHORT)
        internalFormat = gl.R16I;
      if (glType === gl.INT)
        internalFormat = gl.R32I;
    }
    if (glFormat === gl.RG) {
      if (glType === gl.FLOAT)
        internalFormat = gl.RG32F;
      if (glType === gl.HALF_FLOAT)
        internalFormat = gl.RG16F;
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.RG8;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.RG16;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.RG32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.RG8I;
      if (glType === gl.SHORT)
        internalFormat = gl.RG16I;
      if (glType === gl.INT)
        internalFormat = gl.RG32I;
    }
    if (glFormat === gl.RG_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.RG8UI;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.RG16UI;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.RG32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.RG8I;
      if (glType === gl.SHORT)
        internalFormat = gl.RG16I;
      if (glType === gl.INT)
        internalFormat = gl.RG32I;
    }
    if (glFormat === gl.RGB) {
      const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
      if (glType === gl.FLOAT)
        internalFormat = gl.RGB32F;
      if (glType === gl.HALF_FLOAT)
        internalFormat = gl.RGB16F;
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.RGB8;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.RGB16;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.RGB32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.RGB8I;
      if (glType === gl.SHORT)
        internalFormat = gl.RGB16I;
      if (glType === gl.INT)
        internalFormat = gl.RGB32I;
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = transfer === SRGBTransfer ? gl.SRGB8 : gl.RGB8;
      if (glType === gl.UNSIGNED_SHORT_5_6_5)
        internalFormat = gl.RGB565;
      if (glType === gl.UNSIGNED_SHORT_5_5_5_1)
        internalFormat = gl.RGB5_A1;
      if (glType === gl.UNSIGNED_SHORT_4_4_4_4)
        internalFormat = gl.RGB4;
      if (glType === gl.UNSIGNED_INT_5_9_9_9_REV)
        internalFormat = gl.RGB9_E5;
      if (glType === gl.UNSIGNED_INT_10F_11F_11F_REV)
        internalFormat = gl.R11F_G11F_B10F;
    }
    if (glFormat === gl.RGB_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.RGB8UI;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.RGB16UI;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.RGB32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.RGB8I;
      if (glType === gl.SHORT)
        internalFormat = gl.RGB16I;
      if (glType === gl.INT)
        internalFormat = gl.RGB32I;
    }
    if (glFormat === gl.RGBA) {
      const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
      if (glType === gl.FLOAT)
        internalFormat = gl.RGBA32F;
      if (glType === gl.HALF_FLOAT)
        internalFormat = gl.RGBA16F;
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.RGBA8;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.RGBA16;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.RGBA32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.RGBA8I;
      if (glType === gl.SHORT)
        internalFormat = gl.RGBA16I;
      if (glType === gl.INT)
        internalFormat = gl.RGBA32I;
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = transfer === SRGBTransfer ? gl.SRGB8_ALPHA8 : gl.RGBA8;
      if (glType === gl.UNSIGNED_SHORT_4_4_4_4)
        internalFormat = gl.RGBA4;
      if (glType === gl.UNSIGNED_SHORT_5_5_5_1)
        internalFormat = gl.RGB5_A1;
    }
    if (glFormat === gl.RGBA_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE)
        internalFormat = gl.RGBA8UI;
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.RGBA16UI;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.RGBA32UI;
      if (glType === gl.BYTE)
        internalFormat = gl.RGBA8I;
      if (glType === gl.SHORT)
        internalFormat = gl.RGBA16I;
      if (glType === gl.INT)
        internalFormat = gl.RGBA32I;
    }
    if (glFormat === gl.DEPTH_COMPONENT) {
      if (glType === gl.UNSIGNED_SHORT)
        internalFormat = gl.DEPTH_COMPONENT16;
      if (glType === gl.UNSIGNED_INT)
        internalFormat = gl.DEPTH_COMPONENT24;
      if (glType === gl.FLOAT)
        internalFormat = gl.DEPTH_COMPONENT32F;
    }
    if (glFormat === gl.DEPTH_STENCIL) {
      if (glType === gl.UNSIGNED_INT_24_8)
        internalFormat = gl.DEPTH24_STENCIL8;
    }
    if (internalFormat === gl.R16F || internalFormat === gl.R32F || internalFormat === gl.RG16F || internalFormat === gl.RG32F || internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F) {
      extensions.get("EXT_color_buffer_float");
    }
    return internalFormat;
  }
  /**
   * Sets the texture parameters for the given texture.
   *
   * @param {GLenum} textureType - The texture type.
   * @param {Texture} texture - The texture.
   */
  setTextureParameters(textureType, texture3) {
    const { gl, extensions, backend } = this;
    const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
    const texturePrimaries = texture3.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture3.colorSpace);
    const unpackConversion = texture3.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? gl.NONE : gl.BROWSER_DEFAULT_WEBGL;
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture3.flipY);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture3.premultiplyAlpha);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture3.unpackAlignment);
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
    gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, wrappingToGL[texture3.wrapS]);
    gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, wrappingToGL[texture3.wrapT]);
    if (textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY) {
      if (!texture3.isArrayTexture) {
        gl.texParameteri(textureType, gl.TEXTURE_WRAP_R, wrappingToGL[texture3.wrapR]);
      }
    }
    gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, filterToGL[texture3.magFilter]);
    const hasMipmaps = texture3.mipmaps !== void 0 && texture3.mipmaps.length > 0;
    const minFilter = texture3.minFilter === LinearFilter && hasMipmaps ? LinearMipmapLinearFilter : texture3.minFilter;
    gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, filterToGL[minFilter]);
    if (texture3.compareFunction) {
      gl.texParameteri(textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
      gl.texParameteri(textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[texture3.compareFunction]);
    }
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      if (texture3.magFilter === NearestFilter)
        return;
      if (texture3.minFilter !== NearestMipmapLinearFilter && texture3.minFilter !== LinearMipmapLinearFilter)
        return;
      if (texture3.type === FloatType && extensions.has("OES_texture_float_linear") === false)
        return;
      if (texture3.anisotropy > 1) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture3.anisotropy, backend.getMaxAnisotropy()));
      }
    }
  }
  /**
   * Creates a default texture for the given texture that can be used
   * as a placeholder until the actual texture is ready for usage.
   *
   * @param {Texture} texture - The texture to create a default texture for.
   */
  createDefaultTexture(texture3) {
    const { gl, backend, defaultTextures } = this;
    const glTextureType = this.getGLTextureType(texture3);
    let textureGPU = defaultTextures[glTextureType];
    if (textureGPU === void 0) {
      textureGPU = gl.createTexture();
      backend.state.bindTexture(glTextureType, textureGPU);
      gl.texParameteri(glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      defaultTextures[glTextureType] = textureGPU;
    }
    backend.set(texture3, {
      textureGPU,
      glTextureType,
      isDefault: true
    });
  }
  /**
   * Defines a texture on the GPU for the given texture object.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   * @return {undefined}
   */
  createTexture(texture3, options) {
    const { gl, backend } = this;
    const { levels, width, height, depth: depth3 } = options;
    const glFormat = backend.utils.convert(texture3.format, texture3.colorSpace);
    const glType = backend.utils.convert(texture3.type);
    const glInternalFormat = this.getInternalFormat(texture3.internalFormat, glFormat, glType, texture3.colorSpace, texture3.isVideoTexture);
    const textureGPU = gl.createTexture();
    const glTextureType = this.getGLTextureType(texture3);
    backend.state.bindTexture(glTextureType, textureGPU);
    this.setTextureParameters(glTextureType, texture3);
    if (texture3.isArrayTexture || texture3.isDataArrayTexture || texture3.isCompressedArrayTexture) {
      gl.texStorage3D(gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth3);
    } else if (texture3.isData3DTexture) {
      gl.texStorage3D(gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth3);
    } else if (!texture3.isVideoTexture) {
      gl.texStorage2D(glTextureType, levels, glInternalFormat, width, height);
    }
    backend.set(texture3, {
      textureGPU,
      glTextureType,
      glFormat,
      glType,
      glInternalFormat
    });
  }
  /**
   * Uploads texture buffer data to the GPU memory.
   *
   * @param {WebGLBuffer} buffer - The buffer data.
   * @param {Texture} texture - The texture,
   */
  copyBufferToTexture(buffer3, texture3) {
    const { gl, backend } = this;
    const { textureGPU, glTextureType, glFormat, glType } = backend.get(texture3);
    const { width, height } = texture3.source.data;
    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buffer3);
    backend.state.bindTexture(glTextureType, textureGPU);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
    gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, 0);
    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);
    backend.state.unbindTexture();
  }
  /**
   * Uploads the updated texture data to the GPU.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  updateTexture(texture3, options) {
    const { gl } = this;
    const { width, height } = options;
    const { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.backend.get(texture3);
    if (texture3.isRenderTargetTexture || textureGPU === void 0)
      return;
    this.backend.state.bindTexture(glTextureType, textureGPU);
    this.setTextureParameters(glTextureType, texture3);
    if (texture3.isCompressedTexture) {
      const mipmaps = texture3.mipmaps;
      const image = options.image;
      for (let i2 = 0; i2 < mipmaps.length; i2++) {
        const mipmap = mipmaps[i2];
        if (texture3.isCompressedArrayTexture) {
          if (texture3.format !== gl.RGBA) {
            if (glFormat !== null) {
              gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data);
            } else {
              console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            }
          } else {
            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
          }
        } else {
          if (glFormat !== null) {
            gl.compressedTexSubImage2D(gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
          } else {
            console.warn("Unsupported compressed texture format");
          }
        }
      }
    } else if (texture3.isCubeTexture) {
      const images = options.images;
      const mipmaps = texture3.mipmaps;
      for (let i2 = 0; i2 < 6; i2++) {
        const image = getImage(images[i2]);
        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, 0, 0, width, height, glFormat, glType, image);
        for (let j2 = 0; j2 < mipmaps.length; j2++) {
          const mipmap = mipmaps[j2];
          const image2 = getImage(mipmap.images[i2]);
          gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2 + 1, 0, 0, image2.width, image2.height, glFormat, glType, image2);
        }
      }
    } else if (texture3.isDataArrayTexture || texture3.isArrayTexture) {
      const image = options.image;
      if (texture3.layerUpdates.size > 0) {
        const layerByteLength = getByteLength(image.width, image.height, texture3.format, texture3.type);
        for (const layerIndex of texture3.layerUpdates) {
          const layerData = image.data.subarray(
            layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
            (layerIndex + 1) * layerByteLength / image.data.BYTES_PER_ELEMENT
          );
          gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData);
        }
        texture3.clearLayerUpdates();
      } else {
        gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
      }
    } else if (texture3.isData3DTexture) {
      const image = options.image;
      gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
    } else if (texture3.isVideoTexture) {
      texture3.update();
      gl.texImage2D(glTextureType, 0, glInternalFormat, glFormat, glType, options.image);
    } else {
      const mipmaps = texture3.mipmaps;
      if (mipmaps.length > 0) {
        for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
          const mipmap = mipmaps[i2];
          const image = getImage(mipmap);
          gl.texSubImage2D(glTextureType, i2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, image);
        }
      } else {
        const image = getImage(options.image);
        gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, image);
      }
    }
  }
  /**
   * Generates mipmaps for the given texture.
   *
   * @param {Texture} texture - The texture.
   */
  generateMipmaps(texture3) {
    const { gl, backend } = this;
    const { textureGPU, glTextureType } = backend.get(texture3);
    backend.state.bindTexture(glTextureType, textureGPU);
    gl.generateMipmap(glTextureType);
  }
  /**
   * Deallocates the render buffers of the given render target.
   *
   * @param {RenderTarget} renderTarget - The render target.
   */
  deallocateRenderBuffers(renderTarget) {
    const { gl, backend } = this;
    if (renderTarget) {
      const renderContextData = backend.get(renderTarget);
      renderContextData.renderBufferStorageSetup = void 0;
      if (renderContextData.framebuffers) {
        for (const cacheKey in renderContextData.framebuffers) {
          gl.deleteFramebuffer(renderContextData.framebuffers[cacheKey]);
        }
        delete renderContextData.framebuffers;
      }
      if (renderContextData.depthRenderbuffer) {
        gl.deleteRenderbuffer(renderContextData.depthRenderbuffer);
        delete renderContextData.depthRenderbuffer;
      }
      if (renderContextData.stencilRenderbuffer) {
        gl.deleteRenderbuffer(renderContextData.stencilRenderbuffer);
        delete renderContextData.stencilRenderbuffer;
      }
      if (renderContextData.msaaFrameBuffer) {
        gl.deleteFramebuffer(renderContextData.msaaFrameBuffer);
        delete renderContextData.msaaFrameBuffer;
      }
      if (renderContextData.msaaRenderbuffers) {
        for (let i2 = 0; i2 < renderContextData.msaaRenderbuffers.length; i2++) {
          gl.deleteRenderbuffer(renderContextData.msaaRenderbuffers[i2]);
        }
        delete renderContextData.msaaRenderbuffers;
      }
    }
  }
  /**
   * Destroys the GPU data for the given texture object.
   *
   * @param {Texture} texture - The texture.
   */
  destroyTexture(texture3) {
    const { gl, backend } = this;
    const { textureGPU, renderTarget } = backend.get(texture3);
    this.deallocateRenderBuffers(renderTarget);
    gl.deleteTexture(textureGPU);
    backend.delete(texture3);
  }
  /**
   * Copies data of the given source texture to the given destination texture.
   *
   * @param {Texture} srcTexture - The source texture.
   * @param {Texture} dstTexture - The destination texture.
   * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
   * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
   * @param {number} [srcLevel=0] - The source mip level to copy from.
   * @param {number} [dstLevel=0] - The destination mip level to copy to.
   */
  copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
    const { gl, backend } = this;
    const { state } = this.backend;
    const { textureGPU: dstTextureGPU, glTextureType, glType, glFormat } = backend.get(dstTexture);
    state.bindTexture(glTextureType, dstTextureGPU);
    let width, height, depth3, minX, minY, minZ;
    let dstX, dstY, dstZ;
    const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[dstLevel] : srcTexture.image;
    if (srcRegion !== null) {
      width = srcRegion.max.x - srcRegion.min.x;
      height = srcRegion.max.y - srcRegion.min.y;
      depth3 = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;
      minX = srcRegion.min.x;
      minY = srcRegion.min.y;
      minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;
    } else {
      const levelScale = Math.pow(2, -srcLevel);
      width = Math.floor(image.width * levelScale);
      height = Math.floor(image.height * levelScale);
      if (srcTexture.isDataArrayTexture || srcTexture.isArrayTexture) {
        depth3 = image.depth;
      } else if (srcTexture.isData3DTexture) {
        depth3 = Math.floor(image.depth * levelScale);
      } else {
        depth3 = 1;
      }
      minX = 0;
      minY = 0;
      minZ = 0;
    }
    if (dstPosition !== null) {
      dstX = dstPosition.x;
      dstY = dstPosition.y;
      dstZ = dstPosition.z;
    } else {
      dstX = 0;
      dstY = 0;
      dstZ = 0;
    }
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
    const currentUnpackRowLen = gl.getParameter(gl.UNPACK_ROW_LENGTH);
    const currentUnpackImageHeight = gl.getParameter(gl.UNPACK_IMAGE_HEIGHT);
    const currentUnpackSkipPixels = gl.getParameter(gl.UNPACK_SKIP_PIXELS);
    const currentUnpackSkipRows = gl.getParameter(gl.UNPACK_SKIP_ROWS);
    const currentUnpackSkipImages = gl.getParameter(gl.UNPACK_SKIP_IMAGES);
    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, image.width);
    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, image.height);
    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, minX);
    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, minY);
    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, minZ);
    const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture || dstTexture.isArrayTexture;
    if (srcTexture.isRenderTargetTexture || srcTexture.isDepthTexture) {
      const srcTextureData = backend.get(srcTexture);
      const dstTextureData = backend.get(dstTexture);
      const srcRenderContextData = backend.get(srcTextureData.renderTarget);
      const dstRenderContextData = backend.get(dstTextureData.renderTarget);
      const srcFramebuffer = srcRenderContextData.framebuffers[srcTextureData.cacheKey];
      const dstFramebuffer = dstRenderContextData.framebuffers[dstTextureData.cacheKey];
      state.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFramebuffer);
      state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dstFramebuffer);
      let mask = gl.COLOR_BUFFER_BIT;
      if (srcTexture.isDepthTexture)
        mask = gl.DEPTH_BUFFER_BIT;
      gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, mask, gl.NEAREST);
      state.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
      state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
    } else {
      if (isDst3D) {
        if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
          gl.texSubImage3D(glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth3, glFormat, glType, image.data);
        } else if (dstTexture.isCompressedArrayTexture) {
          gl.compressedTexSubImage3D(glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth3, glFormat, image.data);
        } else {
          gl.texSubImage3D(glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth3, glFormat, glType, image);
        }
      } else {
        if (srcTexture.isDataTexture) {
          gl.texSubImage2D(glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data);
        } else if (srcTexture.isCompressedTexture) {
          gl.compressedTexSubImage2D(glTextureType, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data);
        } else {
          gl.texSubImage2D(glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image);
        }
      }
    }
    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
    if (dstLevel === 0 && dstTexture.generateMipmaps) {
      gl.generateMipmap(glTextureType);
    }
    state.unbindTexture();
  }
  /**
   * Copies the current bound framebuffer to the given texture.
   *
   * @param {Texture} texture - The destination texture.
   * @param {RenderContext} renderContext - The render context.
   * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
   */
  copyFramebufferToTexture(texture3, renderContext, rectangle) {
    const { gl } = this;
    const { state } = this.backend;
    const { textureGPU } = this.backend.get(texture3);
    const { x: x2, y: y2, z: width, w: height } = rectangle;
    const requireDrawFrameBuffer = texture3.isDepthTexture === true || renderContext.renderTarget && renderContext.renderTarget.samples > 0;
    const srcHeight = renderContext.renderTarget ? renderContext.renderTarget.height : this.backend.getDrawingBufferSize().y;
    if (requireDrawFrameBuffer) {
      const partial = x2 !== 0 || y2 !== 0;
      let mask;
      let attachment;
      if (texture3.isDepthTexture === true) {
        mask = gl.DEPTH_BUFFER_BIT;
        attachment = gl.DEPTH_ATTACHMENT;
        if (renderContext.stencil) {
          mask |= gl.STENCIL_BUFFER_BIT;
        }
      } else {
        mask = gl.COLOR_BUFFER_BIT;
        attachment = gl.COLOR_ATTACHMENT0;
      }
      if (partial) {
        const renderTargetContextData = this.backend.get(renderContext.renderTarget);
        const fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];
        const msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;
        state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
        state.bindFramebuffer(gl.READ_FRAMEBUFFER, msaaFrameBuffer);
        const flippedY = srcHeight - y2 - height;
        gl.blitFramebuffer(x2, flippedY, x2 + width, flippedY + height, x2, flippedY, x2 + width, flippedY + height, mask, gl.NEAREST);
        state.bindFramebuffer(gl.READ_FRAMEBUFFER, fb);
        state.bindTexture(gl.TEXTURE_2D, textureGPU);
        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x2, flippedY, width, height);
        state.unbindTexture();
      } else {
        const fb = gl.createFramebuffer();
        state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0);
        gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);
        gl.deleteFramebuffer(fb);
      }
    } else {
      state.bindTexture(gl.TEXTURE_2D, textureGPU);
      gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x2, srcHeight - height - y2, width, height);
      state.unbindTexture();
    }
    if (texture3.generateMipmaps)
      this.generateMipmaps(texture3);
    this.backend._setFramebuffer(renderContext);
  }
  /**
   * SetupS storage for internal depth/stencil buffers and bind to correct framebuffer.
   *
   * @param {WebGLRenderbuffer} renderbuffer - The render buffer.
   * @param {RenderContext} renderContext - The render context.
   * @param {number} samples - The MSAA sample count.
   * @param {boolean} [useMultisampledRTT=false] - Whether to use WEBGL_multisampled_render_to_texture or not.
   */
  setupRenderBufferStorage(renderbuffer, renderContext, samples, useMultisampledRTT = false) {
    const { gl } = this;
    const renderTarget = renderContext.renderTarget;
    const { depthTexture, depthBuffer, stencilBuffer, width, height } = renderTarget;
    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
    if (depthBuffer && !stencilBuffer) {
      let glInternalFormat = gl.DEPTH_COMPONENT24;
      if (useMultisampledRTT === true) {
        const multisampledRTTExt = this.extensions.get("WEBGL_multisampled_render_to_texture");
        multisampledRTTExt.renderbufferStorageMultisampleEXT(gl.RENDERBUFFER, renderTarget.samples, glInternalFormat, width, height);
      } else if (samples > 0) {
        if (depthTexture && depthTexture.isDepthTexture) {
          if (depthTexture.type === gl.FLOAT) {
            glInternalFormat = gl.DEPTH_COMPONENT32F;
          }
        }
        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, glInternalFormat, width, height);
      } else {
        gl.renderbufferStorage(gl.RENDERBUFFER, glInternalFormat, width, height);
      }
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
    } else if (depthBuffer && stencilBuffer) {
      if (samples > 0) {
        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height);
      } else {
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
      }
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
    }
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  }
  /**
   * Returns texture data as a typed array.
   *
   * @async
   * @param {Texture} texture - The texture to copy.
   * @param {number} x - The x coordinate of the copy origin.
   * @param {number} y - The y coordinate of the copy origin.
   * @param {number} width - The width of the copy.
   * @param {number} height - The height of the copy.
   * @param {number} faceIndex - The face index.
   * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
   */
  async copyTextureToBuffer(texture3, x2, y2, width, height, faceIndex) {
    const { backend, gl } = this;
    const { textureGPU, glFormat, glType } = this.backend.get(texture3);
    const fb = gl.createFramebuffer();
    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb);
    const target = texture3.isCubeTexture ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;
    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, textureGPU, 0);
    const typedArrayType = this._getTypedArrayType(glType);
    const bytesPerTexel = this._getBytesPerTexel(glType, glFormat);
    const elementCount = width * height;
    const byteLength = elementCount * bytesPerTexel;
    const buffer3 = gl.createBuffer();
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer3);
    gl.bufferData(gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ);
    gl.readPixels(x2, y2, width, height, glFormat, glType, 0);
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
    await backend.utils._clientWaitAsync();
    const dstBuffer = new typedArrayType(byteLength / typedArrayType.BYTES_PER_ELEMENT);
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer3);
    gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, dstBuffer);
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
    gl.deleteFramebuffer(fb);
    return dstBuffer;
  }
  /**
   * Returns the corresponding typed array type for the given WebGL data type.
   *
   * @private
   * @param {GLenum} glType - The WebGL data type.
   * @return {TypedArray.constructor} The typed array type.
   */
  _getTypedArrayType(glType) {
    const { gl } = this;
    if (glType === gl.UNSIGNED_BYTE)
      return Uint8Array;
    if (glType === gl.UNSIGNED_SHORT_4_4_4_4)
      return Uint16Array;
    if (glType === gl.UNSIGNED_SHORT_5_5_5_1)
      return Uint16Array;
    if (glType === gl.UNSIGNED_SHORT_5_6_5)
      return Uint16Array;
    if (glType === gl.UNSIGNED_SHORT)
      return Uint16Array;
    if (glType === gl.UNSIGNED_INT)
      return Uint32Array;
    if (glType === gl.HALF_FLOAT)
      return Uint16Array;
    if (glType === gl.FLOAT)
      return Float32Array;
    throw new Error(`Unsupported WebGL type: ${glType}`);
  }
  /**
   * Returns the bytes-per-texel value for the given WebGL data type and texture format.
   *
   * @private
   * @param {GLenum} glType - The WebGL data type.
   * @param {GLenum} glFormat - The WebGL texture format.
   * @return {number} The bytes-per-texel.
   */
  _getBytesPerTexel(glType, glFormat) {
    const { gl } = this;
    let bytesPerComponent = 0;
    if (glType === gl.UNSIGNED_BYTE)
      bytesPerComponent = 1;
    if (glType === gl.UNSIGNED_SHORT_4_4_4_4 || glType === gl.UNSIGNED_SHORT_5_5_5_1 || glType === gl.UNSIGNED_SHORT_5_6_5 || glType === gl.UNSIGNED_SHORT || glType === gl.HALF_FLOAT)
      bytesPerComponent = 2;
    if (glType === gl.UNSIGNED_INT || glType === gl.FLOAT)
      bytesPerComponent = 4;
    if (glFormat === gl.RGBA)
      return bytesPerComponent * 4;
    if (glFormat === gl.RGB)
      return bytesPerComponent * 3;
    if (glFormat === gl.ALPHA)
      return bytesPerComponent;
  }
};
function getImage(source) {
  if (source.isDataTexture) {
    return source.image.data;
  } else if (typeof HTMLImageElement !== "undefined" && source instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && source instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && source instanceof ImageBitmap || typeof OffscreenCanvas !== "undefined" && source instanceof OffscreenCanvas) {
    return source;
  }
  return source.data;
}
var WebGLExtensions = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGLBackend} backend - The WebGL 2 backend.
   */
  constructor(backend) {
    this.backend = backend;
    this.gl = this.backend.gl;
    this.availableExtensions = this.gl.getSupportedExtensions();
    this.extensions = {};
  }
  /**
   * Returns the extension object for the given extension name.
   *
   * @param {string} name - The extension name.
   * @return {Object} The extension object.
   */
  get(name) {
    let extension = this.extensions[name];
    if (extension === void 0) {
      extension = this.gl.getExtension(name);
      this.extensions[name] = extension;
    }
    return extension;
  }
  /**
   * Returns `true` if the requested extension is available.
   *
   * @param {string} name - The extension name.
   * @return {boolean} Whether the given extension is available or not.
   */
  has(name) {
    return this.availableExtensions.includes(name);
  }
};
var WebGLCapabilities = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGLBackend} backend - The WebGL 2 backend.
   */
  constructor(backend) {
    this.backend = backend;
    this.maxAnisotropy = null;
  }
  /**
   * Returns the maximum anisotropy texture filtering value. This value
   * depends on the device and is reported by the `EXT_texture_filter_anisotropic`
   * WebGL extension.
   *
   * @return {number} The maximum anisotropy texture filtering value.
   */
  getMaxAnisotropy() {
    if (this.maxAnisotropy !== null)
      return this.maxAnisotropy;
    const gl = this.backend.gl;
    const extensions = this.backend.extensions;
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      this.maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      this.maxAnisotropy = 0;
    }
    return this.maxAnisotropy;
  }
};
var GLFeatureName = {
  "WEBGL_multi_draw": "WEBGL_multi_draw",
  "WEBGL_compressed_texture_astc": "texture-compression-astc",
  "WEBGL_compressed_texture_etc": "texture-compression-etc2",
  "WEBGL_compressed_texture_etc1": "texture-compression-etc1",
  "WEBGL_compressed_texture_pvrtc": "texture-compression-pvrtc",
  "WEBKIT_WEBGL_compressed_texture_pvrtc": "texture-compression-pvrtc",
  "WEBGL_compressed_texture_s3tc": "texture-compression-bc",
  "EXT_texture_compression_bptc": "texture-compression-bptc",
  "EXT_disjoint_timer_query_webgl2": "timestamp-query",
  "OVR_multiview2": "OVR_multiview2"
};
var WebGLBufferRenderer = class {
  constructor(backend) {
    this.gl = backend.gl;
    this.extensions = backend.extensions;
    this.info = backend.renderer.info;
    this.mode = null;
    this.index = 0;
    this.type = null;
    this.object = null;
  }
  render(start, count) {
    const { gl, mode, object, type, info, index: index6 } = this;
    if (index6 !== 0) {
      gl.drawElements(mode, count, type, start);
    } else {
      gl.drawArrays(mode, start, count);
    }
    info.update(object, count, 1);
  }
  renderInstances(start, count, primcount) {
    const { gl, mode, type, index: index6, object, info } = this;
    if (primcount === 0)
      return;
    if (index6 !== 0) {
      gl.drawElementsInstanced(mode, count, type, start, primcount);
    } else {
      gl.drawArraysInstanced(mode, start, count, primcount);
    }
    info.update(object, count, primcount);
  }
  renderMultiDraw(starts, counts, drawCount) {
    const { extensions, mode, object, info } = this;
    if (drawCount === 0)
      return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < drawCount; i2++) {
        this.render(starts[i2], counts[i2]);
      }
    } else {
      if (this.index !== 0) {
        extension.multiDrawElementsWEBGL(mode, counts, 0, this.type, starts, 0, drawCount);
      } else {
        extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);
      }
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2];
      }
      info.update(object, elementCount, 1);
    }
  }
  renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    const { extensions, mode, object, info } = this;
    if (drawCount === 0)
      return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < drawCount; i2++) {
        this.renderInstances(starts[i2], counts[i2], primcount[i2]);
      }
    } else {
      if (this.index !== 0) {
        extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, this.type, starts, 0, primcount, 0, drawCount);
      } else {
        extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);
      }
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2] * primcount[i2];
      }
      info.update(object, elementCount, 1);
    }
  }
  //
};
var TimestampQueryPool = class {
  /**
   * Creates a new timestamp query pool.
   *
   * @param {number} [maxQueries=256] - Maximum number of queries this pool can hold.
   */
  constructor(maxQueries = 256) {
    this.trackTimestamp = true;
    this.maxQueries = maxQueries;
    this.currentQueryIndex = 0;
    this.queryOffsets = /* @__PURE__ */ new Map();
    this.isDisposed = false;
    this.lastValue = 0;
    this.pendingResolve = false;
  }
  /**
   * Allocate queries for a specific uid.
   *
   * @abstract
   * @param {string} uid - A unique identifier for the render context.
   * @returns {?number}
   */
  allocateQueriesForContext() {
  }
  /**
   * Resolve all timestamps and return data (or process them).
   *
   * @abstract
   * @async
   * @returns {Promise<number>|number} The resolved timestamp value.
   */
  async resolveQueriesAsync() {
  }
  /**
   * Dispose of the query pool.
   *
   * @abstract
   */
  dispose() {
  }
};
var WebGLTimestampQueryPool = class extends TimestampQueryPool {
  /**
   * Creates a new WebGL timestamp query pool.
   *
   * @param {WebGLRenderingContext|WebGL2RenderingContext} gl - The WebGL context.
   * @param {string} type - The type identifier for this query pool.
   * @param {number} [maxQueries=2048] - Maximum number of queries this pool can hold.
   */
  constructor(gl, type, maxQueries = 2048) {
    super(maxQueries);
    this.gl = gl;
    this.type = type;
    this.ext = gl.getExtension("EXT_disjoint_timer_query_webgl2") || gl.getExtension("EXT_disjoint_timer_query");
    if (!this.ext) {
      console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled.");
      this.trackTimestamp = false;
      return;
    }
    this.queries = [];
    for (let i2 = 0; i2 < this.maxQueries; i2++) {
      this.queries.push(gl.createQuery());
    }
    this.activeQuery = null;
    this.queryStates = /* @__PURE__ */ new Map();
  }
  /**
   * Allocates a pair of queries for a given render context.
   *
   * @param {string} uid - A unique identifier for the render context.
   * @returns {?number} The base offset for the allocated queries, or null if allocation failed.
   */
  allocateQueriesForContext(uid) {
    if (!this.trackTimestamp)
      return null;
    if (this.currentQueryIndex + 2 > this.maxQueries) {
      warnOnce(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`);
      return null;
    }
    const baseOffset = this.currentQueryIndex;
    this.currentQueryIndex += 2;
    this.queryStates.set(baseOffset, "inactive");
    this.queryOffsets.set(uid, baseOffset);
    return baseOffset;
  }
  /**
   * Begins a timestamp query for the specified render context.
   *
   * @param {string} uid - A unique identifier for the render context.
   */
  beginQuery(uid) {
    if (!this.trackTimestamp || this.isDisposed) {
      return;
    }
    const baseOffset = this.queryOffsets.get(uid);
    if (baseOffset == null) {
      return;
    }
    if (this.activeQuery !== null) {
      return;
    }
    const query = this.queries[baseOffset];
    if (!query) {
      return;
    }
    try {
      if (this.queryStates.get(baseOffset) === "inactive") {
        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, query);
        this.activeQuery = baseOffset;
        this.queryStates.set(baseOffset, "started");
      }
    } catch (error) {
      console.error("Error in beginQuery:", error);
      this.activeQuery = null;
      this.queryStates.set(baseOffset, "inactive");
    }
  }
  /**
   * Ends the active timestamp query for the specified render context.
   *
   * @param {string} uid - A unique identifier for the render context.
   */
  endQuery(uid) {
    if (!this.trackTimestamp || this.isDisposed) {
      return;
    }
    const baseOffset = this.queryOffsets.get(uid);
    if (baseOffset == null) {
      return;
    }
    if (this.activeQuery !== baseOffset) {
      return;
    }
    try {
      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);
      this.queryStates.set(baseOffset, "ended");
      this.activeQuery = null;
    } catch (error) {
      console.error("Error in endQuery:", error);
      this.queryStates.set(baseOffset, "inactive");
      this.activeQuery = null;
    }
  }
  /**
   * Asynchronously resolves all completed queries and returns the total duration.
   *
   * @async
   * @returns {Promise<number>} The total duration in milliseconds, or the last valid value if resolution fails.
   */
  async resolveQueriesAsync() {
    if (!this.trackTimestamp || this.pendingResolve) {
      return this.lastValue;
    }
    this.pendingResolve = true;
    try {
      const resolvePromises = [];
      for (const [baseOffset, state] of this.queryStates) {
        if (state === "ended") {
          const query = this.queries[baseOffset];
          resolvePromises.push(this.resolveQuery(query));
        }
      }
      if (resolvePromises.length === 0) {
        return this.lastValue;
      }
      const results = await Promise.all(resolvePromises);
      const totalDuration = results.reduce((acc, val) => acc + val, 0);
      this.lastValue = totalDuration;
      this.currentQueryIndex = 0;
      this.queryOffsets.clear();
      this.queryStates.clear();
      this.activeQuery = null;
      return totalDuration;
    } catch (error) {
      console.error("Error resolving queries:", error);
      return this.lastValue;
    } finally {
      this.pendingResolve = false;
    }
  }
  /**
   * Resolves a single query, checking for completion and disjoint operation.
   *
   * @async
   * @param {WebGLQuery} query - The query object to resolve.
   * @returns {Promise<number>} The elapsed time in milliseconds.
   */
  async resolveQuery(query) {
    return new Promise((resolve) => {
      if (this.isDisposed) {
        resolve(this.lastValue);
        return;
      }
      let timeoutId;
      let isResolved = false;
      const cleanup = () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
          timeoutId = null;
        }
      };
      const finalizeResolution = (value) => {
        if (!isResolved) {
          isResolved = true;
          cleanup();
          resolve(value);
        }
      };
      const checkQuery = () => {
        if (this.isDisposed) {
          finalizeResolution(this.lastValue);
          return;
        }
        try {
          const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);
          if (disjoint) {
            finalizeResolution(this.lastValue);
            return;
          }
          const available = this.gl.getQueryParameter(query, this.gl.QUERY_RESULT_AVAILABLE);
          if (!available) {
            timeoutId = setTimeout(checkQuery, 1);
            return;
          }
          const elapsed = this.gl.getQueryParameter(query, this.gl.QUERY_RESULT);
          resolve(Number(elapsed) / 1e6);
        } catch (error) {
          console.error("Error checking query:", error);
          resolve(this.lastValue);
        }
      };
      checkQuery();
    });
  }
  /**
   * Releases all resources held by this query pool.
   * This includes deleting all query objects and clearing internal state.
   */
  dispose() {
    if (this.isDisposed) {
      return;
    }
    this.isDisposed = true;
    if (!this.trackTimestamp)
      return;
    for (const query of this.queries) {
      this.gl.deleteQuery(query);
    }
    this.queries = [];
    this.queryStates.clear();
    this.queryOffsets.clear();
    this.lastValue = 0;
    this.activeQuery = null;
  }
};
var WebGLBackend = class extends Backend {
  /**
   * WebGLBackend options.
   *
   * @typedef {Object} WebGLBackend~Options
   * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
   * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
   * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
   * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
   * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
   * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.
   * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.
   * @property {WebGL2RenderingContext} [context=undefined] - A WebGL 2 rendering context.
   */
  /**
   * Constructs a new WebGPU backend.
   *
   * @param {WebGLBackend~Options} [parameters] - The configuration parameter.
   */
  constructor(parameters = {}) {
    super(parameters);
    this.isWebGLBackend = true;
    this.attributeUtils = null;
    this.extensions = null;
    this.capabilities = null;
    this.textureUtils = null;
    this.bufferRenderer = null;
    this.gl = null;
    this.state = null;
    this.utils = null;
    this.vaoCache = {};
    this.transformFeedbackCache = {};
    this.discard = false;
    this.disjoint = null;
    this.parallel = null;
    this._currentContext = null;
    this._knownBindings = /* @__PURE__ */ new WeakSet();
    this._supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
    this._xrFramebuffer = null;
  }
  /**
   * Initializes the backend so it is ready for usage.
   *
   * @param {Renderer} renderer - The renderer.
   */
  init(renderer3) {
    super.init(renderer3);
    const parameters = this.parameters;
    const contextAttributes = {
      antialias: renderer3.samples > 0,
      alpha: true,
      // always true for performance reasons
      depth: renderer3.depth,
      stencil: renderer3.stencil
    };
    const glContext = parameters.context !== void 0 ? parameters.context : renderer3.domElement.getContext("webgl2", contextAttributes);
    function onContextLost(event) {
      event.preventDefault();
      const contextLossInfo = {
        api: "WebGL",
        message: event.statusMessage || "Unknown reason",
        reason: null,
        originalEvent: event
      };
      renderer3.onDeviceLost(contextLossInfo);
    }
    this._onContextLost = onContextLost;
    renderer3.domElement.addEventListener("webglcontextlost", onContextLost, false);
    this.gl = glContext;
    this.extensions = new WebGLExtensions(this);
    this.capabilities = new WebGLCapabilities(this);
    this.attributeUtils = new WebGLAttributeUtils(this);
    this.textureUtils = new WebGLTextureUtils(this);
    this.bufferRenderer = new WebGLBufferRenderer(this);
    this.state = new WebGLState(this);
    this.utils = new WebGLUtils(this);
    this.extensions.get("EXT_color_buffer_float");
    this.extensions.get("WEBGL_clip_cull_distance");
    this.extensions.get("OES_texture_float_linear");
    this.extensions.get("EXT_color_buffer_half_float");
    this.extensions.get("WEBGL_multisampled_render_to_texture");
    this.extensions.get("WEBGL_render_shared_exponent");
    this.extensions.get("WEBGL_multi_draw");
    this.extensions.get("OVR_multiview2");
    this.disjoint = this.extensions.get("EXT_disjoint_timer_query_webgl2");
    this.parallel = this.extensions.get("KHR_parallel_shader_compile");
  }
  /**
   * The coordinate system of the backend.
   *
   * @type {number}
   * @readonly
   */
  get coordinateSystem() {
    return WebGLCoordinateSystem;
  }
  /**
   * This method performs a readback operation by moving buffer data from
   * a storage buffer attribute from the GPU to the CPU.
   *
   * @async
   * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
   * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
   */
  async getArrayBufferAsync(attribute3) {
    return await this.attributeUtils.getArrayBufferAsync(attribute3);
  }
  /**
   * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
   * the CPU waits for the GPU to complete its operation (e.g. a compute task).
   *
   * @async
   * @return {Promise} A Promise that resolves when synchronization has been finished.
   */
  async waitForGPU() {
    await this.utils._clientWaitAsync();
  }
  /**
   * Ensures the backend is XR compatible.
   *
   * @async
   * @return {Promise} A Promise that resolve when the renderer is XR compatible.
   */
  async makeXRCompatible() {
    const attributes = this.gl.getContextAttributes();
    if (attributes.xrCompatible !== true) {
      await this.gl.makeXRCompatible();
    }
  }
  /**
   * Sets the XR rendering destination.
   *
   * @param {WebGLFramebuffer} xrFramebuffer - The XR framebuffer.
   */
  setXRTarget(xrFramebuffer) {
    this._xrFramebuffer = xrFramebuffer;
  }
  /**
   * Configures the given XR render target with external textures.
   *
   * This method is only relevant when using the WebXR Layers API.
   *
   * @param {XRRenderTarget} renderTarget - The XR render target.
   * @param {WebGLTexture} colorTexture - A native color texture.
   * @param {?WebGLTexture} [depthTexture=null] - A native depth texture.
   */
  setXRRenderTargetTextures(renderTarget, colorTexture, depthTexture = null) {
    const gl = this.gl;
    this.set(renderTarget.texture, { textureGPU: colorTexture, glInternalFormat: gl.RGBA8 });
    if (depthTexture !== null) {
      const glInternalFormat = renderTarget.stencilBuffer ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
      this.set(renderTarget.depthTexture, { textureGPU: depthTexture, glInternalFormat });
      if (this.extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTarget._autoAllocateDepthBuffer === true && renderTarget.multiview === false) {
        console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided");
      }
      renderTarget._autoAllocateDepthBuffer = false;
    }
  }
  /**
   * Inits a time stamp query for the given render context.
   *
   * @param {string} type - The type of the timestamp query.
   * @param {string} uid - A unique identifier for the timestamp query.
   */
  initTimestampQuery(type, uid) {
    if (!this.disjoint || !this.trackTimestamp)
      return;
    if (!this.timestampQueryPool[type]) {
      this.timestampQueryPool[type] = new WebGLTimestampQueryPool(this.gl, type, 2048);
    }
    const timestampQueryPool = this.timestampQueryPool[type];
    const baseOffset = timestampQueryPool.allocateQueriesForContext(uid);
    if (baseOffset !== null) {
      timestampQueryPool.beginQuery(uid);
    }
  }
  // timestamp utils
  /**
   * Prepares the timestamp buffer.
   *
   * @param {string} type - The type of the timestamp query.
   * @param {string} uid - A unique identifier for the timestamp query.
   */
  prepareTimestampBuffer(type, uid) {
    if (!this.disjoint || !this.trackTimestamp)
      return;
    const timestampQueryPool = this.timestampQueryPool[type];
    timestampQueryPool.endQuery(uid);
  }
  /**
   * Returns the backend's rendering context.
   *
   * @return {WebGL2RenderingContext} The rendering context.
   */
  getContext() {
    return this.gl;
  }
  /**
   * This method is executed at the beginning of a render call and prepares
   * the WebGL state for upcoming render calls
   *
   * @param {RenderContext} renderContext - The render context.
   */
  beginRender(renderContext) {
    const { state } = this;
    const renderContextData = this.get(renderContext);
    renderContextData.frameCalls = this.renderer.info.render.frameCalls;
    if (renderContext.viewport) {
      this.updateViewport(renderContext);
    } else {
      const { width, height } = this.getDrawingBufferSize();
      state.viewport(0, 0, width, height);
    }
    if (renderContext.scissor) {
      const { x: x2, y: y2, width, height } = renderContext.scissorValue;
      state.scissor(x2, renderContext.height - height - y2, width, height);
    }
    this.initTimestampQuery(TimestampQuery.RENDER, this.getTimestampUID(renderContext));
    renderContextData.previousContext = this._currentContext;
    this._currentContext = renderContext;
    this._setFramebuffer(renderContext);
    this.clear(renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext, false);
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    if (occlusionQueryCount > 0) {
      renderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;
      renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;
      renderContextData.lastOcclusionObject = null;
      renderContextData.occlusionQueries = new Array(occlusionQueryCount);
      renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);
      renderContextData.occlusionQueryIndex = 0;
    }
  }
  /**
   * This method is executed at the end of a render call and finalizes work
   * after draw calls.
   *
   * @param {RenderContext} renderContext - The render context.
   */
  finishRender(renderContext) {
    const { gl, state } = this;
    const renderContextData = this.get(renderContext);
    const previousContext = renderContextData.previousContext;
    state.resetVertexState();
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    if (occlusionQueryCount > 0) {
      if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {
        gl.endQuery(gl.ANY_SAMPLES_PASSED);
      }
      this.resolveOccludedAsync(renderContext);
    }
    const textures = renderContext.textures;
    if (textures !== null) {
      for (let i2 = 0; i2 < textures.length; i2++) {
        const texture3 = textures[i2];
        if (texture3.generateMipmaps) {
          this.generateMipmaps(texture3);
        }
      }
    }
    this._currentContext = previousContext;
    this._resolveRenderTarget(renderContext);
    if (previousContext !== null) {
      this._setFramebuffer(previousContext);
      if (previousContext.viewport) {
        this.updateViewport(previousContext);
      } else {
        const { width, height } = this.getDrawingBufferSize();
        state.viewport(0, 0, width, height);
      }
    }
    this.prepareTimestampBuffer(TimestampQuery.RENDER, this.getTimestampUID(renderContext));
  }
  /**
   * This method processes the result of occlusion queries and writes it
   * into render context data.
   *
   * @async
   * @param {RenderContext} renderContext - The render context.
   */
  resolveOccludedAsync(renderContext) {
    const renderContextData = this.get(renderContext);
    const { currentOcclusionQueries, currentOcclusionQueryObjects } = renderContextData;
    if (currentOcclusionQueries && currentOcclusionQueryObjects) {
      const occluded = /* @__PURE__ */ new WeakSet();
      const { gl } = this;
      renderContextData.currentOcclusionQueryObjects = null;
      renderContextData.currentOcclusionQueries = null;
      const check = () => {
        let completed = 0;
        for (let i2 = 0; i2 < currentOcclusionQueries.length; i2++) {
          const query = currentOcclusionQueries[i2];
          if (query === null)
            continue;
          if (gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {
            if (gl.getQueryParameter(query, gl.QUERY_RESULT) === 0)
              occluded.add(currentOcclusionQueryObjects[i2]);
            currentOcclusionQueries[i2] = null;
            gl.deleteQuery(query);
            completed++;
          }
        }
        if (completed < currentOcclusionQueries.length) {
          requestAnimationFrame(check);
        } else {
          renderContextData.occluded = occluded;
        }
      };
      check();
    }
  }
  /**
   * Returns `true` if the given 3D object is fully occluded by other
   * 3D objects in the scene.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object is fully occluded or not.
   */
  isOccluded(renderContext, object) {
    const renderContextData = this.get(renderContext);
    return renderContextData.occluded && renderContextData.occluded.has(object);
  }
  /**
   * Updates the viewport with the values from the given render context.
   *
   * @param {RenderContext} renderContext - The render context.
   */
  updateViewport(renderContext) {
    const { state } = this;
    const { x: x2, y: y2, width, height } = renderContext.viewportValue;
    state.viewport(x2, renderContext.height - height - y2, width, height);
  }
  /**
   * Defines the scissor test.
   *
   * @param {boolean} boolean - Whether the scissor test should be enabled or not.
   */
  setScissorTest(boolean) {
    const state = this.state;
    state.setScissorTest(boolean);
  }
  /**
   * Returns the clear color and alpha into a single
   * color object.
   *
   * @return {Color4} The clear color.
   */
  getClearColor() {
    const clearColor = super.getClearColor();
    clearColor.r *= clearColor.a;
    clearColor.g *= clearColor.a;
    clearColor.b *= clearColor.a;
    return clearColor;
  }
  /**
   * Performs a clear operation.
   *
   * @param {boolean} color - Whether the color buffer should be cleared or not.
   * @param {boolean} depth - Whether the depth buffer should be cleared or not.
   * @param {boolean} stencil - Whether the stencil buffer should be cleared or not.
   * @param {?Object} [descriptor=null] - The render context of the current set render target.
   * @param {boolean} [setFrameBuffer=true] - Controls whether the intermediate framebuffer should be set or not.
   * @param {boolean} [resolveRenderTarget=true] - Controls whether an active render target should be resolved
   * or not. Only relevant for explicit clears.
   */
  clear(color4, depth3, stencil, descriptor = null, setFrameBuffer = true, resolveRenderTarget = true) {
    const { gl, renderer: renderer3 } = this;
    if (descriptor === null) {
      const clearColor = this.getClearColor();
      descriptor = {
        textures: null,
        clearColorValue: clearColor
      };
    }
    let clear = 0;
    if (color4)
      clear |= gl.COLOR_BUFFER_BIT;
    if (depth3)
      clear |= gl.DEPTH_BUFFER_BIT;
    if (stencil)
      clear |= gl.STENCIL_BUFFER_BIT;
    if (clear !== 0) {
      let clearColor;
      if (descriptor.clearColorValue) {
        clearColor = descriptor.clearColorValue;
      } else {
        clearColor = this.getClearColor();
      }
      const clearDepth = renderer3.getClearDepth();
      const clearStencil = renderer3.getClearStencil();
      if (depth3)
        this.state.setDepthMask(true);
      if (descriptor.textures === null) {
        gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
        gl.clear(clear);
      } else {
        if (setFrameBuffer)
          this._setFramebuffer(descriptor);
        if (color4) {
          for (let i2 = 0; i2 < descriptor.textures.length; i2++) {
            if (i2 === 0) {
              gl.clearBufferfv(gl.COLOR, i2, [clearColor.r, clearColor.g, clearColor.b, clearColor.a]);
            } else {
              gl.clearBufferfv(gl.COLOR, i2, [0, 0, 0, 1]);
            }
          }
        }
        if (depth3 && stencil) {
          gl.clearBufferfi(gl.DEPTH_STENCIL, 0, clearDepth, clearStencil);
        } else if (depth3) {
          gl.clearBufferfv(gl.DEPTH, 0, [clearDepth]);
        } else if (stencil) {
          gl.clearBufferiv(gl.STENCIL, 0, [clearStencil]);
        }
        if (setFrameBuffer && resolveRenderTarget)
          this._resolveRenderTarget(descriptor);
      }
    }
  }
  /**
   * This method is executed at the beginning of a compute call and
   * prepares the state for upcoming compute tasks.
   *
   * @param {Node|Array<Node>} computeGroup - The compute node(s).
   */
  beginCompute(computeGroup) {
    const { state, gl } = this;
    const computeGroupData = this.get(computeGroup);
    computeGroupData.frameCalls = this.renderer.info.compute.frameCalls;
    state.bindFramebuffer(gl.FRAMEBUFFER, null);
    this.initTimestampQuery(TimestampQuery.COMPUTE, this.getTimestampUID(computeGroup));
  }
  /**
   * Executes a compute command for the given compute node.
   *
   * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.
   * @param {Node} computeNode - The compute node.
   * @param {Array<BindGroup>} bindings - The bindings.
   * @param {ComputePipeline} pipeline - The compute pipeline.
   * @param {?number} [count=null] - The count of compute invocations. If `null`, the count is determined by the compute node.
   */
  compute(computeGroup, computeNode, bindings, pipeline, count = null) {
    const { state, gl } = this;
    if (this.discard === false) {
      gl.enable(gl.RASTERIZER_DISCARD);
      this.discard = true;
    }
    const { programGPU, transformBuffers, attributes } = this.get(pipeline);
    const vaoKey = this._getVaoKey(attributes);
    const vaoGPU = this.vaoCache[vaoKey];
    if (vaoGPU === void 0) {
      this.vaoCache[vaoKey] = this._createVao(attributes);
    } else {
      state.setVertexState(vaoGPU);
    }
    state.useProgram(programGPU);
    this._bindUniforms(bindings);
    const transformFeedbackGPU = this._getTransformFeedback(transformBuffers);
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);
    gl.beginTransformFeedback(gl.POINTS);
    count = count !== null ? count : computeNode.count;
    if (Array.isArray(count)) {
      warnOnce("WebGLBackend.compute(): The count parameter must be a single number, not an array.");
      count = count[0];
    }
    if (attributes[0].isStorageInstancedBufferAttribute) {
      gl.drawArraysInstanced(gl.POINTS, 0, 1, count);
    } else {
      gl.drawArrays(gl.POINTS, 0, count);
    }
    gl.endTransformFeedback();
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
    for (let i2 = 0; i2 < transformBuffers.length; i2++) {
      const dualAttributeData = transformBuffers[i2];
      if (dualAttributeData.pbo && this.has(dualAttributeData.pbo)) {
        this.textureUtils.copyBufferToTexture(dualAttributeData.transformBuffer, dualAttributeData.pbo);
      }
      dualAttributeData.switchBuffers();
    }
  }
  /**
   * This method is executed at the end of a compute call and
   * finalizes work after compute tasks.
   *
   * @param {Node|Array<Node>} computeGroup - The compute node(s).
   */
  finishCompute(computeGroup) {
    const gl = this.gl;
    this.discard = false;
    gl.disable(gl.RASTERIZER_DISCARD);
    this.prepareTimestampBuffer(TimestampQuery.COMPUTE, this.getTimestampUID(computeGroup));
    if (this._currentContext) {
      this._setFramebuffer(this._currentContext);
    }
  }
  /**
   * Internal to determine if the current render target is a render target array with depth 2D array texture.
   *
   * @param {RenderContext} renderContext - The render context.
   * @return {boolean} Whether the render target is a render target array with depth 2D array texture.
   *
   * @private
   */
  _isRenderCameraDepthArray(renderContext) {
    return renderContext.depthTexture && renderContext.depthTexture.isArrayTexture && renderContext.camera.isArrayCamera;
  }
  /**
   * Executes a draw command for the given render object.
   *
   * @param {RenderObject} renderObject - The render object to draw.
   * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.
   */
  draw(renderObject) {
    const { object, pipeline, material, context: context3, hardwareClippingPlanes } = renderObject;
    const { programGPU } = this.get(pipeline);
    const { gl, state } = this;
    const contextData = this.get(context3);
    const drawParams = renderObject.getDrawParameters();
    if (drawParams === null)
      return;
    this._bindUniforms(renderObject.getBindings());
    const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
    state.setMaterial(material, frontFaceCW, hardwareClippingPlanes);
    state.useProgram(programGPU);
    const attributes = renderObject.getAttributes();
    const attributesData = this.get(attributes);
    let vaoGPU = attributesData.vaoGPU;
    if (vaoGPU === void 0) {
      const vaoKey = this._getVaoKey(attributes);
      vaoGPU = this.vaoCache[vaoKey];
      if (vaoGPU === void 0) {
        vaoGPU = this._createVao(attributes);
        this.vaoCache[vaoKey] = vaoGPU;
        attributesData.vaoGPU = vaoGPU;
      }
    }
    const index6 = renderObject.getIndex();
    const indexGPU = index6 !== null ? this.get(index6).bufferGPU : null;
    state.setVertexState(vaoGPU, indexGPU);
    const lastObject = contextData.lastOcclusionObject;
    if (lastObject !== object && lastObject !== void 0) {
      if (lastObject !== null && lastObject.occlusionTest === true) {
        gl.endQuery(gl.ANY_SAMPLES_PASSED);
        contextData.occlusionQueryIndex++;
      }
      if (object.occlusionTest === true) {
        const query = gl.createQuery();
        gl.beginQuery(gl.ANY_SAMPLES_PASSED, query);
        contextData.occlusionQueries[contextData.occlusionQueryIndex] = query;
        contextData.occlusionQueryObjects[contextData.occlusionQueryIndex] = object;
      }
      contextData.lastOcclusionObject = object;
    }
    const renderer3 = this.bufferRenderer;
    if (object.isPoints)
      renderer3.mode = gl.POINTS;
    else if (object.isLineSegments)
      renderer3.mode = gl.LINES;
    else if (object.isLine)
      renderer3.mode = gl.LINE_STRIP;
    else if (object.isLineLoop)
      renderer3.mode = gl.LINE_LOOP;
    else {
      if (material.wireframe === true) {
        state.setLineWidth(material.wireframeLinewidth * this.renderer.getPixelRatio());
        renderer3.mode = gl.LINES;
      } else {
        renderer3.mode = gl.TRIANGLES;
      }
    }
    const { vertexCount, instanceCount } = drawParams;
    let { firstVertex } = drawParams;
    renderer3.object = object;
    if (index6 !== null) {
      firstVertex *= index6.array.BYTES_PER_ELEMENT;
      const indexData = this.get(index6);
      renderer3.index = index6.count;
      renderer3.type = indexData.type;
    } else {
      renderer3.index = 0;
    }
    const draw = () => {
      if (object.isBatchedMesh) {
        if (object._multiDrawInstances !== null) {
          warnOnce("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");
          renderer3.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);
        } else if (!this.hasFeature("WEBGL_multi_draw")) {
          warnOnce("THREE.WebGLRenderer: WEBGL_multi_draw not supported.");
        } else {
          renderer3.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);
        }
      } else if (instanceCount > 1) {
        renderer3.renderInstances(firstVertex, vertexCount, instanceCount);
      } else {
        renderer3.render(firstVertex, vertexCount);
      }
    };
    if (renderObject.camera.isArrayCamera === true && renderObject.camera.cameras.length > 0 && renderObject.camera.isMultiViewCamera === false) {
      const cameraData = this.get(renderObject.camera);
      const cameras = renderObject.camera.cameras;
      const cameraIndex3 = renderObject.getBindingGroup("cameraIndex").bindings[0];
      if (cameraData.indexesGPU === void 0 || cameraData.indexesGPU.length !== cameras.length) {
        const data = new Uint32Array([0, 0, 0, 0]);
        const indexesGPU = [];
        for (let i2 = 0, len = cameras.length; i2 < len; i2++) {
          const bufferGPU = gl.createBuffer();
          data[0] = i2;
          gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
          gl.bufferData(gl.UNIFORM_BUFFER, data, gl.STATIC_DRAW);
          indexesGPU.push(bufferGPU);
        }
        cameraData.indexesGPU = indexesGPU;
      }
      const cameraIndexData = this.get(cameraIndex3);
      const pixelRatio = this.renderer.getPixelRatio();
      const renderTarget = this._currentContext.renderTarget;
      const isRenderCameraDepthArray = this._isRenderCameraDepthArray(this._currentContext);
      const prevActiveCubeFace = this._currentContext.activeCubeFace;
      if (isRenderCameraDepthArray) {
        const textureData = this.get(renderTarget.depthTexture);
        if (textureData.clearedRenderId !== this.renderer._nodes.nodeFrame.renderId) {
          textureData.clearedRenderId = this.renderer._nodes.nodeFrame.renderId;
          const { stencilBuffer } = renderTarget;
          for (let i2 = 0, len = cameras.length; i2 < len; i2++) {
            this.renderer._activeCubeFace = i2;
            this._currentContext.activeCubeFace = i2;
            this._setFramebuffer(this._currentContext);
            this.clear(false, true, stencilBuffer, this._currentContext, false, false);
          }
          this.renderer._activeCubeFace = prevActiveCubeFace;
          this._currentContext.activeCubeFace = prevActiveCubeFace;
        }
      }
      for (let i2 = 0, len = cameras.length; i2 < len; i2++) {
        const subCamera = cameras[i2];
        if (object.layers.test(subCamera.layers)) {
          if (isRenderCameraDepthArray) {
            this.renderer._activeCubeFace = i2;
            this._currentContext.activeCubeFace = i2;
            this._setFramebuffer(this._currentContext);
          }
          const vp = subCamera.viewport;
          if (vp !== void 0) {
            const x2 = vp.x * pixelRatio;
            const y2 = vp.y * pixelRatio;
            const width = vp.width * pixelRatio;
            const height = vp.height * pixelRatio;
            state.viewport(
              Math.floor(x2),
              Math.floor(renderObject.context.height - height - y2),
              Math.floor(width),
              Math.floor(height)
            );
          }
          state.bindBufferBase(gl.UNIFORM_BUFFER, cameraIndexData.index, cameraData.indexesGPU[i2]);
          draw();
        }
        this._currentContext.activeCubeFace = prevActiveCubeFace;
        this.renderer._activeCubeFace = prevActiveCubeFace;
      }
    } else {
      draw();
    }
  }
  /**
   * Explain why always null is returned.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {boolean} Whether the render pipeline requires an update or not.
   */
  needsRenderUpdate() {
    return false;
  }
  /**
   * Explain why no cache key is computed.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {string} The cache key.
   */
  getRenderCacheKey() {
    return "";
  }
  // textures
  /**
   * Creates a default texture for the given texture that can be used
   * as a placeholder until the actual texture is ready for usage.
   *
   * @param {Texture} texture - The texture to create a default texture for.
   */
  createDefaultTexture(texture3) {
    this.textureUtils.createDefaultTexture(texture3);
  }
  /**
   * Defines a texture on the GPU for the given texture object.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  createTexture(texture3, options) {
    this.textureUtils.createTexture(texture3, options);
  }
  /**
   * Uploads the updated texture data to the GPU.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  updateTexture(texture3, options) {
    this.textureUtils.updateTexture(texture3, options);
  }
  /**
   * Generates mipmaps for the given texture.
   *
   * @param {Texture} texture - The texture.
   */
  generateMipmaps(texture3) {
    this.textureUtils.generateMipmaps(texture3);
  }
  /**
   * Destroys the GPU data for the given texture object.
   *
   * @param {Texture} texture - The texture.
   */
  destroyTexture(texture3) {
    this.textureUtils.destroyTexture(texture3);
  }
  /**
   * Returns texture data as a typed array.
   *
   * @async
   * @param {Texture} texture - The texture to copy.
   * @param {number} x - The x coordinate of the copy origin.
   * @param {number} y - The y coordinate of the copy origin.
   * @param {number} width - The width of the copy.
   * @param {number} height - The height of the copy.
   * @param {number} faceIndex - The face index.
   * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
   */
  async copyTextureToBuffer(texture3, x2, y2, width, height, faceIndex) {
    return this.textureUtils.copyTextureToBuffer(texture3, x2, y2, width, height, faceIndex);
  }
  /**
   * This method does nothing since WebGL 2 has no concept of samplers.
   *
   * @param {Texture} texture - The texture to create the sampler for.
   */
  createSampler() {
  }
  /**
   * This method does nothing since WebGL 2 has no concept of samplers.
   *
   * @param {Texture} texture - The texture to destroy the sampler for.
   */
  destroySampler() {
  }
  // node builder
  /**
   * Returns a node builder for the given render object.
   *
   * @param {RenderObject} object - The render object.
   * @param {Renderer} renderer - The renderer.
   * @return {GLSLNodeBuilder} The node builder.
   */
  createNodeBuilder(object, renderer3) {
    return new GLSLNodeBuilder(object, renderer3);
  }
  // program
  /**
   * Creates a shader program from the given programmable stage.
   *
   * @param {ProgrammableStage} program - The programmable stage.
   */
  createProgram(program) {
    const gl = this.gl;
    const { stage, code: code3 } = program;
    const shader = stage === "fragment" ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(shader, code3);
    gl.compileShader(shader);
    this.set(program, {
      shaderGPU: shader
    });
  }
  /**
   * Destroys the shader program of the given programmable stage.
   *
   * @param {ProgrammableStage} program - The programmable stage.
   */
  destroyProgram(program) {
    this.delete(program);
  }
  /**
   * Creates a render pipeline for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
   */
  createRenderPipeline(renderObject, promises) {
    const gl = this.gl;
    const pipeline = renderObject.pipeline;
    const { fragmentProgram, vertexProgram } = pipeline;
    const programGPU = gl.createProgram();
    const fragmentShader2 = this.get(fragmentProgram).shaderGPU;
    const vertexShader2 = this.get(vertexProgram).shaderGPU;
    gl.attachShader(programGPU, fragmentShader2);
    gl.attachShader(programGPU, vertexShader2);
    gl.linkProgram(programGPU);
    this.set(pipeline, {
      programGPU,
      fragmentShader: fragmentShader2,
      vertexShader: vertexShader2
    });
    if (promises !== null && this.parallel) {
      const p2 = new Promise((resolve) => {
        const parallel = this.parallel;
        const checkStatus = () => {
          if (gl.getProgramParameter(programGPU, parallel.COMPLETION_STATUS_KHR)) {
            this._completeCompile(renderObject, pipeline);
            resolve();
          } else {
            requestAnimationFrame(checkStatus);
          }
        };
        checkStatus();
      });
      promises.push(p2);
      return;
    }
    this._completeCompile(renderObject, pipeline);
  }
  /**
   * Formats the source code of error messages.
   *
   * @private
   * @param {string} string - The code.
   * @param {number} errorLine - The error line.
   * @return {string} The formatted code.
   */
  _handleSource(string3, errorLine) {
    const lines = string3.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for (let i2 = from; i2 < to; i2++) {
      const line = i2 + 1;
      lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i2]}`);
    }
    return lines2.join("\n");
  }
  /**
   * Gets the shader compilation errors from the info log.
   *
   * @private
   * @param {WebGL2RenderingContext} gl - The rendering context.
   * @param {WebGLShader} shader - The WebGL shader object.
   * @param {string} type - The shader type.
   * @return {string} The shader errors.
   */
  _getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const shaderInfoLog = gl.getShaderInfoLog(shader) || "";
    const errors = shaderInfoLog.trim();
    if (status && errors === "")
      return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
      const errorLine = parseInt(errorMatches[1]);
      return type.toUpperCase() + "\n\n" + errors + "\n\n" + this._handleSource(gl.getShaderSource(shader), errorLine);
    } else {
      return errors;
    }
  }
  /**
   * Logs shader compilation errors.
   *
   * @private
   * @param {WebGLProgram} programGPU - The WebGL program.
   * @param {WebGLShader} glFragmentShader - The fragment shader as a native WebGL shader object.
   * @param {WebGLShader} glVertexShader - The vertex shader as a native WebGL shader object.
   */
  _logProgramError(programGPU, glFragmentShader, glVertexShader) {
    if (this.renderer.debug.checkShaderErrors) {
      const gl = this.gl;
      const programInfoLog = gl.getProgramInfoLog(programGPU) || "";
      const programLog = programInfoLog.trim();
      if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
        if (typeof this.renderer.debug.onShaderError === "function") {
          this.renderer.debug.onShaderError(gl, programGPU, glVertexShader, glFragmentShader);
        } else {
          const vertexErrors = this._getShaderErrors(gl, glVertexShader, "vertex");
          const fragmentErrors = this._getShaderErrors(gl, glFragmentShader, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(programGPU, gl.VALIDATE_STATUS) + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
          );
        }
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      }
    }
  }
  /**
   * Completes the shader program setup for the given render object.
   *
   * @private
   * @param {RenderObject} renderObject - The render object.
   * @param {RenderPipeline} pipeline - The render pipeline.
   */
  _completeCompile(renderObject, pipeline) {
    const { state, gl } = this;
    const pipelineData = this.get(pipeline);
    const { programGPU, fragmentShader: fragmentShader2, vertexShader: vertexShader2 } = pipelineData;
    if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
      this._logProgramError(programGPU, fragmentShader2, vertexShader2);
    }
    state.useProgram(programGPU);
    const bindings = renderObject.getBindings();
    this._setupBindings(bindings, programGPU);
    this.set(pipeline, {
      programGPU
    });
  }
  /**
   * Creates a compute pipeline for the given compute node.
   *
   * @param {ComputePipeline} computePipeline - The compute pipeline.
   * @param {Array<BindGroup>} bindings - The bindings.
   */
  createComputePipeline(computePipeline, bindings) {
    const { state, gl } = this;
    const fragmentProgram = {
      stage: "fragment",
      code: "#version 300 es\nprecision highp float;\nvoid main() {}"
    };
    this.createProgram(fragmentProgram);
    const { computeProgram } = computePipeline;
    const programGPU = gl.createProgram();
    const fragmentShader2 = this.get(fragmentProgram).shaderGPU;
    const vertexShader2 = this.get(computeProgram).shaderGPU;
    const transforms = computeProgram.transforms;
    const transformVaryingNames = [];
    const transformAttributeNodes = [];
    for (let i2 = 0; i2 < transforms.length; i2++) {
      const transform = transforms[i2];
      transformVaryingNames.push(transform.varyingName);
      transformAttributeNodes.push(transform.attributeNode);
    }
    gl.attachShader(programGPU, fragmentShader2);
    gl.attachShader(programGPU, vertexShader2);
    gl.transformFeedbackVaryings(
      programGPU,
      transformVaryingNames,
      gl.SEPARATE_ATTRIBS
    );
    gl.linkProgram(programGPU);
    if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
      this._logProgramError(programGPU, fragmentShader2, vertexShader2);
    }
    state.useProgram(programGPU);
    this._setupBindings(bindings, programGPU);
    const attributeNodes = computeProgram.attributes;
    const attributes = [];
    const transformBuffers = [];
    for (let i2 = 0; i2 < attributeNodes.length; i2++) {
      const attribute3 = attributeNodes[i2].node.attribute;
      attributes.push(attribute3);
      if (!this.has(attribute3))
        this.attributeUtils.createAttribute(attribute3, gl.ARRAY_BUFFER);
    }
    for (let i2 = 0; i2 < transformAttributeNodes.length; i2++) {
      const attribute3 = transformAttributeNodes[i2].attribute;
      if (!this.has(attribute3))
        this.attributeUtils.createAttribute(attribute3, gl.ARRAY_BUFFER);
      const attributeData = this.get(attribute3);
      transformBuffers.push(attributeData);
    }
    this.set(computePipeline, {
      programGPU,
      transformBuffers,
      attributes
    });
  }
  /**
   * Creates bindings from the given bind group definition.
   *
   * @param {BindGroup} bindGroup - The bind group.
   * @param {Array<BindGroup>} bindings - Array of bind groups.
   * @param {number} cacheIndex - The cache index.
   * @param {number} version - The version.
   */
  createBindings(bindGroup, bindings) {
    if (this._knownBindings.has(bindings) === false) {
      this._knownBindings.add(bindings);
      let uniformBuffers = 0;
      let textures = 0;
      for (const bindGroup2 of bindings) {
        this.set(bindGroup2, {
          textures,
          uniformBuffers
        });
        for (const binding of bindGroup2.bindings) {
          if (binding.isUniformBuffer)
            uniformBuffers++;
          if (binding.isSampledTexture)
            textures++;
        }
      }
    }
    this.updateBindings(bindGroup, bindings);
  }
  /**
   * Updates the given bind group definition.
   *
   * @param {BindGroup} bindGroup - The bind group.
   * @param {Array<BindGroup>} bindings - Array of bind groups.
   * @param {number} cacheIndex - The cache index.
   * @param {number} version - The version.
   */
  updateBindings(bindGroup) {
    const { gl } = this;
    const bindGroupData = this.get(bindGroup);
    let i2 = bindGroupData.uniformBuffers;
    let t2 = bindGroupData.textures;
    for (const binding of bindGroup.bindings) {
      const map = this.get(binding);
      if (binding.isUniformsGroup || binding.isUniformBuffer) {
        const data = binding.buffer;
        let { bufferGPU } = this.get(data);
        if (bufferGPU === void 0) {
          bufferGPU = gl.createBuffer();
          gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
          gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);
          this.set(data, { bufferGPU });
        } else {
          gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
          gl.bufferSubData(gl.UNIFORM_BUFFER, 0, data);
        }
        map.index = i2++;
        map.bufferGPU = bufferGPU;
        this.set(binding, map);
      } else if (binding.isSampledTexture) {
        const { textureGPU, glTextureType } = this.get(binding.texture);
        map.index = t2++;
        map.textureGPU = textureGPU;
        map.glTextureType = glTextureType;
        this.set(binding, map);
      }
    }
  }
  /**
   * Updates a buffer binding.
   *
   *  @param {Buffer} binding - The buffer binding to update.
   */
  updateBinding(binding) {
    const gl = this.gl;
    if (binding.isUniformsGroup || binding.isUniformBuffer) {
      const bindingData = this.get(binding);
      const bufferGPU = bindingData.bufferGPU;
      const data = binding.buffer;
      gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
      gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);
    }
  }
  // attributes
  /**
   * Creates the GPU buffer of an indexed shader attribute.
   *
   * @param {BufferAttribute} attribute - The indexed buffer attribute.
   */
  createIndexAttribute(attribute3) {
    const gl = this.gl;
    this.attributeUtils.createAttribute(attribute3, gl.ELEMENT_ARRAY_BUFFER);
  }
  /**
   * Creates the GPU buffer of a shader attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  createAttribute(attribute3) {
    if (this.has(attribute3))
      return;
    const gl = this.gl;
    this.attributeUtils.createAttribute(attribute3, gl.ARRAY_BUFFER);
  }
  /**
   * Creates the GPU buffer of a storage attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  createStorageAttribute(attribute3) {
    if (this.has(attribute3))
      return;
    const gl = this.gl;
    this.attributeUtils.createAttribute(attribute3, gl.ARRAY_BUFFER);
  }
  /**
   * Updates the GPU buffer of a shader attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute to update.
   */
  updateAttribute(attribute3) {
    this.attributeUtils.updateAttribute(attribute3);
  }
  /**
   * Destroys the GPU buffer of a shader attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute to destroy.
   */
  destroyAttribute(attribute3) {
    this.attributeUtils.destroyAttribute(attribute3);
  }
  /**
   * Checks if the given feature is supported  by the backend.
   *
   * @param {string} name - The feature's name.
   * @return {boolean} Whether the feature is supported or not.
   */
  hasFeature(name) {
    const keysMatching = Object.keys(GLFeatureName).filter((key) => GLFeatureName[key] === name);
    const extensions = this.extensions;
    for (let i2 = 0; i2 < keysMatching.length; i2++) {
      if (extensions.has(keysMatching[i2]))
        return true;
    }
    return false;
  }
  /**
   * Returns the maximum anisotropy texture filtering value.
   *
   * @return {number} The maximum anisotropy texture filtering value.
   */
  getMaxAnisotropy() {
    return this.capabilities.getMaxAnisotropy();
  }
  /**
   * Copies data of the given source texture to the given destination texture.
   *
   * @param {Texture} srcTexture - The source texture.
   * @param {Texture} dstTexture - The destination texture.
   * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
   * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
   * @param {number} [srcLevel=0] - The source mip level to copy from.
   * @param {number} [dstLevel=0] - The destination mip level to copy to.
   */
  copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
    this.textureUtils.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, srcLevel, dstLevel);
  }
  /**
   * Copies the current bound framebuffer to the given texture.
   *
   * @param {Texture} texture - The destination texture.
   * @param {RenderContext} renderContext - The render context.
   * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
   */
  copyFramebufferToTexture(texture3, renderContext, rectangle) {
    this.textureUtils.copyFramebufferToTexture(texture3, renderContext, rectangle);
  }
  /**
   * Configures the active framebuffer from the given render context.
   *
   * @private
   * @param {RenderContext} descriptor - The render context.
   */
  _setFramebuffer(descriptor) {
    const { gl, state } = this;
    let currentFrameBuffer = null;
    if (descriptor.textures !== null) {
      const renderTarget = descriptor.renderTarget;
      const renderTargetContextData = this.get(renderTarget);
      const { samples, depthBuffer, stencilBuffer } = renderTarget;
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isRenderTarget3D = renderTarget.isRenderTarget3D === true;
      const isRenderTargetArray = renderTarget.depth > 1;
      const isXRRenderTarget = renderTarget.isXRRenderTarget === true;
      const _hasExternalTextures = isXRRenderTarget === true && renderTarget._hasExternalTextures === true;
      let msaaFb = renderTargetContextData.msaaFrameBuffer;
      let depthRenderbuffer = renderTargetContextData.depthRenderbuffer;
      const multisampledRTTExt = this.extensions.get("WEBGL_multisampled_render_to_texture");
      const multiviewExt = this.extensions.get("OVR_multiview2");
      const useMultisampledRTT = this._useMultisampledExtension(renderTarget);
      const cacheKey = getCacheKey(descriptor);
      let fb;
      if (isCube) {
        renderTargetContextData.cubeFramebuffers || (renderTargetContextData.cubeFramebuffers = {});
        fb = renderTargetContextData.cubeFramebuffers[cacheKey];
      } else if (isXRRenderTarget && _hasExternalTextures === false) {
        fb = this._xrFramebuffer;
      } else {
        renderTargetContextData.framebuffers || (renderTargetContextData.framebuffers = {});
        fb = renderTargetContextData.framebuffers[cacheKey];
      }
      if (fb === void 0) {
        fb = gl.createFramebuffer();
        state.bindFramebuffer(gl.FRAMEBUFFER, fb);
        const textures = descriptor.textures;
        const depthInvalidationArray = [];
        if (isCube) {
          renderTargetContextData.cubeFramebuffers[cacheKey] = fb;
          const { textureGPU } = this.get(textures[0]);
          const cubeFace = this.renderer._activeCubeFace;
          const mipLevel = this.renderer._activeMipmapLevel;
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + cubeFace, textureGPU, mipLevel);
        } else {
          renderTargetContextData.framebuffers[cacheKey] = fb;
          for (let i2 = 0; i2 < textures.length; i2++) {
            const texture3 = textures[i2];
            const textureData = this.get(texture3);
            textureData.renderTarget = descriptor.renderTarget;
            textureData.cacheKey = cacheKey;
            const attachment = gl.COLOR_ATTACHMENT0 + i2;
            if (renderTarget.multiview) {
              multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, attachment, textureData.textureGPU, 0, samples, 0, 2);
            } else if (isRenderTarget3D || isRenderTargetArray) {
              const layer = this.renderer._activeCubeFace;
              const mipLevel = this.renderer._activeMipmapLevel;
              gl.framebufferTextureLayer(gl.FRAMEBUFFER, attachment, textureData.textureGPU, mipLevel, layer);
            } else {
              if (useMultisampledRTT) {
                multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0, samples);
              } else {
                const mipLevel = this.renderer._activeMipmapLevel;
                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, mipLevel);
              }
            }
          }
        }
        const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
        if (renderTarget._autoAllocateDepthBuffer === true) {
          const renderbuffer = gl.createRenderbuffer();
          this.textureUtils.setupRenderBufferStorage(renderbuffer, descriptor, 0, useMultisampledRTT);
          renderTargetContextData.xrDepthRenderbuffer = renderbuffer;
          depthInvalidationArray.push(stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT);
          gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, renderbuffer);
        } else {
          if (descriptor.depthTexture !== null) {
            depthInvalidationArray.push(stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT);
            const textureData = this.get(descriptor.depthTexture);
            textureData.renderTarget = descriptor.renderTarget;
            textureData.cacheKey = cacheKey;
            if (renderTarget.multiview) {
              multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, depthStyle, textureData.textureGPU, 0, samples, 0, 2);
            } else if (_hasExternalTextures && useMultisampledRTT) {
              multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0, samples);
            } else {
              if (descriptor.depthTexture.isArrayTexture) {
                const layer = this.renderer._activeCubeFace;
                gl.framebufferTextureLayer(gl.FRAMEBUFFER, depthStyle, textureData.textureGPU, 0, layer);
              } else {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0);
              }
            }
          }
        }
        renderTargetContextData.depthInvalidationArray = depthInvalidationArray;
      } else {
        const isRenderCameraDepthArray = this._isRenderCameraDepthArray(descriptor);
        if (isRenderCameraDepthArray) {
          state.bindFramebuffer(gl.FRAMEBUFFER, fb);
          const layer = this.renderer._activeCubeFace;
          const depthData = this.get(descriptor.depthTexture);
          const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
          gl.framebufferTextureLayer(
            gl.FRAMEBUFFER,
            depthStyle,
            depthData.textureGPU,
            0,
            layer
          );
        }
        if ((isXRRenderTarget || useMultisampledRTT || renderTarget.multiview) && renderTarget._isOpaqueFramebuffer !== true) {
          state.bindFramebuffer(gl.FRAMEBUFFER, fb);
          const textureData = this.get(descriptor.textures[0]);
          if (renderTarget.multiview) {
            multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, textureData.textureGPU, 0, samples, 0, 2);
          } else if (useMultisampledRTT) {
            multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureData.textureGPU, 0, samples);
          } else {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureData.textureGPU, 0);
          }
          const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
          if (renderTarget._autoAllocateDepthBuffer === true) {
            const renderbuffer = renderTargetContextData.xrDepthRenderbuffer;
            gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, renderbuffer);
          } else {
            const textureData2 = this.get(descriptor.depthTexture);
            if (renderTarget.multiview) {
              multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, depthStyle, textureData2.textureGPU, 0, samples, 0, 2);
            } else if (useMultisampledRTT) {
              multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData2.textureGPU, 0, samples);
            } else {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData2.textureGPU, 0);
            }
          }
        }
      }
      if (samples > 0 && useMultisampledRTT === false && !renderTarget.multiview) {
        if (msaaFb === void 0) {
          const invalidationArray = [];
          msaaFb = gl.createFramebuffer();
          state.bindFramebuffer(gl.FRAMEBUFFER, msaaFb);
          const msaaRenderbuffers = [];
          const textures = descriptor.textures;
          for (let i2 = 0; i2 < textures.length; i2++) {
            msaaRenderbuffers[i2] = gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, msaaRenderbuffers[i2]);
            invalidationArray.push(gl.COLOR_ATTACHMENT0 + i2);
            const texture3 = descriptor.textures[i2];
            const textureData = this.get(texture3);
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, textureData.glInternalFormat, descriptor.width, descriptor.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i2, gl.RENDERBUFFER, msaaRenderbuffers[i2]);
          }
          gl.bindRenderbuffer(gl.RENDERBUFFER, null);
          renderTargetContextData.msaaFrameBuffer = msaaFb;
          renderTargetContextData.msaaRenderbuffers = msaaRenderbuffers;
          if (depthBuffer && depthRenderbuffer === void 0) {
            depthRenderbuffer = gl.createRenderbuffer();
            this.textureUtils.setupRenderBufferStorage(depthRenderbuffer, descriptor, samples);
            renderTargetContextData.depthRenderbuffer = depthRenderbuffer;
            const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
            invalidationArray.push(depthStyle);
          }
          renderTargetContextData.invalidationArray = invalidationArray;
        }
        currentFrameBuffer = renderTargetContextData.msaaFrameBuffer;
      } else {
        currentFrameBuffer = fb;
      }
      state.drawBuffers(descriptor, fb);
    }
    state.bindFramebuffer(gl.FRAMEBUFFER, currentFrameBuffer);
  }
  /**
   * Computes the VAO key for the given index and attributes.
   *
   * @private
   * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.
   * @return {string} The VAO key.
   */
  _getVaoKey(attributes) {
    let key = "";
    for (let i2 = 0; i2 < attributes.length; i2++) {
      const attributeData = this.get(attributes[i2]);
      key += ":" + attributeData.id;
    }
    return key;
  }
  /**
   * Creates a VAO from the index and attributes.
   *
   * @private
   * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.
   * @return {Object} The VAO data.
   */
  _createVao(attributes) {
    const { gl } = this;
    const vaoGPU = gl.createVertexArray();
    gl.bindVertexArray(vaoGPU);
    for (let i2 = 0; i2 < attributes.length; i2++) {
      const attribute3 = attributes[i2];
      const attributeData = this.get(attribute3);
      gl.bindBuffer(gl.ARRAY_BUFFER, attributeData.bufferGPU);
      gl.enableVertexAttribArray(i2);
      let stride, offset;
      if (attribute3.isInterleavedBufferAttribute === true) {
        stride = attribute3.data.stride * attributeData.bytesPerElement;
        offset = attribute3.offset * attributeData.bytesPerElement;
      } else {
        stride = 0;
        offset = 0;
      }
      if (attributeData.isInteger) {
        gl.vertexAttribIPointer(i2, attribute3.itemSize, attributeData.type, stride, offset);
      } else {
        gl.vertexAttribPointer(i2, attribute3.itemSize, attributeData.type, attribute3.normalized, stride, offset);
      }
      if (attribute3.isInstancedBufferAttribute && !attribute3.isInterleavedBufferAttribute) {
        gl.vertexAttribDivisor(i2, attribute3.meshPerAttribute);
      } else if (attribute3.isInterleavedBufferAttribute && attribute3.data.isInstancedInterleavedBuffer) {
        gl.vertexAttribDivisor(i2, attribute3.data.meshPerAttribute);
      }
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return vaoGPU;
  }
  /**
   * Creates a transform feedback from the given transform buffers.
   *
   * @private
   * @param {Array<DualAttributeData>} transformBuffers - The transform buffers.
   * @return {WebGLTransformFeedback} The transform feedback.
   */
  _getTransformFeedback(transformBuffers) {
    let key = "";
    for (let i2 = 0; i2 < transformBuffers.length; i2++) {
      key += ":" + transformBuffers[i2].id;
    }
    let transformFeedbackGPU = this.transformFeedbackCache[key];
    if (transformFeedbackGPU !== void 0) {
      return transformFeedbackGPU;
    }
    const { gl } = this;
    transformFeedbackGPU = gl.createTransformFeedback();
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);
    for (let i2 = 0; i2 < transformBuffers.length; i2++) {
      const attributeData = transformBuffers[i2];
      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i2, attributeData.transformBuffer);
    }
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
    this.transformFeedbackCache[key] = transformFeedbackGPU;
    return transformFeedbackGPU;
  }
  /**
   * Setups the given bindings.
   *
   * @private
   * @param {Array<BindGroup>} bindings - The bindings.
   * @param {WebGLProgram} programGPU - The WebGL program.
   */
  _setupBindings(bindings, programGPU) {
    const gl = this.gl;
    for (const bindGroup of bindings) {
      for (const binding of bindGroup.bindings) {
        const bindingData = this.get(binding);
        const index6 = bindingData.index;
        if (binding.isUniformsGroup || binding.isUniformBuffer) {
          const location = gl.getUniformBlockIndex(programGPU, binding.name);
          gl.uniformBlockBinding(programGPU, location, index6);
        } else if (binding.isSampledTexture) {
          const location = gl.getUniformLocation(programGPU, binding.name);
          gl.uniform1i(location, index6);
        }
      }
    }
  }
  /**
   * Binds the given uniforms.
   *
   * @private
   * @param {Array<BindGroup>} bindings - The bindings.
   */
  _bindUniforms(bindings) {
    const { gl, state } = this;
    for (const bindGroup of bindings) {
      for (const binding of bindGroup.bindings) {
        const bindingData = this.get(binding);
        const index6 = bindingData.index;
        if (binding.isUniformsGroup || binding.isUniformBuffer) {
          state.bindBufferBase(gl.UNIFORM_BUFFER, index6, bindingData.bufferGPU);
        } else if (binding.isSampledTexture) {
          state.bindTexture(bindingData.glTextureType, bindingData.textureGPU, gl.TEXTURE0 + index6);
        }
      }
    }
  }
  /**
   * The method ensures multisampled render targets are resolved.
   *
   * @private
   * @param {RenderContext} renderContext - The render context.
   */
  _resolveRenderTarget(renderContext) {
    const { gl, state } = this;
    const renderTarget = renderContext.renderTarget;
    if (renderContext.textures !== null && renderTarget) {
      const renderTargetContextData = this.get(renderTarget);
      if (renderTarget.samples > 0 && this._useMultisampledExtension(renderTarget) === false) {
        const fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];
        let mask = gl.COLOR_BUFFER_BIT;
        if (renderTarget.resolveDepthBuffer) {
          if (renderTarget.depthBuffer)
            mask |= gl.DEPTH_BUFFER_BIT;
          if (renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer)
            mask |= gl.STENCIL_BUFFER_BIT;
        }
        const msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;
        const msaaRenderbuffers = renderTargetContextData.msaaRenderbuffers;
        const textures = renderContext.textures;
        const isMRT = textures.length > 1;
        state.bindFramebuffer(gl.READ_FRAMEBUFFER, msaaFrameBuffer);
        state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
        if (isMRT) {
          for (let i2 = 0; i2 < textures.length; i2++) {
            gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i2, gl.RENDERBUFFER, null);
            gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i2, gl.TEXTURE_2D, null, 0);
          }
        }
        for (let i2 = 0; i2 < textures.length; i2++) {
          if (isMRT) {
            const { textureGPU } = this.get(textures[i2]);
            gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, msaaRenderbuffers[i2]);
            gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureGPU, 0);
          }
          if (renderContext.scissor) {
            const { x: x2, y: y2, width, height } = renderContext.scissorValue;
            const viewY = renderContext.height - height - y2;
            gl.blitFramebuffer(x2, viewY, x2 + width, viewY + height, x2, viewY, x2 + width, viewY + height, mask, gl.NEAREST);
          } else {
            gl.blitFramebuffer(0, 0, renderContext.width, renderContext.height, 0, 0, renderContext.width, renderContext.height, mask, gl.NEAREST);
          }
        }
        if (isMRT) {
          for (let i2 = 0; i2 < textures.length; i2++) {
            const { textureGPU } = this.get(textures[i2]);
            gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i2, gl.RENDERBUFFER, msaaRenderbuffers[i2]);
            gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i2, gl.TEXTURE_2D, textureGPU, 0);
          }
        }
        if (this._supportsInvalidateFramebuffer === true) {
          gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray);
        }
      } else if (renderTarget.resolveDepthBuffer === false && renderTargetContextData.framebuffers) {
        const fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];
        state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
        gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, renderTargetContextData.depthInvalidationArray);
      }
    }
  }
  /**
   * Returns `true` if the `WEBGL_multisampled_render_to_texture` extension
   * should be used when MSAA is enabled.
   *
   * @private
   * @param {RenderTarget} renderTarget - The render target that should be multisampled.
   * @return {boolean} Whether to use the `WEBGL_multisampled_render_to_texture` extension for MSAA or not.
   */
  _useMultisampledExtension(renderTarget) {
    if (renderTarget.multiview === true) {
      return true;
    }
    return renderTarget.samples > 0 && this.extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTarget._autoAllocateDepthBuffer !== false;
  }
  /**
   * Frees internal resources.
   */
  dispose() {
    const extension = this.extensions.get("WEBGL_lose_context");
    if (extension)
      extension.loseContext();
    this.renderer.domElement.removeEventListener("webglcontextlost", this._onContextLost);
  }
};
var GPUPrimitiveTopology = {
  PointList: "point-list",
  LineList: "line-list",
  LineStrip: "line-strip",
  TriangleList: "triangle-list",
  TriangleStrip: "triangle-strip"
};
var GPUCompareFunction = {
  Never: "never",
  Less: "less",
  Equal: "equal",
  LessEqual: "less-equal",
  Greater: "greater",
  NotEqual: "not-equal",
  GreaterEqual: "greater-equal",
  Always: "always"
};
var GPUStoreOp = {
  Store: "store"
};
var GPULoadOp = {
  Load: "load",
  Clear: "clear"
};
var GPUFrontFace = {
  CCW: "ccw",
  CW: "cw"
};
var GPUCullMode = {
  None: "none",
  Back: "back"
};
var GPUIndexFormat = {
  Uint16: "uint16",
  Uint32: "uint32"
};
var GPUTextureFormat = {
  // 8-bit formats
  R8Unorm: "r8unorm",
  R8Snorm: "r8snorm",
  R8Uint: "r8uint",
  R8Sint: "r8sint",
  // 16-bit formats
  R16Uint: "r16uint",
  R16Sint: "r16sint",
  R16Float: "r16float",
  RG8Unorm: "rg8unorm",
  RG8Snorm: "rg8snorm",
  RG8Uint: "rg8uint",
  RG8Sint: "rg8sint",
  // 32-bit formats
  R32Uint: "r32uint",
  R32Sint: "r32sint",
  R32Float: "r32float",
  RG16Uint: "rg16uint",
  RG16Sint: "rg16sint",
  RG16Float: "rg16float",
  RGBA8Unorm: "rgba8unorm",
  RGBA8UnormSRGB: "rgba8unorm-srgb",
  RGBA8Snorm: "rgba8snorm",
  RGBA8Uint: "rgba8uint",
  RGBA8Sint: "rgba8sint",
  BGRA8Unorm: "bgra8unorm",
  BGRA8UnormSRGB: "bgra8unorm-srgb",
  // Packed 32-bit formats
  RGB9E5UFloat: "rgb9e5ufloat",
  RGB10A2Unorm: "rgb10a2unorm",
  RG11B10UFloat: "rg11b10ufloat",
  // 64-bit formats
  RG32Uint: "rg32uint",
  RG32Sint: "rg32sint",
  RG32Float: "rg32float",
  RGBA16Uint: "rgba16uint",
  RGBA16Sint: "rgba16sint",
  RGBA16Float: "rgba16float",
  // 128-bit formats
  RGBA32Uint: "rgba32uint",
  RGBA32Sint: "rgba32sint",
  RGBA32Float: "rgba32float",
  Depth16Unorm: "depth16unorm",
  Depth24Plus: "depth24plus",
  Depth24PlusStencil8: "depth24plus-stencil8",
  Depth32Float: "depth32float",
  // 'depth32float-stencil8' extension
  Depth32FloatStencil8: "depth32float-stencil8",
  // BC compressed formats usable if 'texture-compression-bc' is both
  // supported by the device/user agent and enabled in requestDevice.
  BC1RGBAUnorm: "bc1-rgba-unorm",
  BC1RGBAUnormSRGB: "bc1-rgba-unorm-srgb",
  BC2RGBAUnorm: "bc2-rgba-unorm",
  BC2RGBAUnormSRGB: "bc2-rgba-unorm-srgb",
  BC3RGBAUnorm: "bc3-rgba-unorm",
  BC3RGBAUnormSRGB: "bc3-rgba-unorm-srgb",
  BC4RUnorm: "bc4-r-unorm",
  BC4RSnorm: "bc4-r-snorm",
  BC5RGUnorm: "bc5-rg-unorm",
  BC5RGSnorm: "bc5-rg-snorm",
  BC6HRGBUFloat: "bc6h-rgb-ufloat",
  BC6HRGBFloat: "bc6h-rgb-float",
  BC7RGBAUnorm: "bc7-rgba-unorm",
  BC7RGBAUnormSRGB: "bc7-rgba-unorm-srgb",
  // ETC2 compressed formats usable if 'texture-compression-etc2' is both
  // supported by the device/user agent and enabled in requestDevice.
  ETC2RGB8Unorm: "etc2-rgb8unorm",
  ETC2RGB8UnormSRGB: "etc2-rgb8unorm-srgb",
  ETC2RGB8A1Unorm: "etc2-rgb8a1unorm",
  ETC2RGB8A1UnormSRGB: "etc2-rgb8a1unorm-srgb",
  ETC2RGBA8Unorm: "etc2-rgba8unorm",
  ETC2RGBA8UnormSRGB: "etc2-rgba8unorm-srgb",
  EACR11Unorm: "eac-r11unorm",
  EACR11Snorm: "eac-r11snorm",
  EACRG11Unorm: "eac-rg11unorm",
  EACRG11Snorm: "eac-rg11snorm",
  // ASTC compressed formats usable if 'texture-compression-astc' is both
  // supported by the device/user agent and enabled in requestDevice.
  ASTC4x4Unorm: "astc-4x4-unorm",
  ASTC4x4UnormSRGB: "astc-4x4-unorm-srgb",
  ASTC5x4Unorm: "astc-5x4-unorm",
  ASTC5x4UnormSRGB: "astc-5x4-unorm-srgb",
  ASTC5x5Unorm: "astc-5x5-unorm",
  ASTC5x5UnormSRGB: "astc-5x5-unorm-srgb",
  ASTC6x5Unorm: "astc-6x5-unorm",
  ASTC6x5UnormSRGB: "astc-6x5-unorm-srgb",
  ASTC6x6Unorm: "astc-6x6-unorm",
  ASTC6x6UnormSRGB: "astc-6x6-unorm-srgb",
  ASTC8x5Unorm: "astc-8x5-unorm",
  ASTC8x5UnormSRGB: "astc-8x5-unorm-srgb",
  ASTC8x6Unorm: "astc-8x6-unorm",
  ASTC8x6UnormSRGB: "astc-8x6-unorm-srgb",
  ASTC8x8Unorm: "astc-8x8-unorm",
  ASTC8x8UnormSRGB: "astc-8x8-unorm-srgb",
  ASTC10x5Unorm: "astc-10x5-unorm",
  ASTC10x5UnormSRGB: "astc-10x5-unorm-srgb",
  ASTC10x6Unorm: "astc-10x6-unorm",
  ASTC10x6UnormSRGB: "astc-10x6-unorm-srgb",
  ASTC10x8Unorm: "astc-10x8-unorm",
  ASTC10x8UnormSRGB: "astc-10x8-unorm-srgb",
  ASTC10x10Unorm: "astc-10x10-unorm",
  ASTC10x10UnormSRGB: "astc-10x10-unorm-srgb",
  ASTC12x10Unorm: "astc-12x10-unorm",
  ASTC12x10UnormSRGB: "astc-12x10-unorm-srgb",
  ASTC12x12Unorm: "astc-12x12-unorm",
  ASTC12x12UnormSRGB: "astc-12x12-unorm-srgb"
};
var GPUAddressMode = {
  ClampToEdge: "clamp-to-edge",
  Repeat: "repeat",
  MirrorRepeat: "mirror-repeat"
};
var GPUFilterMode = {
  Linear: "linear",
  Nearest: "nearest"
};
var GPUBlendFactor = {
  Zero: "zero",
  One: "one",
  Src: "src",
  OneMinusSrc: "one-minus-src",
  SrcAlpha: "src-alpha",
  OneMinusSrcAlpha: "one-minus-src-alpha",
  Dst: "dst",
  OneMinusDst: "one-minus-dst",
  DstAlpha: "dst-alpha",
  OneMinusDstAlpha: "one-minus-dst-alpha",
  SrcAlphaSaturated: "src-alpha-saturated",
  Constant: "constant",
  OneMinusConstant: "one-minus-constant"
};
var GPUBlendOperation = {
  Add: "add",
  Subtract: "subtract",
  ReverseSubtract: "reverse-subtract",
  Min: "min",
  Max: "max"
};
var GPUColorWriteFlags = {
  None: 0,
  All: 15
};
var GPUStencilOperation = {
  Keep: "keep",
  Zero: "zero",
  Replace: "replace",
  Invert: "invert",
  IncrementClamp: "increment-clamp",
  DecrementClamp: "decrement-clamp",
  IncrementWrap: "increment-wrap",
  DecrementWrap: "decrement-wrap"
};
var GPUBufferBindingType = {
  Storage: "storage",
  ReadOnlyStorage: "read-only-storage"
};
var GPUStorageTextureAccess = {
  WriteOnly: "write-only",
  ReadOnly: "read-only",
  ReadWrite: "read-write"
};
var GPUSamplerBindingType = {
  NonFiltering: "non-filtering",
  Comparison: "comparison"
};
var GPUTextureSampleType = {
  Float: "float",
  UnfilterableFloat: "unfilterable-float",
  Depth: "depth",
  SInt: "sint",
  UInt: "uint"
};
var GPUTextureDimension = {
  TwoD: "2d",
  ThreeD: "3d"
};
var GPUTextureViewDimension = {
  TwoD: "2d",
  TwoDArray: "2d-array",
  Cube: "cube",
  ThreeD: "3d"
};
var GPUTextureAspect = {
  All: "all"
};
var GPUInputStepMode = {
  Vertex: "vertex",
  Instance: "instance"
};
var GPUFeatureName = {
  CoreFeaturesAndLimits: "core-features-and-limits",
  DepthClipControl: "depth-clip-control",
  Depth32FloatStencil8: "depth32float-stencil8",
  TextureCompressionBC: "texture-compression-bc",
  TextureCompressionBCSliced3D: "texture-compression-bc-sliced-3d",
  TextureCompressionETC2: "texture-compression-etc2",
  TextureCompressionASTC: "texture-compression-astc",
  TextureCompressionASTCSliced3D: "texture-compression-astc-sliced-3d",
  TimestampQuery: "timestamp-query",
  IndirectFirstInstance: "indirect-first-instance",
  ShaderF16: "shader-f16",
  RG11B10UFloat: "rg11b10ufloat-renderable",
  BGRA8UNormStorage: "bgra8unorm-storage",
  Float32Filterable: "float32-filterable",
  Float32Blendable: "float32-blendable",
  ClipDistances: "clip-distances",
  DualSourceBlending: "dual-source-blending",
  Subgroups: "subgroups",
  TextureFormatsTier1: "texture-formats-tier1",
  TextureFormatsTier2: "texture-formats-tier2"
};
var NodeSampler = class extends Sampler {
  /**
   * Constructs a new node-based sampler.
   *
   * @param {string} name - The samplers's name.
   * @param {TextureNode} textureNode - The texture node.
   * @param {UniformGroupNode} groupNode - The uniform group node.
   */
  constructor(name, textureNode, groupNode) {
    super(name, textureNode ? textureNode.value : null);
    this.textureNode = textureNode;
    this.groupNode = groupNode;
  }
  /**
   * Updates the texture value of this sampler.
   */
  update() {
    this.texture = this.textureNode.value;
  }
};
var StorageBuffer = class extends Buffer {
  /**
   * Constructs a new uniform buffer.
   *
   * @param {string} name - The buffer's name.
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  constructor(name, attribute3) {
    super(name, attribute3 ? attribute3.array : null);
    this.attribute = attribute3;
    this.isStorageBuffer = true;
  }
};
var _id2 = 0;
var NodeStorageBuffer = class extends StorageBuffer {
  /**
   * Constructs a new node-based storage buffer.
   *
   * @param {StorageBufferNode} nodeUniform - The storage buffer node.
   * @param {UniformGroupNode} groupNode - The uniform group node.
   */
  constructor(nodeUniform, groupNode) {
    super("StorageBuffer_" + _id2++, nodeUniform ? nodeUniform.value : null);
    this.nodeUniform = nodeUniform;
    this.access = nodeUniform ? nodeUniform.access : NodeAccess.READ_WRITE;
    this.groupNode = groupNode;
  }
  /**
   * The storage buffer.
   *
   * @type {BufferAttribute}
   */
  get buffer() {
    return this.nodeUniform.value;
  }
};
var WebGPUTexturePassUtils = class extends DataMap {
  /**
   * Constructs a new utility object.
   *
   * @param {GPUDevice} device - The WebGPU device.
   */
  constructor(device) {
    super();
    this.device = device;
    const mipmapVertexSource = `
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`;
    const mipmapFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`;
    const flipYFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;
    this.mipmapSampler = device.createSampler({ minFilter: GPUFilterMode.Linear });
    this.flipYSampler = device.createSampler({ minFilter: GPUFilterMode.Nearest });
    this.transferPipelines = {};
    this.flipYPipelines = {};
    this.mipmapVertexShaderModule = device.createShaderModule({
      label: "mipmapVertex",
      code: mipmapVertexSource
    });
    this.mipmapFragmentShaderModule = device.createShaderModule({
      label: "mipmapFragment",
      code: mipmapFragmentSource
    });
    this.flipYFragmentShaderModule = device.createShaderModule({
      label: "flipYFragment",
      code: flipYFragmentSource
    });
  }
  /**
   * Returns a render pipeline for the internal copy render pass. The pass
   * requires a unique render pipeline for each texture format.
   *
   * @param {string} format - The GPU texture format
   * @return {GPURenderPipeline} The GPU render pipeline.
   */
  getTransferPipeline(format2) {
    let pipeline = this.transferPipelines[format2];
    if (pipeline === void 0) {
      pipeline = this.device.createRenderPipeline({
        label: `mipmap-${format2}`,
        vertex: {
          module: this.mipmapVertexShaderModule,
          entryPoint: "main"
        },
        fragment: {
          module: this.mipmapFragmentShaderModule,
          entryPoint: "main",
          targets: [{ format: format2 }]
        },
        primitive: {
          topology: GPUPrimitiveTopology.TriangleStrip,
          stripIndexFormat: GPUIndexFormat.Uint32
        },
        layout: "auto"
      });
      this.transferPipelines[format2] = pipeline;
    }
    return pipeline;
  }
  /**
   * Returns a render pipeline for the flipY render pass. The pass
   * requires a unique render pipeline for each texture format.
   *
   * @param {string} format - The GPU texture format
   * @return {GPURenderPipeline} The GPU render pipeline.
   */
  getFlipYPipeline(format2) {
    let pipeline = this.flipYPipelines[format2];
    if (pipeline === void 0) {
      pipeline = this.device.createRenderPipeline({
        label: `flipY-${format2}`,
        vertex: {
          module: this.mipmapVertexShaderModule,
          entryPoint: "main"
        },
        fragment: {
          module: this.flipYFragmentShaderModule,
          entryPoint: "main",
          targets: [{ format: format2 }]
        },
        primitive: {
          topology: GPUPrimitiveTopology.TriangleStrip,
          stripIndexFormat: GPUIndexFormat.Uint32
        },
        layout: "auto"
      });
      this.flipYPipelines[format2] = pipeline;
    }
    return pipeline;
  }
  /**
   * Flip the contents of the given GPU texture along its vertical axis.
   *
   * @param {GPUTexture} textureGPU - The GPU texture object.
   * @param {Object} textureGPUDescriptor - The texture descriptor.
   * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.
   */
  flipY(textureGPU, textureGPUDescriptor, baseArrayLayer = 0) {
    const format2 = textureGPUDescriptor.format;
    const { width, height } = textureGPUDescriptor.size;
    const transferPipeline = this.getTransferPipeline(format2);
    const flipYPipeline = this.getFlipYPipeline(format2);
    const tempTexture = this.device.createTexture({
      size: { width, height, depthOrArrayLayers: 1 },
      format: format2,
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING
    });
    const srcView = textureGPU.createView({
      baseMipLevel: 0,
      mipLevelCount: 1,
      dimension: GPUTextureViewDimension.TwoD,
      baseArrayLayer
    });
    const dstView = tempTexture.createView({
      baseMipLevel: 0,
      mipLevelCount: 1,
      dimension: GPUTextureViewDimension.TwoD,
      baseArrayLayer: 0
    });
    const commandEncoder = this.device.createCommandEncoder({});
    const pass3 = (pipeline, sourceView, destinationView) => {
      const bindGroupLayout = pipeline.getBindGroupLayout(0);
      const bindGroup = this.device.createBindGroup({
        layout: bindGroupLayout,
        entries: [{
          binding: 0,
          resource: this.flipYSampler
        }, {
          binding: 1,
          resource: sourceView
        }]
      });
      const passEncoder = commandEncoder.beginRenderPass({
        colorAttachments: [{
          view: destinationView,
          loadOp: GPULoadOp.Clear,
          storeOp: GPUStoreOp.Store,
          clearValue: [0, 0, 0, 0]
        }]
      });
      passEncoder.setPipeline(pipeline);
      passEncoder.setBindGroup(0, bindGroup);
      passEncoder.draw(4, 1, 0, 0);
      passEncoder.end();
    };
    pass3(transferPipeline, srcView, dstView);
    pass3(flipYPipeline, dstView, srcView);
    this.device.queue.submit([commandEncoder.finish()]);
    tempTexture.destroy();
  }
  /**
   * Generates mipmaps for the given GPU texture.
   *
   * @param {GPUTexture} textureGPU - The GPU texture object.
   * @param {Object} textureGPUDescriptor - The texture descriptor.
   * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.
   */
  generateMipmaps(textureGPU, textureGPUDescriptor, baseArrayLayer = 0) {
    const textureData = this.get(textureGPU);
    if (textureData.useCount === void 0) {
      textureData.useCount = 0;
      textureData.layers = [];
    }
    const passes = textureData.layers[baseArrayLayer] || this._mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer);
    const commandEncoder = this.device.createCommandEncoder({});
    this._mipmapRunBundles(commandEncoder, passes);
    this.device.queue.submit([commandEncoder.finish()]);
    if (textureData.useCount !== 0)
      textureData.layers[baseArrayLayer] = passes;
    textureData.useCount++;
  }
  /**
   * Since multiple copy render passes are required to generate mipmaps, the passes
   * are managed as render bundles to improve performance.
   *
   * @param {GPUTexture} textureGPU - The GPU texture object.
   * @param {Object} textureGPUDescriptor - The texture descriptor.
   * @param {number} baseArrayLayer - The index of the first array layer accessible to the texture view.
   * @return {Array<Object>} An array of render bundles.
   */
  _mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer) {
    const pipeline = this.getTransferPipeline(textureGPUDescriptor.format);
    const bindGroupLayout = pipeline.getBindGroupLayout(0);
    let srcView = textureGPU.createView({
      baseMipLevel: 0,
      mipLevelCount: 1,
      dimension: GPUTextureViewDimension.TwoD,
      baseArrayLayer
    });
    const passes = [];
    for (let i2 = 1; i2 < textureGPUDescriptor.mipLevelCount; i2++) {
      const bindGroup = this.device.createBindGroup({
        layout: bindGroupLayout,
        entries: [{
          binding: 0,
          resource: this.mipmapSampler
        }, {
          binding: 1,
          resource: srcView
        }]
      });
      const dstView = textureGPU.createView({
        baseMipLevel: i2,
        mipLevelCount: 1,
        dimension: GPUTextureViewDimension.TwoD,
        baseArrayLayer
      });
      const passDescriptor = {
        colorAttachments: [{
          view: dstView,
          loadOp: GPULoadOp.Clear,
          storeOp: GPUStoreOp.Store,
          clearValue: [0, 0, 0, 0]
        }]
      };
      const passEncoder = this.device.createRenderBundleEncoder({
        colorFormats: [textureGPUDescriptor.format]
      });
      passEncoder.setPipeline(pipeline);
      passEncoder.setBindGroup(0, bindGroup);
      passEncoder.draw(4, 1, 0, 0);
      passes.push({
        renderBundles: [passEncoder.finish()],
        passDescriptor
      });
      srcView = dstView;
    }
    return passes;
  }
  /**
   * Executes the render bundles.
   *
   * @param {GPUCommandEncoder} commandEncoder - The GPU command encoder.
   * @param {Array<Object>} passes - An array of render bundles.
   */
  _mipmapRunBundles(commandEncoder, passes) {
    const levels = passes.length;
    for (let i2 = 0; i2 < levels; i2++) {
      const pass3 = passes[i2];
      const passEncoder = commandEncoder.beginRenderPass(pass3.passDescriptor);
      passEncoder.executeBundles(pass3.renderBundles);
      passEncoder.end();
    }
  }
};
var _compareToWebGPU = {
  [NeverCompare]: "never",
  [LessCompare]: "less",
  [EqualCompare]: "equal",
  [LessEqualCompare]: "less-equal",
  [GreaterCompare]: "greater",
  [GreaterEqualCompare]: "greater-equal",
  [AlwaysCompare]: "always",
  [NotEqualCompare]: "not-equal"
};
var _flipMap = [0, 1, 3, 2, 4, 5];
var WebGPUTextureUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGPUBackend} backend - The WebGPU backend.
   */
  constructor(backend) {
    this.backend = backend;
    this._passUtils = null;
    this.defaultTexture = {};
    this.defaultCubeTexture = {};
    this.defaultVideoFrame = null;
    this.colorBuffer = null;
    this.depthTexture = new DepthTexture();
    this.depthTexture.name = "depthBuffer";
  }
  /**
   * Creates a GPU sampler for the given texture.
   *
   * @param {Texture} texture - The texture to create the sampler for.
   */
  createSampler(texture3) {
    const backend = this.backend;
    const device = backend.device;
    const textureGPU = backend.get(texture3);
    const samplerDescriptorGPU = {
      addressModeU: this._convertAddressMode(texture3.wrapS),
      addressModeV: this._convertAddressMode(texture3.wrapT),
      addressModeW: this._convertAddressMode(texture3.wrapR),
      magFilter: this._convertFilterMode(texture3.magFilter),
      minFilter: this._convertFilterMode(texture3.minFilter),
      mipmapFilter: this._convertFilterMode(texture3.minFilter),
      maxAnisotropy: 1
    };
    if (samplerDescriptorGPU.magFilter === GPUFilterMode.Linear && samplerDescriptorGPU.minFilter === GPUFilterMode.Linear && samplerDescriptorGPU.mipmapFilter === GPUFilterMode.Linear) {
      samplerDescriptorGPU.maxAnisotropy = texture3.anisotropy;
    }
    if (texture3.isDepthTexture && texture3.compareFunction !== null) {
      samplerDescriptorGPU.compare = _compareToWebGPU[texture3.compareFunction];
    }
    textureGPU.sampler = device.createSampler(samplerDescriptorGPU);
  }
  /**
   * Creates a default texture for the given texture that can be used
   * as a placeholder until the actual texture is ready for usage.
   *
   * @param {Texture} texture - The texture to create a default texture for.
   */
  createDefaultTexture(texture3) {
    let textureGPU;
    const format2 = getFormat2(texture3);
    if (texture3.isCubeTexture) {
      textureGPU = this._getDefaultCubeTextureGPU(format2);
    } else {
      textureGPU = this._getDefaultTextureGPU(format2);
    }
    this.backend.get(texture3).texture = textureGPU;
  }
  /**
   * Defines a texture on the GPU for the given texture object.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  createTexture(texture3, options = {}) {
    const backend = this.backend;
    const textureData = backend.get(texture3);
    if (textureData.initialized) {
      throw new Error("WebGPUTextureUtils: Texture already initialized.");
    }
    if (texture3.isExternalTexture) {
      textureData.texture = texture3.sourceTexture;
      textureData.initialized = true;
      return;
    }
    if (options.needsMipmaps === void 0)
      options.needsMipmaps = false;
    if (options.levels === void 0)
      options.levels = 1;
    if (options.depth === void 0)
      options.depth = 1;
    const { width, height, depth: depth3, levels } = options;
    if (texture3.isFramebufferTexture) {
      if (options.renderTarget) {
        options.format = this.backend.utils.getCurrentColorFormat(options.renderTarget);
      } else {
        options.format = this.backend.utils.getPreferredCanvasFormat();
      }
    }
    const dimension = this._getDimension(texture3);
    const format2 = texture3.internalFormat || options.format || getFormat2(texture3, backend.device);
    textureData.format = format2;
    const { samples, primarySamples, isMSAA } = backend.utils.getTextureSampleData(texture3);
    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;
    if (texture3.isStorageTexture === true) {
      usage |= GPUTextureUsage.STORAGE_BINDING;
    }
    if (texture3.isCompressedTexture !== true && texture3.isCompressedArrayTexture !== true && format2 !== GPUTextureFormat.RGB9E5UFloat) {
      usage |= GPUTextureUsage.RENDER_ATTACHMENT;
    }
    const textureDescriptorGPU = {
      label: texture3.name,
      size: {
        width,
        height,
        depthOrArrayLayers: depth3
      },
      mipLevelCount: levels,
      sampleCount: primarySamples,
      dimension,
      format: format2,
      usage
    };
    if (format2 === void 0) {
      console.warn("WebGPURenderer: Texture format not supported.");
      this.createDefaultTexture(texture3);
      return;
    }
    if (texture3.isCubeTexture) {
      textureDescriptorGPU.textureBindingViewDimension = GPUTextureViewDimension.Cube;
    }
    textureData.texture = backend.device.createTexture(textureDescriptorGPU);
    if (isMSAA) {
      const msaaTextureDescriptorGPU = Object.assign({}, textureDescriptorGPU);
      msaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + "-msaa";
      msaaTextureDescriptorGPU.sampleCount = samples;
      msaaTextureDescriptorGPU.mipLevelCount = 1;
      textureData.msaaTexture = backend.device.createTexture(msaaTextureDescriptorGPU);
    }
    textureData.initialized = true;
    textureData.textureDescriptorGPU = textureDescriptorGPU;
  }
  /**
   * Destroys the GPU data for the given texture object.
   *
   * @param {Texture} texture - The texture.
   */
  destroyTexture(texture3) {
    const backend = this.backend;
    const textureData = backend.get(texture3);
    if (textureData.texture !== void 0)
      textureData.texture.destroy();
    if (textureData.msaaTexture !== void 0)
      textureData.msaaTexture.destroy();
    backend.delete(texture3);
  }
  /**
   * Destroys the GPU sampler for the given texture.
   *
   * @param {Texture} texture - The texture to destroy the sampler for.
   */
  destroySampler(texture3) {
    const backend = this.backend;
    const textureData = backend.get(texture3);
    delete textureData.sampler;
  }
  /**
   * Generates mipmaps for the given texture.
   *
   * @param {Texture} texture - The texture.
   */
  generateMipmaps(texture3) {
    const textureData = this.backend.get(texture3);
    if (texture3.isCubeTexture) {
      for (let i2 = 0; i2 < 6; i2++) {
        this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i2);
      }
    } else {
      const depth3 = texture3.image.depth || 1;
      for (let i2 = 0; i2 < depth3; i2++) {
        this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i2);
      }
    }
  }
  /**
   * Returns the color buffer representing the color
   * attachment of the default framebuffer.
   *
   * @return {GPUTexture} The color buffer.
   */
  getColorBuffer() {
    if (this.colorBuffer)
      this.colorBuffer.destroy();
    const backend = this.backend;
    const { width, height } = backend.getDrawingBufferSize();
    this.colorBuffer = backend.device.createTexture({
      label: "colorBuffer",
      size: {
        width,
        height,
        depthOrArrayLayers: 1
      },
      sampleCount: backend.utils.getSampleCount(backend.renderer.samples),
      format: backend.utils.getPreferredCanvasFormat(),
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC
    });
    return this.colorBuffer;
  }
  /**
   * Returns the depth buffer representing the depth
   * attachment of the default framebuffer.
   *
   * @param {boolean} [depth=true] - Whether depth is enabled or not.
   * @param {boolean} [stencil=false] -  Whether stencil is enabled or not.
   * @return {GPUTexture} The depth buffer.
   */
  getDepthBuffer(depth3 = true, stencil = false) {
    const backend = this.backend;
    const { width, height } = backend.getDrawingBufferSize();
    const depthTexture = this.depthTexture;
    const depthTextureGPU = backend.get(depthTexture).texture;
    let format2, type;
    if (stencil) {
      format2 = DepthStencilFormat;
      type = UnsignedInt248Type;
    } else if (depth3) {
      format2 = DepthFormat;
      type = UnsignedIntType;
    }
    if (depthTextureGPU !== void 0) {
      if (depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format2 && depthTexture.type === type) {
        return depthTextureGPU;
      }
      this.destroyTexture(depthTexture);
    }
    depthTexture.name = "depthBuffer";
    depthTexture.format = format2;
    depthTexture.type = type;
    depthTexture.image.width = width;
    depthTexture.image.height = height;
    this.createTexture(depthTexture, { width, height });
    return backend.get(depthTexture).texture;
  }
  /**
   * Uploads the updated texture data to the GPU.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  updateTexture(texture3, options) {
    const textureData = this.backend.get(texture3);
    const mipmaps = texture3.mipmaps;
    const { textureDescriptorGPU } = textureData;
    if (texture3.isRenderTargetTexture || textureDescriptorGPU === void 0)
      return;
    if (texture3.isDataTexture) {
      if (mipmaps.length > 0) {
        for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
          const mipmap = mipmaps[i2];
          this._copyBufferToTexture(mipmap, textureData.texture, textureDescriptorGPU, 0, texture3.flipY, 0, i2);
        }
      } else {
        this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture3.flipY);
      }
    } else if (texture3.isArrayTexture || texture3.isDataArrayTexture || texture3.isData3DTexture) {
      for (let i2 = 0; i2 < options.image.depth; i2++) {
        this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, i2, texture3.flipY, i2);
      }
    } else if (texture3.isCompressedTexture || texture3.isCompressedArrayTexture) {
      this._copyCompressedBufferToTexture(texture3.mipmaps, textureData.texture, textureDescriptorGPU);
    } else if (texture3.isCubeTexture) {
      this._copyCubeMapToTexture(texture3, textureData.texture, textureDescriptorGPU);
    } else {
      if (mipmaps.length > 0) {
        for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
          const mipmap = mipmaps[i2];
          this._copyImageToTexture(mipmap, textureData.texture, textureDescriptorGPU, 0, texture3.flipY, texture3.premultiplyAlpha, i2);
        }
      } else {
        this._copyImageToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture3.flipY, texture3.premultiplyAlpha);
      }
    }
    textureData.version = texture3.version;
  }
  /**
   * Returns texture data as a typed array.
   *
   * @async
   * @param {Texture} texture - The texture to copy.
   * @param {number} x - The x coordinate of the copy origin.
   * @param {number} y - The y coordinate of the copy origin.
   * @param {number} width - The width of the copy.
   * @param {number} height - The height of the copy.
   * @param {number} faceIndex - The face index.
   * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
   */
  async copyTextureToBuffer(texture3, x2, y2, width, height, faceIndex) {
    const device = this.backend.device;
    const textureData = this.backend.get(texture3);
    const textureGPU = textureData.texture;
    const format2 = textureData.textureDescriptorGPU.format;
    const bytesPerTexel = this._getBytesPerTexel(format2);
    let bytesPerRow = width * bytesPerTexel;
    bytesPerRow = Math.ceil(bytesPerRow / 256) * 256;
    const readBuffer = device.createBuffer(
      {
        size: (height - 1) * bytesPerRow + width * bytesPerTexel,
        // see https://github.com/mrdoob/three.js/issues/31658#issuecomment-3229442010
        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
      }
    );
    const encoder = device.createCommandEncoder();
    encoder.copyTextureToBuffer(
      {
        texture: textureGPU,
        origin: { x: x2, y: y2, z: faceIndex }
      },
      {
        buffer: readBuffer,
        bytesPerRow
      },
      {
        width,
        height
      }
    );
    const typedArrayType = this._getTypedArrayType(format2);
    device.queue.submit([encoder.finish()]);
    await readBuffer.mapAsync(GPUMapMode.READ);
    const buffer3 = readBuffer.getMappedRange();
    return new typedArrayType(buffer3);
  }
  /**
   * Returns the default GPU texture for the given format.
   *
   * @private
   * @param {string} format - The GPU format.
   * @return {GPUTexture} The GPU texture.
   */
  _getDefaultTextureGPU(format2) {
    let defaultTexture = this.defaultTexture[format2];
    if (defaultTexture === void 0) {
      const texture3 = new Texture();
      texture3.minFilter = NearestFilter;
      texture3.magFilter = NearestFilter;
      this.createTexture(texture3, { width: 1, height: 1, format: format2 });
      this.defaultTexture[format2] = defaultTexture = texture3;
    }
    return this.backend.get(defaultTexture).texture;
  }
  /**
   * Returns the default GPU cube texture for the given format.
   *
   * @private
   * @param {string} format - The GPU format.
   * @return {GPUTexture} The GPU texture.
   */
  _getDefaultCubeTextureGPU(format2) {
    let defaultCubeTexture = this.defaultTexture[format2];
    if (defaultCubeTexture === void 0) {
      const texture3 = new CubeTexture();
      texture3.minFilter = NearestFilter;
      texture3.magFilter = NearestFilter;
      this.createTexture(texture3, { width: 1, height: 1, depth: 6 });
      this.defaultCubeTexture[format2] = defaultCubeTexture = texture3;
    }
    return this.backend.get(defaultCubeTexture).texture;
  }
  /**
   * Uploads cube texture image data to the GPU memory.
   *
   * @private
   * @param {CubeTexture} texture - The cube texture.
   * @param {GPUTexture} textureGPU - The GPU texture.
   * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
   */
  _copyCubeMapToTexture(texture3, textureGPU, textureDescriptorGPU) {
    const images = texture3.images;
    const mipmaps = texture3.mipmaps;
    for (let i2 = 0; i2 < 6; i2++) {
      const image = images[i2];
      const flipIndex = texture3.flipY === true ? _flipMap[i2] : i2;
      if (image.isDataTexture) {
        this._copyBufferToTexture(image.image, textureGPU, textureDescriptorGPU, flipIndex, texture3.flipY);
      } else {
        this._copyImageToTexture(image, textureGPU, textureDescriptorGPU, flipIndex, texture3.flipY, texture3.premultiplyAlpha);
      }
      for (let j2 = 0; j2 < mipmaps.length; j2++) {
        const mipmap = mipmaps[j2];
        const image2 = mipmap.images[i2];
        if (image2.isDataTexture) {
          this._copyBufferToTexture(image2.image, textureGPU, textureDescriptorGPU, flipIndex, texture3.flipY, 0, j2 + 1);
        } else {
          this._copyImageToTexture(image2, textureGPU, textureDescriptorGPU, flipIndex, texture3.flipY, texture3.premultiplyAlpha, j2 + 1);
        }
      }
    }
  }
  /**
   * Uploads texture image data to the GPU memory.
   *
   * @private
   * @param {HTMLImageElement|ImageBitmap|HTMLCanvasElement} image - The image data.
   * @param {GPUTexture} textureGPU - The GPU texture.
   * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
   * @param {number} originDepth - The origin depth.
   * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.
   * @param {boolean} premultiplyAlpha - Whether the texture should have its RGB channels premultiplied by the alpha channel or not.
   * @param {number} [mipLevel=0] - The mip level where the data should be copied to.
   */
  _copyImageToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY, premultiplyAlpha3, mipLevel = 0) {
    const device = this.backend.device;
    const width = mipLevel > 0 ? image.width : textureDescriptorGPU.size.width;
    const height = mipLevel > 0 ? image.height : textureDescriptorGPU.size.height;
    device.queue.copyExternalImageToTexture(
      {
        source: image,
        flipY
      },
      {
        texture: textureGPU,
        mipLevel,
        origin: { x: 0, y: 0, z: originDepth },
        premultipliedAlpha: premultiplyAlpha3
      },
      {
        width,
        height,
        depthOrArrayLayers: 1
      }
    );
  }
  /**
   * Returns the pass utils singleton.
   *
   * @private
   * @return {WebGPUTexturePassUtils} The utils instance.
   */
  _getPassUtils() {
    let passUtils = this._passUtils;
    if (passUtils === null) {
      this._passUtils = passUtils = new WebGPUTexturePassUtils(this.backend.device);
    }
    return passUtils;
  }
  /**
   * Generates mipmaps for the given GPU texture.
   *
   * @private
   * @param {GPUTexture} textureGPU - The GPU texture object.
   * @param {Object} textureDescriptorGPU - The texture descriptor.
   * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.
   */
  _generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer = 0) {
    this._getPassUtils().generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer);
  }
  /**
   * Flip the contents of the given GPU texture along its vertical axis.
   *
   * @private
   * @param {GPUTexture} textureGPU - The GPU texture object.
   * @param {Object} textureDescriptorGPU - The texture descriptor.
   * @param {number} [originDepth=0] - The origin depth.
   */
  _flipY(textureGPU, textureDescriptorGPU, originDepth = 0) {
    this._getPassUtils().flipY(textureGPU, textureDescriptorGPU, originDepth);
  }
  /**
   * Uploads texture buffer data to the GPU memory.
   *
   * @private
   * @param {Object} image - An object defining the image buffer data.
   * @param {GPUTexture} textureGPU - The GPU texture.
   * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
   * @param {number} originDepth - The origin depth.
   * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.
   * @param {number} [depth=0] - The depth offset when copying array or 3D texture data.
   * @param {number} [mipLevel=0] - The mip level where the data should be copied to.
   */
  _copyBufferToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY, depth3 = 0, mipLevel = 0) {
    const device = this.backend.device;
    const data = image.data;
    const bytesPerTexel = this._getBytesPerTexel(textureDescriptorGPU.format);
    const bytesPerRow = image.width * bytesPerTexel;
    device.queue.writeTexture(
      {
        texture: textureGPU,
        mipLevel,
        origin: { x: 0, y: 0, z: originDepth }
      },
      data,
      {
        offset: image.width * image.height * bytesPerTexel * depth3,
        bytesPerRow
      },
      {
        width: image.width,
        height: image.height,
        depthOrArrayLayers: 1
      }
    );
    if (flipY === true) {
      this._flipY(textureGPU, textureDescriptorGPU, originDepth);
    }
  }
  /**
   * Uploads compressed texture data to the GPU memory.
   *
   * @private
   * @param {Array<Object>} mipmaps - An array with mipmap data.
   * @param {GPUTexture} textureGPU - The GPU texture.
   * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
   */
  _copyCompressedBufferToTexture(mipmaps, textureGPU, textureDescriptorGPU) {
    const device = this.backend.device;
    const blockData = this._getBlockData(textureDescriptorGPU.format);
    const isArrayTexture = textureDescriptorGPU.size.depthOrArrayLayers > 1;
    for (let i2 = 0; i2 < mipmaps.length; i2++) {
      const mipmap = mipmaps[i2];
      const width = mipmap.width;
      const height = mipmap.height;
      const depth3 = isArrayTexture ? textureDescriptorGPU.size.depthOrArrayLayers : 1;
      const bytesPerRow = Math.ceil(width / blockData.width) * blockData.byteLength;
      const bytesPerImage = bytesPerRow * Math.ceil(height / blockData.height);
      for (let j2 = 0; j2 < depth3; j2++) {
        device.queue.writeTexture(
          {
            texture: textureGPU,
            mipLevel: i2,
            origin: { x: 0, y: 0, z: j2 }
          },
          mipmap.data,
          {
            offset: j2 * bytesPerImage,
            bytesPerRow,
            rowsPerImage: Math.ceil(height / blockData.height)
          },
          {
            width: Math.ceil(width / blockData.width) * blockData.width,
            height: Math.ceil(height / blockData.height) * blockData.height,
            depthOrArrayLayers: 1
          }
        );
      }
    }
  }
  /**
   * This method is only relevant for compressed texture formats. It returns a block
   * data descriptor for the given GPU compressed texture format.
   *
   * @private
   * @param {string} format - The GPU compressed texture format.
   * @return {Object} The block data descriptor.
   */
  _getBlockData(format2) {
    if (format2 === GPUTextureFormat.BC1RGBAUnorm || format2 === GPUTextureFormat.BC1RGBAUnormSRGB)
      return { byteLength: 8, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.BC2RGBAUnorm || format2 === GPUTextureFormat.BC2RGBAUnormSRGB)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.BC3RGBAUnorm || format2 === GPUTextureFormat.BC3RGBAUnormSRGB)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.BC4RUnorm || format2 === GPUTextureFormat.BC4RSnorm)
      return { byteLength: 8, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.BC5RGUnorm || format2 === GPUTextureFormat.BC5RGSnorm)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.BC6HRGBUFloat || format2 === GPUTextureFormat.BC6HRGBFloat)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.BC7RGBAUnorm || format2 === GPUTextureFormat.BC7RGBAUnormSRGB)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.ETC2RGB8Unorm || format2 === GPUTextureFormat.ETC2RGB8UnormSRGB)
      return { byteLength: 8, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.ETC2RGB8A1Unorm || format2 === GPUTextureFormat.ETC2RGB8A1UnormSRGB)
      return { byteLength: 8, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.ETC2RGBA8Unorm || format2 === GPUTextureFormat.ETC2RGBA8UnormSRGB)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.EACR11Unorm)
      return { byteLength: 8, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.EACR11Snorm)
      return { byteLength: 8, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.EACRG11Unorm)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.EACRG11Snorm)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.ASTC4x4Unorm || format2 === GPUTextureFormat.ASTC4x4UnormSRGB)
      return { byteLength: 16, width: 4, height: 4 };
    if (format2 === GPUTextureFormat.ASTC5x4Unorm || format2 === GPUTextureFormat.ASTC5x4UnormSRGB)
      return { byteLength: 16, width: 5, height: 4 };
    if (format2 === GPUTextureFormat.ASTC5x5Unorm || format2 === GPUTextureFormat.ASTC5x5UnormSRGB)
      return { byteLength: 16, width: 5, height: 5 };
    if (format2 === GPUTextureFormat.ASTC6x5Unorm || format2 === GPUTextureFormat.ASTC6x5UnormSRGB)
      return { byteLength: 16, width: 6, height: 5 };
    if (format2 === GPUTextureFormat.ASTC6x6Unorm || format2 === GPUTextureFormat.ASTC6x6UnormSRGB)
      return { byteLength: 16, width: 6, height: 6 };
    if (format2 === GPUTextureFormat.ASTC8x5Unorm || format2 === GPUTextureFormat.ASTC8x5UnormSRGB)
      return { byteLength: 16, width: 8, height: 5 };
    if (format2 === GPUTextureFormat.ASTC8x6Unorm || format2 === GPUTextureFormat.ASTC8x6UnormSRGB)
      return { byteLength: 16, width: 8, height: 6 };
    if (format2 === GPUTextureFormat.ASTC8x8Unorm || format2 === GPUTextureFormat.ASTC8x8UnormSRGB)
      return { byteLength: 16, width: 8, height: 8 };
    if (format2 === GPUTextureFormat.ASTC10x5Unorm || format2 === GPUTextureFormat.ASTC10x5UnormSRGB)
      return { byteLength: 16, width: 10, height: 5 };
    if (format2 === GPUTextureFormat.ASTC10x6Unorm || format2 === GPUTextureFormat.ASTC10x6UnormSRGB)
      return { byteLength: 16, width: 10, height: 6 };
    if (format2 === GPUTextureFormat.ASTC10x8Unorm || format2 === GPUTextureFormat.ASTC10x8UnormSRGB)
      return { byteLength: 16, width: 10, height: 8 };
    if (format2 === GPUTextureFormat.ASTC10x10Unorm || format2 === GPUTextureFormat.ASTC10x10UnormSRGB)
      return { byteLength: 16, width: 10, height: 10 };
    if (format2 === GPUTextureFormat.ASTC12x10Unorm || format2 === GPUTextureFormat.ASTC12x10UnormSRGB)
      return { byteLength: 16, width: 12, height: 10 };
    if (format2 === GPUTextureFormat.ASTC12x12Unorm || format2 === GPUTextureFormat.ASTC12x12UnormSRGB)
      return { byteLength: 16, width: 12, height: 12 };
  }
  /**
   * Converts the three.js uv wrapping constants to GPU address mode constants.
   *
   * @private
   * @param {number} value - The three.js constant defining a uv wrapping mode.
   * @return {string} The GPU address mode.
   */
  _convertAddressMode(value) {
    let addressMode = GPUAddressMode.ClampToEdge;
    if (value === RepeatWrapping) {
      addressMode = GPUAddressMode.Repeat;
    } else if (value === MirroredRepeatWrapping) {
      addressMode = GPUAddressMode.MirrorRepeat;
    }
    return addressMode;
  }
  /**
   * Converts the three.js filter constants to GPU filter constants.
   *
   * @private
   * @param {number} value - The three.js constant defining a filter mode.
   * @return {string} The GPU filter mode.
   */
  _convertFilterMode(value) {
    let filterMode = GPUFilterMode.Linear;
    if (value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter) {
      filterMode = GPUFilterMode.Nearest;
    }
    return filterMode;
  }
  /**
   * Returns the bytes-per-texel value for the given GPU texture format.
   *
   * @private
   * @param {string} format - The GPU texture format.
   * @return {number} The bytes-per-texel.
   */
  _getBytesPerTexel(format2) {
    if (format2 === GPUTextureFormat.R8Unorm || format2 === GPUTextureFormat.R8Snorm || format2 === GPUTextureFormat.R8Uint || format2 === GPUTextureFormat.R8Sint)
      return 1;
    if (format2 === GPUTextureFormat.R16Uint || format2 === GPUTextureFormat.R16Sint || format2 === GPUTextureFormat.R16Float || format2 === GPUTextureFormat.RG8Unorm || format2 === GPUTextureFormat.RG8Snorm || format2 === GPUTextureFormat.RG8Uint || format2 === GPUTextureFormat.RG8Sint)
      return 2;
    if (format2 === GPUTextureFormat.R32Uint || format2 === GPUTextureFormat.R32Sint || format2 === GPUTextureFormat.R32Float || format2 === GPUTextureFormat.RG16Uint || format2 === GPUTextureFormat.RG16Sint || format2 === GPUTextureFormat.RG16Float || format2 === GPUTextureFormat.RGBA8Unorm || format2 === GPUTextureFormat.RGBA8UnormSRGB || format2 === GPUTextureFormat.RGBA8Snorm || format2 === GPUTextureFormat.RGBA8Uint || format2 === GPUTextureFormat.RGBA8Sint || format2 === GPUTextureFormat.BGRA8Unorm || format2 === GPUTextureFormat.BGRA8UnormSRGB || // Packed 32-bit formats
    format2 === GPUTextureFormat.RGB9E5UFloat || format2 === GPUTextureFormat.RGB10A2Unorm || format2 === GPUTextureFormat.RG11B10UFloat || format2 === GPUTextureFormat.Depth32Float || format2 === GPUTextureFormat.Depth24Plus || format2 === GPUTextureFormat.Depth24PlusStencil8 || format2 === GPUTextureFormat.Depth32FloatStencil8)
      return 4;
    if (format2 === GPUTextureFormat.RG32Uint || format2 === GPUTextureFormat.RG32Sint || format2 === GPUTextureFormat.RG32Float || format2 === GPUTextureFormat.RGBA16Uint || format2 === GPUTextureFormat.RGBA16Sint || format2 === GPUTextureFormat.RGBA16Float)
      return 8;
    if (format2 === GPUTextureFormat.RGBA32Uint || format2 === GPUTextureFormat.RGBA32Sint || format2 === GPUTextureFormat.RGBA32Float)
      return 16;
  }
  /**
   * Returns the corresponding typed array type for the given GPU texture format.
   *
   * @private
   * @param {string} format - The GPU texture format.
   * @return {TypedArray.constructor} The typed array type.
   */
  _getTypedArrayType(format2) {
    if (format2 === GPUTextureFormat.R8Uint)
      return Uint8Array;
    if (format2 === GPUTextureFormat.R8Sint)
      return Int8Array;
    if (format2 === GPUTextureFormat.R8Unorm)
      return Uint8Array;
    if (format2 === GPUTextureFormat.R8Snorm)
      return Int8Array;
    if (format2 === GPUTextureFormat.RG8Uint)
      return Uint8Array;
    if (format2 === GPUTextureFormat.RG8Sint)
      return Int8Array;
    if (format2 === GPUTextureFormat.RG8Unorm)
      return Uint8Array;
    if (format2 === GPUTextureFormat.RG8Snorm)
      return Int8Array;
    if (format2 === GPUTextureFormat.RGBA8Uint)
      return Uint8Array;
    if (format2 === GPUTextureFormat.RGBA8Sint)
      return Int8Array;
    if (format2 === GPUTextureFormat.RGBA8Unorm || format2 === GPUTextureFormat.RGBA8UnormSRGB)
      return Uint8Array;
    if (format2 === GPUTextureFormat.RGBA8Snorm)
      return Int8Array;
    if (format2 === GPUTextureFormat.R16Uint)
      return Uint16Array;
    if (format2 === GPUTextureFormat.R16Sint)
      return Int16Array;
    if (format2 === GPUTextureFormat.RG16Uint)
      return Uint16Array;
    if (format2 === GPUTextureFormat.RG16Sint)
      return Int16Array;
    if (format2 === GPUTextureFormat.RGBA16Uint)
      return Uint16Array;
    if (format2 === GPUTextureFormat.RGBA16Sint)
      return Int16Array;
    if (format2 === GPUTextureFormat.R16Float)
      return Uint16Array;
    if (format2 === GPUTextureFormat.RG16Float)
      return Uint16Array;
    if (format2 === GPUTextureFormat.RGBA16Float)
      return Uint16Array;
    if (format2 === GPUTextureFormat.R32Uint)
      return Uint32Array;
    if (format2 === GPUTextureFormat.R32Sint)
      return Int32Array;
    if (format2 === GPUTextureFormat.R32Float)
      return Float32Array;
    if (format2 === GPUTextureFormat.RG32Uint)
      return Uint32Array;
    if (format2 === GPUTextureFormat.RG32Sint)
      return Int32Array;
    if (format2 === GPUTextureFormat.RG32Float)
      return Float32Array;
    if (format2 === GPUTextureFormat.RGBA32Uint)
      return Uint32Array;
    if (format2 === GPUTextureFormat.RGBA32Sint)
      return Int32Array;
    if (format2 === GPUTextureFormat.RGBA32Float)
      return Float32Array;
    if (format2 === GPUTextureFormat.BGRA8Unorm || format2 === GPUTextureFormat.BGRA8UnormSRGB)
      return Uint8Array;
    if (format2 === GPUTextureFormat.RGB10A2Unorm)
      return Uint32Array;
    if (format2 === GPUTextureFormat.RGB9E5UFloat)
      return Uint32Array;
    if (format2 === GPUTextureFormat.RG11B10UFloat)
      return Uint32Array;
    if (format2 === GPUTextureFormat.Depth32Float)
      return Float32Array;
    if (format2 === GPUTextureFormat.Depth24Plus)
      return Uint32Array;
    if (format2 === GPUTextureFormat.Depth24PlusStencil8)
      return Uint32Array;
    if (format2 === GPUTextureFormat.Depth32FloatStencil8)
      return Float32Array;
  }
  /**
   * Returns the GPU dimensions for the given texture.
   *
   * @private
   * @param {Texture} texture - The texture.
   * @return {string} The GPU dimension.
   */
  _getDimension(texture3) {
    let dimension;
    if (texture3.is3DTexture || texture3.isData3DTexture) {
      dimension = GPUTextureDimension.ThreeD;
    } else {
      dimension = GPUTextureDimension.TwoD;
    }
    return dimension;
  }
};
function getFormat2(texture3, device = null) {
  const format2 = texture3.format;
  const type = texture3.type;
  const colorSpace = texture3.colorSpace;
  const transfer = ColorManagement.getTransfer(colorSpace);
  let formatGPU;
  if (texture3.isCompressedTexture === true || texture3.isCompressedArrayTexture === true) {
    switch (format2) {
      case RGB_S3TC_DXT1_Format:
      case RGBA_S3TC_DXT1_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;
        break;
      case RGBA_S3TC_DXT3_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;
        break;
      case RGBA_S3TC_DXT5_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;
        break;
      case RED_RGTC1_Format:
        formatGPU = GPUTextureFormat.BC4RUnorm;
        break;
      case SIGNED_RED_RGTC1_Format:
        formatGPU = GPUTextureFormat.BC4RSnorm;
        break;
      case RED_GREEN_RGTC2_Format:
        formatGPU = GPUTextureFormat.BC5RGUnorm;
        break;
      case SIGNED_RED_GREEN_RGTC2_Format:
        formatGPU = GPUTextureFormat.BC5RGSnorm;
        break;
      case RGBA_BPTC_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.BC7RGBAUnormSRGB : GPUTextureFormat.BC7RGBAUnorm;
        break;
      case RGB_ETC2_Format:
      case RGB_ETC1_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;
        break;
      case RGBA_ETC2_EAC_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;
        break;
      case RGBA_ASTC_4x4_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;
        break;
      case RGBA_ASTC_5x4_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;
        break;
      case RGBA_ASTC_5x5_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;
        break;
      case RGBA_ASTC_6x5_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;
        break;
      case RGBA_ASTC_6x6_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;
        break;
      case RGBA_ASTC_8x5_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;
        break;
      case RGBA_ASTC_8x6_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;
        break;
      case RGBA_ASTC_8x8_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;
        break;
      case RGBA_ASTC_10x5_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;
        break;
      case RGBA_ASTC_10x6_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;
        break;
      case RGBA_ASTC_10x8_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;
        break;
      case RGBA_ASTC_10x10_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;
        break;
      case RGBA_ASTC_12x10_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;
        break;
      case RGBA_ASTC_12x12_Format:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;
        break;
      case RGBAFormat:
        formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;
        break;
      default:
        console.error("WebGPURenderer: Unsupported texture format.", format2);
    }
  } else {
    switch (format2) {
      case RGBAFormat:
        switch (type) {
          case ByteType:
            formatGPU = GPUTextureFormat.RGBA8Snorm;
            break;
          case ShortType:
            formatGPU = GPUTextureFormat.RGBA16Sint;
            break;
          case UnsignedShortType:
            formatGPU = GPUTextureFormat.RGBA16Uint;
            break;
          case UnsignedIntType:
            formatGPU = GPUTextureFormat.RGBA32Uint;
            break;
          case IntType:
            formatGPU = GPUTextureFormat.RGBA32Sint;
            break;
          case UnsignedByteType:
            formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;
            break;
          case HalfFloatType:
            formatGPU = GPUTextureFormat.RGBA16Float;
            break;
          case FloatType:
            formatGPU = GPUTextureFormat.RGBA32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.", type);
        }
        break;
      case RGBFormat:
        switch (type) {
          case UnsignedInt5999Type:
            formatGPU = GPUTextureFormat.RGB9E5UFloat;
            break;
          case UnsignedInt101111Type:
            formatGPU = GPUTextureFormat.RG11B10UFloat;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGBFormat.", type);
        }
        break;
      case RedFormat:
        switch (type) {
          case ByteType:
            formatGPU = GPUTextureFormat.R8Snorm;
            break;
          case ShortType:
            formatGPU = GPUTextureFormat.R16Sint;
            break;
          case UnsignedShortType:
            formatGPU = GPUTextureFormat.R16Uint;
            break;
          case UnsignedIntType:
            formatGPU = GPUTextureFormat.R32Uint;
            break;
          case IntType:
            formatGPU = GPUTextureFormat.R32Sint;
            break;
          case UnsignedByteType:
            formatGPU = GPUTextureFormat.R8Unorm;
            break;
          case HalfFloatType:
            formatGPU = GPUTextureFormat.R16Float;
            break;
          case FloatType:
            formatGPU = GPUTextureFormat.R32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RedFormat.", type);
        }
        break;
      case RGFormat:
        switch (type) {
          case ByteType:
            formatGPU = GPUTextureFormat.RG8Snorm;
            break;
          case ShortType:
            formatGPU = GPUTextureFormat.RG16Sint;
            break;
          case UnsignedShortType:
            formatGPU = GPUTextureFormat.RG16Uint;
            break;
          case UnsignedIntType:
            formatGPU = GPUTextureFormat.RG32Uint;
            break;
          case IntType:
            formatGPU = GPUTextureFormat.RG32Sint;
            break;
          case UnsignedByteType:
            formatGPU = GPUTextureFormat.RG8Unorm;
            break;
          case HalfFloatType:
            formatGPU = GPUTextureFormat.RG16Float;
            break;
          case FloatType:
            formatGPU = GPUTextureFormat.RG32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGFormat.", type);
        }
        break;
      case DepthFormat:
        switch (type) {
          case UnsignedShortType:
            formatGPU = GPUTextureFormat.Depth16Unorm;
            break;
          case UnsignedIntType:
            formatGPU = GPUTextureFormat.Depth24Plus;
            break;
          case FloatType:
            formatGPU = GPUTextureFormat.Depth32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with DepthFormat.", type);
        }
        break;
      case DepthStencilFormat:
        switch (type) {
          case UnsignedInt248Type:
            formatGPU = GPUTextureFormat.Depth24PlusStencil8;
            break;
          case FloatType:
            if (device && device.features.has(GPUFeatureName.Depth32FloatStencil8) === false) {
              console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.');
            }
            formatGPU = GPUTextureFormat.Depth32FloatStencil8;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.", type);
        }
        break;
      case RedIntegerFormat:
        switch (type) {
          case IntType:
            formatGPU = GPUTextureFormat.R32Sint;
            break;
          case UnsignedIntType:
            formatGPU = GPUTextureFormat.R32Uint;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.", type);
        }
        break;
      case RGIntegerFormat:
        switch (type) {
          case IntType:
            formatGPU = GPUTextureFormat.RG32Sint;
            break;
          case UnsignedIntType:
            formatGPU = GPUTextureFormat.RG32Uint;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.", type);
        }
        break;
      case RGBAIntegerFormat:
        switch (type) {
          case IntType:
            formatGPU = GPUTextureFormat.RGBA32Sint;
            break;
          case UnsignedIntType:
            formatGPU = GPUTextureFormat.RGBA32Uint;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.", type);
        }
        break;
      default:
        console.error("WebGPURenderer: Unsupported texture format.", format2);
    }
  }
  return formatGPU;
}
var declarationRegexp = /^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i;
var propertiesRegexp = /([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig;
var wgslTypeLib$1 = {
  "f32": "float",
  "i32": "int",
  "u32": "uint",
  "bool": "bool",
  "vec2<f32>": "vec2",
  "vec2<i32>": "ivec2",
  "vec2<u32>": "uvec2",
  "vec2<bool>": "bvec2",
  "vec2f": "vec2",
  "vec2i": "ivec2",
  "vec2u": "uvec2",
  "vec2b": "bvec2",
  "vec3<f32>": "vec3",
  "vec3<i32>": "ivec3",
  "vec3<u32>": "uvec3",
  "vec3<bool>": "bvec3",
  "vec3f": "vec3",
  "vec3i": "ivec3",
  "vec3u": "uvec3",
  "vec3b": "bvec3",
  "vec4<f32>": "vec4",
  "vec4<i32>": "ivec4",
  "vec4<u32>": "uvec4",
  "vec4<bool>": "bvec4",
  "vec4f": "vec4",
  "vec4i": "ivec4",
  "vec4u": "uvec4",
  "vec4b": "bvec4",
  "mat2x2<f32>": "mat2",
  "mat2x2f": "mat2",
  "mat3x3<f32>": "mat3",
  "mat3x3f": "mat3",
  "mat4x4<f32>": "mat4",
  "mat4x4f": "mat4",
  "sampler": "sampler",
  "texture_1d": "texture",
  "texture_2d": "texture",
  "texture_2d_array": "texture",
  "texture_multisampled_2d": "cubeTexture",
  "texture_depth_2d": "depthTexture",
  "texture_depth_2d_array": "depthTexture",
  "texture_depth_multisampled_2d": "depthTexture",
  "texture_depth_cube": "depthTexture",
  "texture_depth_cube_array": "depthTexture",
  "texture_3d": "texture3D",
  "texture_cube": "cubeTexture",
  "texture_cube_array": "cubeTexture",
  "texture_storage_1d": "storageTexture",
  "texture_storage_2d": "storageTexture",
  "texture_storage_2d_array": "storageTexture",
  "texture_storage_3d": "storageTexture"
};
var parse = (source) => {
  source = source.trim();
  const declaration = source.match(declarationRegexp);
  if (declaration !== null && declaration.length === 4) {
    const inputsCode = declaration[2];
    const propsMatches = [];
    let match = null;
    while ((match = propertiesRegexp.exec(inputsCode)) !== null) {
      propsMatches.push({ name: match[1], type: match[2] });
    }
    const inputs = [];
    for (let i2 = 0; i2 < propsMatches.length; i2++) {
      const { name: name2, type: type2 } = propsMatches[i2];
      let resolvedType = type2;
      if (resolvedType.startsWith("ptr")) {
        resolvedType = "pointer";
      } else {
        if (resolvedType.startsWith("texture")) {
          resolvedType = type2.split("<")[0];
        }
        resolvedType = wgslTypeLib$1[resolvedType];
      }
      inputs.push(new NodeFunctionInput(resolvedType, name2));
    }
    const blockCode = source.substring(declaration[0].length);
    const outputType = declaration[3] || "void";
    const name = declaration[1] !== void 0 ? declaration[1] : "";
    const type = wgslTypeLib$1[outputType] || outputType;
    return {
      type,
      inputs,
      name,
      inputsCode,
      blockCode,
      outputType
    };
  } else {
    throw new Error("FunctionNode: Function is not a WGSL code.");
  }
};
var WGSLNodeFunction = class extends NodeFunction {
  /**
   * Constructs a new WGSL node function.
   *
   * @param {string} source - The WGSL source.
   */
  constructor(source) {
    const { type, inputs, name, inputsCode, blockCode, outputType } = parse(source);
    super(type, inputs, name);
    this.inputsCode = inputsCode;
    this.blockCode = blockCode;
    this.outputType = outputType;
  }
  /**
   * This method returns the WGSL code of the node function.
   *
   * @param {string} [name=this.name] - The function's name.
   * @return {string} The shader code.
   */
  getCode(name = this.name) {
    const outputType = this.outputType !== "void" ? "-> " + this.outputType : "";
    return `fn ${name} ( ${this.inputsCode.trim()} ) ${outputType}` + this.blockCode;
  }
};
var WGSLNodeParser = class extends NodeParser {
  /**
   * The method parses the given WGSL code an returns a node function.
   *
   * @param {string} source - The WGSL code.
   * @return {WGSLNodeFunction} A node function.
   */
  parseFunction(source) {
    return new WGSLNodeFunction(source);
  }
};
var GPUShaderStage = typeof self !== "undefined" ? self.GPUShaderStage : { VERTEX: 1, FRAGMENT: 2, COMPUTE: 4 };
var accessNames = {
  [NodeAccess.READ_ONLY]: "read",
  [NodeAccess.WRITE_ONLY]: "write",
  [NodeAccess.READ_WRITE]: "read_write"
};
var wrapNames = {
  [RepeatWrapping]: "repeat",
  [ClampToEdgeWrapping]: "clamp",
  [MirroredRepeatWrapping]: "mirror"
};
var gpuShaderStageLib = {
  "vertex": GPUShaderStage ? GPUShaderStage.VERTEX : 1,
  "fragment": GPUShaderStage ? GPUShaderStage.FRAGMENT : 2,
  "compute": GPUShaderStage ? GPUShaderStage.COMPUTE : 4
};
var supports = {
  instance: true,
  swizzleAssign: false,
  storageBuffer: true
};
var wgslFnOpLib = {
  "^^": "tsl_xor"
};
var wgslTypeLib = {
  float: "f32",
  int: "i32",
  uint: "u32",
  bool: "bool",
  color: "vec3<f32>",
  vec2: "vec2<f32>",
  ivec2: "vec2<i32>",
  uvec2: "vec2<u32>",
  bvec2: "vec2<bool>",
  vec3: "vec3<f32>",
  ivec3: "vec3<i32>",
  uvec3: "vec3<u32>",
  bvec3: "vec3<bool>",
  vec4: "vec4<f32>",
  ivec4: "vec4<i32>",
  uvec4: "vec4<u32>",
  bvec4: "vec4<bool>",
  mat2: "mat2x2<f32>",
  mat3: "mat3x3<f32>",
  mat4: "mat4x4<f32>"
};
var wgslCodeCache = {};
var wgslPolyfill = {
  tsl_xor: new CodeNode("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),
  mod_float: new CodeNode("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),
  mod_vec2: new CodeNode("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),
  mod_vec3: new CodeNode("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),
  mod_vec4: new CodeNode("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),
  equals_bool: new CodeNode("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),
  equals_bvec2: new CodeNode("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),
  equals_bvec3: new CodeNode("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),
  equals_bvec4: new CodeNode("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),
  repeatWrapping_float: new CodeNode("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),
  mirrorWrapping_float: new CodeNode("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),
  clampWrapping_float: new CodeNode("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),
  biquadraticTexture: new CodeNode(
    /* wgsl */
    `
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {

	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`
  )
};
var wgslMethods = {
  dFdx: "dpdx",
  dFdy: "- dpdy",
  mod_float: "tsl_mod_float",
  mod_vec2: "tsl_mod_vec2",
  mod_vec3: "tsl_mod_vec3",
  mod_vec4: "tsl_mod_vec4",
  equals_bool: "tsl_equals_bool",
  equals_bvec2: "tsl_equals_bvec2",
  equals_bvec3: "tsl_equals_bvec3",
  equals_bvec4: "tsl_equals_bvec4",
  inversesqrt: "inverseSqrt",
  bitcast: "bitcast<f32>"
};
var diagnostics = "";
if ((typeof navigator !== "undefined" && /Firefox|Deno/g.test(navigator.userAgent)) !== true) {
  diagnostics += "diagnostic( off, derivative_uniformity );\n";
}
var WGSLNodeBuilder = class extends NodeBuilder {
  /**
   * Constructs a new WGSL node builder renderer.
   *
   * @param {Object3D} object - The 3D object.
   * @param {Renderer} renderer - The renderer.
   */
  constructor(object, renderer3) {
    super(object, renderer3, new WGSLNodeParser());
    this.uniformGroups = {};
    this.builtins = {};
    this.directives = {};
    this.scopedArrays = /* @__PURE__ */ new Map();
  }
  /**
   * Generates the WGSL snippet for sampled textures.
   *
   * @private
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The WGSL snippet.
   */
  _generateTextureSample(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      if (depthSnippet) {
        if (offsetSnippet) {
          return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet}, ${offsetSnippet} )`;
        }
        return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet} )`;
      } else {
        if (offsetSnippet) {
          return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${offsetSnippet} )`;
        }
        return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet} )`;
      }
    } else {
      return this.generateTextureSampleLevel(texture3, textureProperty, uvSnippet, "0", depthSnippet);
    }
  }
  /**
   * Generates the WGSL snippet when sampling textures with explicit mip level.
   *
   * @private
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @param {string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @return {string} The WGSL snippet.
   */
  generateTextureSampleLevel(texture3, textureProperty, uvSnippet, levelSnippet, depthSnippet, offsetSnippet) {
    if (this.isUnfilterable(texture3) === false) {
      if (offsetSnippet) {
        return `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${levelSnippet}, ${offsetSnippet} )`;
      }
      return `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${levelSnippet} )`;
    } else if (this.isFilteredTexture(texture3)) {
      return this.generateFilteredTexture(texture3, textureProperty, uvSnippet, offsetSnippet, levelSnippet);
    } else {
      return this.generateTextureLod(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet, levelSnippet);
    }
  }
  /**
   * Generates a wrap function used in context of textures.
   *
   * @param {Texture} texture - The texture to generate the function for.
   * @return {string} The name of the generated function.
   */
  generateWrapFunction(texture3) {
    const functionName = `tsl_coord_${wrapNames[texture3.wrapS]}S_${wrapNames[texture3.wrapT]}_${texture3.isData3DTexture ? "3d" : "2d"}T`;
    let nodeCode = wgslCodeCache[functionName];
    if (nodeCode === void 0) {
      const includes = [];
      const coordType = texture3.isData3DTexture ? "vec3f" : "vec2f";
      let code3 = `fn ${functionName}( coord : ${coordType} ) -> ${coordType} {

	return ${coordType}(
`;
      const addWrapSnippet = (wrap, axis) => {
        if (wrap === RepeatWrapping) {
          includes.push(wgslPolyfill.repeatWrapping_float);
          code3 += `		tsl_repeatWrapping_float( coord.${axis} )`;
        } else if (wrap === ClampToEdgeWrapping) {
          includes.push(wgslPolyfill.clampWrapping_float);
          code3 += `		tsl_clampWrapping_float( coord.${axis} )`;
        } else if (wrap === MirroredRepeatWrapping) {
          includes.push(wgslPolyfill.mirrorWrapping_float);
          code3 += `		tsl_mirrorWrapping_float( coord.${axis} )`;
        } else {
          code3 += `		coord.${axis}`;
          console.warn(`WebGPURenderer: Unsupported texture wrap type "${wrap}" for vertex shader.`);
        }
      };
      addWrapSnippet(texture3.wrapS, "x");
      code3 += ",\n";
      addWrapSnippet(texture3.wrapT, "y");
      if (texture3.isData3DTexture) {
        code3 += ",\n";
        addWrapSnippet(texture3.wrapR, "z");
      }
      code3 += "\n	);\n\n}\n";
      wgslCodeCache[functionName] = nodeCode = new CodeNode(code3, includes);
    }
    nodeCode.build(this);
    return functionName;
  }
  /**
   * Generates the array declaration string.
   *
   * @param {string} type - The type.
   * @param {?number} [count] - The count.
   * @return {string} The generated value as a shader string.
   */
  generateArrayDeclaration(type, count) {
    return `array< ${this.getType(type)}, ${count} >`;
  }
  /**
   * Generates a WGSL variable that holds the texture dimension of the given texture.
   * It also returns information about the number of layers (elements) of an arrayed
   * texture as well as the cube face count of cube textures.
   *
   * @param {Texture} texture - The texture to generate the function for.
   * @param {string} textureProperty - The name of the video texture uniform in the shader.
   * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @return {string} The name of the dimension variable.
   */
  generateTextureDimension(texture3, textureProperty, levelSnippet) {
    const textureData = this.getDataFromNode(texture3, this.shaderStage, this.globalCache);
    if (textureData.dimensionsSnippet === void 0)
      textureData.dimensionsSnippet = {};
    let textureDimensionNode = textureData.dimensionsSnippet[levelSnippet];
    if (textureData.dimensionsSnippet[levelSnippet] === void 0) {
      let textureDimensionsParams;
      let dimensionType;
      const { primarySamples } = this.renderer.backend.utils.getTextureSampleData(texture3);
      const isMultisampled = primarySamples > 1;
      if (texture3.isData3DTexture) {
        dimensionType = "vec3<u32>";
      } else {
        dimensionType = "vec2<u32>";
      }
      if (isMultisampled || texture3.isStorageTexture) {
        textureDimensionsParams = textureProperty;
      } else {
        textureDimensionsParams = `${textureProperty}${levelSnippet ? `, u32( ${levelSnippet} )` : ""}`;
      }
      textureDimensionNode = new VarNode(new ExpressionNode(`textureDimensions( ${textureDimensionsParams} )`, dimensionType));
      textureData.dimensionsSnippet[levelSnippet] = textureDimensionNode;
      if (texture3.isArrayTexture || texture3.isDataArrayTexture || texture3.isData3DTexture) {
        textureData.arrayLayerCount = new VarNode(
          new ExpressionNode(
            `textureNumLayers(${textureProperty})`,
            "u32"
          )
        );
      }
      if (texture3.isTextureCube) {
        textureData.cubeFaceCount = new VarNode(
          new ExpressionNode("6u", "u32")
        );
      }
    }
    return textureDimensionNode.build(this);
  }
  /**
   * Generates the WGSL snippet for a manual filtered texture.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [levelSnippet='0u'] - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @return {string} The WGSL snippet.
   */
  generateFilteredTexture(texture3, textureProperty, uvSnippet, offsetSnippet, levelSnippet = "0u") {
    this._include("biquadraticTexture");
    const wrapFunction = this.generateWrapFunction(texture3);
    const textureDimension = this.generateTextureDimension(texture3, textureProperty, levelSnippet);
    if (offsetSnippet) {
      uvSnippet = `${uvSnippet} + vec2<f32>(${offsetSnippet}) / ${textureDimension}`;
    }
    return `tsl_biquadraticTexture( ${textureProperty}, ${wrapFunction}( ${uvSnippet} ), ${textureDimension}, u32( ${levelSnippet} ) )`;
  }
  /**
   * Generates the WGSL snippet for a texture lookup with explicit level-of-detail.
   * Since it's a lookup, no sampling or filtering is applied.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [levelSnippet='0u'] - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @return {string} The WGSL snippet.
   */
  generateTextureLod(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet, levelSnippet = "0u") {
    const wrapFunction = this.generateWrapFunction(texture3);
    const textureDimension = this.generateTextureDimension(texture3, textureProperty, levelSnippet);
    const vecType = texture3.isData3DTexture ? "vec3" : "vec2";
    if (offsetSnippet) {
      uvSnippet = `${uvSnippet} + ${vecType}<f32>(${offsetSnippet}) / ${vecType}<f32>( ${textureDimension} )`;
    }
    const coordSnippet = `${vecType}<u32>( ${wrapFunction}( ${uvSnippet} ) * ${vecType}<f32>( ${textureDimension} ) )`;
    return this.generateTextureLoad(texture3, textureProperty, coordSnippet, depthSnippet, null, levelSnippet);
  }
  /**
   * Generates the WGSL snippet that reads a single texel from a texture without sampling or filtering.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvIndexSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [levelSnippet='0u'] - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @return {string} The WGSL snippet.
   */
  generateTextureLoad(texture3, textureProperty, uvIndexSnippet, depthSnippet, offsetSnippet, levelSnippet = "0u") {
    let snippet;
    if (offsetSnippet) {
      uvIndexSnippet = `${uvIndexSnippet} + ${offsetSnippet}`;
    }
    if (depthSnippet) {
      snippet = `textureLoad( ${textureProperty}, ${uvIndexSnippet}, ${depthSnippet}, u32( ${levelSnippet} ) )`;
    } else {
      snippet = `textureLoad( ${textureProperty}, ${uvIndexSnippet}, u32( ${levelSnippet} ) )`;
      if (this.renderer.backend.compatibilityMode && texture3.isDepthTexture) {
        snippet += ".x";
      }
    }
    return snippet;
  }
  /**
   * Generates the WGSL snippet that writes a single texel to a texture.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvIndexSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {string} valueSnippet - A WGSL snippet that represent the new texel value.
   * @return {string} The WGSL snippet.
   */
  generateTextureStore(texture3, textureProperty, uvIndexSnippet, depthSnippet, valueSnippet) {
    let snippet;
    if (depthSnippet) {
      snippet = `textureStore( ${textureProperty}, ${uvIndexSnippet}, ${depthSnippet}, ${valueSnippet} )`;
    } else {
      snippet = `textureStore( ${textureProperty}, ${uvIndexSnippet}, ${valueSnippet} )`;
    }
    return snippet;
  }
  /**
   * Returns `true` if the sampled values of the given texture should be compared against a reference value.
   *
   * @param {Texture} texture - The texture.
   * @return {boolean} Whether the sampled values of the given texture should be compared against a reference value or not.
   */
  isSampleCompare(texture3) {
    return texture3.isDepthTexture === true && texture3.compareFunction !== null;
  }
  /**
   * Returns `true` if the given texture is unfilterable.
   *
   * @param {Texture} texture - The texture.
   * @return {boolean} Whether the given texture is unfilterable or not.
   */
  isUnfilterable(texture3) {
    return this.getComponentTypeFromTexture(texture3) !== "float" || !this.isAvailable("float32Filterable") && texture3.isDataTexture === true && texture3.type === FloatType || this.isSampleCompare(texture3) === false && texture3.minFilter === NearestFilter && texture3.magFilter === NearestFilter || this.renderer.backend.utils.getTextureSampleData(texture3).primarySamples > 1;
  }
  /**
   * Generates the WGSL snippet for sampling/loading the given texture.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The WGSL snippet.
   */
  generateTexture(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet, shaderStage = this.shaderStage) {
    let snippet = null;
    if (this.isUnfilterable(texture3)) {
      snippet = this.generateTextureLod(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet, "0", shaderStage);
    } else {
      snippet = this._generateTextureSample(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet, shaderStage);
    }
    return snippet;
  }
  /**
   * Generates the WGSL snippet for sampling/loading the given texture using explicit gradients.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {Array<string>} gradSnippet - An array holding both gradient WGSL snippets.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The WGSL snippet.
   */
  generateTextureGrad(texture3, textureProperty, uvSnippet, gradSnippet, depthSnippet, offsetSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      if (offsetSnippet) {
        return `textureSampleGrad( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet},  ${gradSnippet[0]}, ${gradSnippet[1]}, ${offsetSnippet} )`;
      }
      return `textureSampleGrad( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet},  ${gradSnippet[0]}, ${gradSnippet[1]} )`;
    } else {
      console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${shaderStage} shader.`);
    }
  }
  /**
   * Generates the WGSL snippet for sampling a depth texture and comparing the sampled depth values
   * against a reference value.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {string} compareSnippet -  A WGSL snippet that represents the reference value.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The WGSL snippet.
   */
  generateTextureCompare(texture3, textureProperty, uvSnippet, compareSnippet, depthSnippet, offsetSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      if (texture3.isDepthTexture === true && texture3.isArrayTexture === true) {
        if (offsetSnippet) {
          return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet}, ${compareSnippet}, ${offsetSnippet} )`;
        }
        return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet}, ${compareSnippet} )`;
      }
      if (offsetSnippet) {
        return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${compareSnippet}, ${offsetSnippet} )`;
      }
      return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${compareSnippet} )`;
    } else {
      console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);
    }
  }
  /**
   * Generates the WGSL snippet when sampling textures with explicit mip level.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The WGSL snippet.
   */
  generateTextureLevel(texture3, textureProperty, uvSnippet, levelSnippet, depthSnippet, offsetSnippet) {
    if (this.isUnfilterable(texture3) === false) {
      if (offsetSnippet) {
        return `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${levelSnippet}, ${offsetSnippet} )`;
      }
      return `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${levelSnippet} )`;
    } else if (this.isFilteredTexture(texture3)) {
      return this.generateFilteredTexture(texture3, textureProperty, uvSnippet, offsetSnippet, levelSnippet);
    } else {
      return this.generateTextureLod(texture3, textureProperty, uvSnippet, depthSnippet, offsetSnippet, levelSnippet);
    }
  }
  /**
   * Generates the WGSL snippet when sampling textures with a bias to the mip level.
   *
   * @param {Texture} texture - The texture.
   * @param {string} textureProperty - The name of the texture uniform in the shader.
   * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
   * @param {string} biasSnippet - A WGSL snippet that represents the bias to apply to the mip level before sampling.
   * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
   * @param {?string} offsetSnippet - A WGSL snippet that represents the offset that will be applied to the unnormalized texture coordinate before sampling the texture.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The WGSL snippet.
   */
  generateTextureBias(texture3, textureProperty, uvSnippet, biasSnippet, depthSnippet, offsetSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      if (offsetSnippet) {
        return `textureSampleBias( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${biasSnippet}, ${offsetSnippet} )`;
      }
      return `textureSampleBias( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${biasSnippet} )`;
    } else {
      console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${shaderStage} shader.`);
    }
  }
  /**
   * Returns a WGSL snippet that represents the property name of the given node.
   *
   * @param {Node} node - The node.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The property name.
   */
  getPropertyName(node, shaderStage = this.shaderStage) {
    if (node.isNodeVarying === true && node.needsInterpolation === true) {
      if (shaderStage === "vertex") {
        return `varyings.${node.name}`;
      }
    } else if (node.isNodeUniform === true) {
      const name = node.name;
      const type = node.type;
      if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") {
        return name;
      } else if (type === "buffer" || type === "storageBuffer" || type === "indirectStorageBuffer") {
        if (this.isCustomStruct(node)) {
          return name;
        }
        return name + ".value";
      } else {
        return node.groupNode.name + "." + name;
      }
    }
    return super.getPropertyName(node);
  }
  /**
   * Returns the output struct name.
   *
   * @return {string} The name of the output struct.
   */
  getOutputStructName() {
    return "output";
  }
  /**
   * Returns the native shader operator name for a given generic name.
   *
   * @param {string} op - The operator name to resolve.
   * @return {?string} The resolved operator name.
   */
  getFunctionOperator(op) {
    const fnOp = wgslFnOpLib[op];
    if (fnOp !== void 0) {
      this._include(fnOp);
      return fnOp;
    }
    return null;
  }
  /**
   * Returns the node access for the given node and shader stage.
   *
   * @param {StorageTextureNode|StorageBufferNode} node - The storage node.
   * @param {string} shaderStage - The shader stage.
   * @return {string} The node access.
   */
  getNodeAccess(node, shaderStage) {
    if (shaderStage !== "compute") {
      if (node.isAtomic === true) {
        console.warn("WebGPURenderer: Atomic operations are only supported in compute shaders.");
        return NodeAccess.READ_WRITE;
      }
      return NodeAccess.READ_ONLY;
    }
    return node.access;
  }
  /**
   * Returns A WGSL snippet representing the storage access.
   *
   * @param {StorageTextureNode|StorageBufferNode} node - The storage node.
   * @param {string} shaderStage - The shader stage.
   * @return {string} The WGSL snippet representing the storage access.
   */
  getStorageAccess(node, shaderStage) {
    return accessNames[this.getNodeAccess(node, shaderStage)];
  }
  /**
   * This method is one of the more important ones since it's responsible
   * for generating a matching binding instance for the given uniform node.
   *
   * These bindings are later used in the renderer to create bind groups
   * and layouts.
   *
   * @param {UniformNode} node - The uniform node.
   * @param {string} type - The node data type.
   * @param {string} shaderStage - The shader stage.
   * @param {?string} [name=null] - An optional uniform name.
   * @return {NodeUniform} The node uniform object.
   */
  getUniformFromNode(node, type, shaderStage, name = null) {
    const uniformNode = super.getUniformFromNode(node, type, shaderStage, name);
    const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
    if (nodeData.uniformGPU === void 0) {
      let uniformGPU;
      const group = node.groupNode;
      const groupName = group.name;
      const bindings = this.getBindGroupArray(groupName, shaderStage);
      if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") {
        let texture3 = null;
        const access = this.getNodeAccess(node, shaderStage);
        if (type === "texture" || type === "storageTexture") {
          if (node.value.is3DTexture === true) {
            texture3 = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group, access);
          } else {
            texture3 = new NodeSampledTexture(uniformNode.name, uniformNode.node, group, access);
          }
        } else if (type === "cubeTexture") {
          texture3 = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group, access);
        } else if (type === "texture3D") {
          texture3 = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group, access);
        }
        texture3.store = node.isStorageTextureNode === true;
        texture3.setVisibility(gpuShaderStageLib[shaderStage]);
        if (this.isUnfilterable(node.value) === false && texture3.store === false) {
          const sampler3 = new NodeSampler(`${uniformNode.name}_sampler`, uniformNode.node, group);
          sampler3.setVisibility(gpuShaderStageLib[shaderStage]);
          bindings.push(sampler3, texture3);
          uniformGPU = [sampler3, texture3];
        } else {
          bindings.push(texture3);
          uniformGPU = [texture3];
        }
      } else if (type === "buffer" || type === "storageBuffer" || type === "indirectStorageBuffer") {
        const bufferClass = type === "buffer" ? NodeUniformBuffer : NodeStorageBuffer;
        const buffer3 = new bufferClass(node, group);
        buffer3.setVisibility(gpuShaderStageLib[shaderStage]);
        bindings.push(buffer3);
        uniformGPU = buffer3;
        uniformNode.name = name ? name : "NodeBuffer_" + uniformNode.id;
      } else {
        const uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});
        let uniformsGroup = uniformsStage[groupName];
        if (uniformsGroup === void 0) {
          uniformsGroup = new NodeUniformsGroup(groupName, group);
          uniformsGroup.setVisibility(gpuShaderStageLib[shaderStage]);
          uniformsStage[groupName] = uniformsGroup;
          bindings.push(uniformsGroup);
        }
        uniformGPU = this.getNodeUniform(uniformNode, type);
        uniformsGroup.addUniform(uniformGPU);
      }
      nodeData.uniformGPU = uniformGPU;
    }
    return uniformNode;
  }
  /**
   * This method should be used whenever builtins are required in nodes.
   * The internal builtins data structure will make sure builtins are
   * defined in the WGSL source.
   *
   * @param {string} name - The builtin name.
   * @param {string} property - The property name.
   * @param {string} type - The node data type.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {string} The property name.
   */
  getBuiltin(name, property3, type, shaderStage = this.shaderStage) {
    const map = this.builtins[shaderStage] || (this.builtins[shaderStage] = /* @__PURE__ */ new Map());
    if (map.has(name) === false) {
      map.set(name, {
        name,
        property: property3,
        type
      });
    }
    return property3;
  }
  /**
   * Returns `true` if the given builtin is defined in the given shader stage.
   *
   * @param {string} name - The builtin name.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
   * @return {boolean} Whether the given builtin is defined in the given shader stage or not.
   */
  hasBuiltin(name, shaderStage = this.shaderStage) {
    return this.builtins[shaderStage] !== void 0 && this.builtins[shaderStage].has(name);
  }
  /**
   * Returns the vertex index builtin.
   *
   * @return {string} The vertex index.
   */
  getVertexIndex() {
    if (this.shaderStage === "vertex") {
      return this.getBuiltin("vertex_index", "vertexIndex", "u32", "attribute");
    }
    return "vertexIndex";
  }
  /**
   * Builds the given shader node.
   *
   * @param {ShaderNodeInternal} shaderNode - The shader node.
   * @return {string} The WGSL function code.
   */
  buildFunctionCode(shaderNode) {
    const layout = shaderNode.layout;
    const flowData = this.flowShaderNode(shaderNode);
    const parameters = [];
    for (const input of layout.inputs) {
      parameters.push(input.name + " : " + this.getType(input.type));
    }
    let code3 = `fn ${layout.name}( ${parameters.join(", ")} ) -> ${this.getType(layout.type)} {
${flowData.vars}
${flowData.code}
`;
    if (flowData.result) {
      code3 += `	return ${flowData.result};
`;
    }
    code3 += "\n}\n";
    return code3;
  }
  /**
   * Returns the instance index builtin.
   *
   * @return {string} The instance index.
   */
  getInstanceIndex() {
    if (this.shaderStage === "vertex") {
      return this.getBuiltin("instance_index", "instanceIndex", "u32", "attribute");
    }
    return "instanceIndex";
  }
  /**
   * Returns the invocation local index builtin.
   *
   * @return {string} The invocation local index.
   */
  getInvocationLocalIndex() {
    return this.getBuiltin("local_invocation_index", "invocationLocalIndex", "u32", "attribute");
  }
  /**
   * Returns the subgroup size builtin.
   *
   * @return {string} The subgroup size.
   */
  getSubgroupSize() {
    this.enableSubGroups();
    return this.getBuiltin("subgroup_size", "subgroupSize", "u32", "attribute");
  }
  /**
   * Returns the invocation subgroup index builtin.
   *
   * @return {string} The invocation subgroup index.
   */
  getInvocationSubgroupIndex() {
    this.enableSubGroups();
    return this.getBuiltin("subgroup_invocation_id", "invocationSubgroupIndex", "u32", "attribute");
  }
  /**
   * Returns the subgroup index builtin.
   *
   * @return {string} The subgroup index.
   */
  getSubgroupIndex() {
    this.enableSubGroups();
    return this.getBuiltin("subgroup_id", "subgroupIndex", "u32", "attribute");
  }
  /**
   * Overwritten as a NOP since this method is intended for the WebGL 2 backend.
   *
   * @return {null} Null.
   */
  getDrawIndex() {
    return null;
  }
  /**
   * Returns the front facing builtin.
   *
   * @return {string} The front facing builtin.
   */
  getFrontFacing() {
    return this.getBuiltin("front_facing", "isFront", "bool");
  }
  /**
   * Returns the frag coord builtin.
   *
   * @return {string} The frag coord builtin.
   */
  getFragCoord() {
    return this.getBuiltin("position", "fragCoord", "vec4<f32>") + ".xy";
  }
  /**
   * Returns the frag depth builtin.
   *
   * @return {string} The frag depth builtin.
   */
  getFragDepth() {
    return "output." + this.getBuiltin("frag_depth", "depth", "f32", "output");
  }
  /**
   * Returns the clip distances builtin.
   *
   * @return {string} The clip distances builtin.
   */
  getClipDistance() {
    return "varyings.hw_clip_distances";
  }
  /**
   * Whether to flip texture data along its vertical axis or not.
   *
   * @return {boolean} Returns always `false` in context of WGSL.
   */
  isFlipY() {
    return false;
  }
  /**
   * Enables the given directive for the given shader stage.
   *
   * @param {string} name - The directive name.
   * @param {string} [shaderStage=this.shaderStage] - The shader stage to enable the directive for.
   */
  enableDirective(name, shaderStage = this.shaderStage) {
    const stage = this.directives[shaderStage] || (this.directives[shaderStage] = /* @__PURE__ */ new Set());
    stage.add(name);
  }
  /**
   * Returns the directives of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} A WGSL snippet that enables the directives of the given stage.
   */
  getDirectives(shaderStage) {
    const snippets = [];
    const directives = this.directives[shaderStage];
    if (directives !== void 0) {
      for (const directive of directives) {
        snippets.push(`enable ${directive};`);
      }
    }
    return snippets.join("\n");
  }
  /**
   * Enables the 'subgroups' directive.
   */
  enableSubGroups() {
    this.enableDirective("subgroups");
  }
  /**
   * Enables the 'subgroups-f16' directive.
   */
  enableSubgroupsF16() {
    this.enableDirective("subgroups-f16");
  }
  /**
   * Enables the 'clip_distances' directive.
   */
  enableClipDistances() {
    this.enableDirective("clip_distances");
  }
  /**
   * Enables the 'f16' directive.
   */
  enableShaderF16() {
    this.enableDirective("f16");
  }
  /**
   * Enables the 'dual_source_blending' directive.
   */
  enableDualSourceBlending() {
    this.enableDirective("dual_source_blending");
  }
  /**
   * Enables hardware clipping.
   *
   * @param {string} planeCount - The clipping plane count.
   */
  enableHardwareClipping(planeCount) {
    this.enableClipDistances();
    this.getBuiltin("clip_distances", "hw_clip_distances", `array<f32, ${planeCount} >`, "vertex");
  }
  /**
   * Returns the builtins of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} A WGSL snippet that represents the builtins of the given stage.
   */
  getBuiltins(shaderStage) {
    const snippets = [];
    const builtins = this.builtins[shaderStage];
    if (builtins !== void 0) {
      for (const { name, property: property3, type } of builtins.values()) {
        snippets.push(`@builtin( ${name} ) ${property3} : ${type}`);
      }
    }
    return snippets.join(",\n	");
  }
  /**
   * This method should be used when a new scoped buffer is used in context of
   * compute shaders. It adds the array to the internal data structure which is
   * later used to generate the respective WGSL.
   *
   * @param {string} name - The array name.
   * @param {string} scope - The scope.
   * @param {string} bufferType - The buffer type.
   * @param {string} bufferCount - The buffer count.
   * @return {string} The array name.
   */
  getScopedArray(name, scope, bufferType, bufferCount) {
    if (this.scopedArrays.has(name) === false) {
      this.scopedArrays.set(name, {
        name,
        scope,
        bufferType,
        bufferCount
      });
    }
    return name;
  }
  /**
   * Returns the scoped arrays of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string|undefined} The WGSL snippet that defines the scoped arrays.
   * Returns `undefined` when used in the vertex or fragment stage.
   */
  getScopedArrays(shaderStage) {
    if (shaderStage !== "compute") {
      return;
    }
    const snippets = [];
    for (const { name, scope, bufferType, bufferCount } of this.scopedArrays.values()) {
      const type = this.getType(bufferType);
      snippets.push(`var<${scope}> ${name}: array< ${type}, ${bufferCount} >;`);
    }
    return snippets.join("\n");
  }
  /**
   * Returns the shader attributes of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The WGSL snippet that defines the shader attributes.
   */
  getAttributes(shaderStage) {
    const snippets = [];
    if (shaderStage === "compute") {
      this.getBuiltin("global_invocation_id", "globalId", "vec3<u32>", "attribute");
      this.getBuiltin("workgroup_id", "workgroupId", "vec3<u32>", "attribute");
      this.getBuiltin("local_invocation_id", "localId", "vec3<u32>", "attribute");
      this.getBuiltin("num_workgroups", "numWorkgroups", "vec3<u32>", "attribute");
      if (this.renderer.hasFeature("subgroups")) {
        this.enableDirective("subgroups", shaderStage);
        this.getBuiltin("subgroup_size", "subgroupSize", "u32", "attribute");
      }
    }
    if (shaderStage === "vertex" || shaderStage === "compute") {
      const builtins = this.getBuiltins("attribute");
      if (builtins)
        snippets.push(builtins);
      const attributes = this.getAttributesArray();
      for (let index6 = 0, length3 = attributes.length; index6 < length3; index6++) {
        const attribute3 = attributes[index6];
        const name = attribute3.name;
        const type = this.getType(attribute3.type);
        snippets.push(`@location( ${index6} ) ${name} : ${type}`);
      }
    }
    return snippets.join(",\n	");
  }
  /**
   * Returns the members of the given struct type node as a WGSL string.
   *
   * @param {StructTypeNode} struct - The struct type node.
   * @return {string} The WGSL snippet that defines the struct members.
   */
  getStructMembers(struct3) {
    const snippets = [];
    for (const member of struct3.members) {
      const prefix = struct3.output ? "@location( " + member.index + " ) " : "";
      let type = this.getType(member.type);
      if (member.atomic) {
        type = "atomic< " + type + " >";
      }
      snippets.push(`	${prefix + member.name} : ${type}`);
    }
    if (struct3.output) {
      snippets.push(`	${this.getBuiltins("output")}`);
    }
    return snippets.join(",\n");
  }
  /**
   * Returns the structs of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The WGSL snippet that defines the structs.
   */
  getStructs(shaderStage) {
    let result = "";
    const structs = this.structs[shaderStage];
    if (structs.length > 0) {
      const snippets = [];
      for (const struct3 of structs) {
        let snippet = `struct ${struct3.name} {
`;
        snippet += this.getStructMembers(struct3);
        snippet += "\n};";
        snippets.push(snippet);
      }
      result = "\n" + snippets.join("\n\n") + "\n";
    }
    return result;
  }
  /**
   * Returns a WGSL string representing a variable.
   *
   * @param {string} type - The variable's type.
   * @param {string} name - The variable's name.
   * @param {?number} [count=null] - The array length.
   * @return {string} The WGSL snippet that defines a variable.
   */
  getVar(type, name, count = null) {
    let snippet = `var ${name} : `;
    if (count !== null) {
      snippet += this.generateArrayDeclaration(type, count);
    } else {
      snippet += this.getType(type);
    }
    return snippet;
  }
  /**
   * Returns the variables of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The WGSL snippet that defines the variables.
   */
  getVars(shaderStage) {
    const snippets = [];
    const vars = this.vars[shaderStage];
    if (vars !== void 0) {
      for (const variable of vars) {
        snippets.push(`	${this.getVar(variable.type, variable.name, variable.count)};`);
      }
    }
    return `
${snippets.join("\n")}
`;
  }
  /**
   * Returns the varyings of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The WGSL snippet that defines the varyings.
   */
  getVaryings(shaderStage) {
    const snippets = [];
    if (shaderStage === "vertex") {
      this.getBuiltin("position", "Vertex", "vec4<f32>", "vertex");
    }
    if (shaderStage === "vertex" || shaderStage === "fragment") {
      const varyings = this.varyings;
      const vars = this.vars[shaderStage];
      for (let index6 = 0; index6 < varyings.length; index6++) {
        const varying3 = varyings[index6];
        if (varying3.needsInterpolation) {
          let attributesSnippet = `@location( ${index6} )`;
          if (varying3.interpolationType) {
            const samplingSnippet = varying3.interpolationSampling !== null ? `, ${varying3.interpolationSampling} )` : " )";
            attributesSnippet += ` @interpolate( ${varying3.interpolationType}${samplingSnippet}`;
          } else if (/^(int|uint|ivec|uvec)/.test(varying3.type)) {
            attributesSnippet += ` @interpolate( ${this.renderer.backend.compatibilityMode ? "flat, either" : "flat"} )`;
          }
          snippets.push(`${attributesSnippet} ${varying3.name} : ${this.getType(varying3.type)}`);
        } else if (shaderStage === "vertex" && vars.includes(varying3) === false) {
          vars.push(varying3);
        }
      }
    }
    const builtins = this.getBuiltins(shaderStage);
    if (builtins)
      snippets.push(builtins);
    const code3 = snippets.join(",\n	");
    return shaderStage === "vertex" ? this._getWGSLStruct("VaryingsStruct", "	" + code3) : code3;
  }
  isCustomStruct(nodeUniform) {
    const attribute3 = nodeUniform.value;
    const bufferNode = nodeUniform.node;
    const isAttributeStructType = (attribute3.isBufferAttribute || attribute3.isInstancedBufferAttribute) && bufferNode.structTypeNode !== null;
    const isStructArray = bufferNode.value && bufferNode.value.array && (typeof bufferNode.value.itemSize === "number" && bufferNode.value.array.length > bufferNode.value.itemSize);
    return isAttributeStructType && !isStructArray;
  }
  /**
   * Returns the uniforms of the given shader stage as a WGSL string.
   *
   * @param {string} shaderStage - The shader stage.
   * @return {string} The WGSL snippet that defines the uniforms.
   */
  getUniforms(shaderStage) {
    const uniforms = this.uniforms[shaderStage];
    const bindingSnippets = [];
    const bufferSnippets = [];
    const structSnippets = [];
    const uniformGroups = {};
    for (const uniform3 of uniforms) {
      const groupName = uniform3.groupNode.name;
      const uniformIndexes = this.bindingsIndexes[groupName];
      if (uniform3.type === "texture" || uniform3.type === "cubeTexture" || uniform3.type === "storageTexture" || uniform3.type === "texture3D") {
        const texture3 = uniform3.node.value;
        if (this.isUnfilterable(texture3) === false && uniform3.node.isStorageTextureNode !== true) {
          if (this.isSampleCompare(texture3)) {
            bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform3.name}_sampler : sampler_comparison;`);
          } else {
            bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform3.name}_sampler : sampler;`);
          }
        }
        let textureType;
        let multisampled = "";
        const { primarySamples } = this.renderer.backend.utils.getTextureSampleData(texture3);
        if (primarySamples > 1) {
          multisampled = "_multisampled";
        }
        if (texture3.isCubeTexture === true) {
          textureType = "texture_cube<f32>";
        } else if (texture3.isDepthTexture === true) {
          if (this.renderer.backend.compatibilityMode && texture3.compareFunction === null) {
            textureType = `texture${multisampled}_2d<f32>`;
          } else {
            textureType = `texture_depth${multisampled}_2d${texture3.isArrayTexture === true ? "_array" : ""}`;
          }
        } else if (uniform3.node.isStorageTextureNode === true) {
          const format2 = getFormat2(texture3);
          const access = this.getStorageAccess(uniform3.node, shaderStage);
          const is3D = uniform3.node.value.is3DTexture;
          const isArrayTexture = uniform3.node.value.isArrayTexture;
          const dimension = is3D ? "3d" : `2d${isArrayTexture ? "_array" : ""}`;
          textureType = `texture_storage_${dimension}<${format2}, ${access}>`;
        } else if (texture3.isArrayTexture === true || texture3.isDataArrayTexture === true || texture3.isCompressedArrayTexture === true) {
          textureType = "texture_2d_array<f32>";
        } else if (texture3.is3DTexture === true || texture3.isData3DTexture === true) {
          textureType = "texture_3d<f32>";
        } else {
          const componentPrefix = this.getComponentTypeFromTexture(texture3).charAt(0);
          textureType = `texture${multisampled}_2d<${componentPrefix}32>`;
        }
        bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform3.name} : ${textureType};`);
      } else if (uniform3.type === "buffer" || uniform3.type === "storageBuffer" || uniform3.type === "indirectStorageBuffer") {
        const bufferNode = uniform3.node;
        const bufferType = this.getType(bufferNode.getNodeType(this));
        const bufferCount = bufferNode.bufferCount;
        const bufferCountSnippet = bufferCount > 0 && uniform3.type === "buffer" ? ", " + bufferCount : "";
        const bufferAccessMode = bufferNode.isStorageBufferNode ? `storage, ${this.getStorageAccess(bufferNode, shaderStage)}` : "uniform";
        if (this.isCustomStruct(uniform3)) {
          bufferSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var<${bufferAccessMode}> ${uniform3.name} : ${bufferType};`);
        } else {
          const bufferTypeSnippet = bufferNode.isAtomic ? `atomic<${bufferType}>` : `${bufferType}`;
          const bufferSnippet = `	value : array< ${bufferTypeSnippet}${bufferCountSnippet} >`;
          bufferSnippets.push(this._getWGSLStructBinding(uniform3.name, bufferSnippet, bufferAccessMode, uniformIndexes.binding++, uniformIndexes.group));
        }
      } else {
        const vectorType = this.getType(this.getVectorType(uniform3.type));
        const groupName2 = uniform3.groupNode.name;
        const group = uniformGroups[groupName2] || (uniformGroups[groupName2] = {
          index: uniformIndexes.binding++,
          id: uniformIndexes.group,
          snippets: []
        });
        group.snippets.push(`	${uniform3.name} : ${vectorType}`);
      }
    }
    for (const name in uniformGroups) {
      const group = uniformGroups[name];
      structSnippets.push(this._getWGSLStructBinding(name, group.snippets.join(",\n"), "uniform", group.index, group.id));
    }
    let code3 = bindingSnippets.join("\n");
    code3 += bufferSnippets.join("\n");
    code3 += structSnippets.join("\n");
    return code3;
  }
  /**
   * Controls the code build of the shader stages.
   */
  buildCode() {
    const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };
    this.sortBindingGroups();
    for (const shaderStage in shadersData) {
      this.shaderStage = shaderStage;
      const stageData = shadersData[shaderStage];
      stageData.uniforms = this.getUniforms(shaderStage);
      stageData.attributes = this.getAttributes(shaderStage);
      stageData.varyings = this.getVaryings(shaderStage);
      stageData.structs = this.getStructs(shaderStage);
      stageData.vars = this.getVars(shaderStage);
      stageData.codes = this.getCodes(shaderStage);
      stageData.directives = this.getDirectives(shaderStage);
      stageData.scopedArrays = this.getScopedArrays(shaderStage);
      let flow = "// code\n\n";
      flow += this.flowCode[shaderStage];
      const flowNodes = this.flowNodes[shaderStage];
      const mainNode = flowNodes[flowNodes.length - 1];
      const outputNode = mainNode.outputNode;
      const isOutputStruct = outputNode !== void 0 && outputNode.isOutputStructNode === true;
      for (const node of flowNodes) {
        const flowSlotData = this.getFlowData(
          node
          /*, shaderStage*/
        );
        const slotName = node.name;
        if (slotName) {
          if (flow.length > 0)
            flow += "\n";
          flow += `	// flow -> ${slotName}
`;
        }
        flow += `${flowSlotData.code}
	`;
        if (node === mainNode && shaderStage !== "compute") {
          flow += "// result\n\n	";
          if (shaderStage === "vertex") {
            flow += `varyings.Vertex = ${flowSlotData.result};`;
          } else if (shaderStage === "fragment") {
            if (isOutputStruct) {
              stageData.returnType = outputNode.getNodeType(this);
              stageData.structs += "var<private> output : " + stageData.returnType + ";";
              flow += `return ${flowSlotData.result};`;
            } else {
              let structSnippet = "	@location(0) color: vec4<f32>";
              const builtins = this.getBuiltins("output");
              if (builtins)
                structSnippet += ",\n	" + builtins;
              stageData.returnType = "OutputStruct";
              stageData.structs += this._getWGSLStruct("OutputStruct", structSnippet);
              stageData.structs += "\nvar<private> output : OutputStruct;";
              flow += `output.color = ${flowSlotData.result};

	return output;`;
            }
          }
        }
      }
      stageData.flow = flow;
    }
    this.shaderStage = null;
    if (this.material !== null) {
      this.vertexShader = this._getWGSLVertexCode(shadersData.vertex);
      this.fragmentShader = this._getWGSLFragmentCode(shadersData.fragment);
    } else {
      const workgroupSize = this.object.workgroupSize;
      this.computeShader = this._getWGSLComputeCode(shadersData.compute, workgroupSize);
    }
  }
  /**
   * Returns the native shader method name for a given generic name.
   *
   * @param {string} method - The method name to resolve.
   * @param {?string} [output=null] - An optional output.
   * @return {string} The resolved WGSL method name.
   */
  getMethod(method, output3 = null) {
    let wgslMethod;
    if (output3 !== null) {
      wgslMethod = this._getWGSLMethod(method + "_" + output3);
    }
    if (wgslMethod === void 0) {
      wgslMethod = this._getWGSLMethod(method);
    }
    return wgslMethod || method;
  }
  /**
   * Returns the bitcast method name for a given input and outputType.
   *
   * @param {string} type - The output type to bitcast to.
   * @return {string} The resolved WGSL bitcast invocation.
   */
  getBitcastMethod(type) {
    const dataType = this.getType(type);
    return `bitcast<${dataType}>`;
  }
  /**
   * Returns the native snippet for a ternary operation.
   *
   * @param {string} condSnippet - The condition determining which expression gets resolved.
   * @param {string} ifSnippet - The expression to resolve to if the condition is true.
   * @param {string} elseSnippet - The expression to resolve to if the condition is false.
   * @return {string} The resolved method name.
   */
  getTernary(condSnippet, ifSnippet, elseSnippet) {
    return `select( ${elseSnippet}, ${ifSnippet}, ${condSnippet} )`;
  }
  /**
   * Returns the WGSL type of the given node data type.
   *
   * @param {string} type - The node data type.
   * @return {string} The WGSL type.
   */
  getType(type) {
    return wgslTypeLib[type] || type;
  }
  /**
   * Whether the requested feature is available or not.
   *
   * @param {string} name - The requested feature.
   * @return {boolean} Whether the requested feature is supported or not.
   */
  isAvailable(name) {
    let result = supports[name];
    if (result === void 0) {
      if (name === "float32Filterable") {
        result = this.renderer.hasFeature("float32-filterable");
      } else if (name === "clipDistance") {
        result = this.renderer.hasFeature("clip-distances");
      }
      supports[name] = result;
    }
    return result;
  }
  /**
   * Returns the native shader method name for a given generic name.
   *
   * @private
   * @param {string} method - The method name to resolve.
   * @return {string} The resolved WGSL method name.
   */
  _getWGSLMethod(method) {
    if (wgslPolyfill[method] !== void 0) {
      this._include(method);
    }
    return wgslMethods[method];
  }
  /**
   * Includes the given method name into the current
   * function node.
   *
   * @private
   * @param {string} name - The method name to include.
   * @return {CodeNode} The respective code node.
   */
  _include(name) {
    const codeNode = wgslPolyfill[name];
    codeNode.build(this);
    if (this.currentFunctionNode !== null) {
      this.currentFunctionNode.includes.push(codeNode);
    }
    return codeNode;
  }
  /**
   * Returns a WGSL vertex shader based on the given shader data.
   *
   * @private
   * @param {Object} shaderData - The shader data.
   * @return {string} The vertex shader.
   */
  _getWGSLVertexCode(shaderData) {
    return `${this.getSignature()}
// directives
${shaderData.directives}

// structs
${shaderData.structs}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}
var<private> varyings : VaryingsStruct;

// codes
${shaderData.codes}

@vertex
fn main( ${shaderData.attributes} ) -> VaryingsStruct {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

	return varyings;

}
`;
  }
  /**
   * Returns a WGSL fragment shader based on the given shader data.
   *
   * @private
   * @param {Object} shaderData - The shader data.
   * @return {string} The vertex shader.
   */
  _getWGSLFragmentCode(shaderData) {
    return `${this.getSignature()}
// global
${diagnostics}

// structs
${shaderData.structs}

// uniforms
${shaderData.uniforms}

// codes
${shaderData.codes}

@fragment
fn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
  }
  /**
   * Returns a WGSL compute shader based on the given shader data.
   *
   * @private
   * @param {Object} shaderData - The shader data.
   * @param {string} workgroupSize - The workgroup size.
   * @return {string} The vertex shader.
   */
  _getWGSLComputeCode(shaderData, workgroupSize) {
    const [workgroupSizeX, workgroupSizeY, workgroupSizeZ] = workgroupSize;
    return `${this.getSignature()}
// directives
${shaderData.directives}

// system
var<private> instanceIndex : u32;

// locals
${shaderData.scopedArrays}

// structs
${shaderData.structs}

// uniforms
${shaderData.uniforms}

// codes
${shaderData.codes}

@compute @workgroup_size( ${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ} )
fn main( ${shaderData.attributes} ) {

	// system
	instanceIndex = globalId.x
		+ globalId.y * ( ${workgroupSizeX} * numWorkgroups.x )
		+ globalId.z * ( ${workgroupSizeX} * numWorkgroups.x ) * ( ${workgroupSizeY} * numWorkgroups.y );

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
  }
  /**
   * Returns a WGSL struct based on the given name and variables.
   *
   * @private
   * @param {string} name - The struct name.
   * @param {string} vars - The struct variables.
   * @return {string} The WGSL snippet representing a struct.
   */
  _getWGSLStruct(name, vars) {
    return `
struct ${name} {
${vars}
};`;
  }
  /**
   * Returns a WGSL struct binding.
   *
   * @private
   * @param {string} name - The struct name.
   * @param {string} vars - The struct variables.
   * @param {string} access - The access.
   * @param {number} [binding=0] - The binding index.
   * @param {number} [group=0] - The group index.
   * @return {string} The WGSL snippet representing a struct binding.
   */
  _getWGSLStructBinding(name, vars, access, binding = 0, group = 0) {
    const structName = name + "Struct";
    const structSnippet = this._getWGSLStruct(structName, vars);
    return `${structSnippet}
@binding( ${binding} ) @group( ${group} )
var<${access}> ${name} : ${structName};`;
  }
};
var WebGPUUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGPUBackend} backend - The WebGPU backend.
   */
  constructor(backend) {
    this.backend = backend;
  }
  /**
   * Returns the depth/stencil GPU format for the given render context.
   *
   * @param {RenderContext} renderContext - The render context.
   * @return {string} The depth/stencil GPU texture format.
   */
  getCurrentDepthStencilFormat(renderContext) {
    let format2;
    if (renderContext.depthTexture !== null) {
      format2 = this.getTextureFormatGPU(renderContext.depthTexture);
    } else if (renderContext.depth && renderContext.stencil) {
      format2 = GPUTextureFormat.Depth24PlusStencil8;
    } else if (renderContext.depth) {
      format2 = GPUTextureFormat.Depth24Plus;
    }
    return format2;
  }
  /**
   * Returns the GPU format for the given texture.
   *
   * @param {Texture} texture - The texture.
   * @return {string} The GPU texture format.
   */
  getTextureFormatGPU(texture3) {
    return this.backend.get(texture3).format;
  }
  /**
   * Returns an object that defines the multi-sampling state of the given texture.
   *
   * @param {Texture} texture - The texture.
   * @return {Object} The multi-sampling state.
   */
  getTextureSampleData(texture3) {
    let samples;
    if (texture3.isFramebufferTexture) {
      samples = 1;
    } else if (texture3.isDepthTexture && !texture3.renderTarget) {
      const renderer3 = this.backend.renderer;
      const renderTarget = renderer3.getRenderTarget();
      samples = renderTarget ? renderTarget.samples : renderer3.samples;
    } else if (texture3.renderTarget) {
      samples = texture3.renderTarget.samples;
    }
    samples = samples || 1;
    const isMSAA = samples > 1 && texture3.renderTarget !== null && (texture3.isDepthTexture !== true && texture3.isFramebufferTexture !== true);
    const primarySamples = isMSAA ? 1 : samples;
    return { samples, primarySamples, isMSAA };
  }
  /**
   * Returns the default color attachment's GPU format of the current render context.
   *
   * @param {RenderContext} renderContext - The render context.
   * @return {string} The GPU texture format of the default color attachment.
   */
  getCurrentColorFormat(renderContext) {
    let format2;
    if (renderContext.textures !== null) {
      format2 = this.getTextureFormatGPU(renderContext.textures[0]);
    } else {
      format2 = this.getPreferredCanvasFormat();
    }
    return format2;
  }
  /**
   * Returns the output color space of the current render context.
   *
   * @param {RenderContext} renderContext - The render context.
   * @return {string} The output color space.
   */
  getCurrentColorSpace(renderContext) {
    if (renderContext.textures !== null) {
      return renderContext.textures[0].colorSpace;
    }
    return this.backend.renderer.outputColorSpace;
  }
  /**
   * Returns GPU primitive topology for the given object and material.
   *
   * @param {Object3D} object - The 3D object.
   * @param {Material} material - The material.
   * @return {string} The GPU primitive topology.
   */
  getPrimitiveTopology(object, material) {
    if (object.isPoints)
      return GPUPrimitiveTopology.PointList;
    else if (object.isLineSegments || object.isMesh && material.wireframe === true)
      return GPUPrimitiveTopology.LineList;
    else if (object.isLine)
      return GPUPrimitiveTopology.LineStrip;
    else if (object.isMesh)
      return GPUPrimitiveTopology.TriangleList;
  }
  /**
   * Returns a modified sample count from the given sample count value.
   *
   * That is required since WebGPU only supports either 1 or 4.
   *
   * @param {number} sampleCount - The input sample count.
   * @return {number} The (potentially updated) output sample count.
   */
  getSampleCount(sampleCount) {
    return sampleCount >= 4 ? 4 : 1;
  }
  /**
   * Returns the sample count of the given render context.
   *
   * @param {RenderContext} renderContext - The render context.
   * @return {number} The sample count.
   */
  getSampleCountRenderContext(renderContext) {
    if (renderContext.textures !== null) {
      return this.getSampleCount(renderContext.sampleCount);
    }
    return this.getSampleCount(this.backend.renderer.samples);
  }
  /**
   * Returns the preferred canvas format.
   *
   * There is a separate method for this so it's possible to
   * honor edge cases for specific devices.
   *
   * @return {string} The GPU texture format of the canvas.
   */
  getPreferredCanvasFormat() {
    const outputType = this.backend.parameters.outputType;
    if (outputType === void 0) {
      return navigator.gpu.getPreferredCanvasFormat();
    } else if (outputType === UnsignedByteType) {
      return GPUTextureFormat.BGRA8Unorm;
    } else if (outputType === HalfFloatType) {
      return GPUTextureFormat.RGBA16Float;
    } else {
      throw new Error("Unsupported outputType");
    }
  }
};
var typedArraysToVertexFormatPrefix = /* @__PURE__ */ new Map([
  [Int8Array, ["sint8", "snorm8"]],
  [Uint8Array, ["uint8", "unorm8"]],
  [Int16Array, ["sint16", "snorm16"]],
  [Uint16Array, ["uint16", "unorm16"]],
  [Int32Array, ["sint32", "snorm32"]],
  [Uint32Array, ["uint32", "unorm32"]],
  [Float32Array, ["float32"]]
]);
if (typeof Float16Array !== "undefined") {
  typedArraysToVertexFormatPrefix.set(Float16Array, ["float16"]);
}
var typedAttributeToVertexFormatPrefix = /* @__PURE__ */ new Map([
  [Float16BufferAttribute, ["float16"]]
]);
var typeArraysToVertexFormatPrefixForItemSize1 = /* @__PURE__ */ new Map([
  [Int32Array, "sint32"],
  [Int16Array, "sint32"],
  // patch for INT16
  [Uint32Array, "uint32"],
  [Uint16Array, "uint32"],
  // patch for UINT16
  [Float32Array, "float32"]
]);
var WebGPUAttributeUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGPUBackend} backend - The WebGPU backend.
   */
  constructor(backend) {
    this.backend = backend;
  }
  /**
   * Creates the GPU buffer for the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   * @param {GPUBufferUsage} usage - A flag that indicates how the buffer may be used after its creation.
   */
  createAttribute(attribute3, usage) {
    const bufferAttribute3 = this._getBufferAttribute(attribute3);
    const backend = this.backend;
    const bufferData = backend.get(bufferAttribute3);
    let buffer3 = bufferData.buffer;
    if (buffer3 === void 0) {
      const device = backend.device;
      let array3 = bufferAttribute3.array;
      if (attribute3.normalized === false) {
        if (array3.constructor === Int16Array || array3.constructor === Int8Array) {
          array3 = new Int32Array(array3);
        } else if (array3.constructor === Uint16Array || array3.constructor === Uint8Array) {
          array3 = new Uint32Array(array3);
          if (usage & GPUBufferUsage.INDEX) {
            for (let i2 = 0; i2 < array3.length; i2++) {
              if (array3[i2] === 65535)
                array3[i2] = 4294967295;
            }
          }
        }
      }
      bufferAttribute3.array = array3;
      if ((bufferAttribute3.isStorageBufferAttribute || bufferAttribute3.isStorageInstancedBufferAttribute) && bufferAttribute3.itemSize === 3) {
        array3 = new array3.constructor(bufferAttribute3.count * 4);
        for (let i2 = 0; i2 < bufferAttribute3.count; i2++) {
          array3.set(bufferAttribute3.array.subarray(i2 * 3, i2 * 3 + 3), i2 * 4);
        }
        bufferAttribute3.itemSize = 4;
        bufferAttribute3.array = array3;
        bufferData._force3to4BytesAlignment = true;
      }
      const byteLength = array3.byteLength;
      const size = byteLength + (4 - byteLength % 4) % 4;
      buffer3 = device.createBuffer({
        label: bufferAttribute3.name,
        size,
        usage,
        mappedAtCreation: true
      });
      new array3.constructor(buffer3.getMappedRange()).set(array3);
      buffer3.unmap();
      bufferData.buffer = buffer3;
    }
  }
  /**
   * Updates the GPU buffer of the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  updateAttribute(attribute3) {
    const bufferAttribute3 = this._getBufferAttribute(attribute3);
    const backend = this.backend;
    const device = backend.device;
    const bufferData = backend.get(bufferAttribute3);
    const buffer3 = backend.get(bufferAttribute3).buffer;
    let array3 = bufferAttribute3.array;
    if (bufferData._force3to4BytesAlignment === true) {
      array3 = new array3.constructor(bufferAttribute3.count * 4);
      for (let i2 = 0; i2 < bufferAttribute3.count; i2++) {
        array3.set(bufferAttribute3.array.subarray(i2 * 3, i2 * 3 + 3), i2 * 4);
      }
      bufferAttribute3.array = array3;
    }
    const isTypedArray = this._isTypedArray(array3);
    const updateRanges = bufferAttribute3.updateRanges;
    if (updateRanges.length === 0) {
      device.queue.writeBuffer(
        buffer3,
        0,
        array3,
        0
      );
    } else {
      const byteOffsetFactor = isTypedArray ? 1 : array3.BYTES_PER_ELEMENT;
      for (let i2 = 0, l2 = updateRanges.length; i2 < l2; i2++) {
        const range3 = updateRanges[i2];
        let dataOffset, size;
        if (bufferData._force3to4BytesAlignment === true) {
          const vertexStart = Math.floor(range3.start / 3);
          const vertexCount = Math.ceil(range3.count / 3);
          dataOffset = vertexStart * 4 * byteOffsetFactor;
          size = vertexCount * 4 * byteOffsetFactor;
        } else {
          dataOffset = range3.start * byteOffsetFactor;
          size = range3.count * byteOffsetFactor;
        }
        const bufferOffset = dataOffset * (isTypedArray ? array3.BYTES_PER_ELEMENT : 1);
        device.queue.writeBuffer(
          buffer3,
          bufferOffset,
          array3,
          dataOffset,
          size
        );
      }
      bufferAttribute3.clearUpdateRanges();
    }
  }
  /**
   * This method creates the vertex buffer layout data which are
   * require when creating a render pipeline for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {Array<Object>} An array holding objects which describe the vertex buffer layout.
   */
  createShaderVertexBuffers(renderObject) {
    const attributes = renderObject.getAttributes();
    const vertexBuffers = /* @__PURE__ */ new Map();
    for (let slot = 0; slot < attributes.length; slot++) {
      const geometryAttribute = attributes[slot];
      const bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;
      const bufferAttribute3 = this._getBufferAttribute(geometryAttribute);
      let vertexBufferLayout = vertexBuffers.get(bufferAttribute3);
      if (vertexBufferLayout === void 0) {
        let arrayStride, stepMode;
        if (geometryAttribute.isInterleavedBufferAttribute === true) {
          arrayStride = geometryAttribute.data.stride * bytesPerElement;
          stepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;
        } else {
          arrayStride = geometryAttribute.itemSize * bytesPerElement;
          stepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;
        }
        if (geometryAttribute.normalized === false && (geometryAttribute.array.constructor === Int16Array || geometryAttribute.array.constructor === Uint16Array)) {
          arrayStride = 4;
        }
        vertexBufferLayout = {
          arrayStride,
          attributes: [],
          stepMode
        };
        vertexBuffers.set(bufferAttribute3, vertexBufferLayout);
      }
      const format2 = this._getVertexFormat(geometryAttribute);
      const offset = geometryAttribute.isInterleavedBufferAttribute === true ? geometryAttribute.offset * bytesPerElement : 0;
      vertexBufferLayout.attributes.push({
        shaderLocation: slot,
        offset,
        format: format2
      });
    }
    return Array.from(vertexBuffers.values());
  }
  /**
   * Destroys the GPU buffer of the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  destroyAttribute(attribute3) {
    const backend = this.backend;
    const data = backend.get(this._getBufferAttribute(attribute3));
    data.buffer.destroy();
    backend.delete(attribute3);
  }
  /**
   * This method performs a readback operation by moving buffer data from
   * a storage buffer attribute from the GPU to the CPU.
   *
   * @async
   * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
   * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
   */
  async getArrayBufferAsync(attribute3) {
    const backend = this.backend;
    const device = backend.device;
    const data = backend.get(this._getBufferAttribute(attribute3));
    const bufferGPU = data.buffer;
    const size = bufferGPU.size;
    const readBufferGPU = device.createBuffer({
      label: `${attribute3.name}_readback`,
      size,
      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
    });
    const cmdEncoder = device.createCommandEncoder({
      label: `readback_encoder_${attribute3.name}`
    });
    cmdEncoder.copyBufferToBuffer(
      bufferGPU,
      0,
      readBufferGPU,
      0,
      size
    );
    const gpuCommands = cmdEncoder.finish();
    device.queue.submit([gpuCommands]);
    await readBufferGPU.mapAsync(GPUMapMode.READ);
    const arrayBuffer3 = readBufferGPU.getMappedRange();
    const dstBuffer = new attribute3.array.constructor(arrayBuffer3.slice(0));
    readBufferGPU.unmap();
    return dstBuffer.buffer;
  }
  /**
   * Returns the vertex format of the given buffer attribute.
   *
   * @private
   * @param {BufferAttribute} geometryAttribute - The buffer attribute.
   * @return {string|undefined} The vertex format (e.g. 'float32x3').
   */
  _getVertexFormat(geometryAttribute) {
    const { itemSize, normalized } = geometryAttribute;
    const ArrayType = geometryAttribute.array.constructor;
    const AttributeType2 = geometryAttribute.constructor;
    let format2;
    if (itemSize === 1) {
      format2 = typeArraysToVertexFormatPrefixForItemSize1.get(ArrayType);
    } else {
      const prefixOptions = typedAttributeToVertexFormatPrefix.get(AttributeType2) || typedArraysToVertexFormatPrefix.get(ArrayType);
      const prefix = prefixOptions[normalized ? 1 : 0];
      if (prefix) {
        const bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;
        const paddedBytesPerUnit = Math.floor((bytesPerUnit + 3) / 4) * 4;
        const paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;
        if (paddedItemSize % 1) {
          throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");
        }
        format2 = `${prefix}x${paddedItemSize}`;
      }
    }
    if (!format2) {
      console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet.");
    }
    return format2;
  }
  /**
   * Returns `true` if the given array is a typed array.
   *
   * @private
   * @param {any} array - The array.
   * @return {boolean} Whether the given array is a typed array or not.
   */
  _isTypedArray(array3) {
    return ArrayBuffer.isView(array3) && !(array3 instanceof DataView);
  }
  /**
   * Utility method for handling interleaved buffer attributes correctly.
   * To process them, their `InterleavedBuffer` is returned.
   *
   * @private
   * @param {BufferAttribute} attribute - The attribute.
   * @return {BufferAttribute|InterleavedBuffer}
   */
  _getBufferAttribute(attribute3) {
    if (attribute3.isInterleavedBufferAttribute)
      attribute3 = attribute3.data;
    return attribute3;
  }
};
var WebGPUBindingUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGPUBackend} backend - The WebGPU backend.
   */
  constructor(backend) {
    this.backend = backend;
    this.bindGroupLayoutCache = /* @__PURE__ */ new WeakMap();
  }
  /**
   * Creates a GPU bind group layout for the given bind group.
   *
   * @param {BindGroup} bindGroup - The bind group.
   * @return {GPUBindGroupLayout} The GPU bind group layout.
   */
  createBindingsLayout(bindGroup) {
    const backend = this.backend;
    const device = backend.device;
    const entries = [];
    let index6 = 0;
    for (const binding of bindGroup.bindings) {
      const bindingGPU = {
        binding: index6++,
        visibility: binding.visibility
      };
      if (binding.isUniformBuffer || binding.isStorageBuffer) {
        const buffer3 = {};
        if (binding.isStorageBuffer) {
          if (binding.visibility & 4) {
            if (binding.access === NodeAccess.READ_WRITE || binding.access === NodeAccess.WRITE_ONLY) {
              buffer3.type = GPUBufferBindingType.Storage;
            } else {
              buffer3.type = GPUBufferBindingType.ReadOnlyStorage;
            }
          } else {
            buffer3.type = GPUBufferBindingType.ReadOnlyStorage;
          }
        }
        bindingGPU.buffer = buffer3;
      } else if (binding.isSampledTexture && binding.store) {
        const storageTexture3 = {};
        storageTexture3.format = this.backend.get(binding.texture).texture.format;
        const access = binding.access;
        if (access === NodeAccess.READ_WRITE) {
          storageTexture3.access = GPUStorageTextureAccess.ReadWrite;
        } else if (access === NodeAccess.WRITE_ONLY) {
          storageTexture3.access = GPUStorageTextureAccess.WriteOnly;
        } else {
          storageTexture3.access = GPUStorageTextureAccess.ReadOnly;
        }
        if (binding.texture.isArrayTexture) {
          storageTexture3.viewDimension = GPUTextureViewDimension.TwoDArray;
        } else if (binding.texture.is3DTexture) {
          storageTexture3.viewDimension = GPUTextureViewDimension.ThreeD;
        }
        bindingGPU.storageTexture = storageTexture3;
      } else if (binding.isSampledTexture) {
        const texture3 = {};
        const { primarySamples } = backend.utils.getTextureSampleData(binding.texture);
        if (primarySamples > 1) {
          texture3.multisampled = true;
          if (!binding.texture.isDepthTexture) {
            texture3.sampleType = GPUTextureSampleType.UnfilterableFloat;
          }
        }
        if (binding.texture.isDepthTexture) {
          if (backend.compatibilityMode && binding.texture.compareFunction === null) {
            texture3.sampleType = GPUTextureSampleType.UnfilterableFloat;
          } else {
            texture3.sampleType = GPUTextureSampleType.Depth;
          }
        } else if (binding.texture.isDataTexture || binding.texture.isDataArrayTexture || binding.texture.isData3DTexture) {
          const type = binding.texture.type;
          if (type === IntType) {
            texture3.sampleType = GPUTextureSampleType.SInt;
          } else if (type === UnsignedIntType) {
            texture3.sampleType = GPUTextureSampleType.UInt;
          } else if (type === FloatType) {
            if (this.backend.hasFeature("float32-filterable")) {
              texture3.sampleType = GPUTextureSampleType.Float;
            } else {
              texture3.sampleType = GPUTextureSampleType.UnfilterableFloat;
            }
          }
        }
        if (binding.isSampledCubeTexture) {
          texture3.viewDimension = GPUTextureViewDimension.Cube;
        } else if (binding.texture.isArrayTexture || binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {
          texture3.viewDimension = GPUTextureViewDimension.TwoDArray;
        } else if (binding.isSampledTexture3D) {
          texture3.viewDimension = GPUTextureViewDimension.ThreeD;
        }
        bindingGPU.texture = texture3;
      } else if (binding.isSampler) {
        const sampler3 = {};
        if (binding.texture.isDepthTexture) {
          if (binding.texture.compareFunction !== null) {
            sampler3.type = GPUSamplerBindingType.Comparison;
          } else if (backend.compatibilityMode) {
            sampler3.type = GPUSamplerBindingType.NonFiltering;
          }
        }
        bindingGPU.sampler = sampler3;
      } else {
        console.error(`WebGPUBindingUtils: Unsupported binding "${binding}".`);
      }
      entries.push(bindingGPU);
    }
    return device.createBindGroupLayout({ entries });
  }
  /**
   * Creates bindings from the given bind group definition.
   *
   * @param {BindGroup} bindGroup - The bind group.
   * @param {Array<BindGroup>} bindings - Array of bind groups.
   * @param {number} cacheIndex - The cache index.
   * @param {number} version - The version.
   */
  createBindings(bindGroup, bindings, cacheIndex, version = 0) {
    const { backend, bindGroupLayoutCache } = this;
    const bindingsData = backend.get(bindGroup);
    let bindLayoutGPU = bindGroupLayoutCache.get(bindGroup.bindingsReference);
    if (bindLayoutGPU === void 0) {
      bindLayoutGPU = this.createBindingsLayout(bindGroup);
      bindGroupLayoutCache.set(bindGroup.bindingsReference, bindLayoutGPU);
    }
    let bindGroupGPU;
    if (cacheIndex > 0) {
      if (bindingsData.groups === void 0) {
        bindingsData.groups = [];
        bindingsData.versions = [];
      }
      if (bindingsData.versions[cacheIndex] === version) {
        bindGroupGPU = bindingsData.groups[cacheIndex];
      }
    }
    if (bindGroupGPU === void 0) {
      bindGroupGPU = this.createBindGroup(bindGroup, bindLayoutGPU);
      if (cacheIndex > 0) {
        bindingsData.groups[cacheIndex] = bindGroupGPU;
        bindingsData.versions[cacheIndex] = version;
      }
    }
    bindingsData.group = bindGroupGPU;
    bindingsData.layout = bindLayoutGPU;
  }
  /**
   * Updates a buffer binding.
   *
   *  @param {Buffer} binding - The buffer binding to update.
   */
  updateBinding(binding) {
    const backend = this.backend;
    const device = backend.device;
    const buffer3 = binding.buffer;
    const bufferGPU = backend.get(binding).buffer;
    device.queue.writeBuffer(bufferGPU, 0, buffer3, 0);
  }
  /**
   * Creates a GPU bind group for the camera index.
   *
   * @param {Uint32Array} data - The index data.
   * @param {GPUBindGroupLayout} layout - The GPU bind group layout.
   * @return {GPUBindGroup} The GPU bind group.
   */
  createBindGroupIndex(data, layout) {
    const backend = this.backend;
    const device = backend.device;
    const usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;
    const index6 = data[0];
    const buffer3 = device.createBuffer({
      label: "bindingCameraIndex_" + index6,
      size: 16,
      // uint(4) * 4
      usage
    });
    device.queue.writeBuffer(buffer3, 0, data, 0);
    const entries = [{ binding: 0, resource: { buffer: buffer3 } }];
    return device.createBindGroup({
      label: "bindGroupCameraIndex_" + index6,
      layout,
      entries
    });
  }
  /**
   * Creates a GPU bind group for the given bind group and GPU layout.
   *
   * @param {BindGroup} bindGroup - The bind group.
   * @param {GPUBindGroupLayout} layoutGPU - The GPU bind group layout.
   * @return {GPUBindGroup} The GPU bind group.
   */
  createBindGroup(bindGroup, layoutGPU) {
    const backend = this.backend;
    const device = backend.device;
    let bindingPoint = 0;
    const entriesGPU = [];
    for (const binding of bindGroup.bindings) {
      if (binding.isUniformBuffer) {
        const bindingData = backend.get(binding);
        if (bindingData.buffer === void 0) {
          const byteLength = binding.byteLength;
          const usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;
          const bufferGPU = device.createBuffer({
            label: "bindingBuffer_" + binding.name,
            size: byteLength,
            usage
          });
          bindingData.buffer = bufferGPU;
        }
        entriesGPU.push({ binding: bindingPoint, resource: { buffer: bindingData.buffer } });
      } else if (binding.isStorageBuffer) {
        const bindingData = backend.get(binding);
        if (bindingData.buffer === void 0) {
          const attribute3 = binding.attribute;
          bindingData.buffer = backend.get(attribute3).buffer;
        }
        entriesGPU.push({ binding: bindingPoint, resource: { buffer: bindingData.buffer } });
      } else if (binding.isSampledTexture) {
        const textureData = backend.get(binding.texture);
        let resourceGPU;
        if (textureData.externalTexture !== void 0) {
          resourceGPU = device.importExternalTexture({ source: textureData.externalTexture });
        } else {
          const mipLevelCount = binding.store ? 1 : textureData.texture.mipLevelCount;
          let propertyName = `view-${textureData.texture.width}-${textureData.texture.height}`;
          if (textureData.texture.depthOrArrayLayers > 1) {
            propertyName += `-${textureData.texture.depthOrArrayLayers}`;
          }
          propertyName += `-${mipLevelCount}`;
          resourceGPU = textureData[propertyName];
          if (resourceGPU === void 0) {
            const aspectGPU = GPUTextureAspect.All;
            let dimensionViewGPU;
            if (binding.isSampledCubeTexture) {
              dimensionViewGPU = GPUTextureViewDimension.Cube;
            } else if (binding.isSampledTexture3D) {
              dimensionViewGPU = GPUTextureViewDimension.ThreeD;
            } else if (binding.texture.isArrayTexture || binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {
              dimensionViewGPU = GPUTextureViewDimension.TwoDArray;
            } else {
              dimensionViewGPU = GPUTextureViewDimension.TwoD;
            }
            resourceGPU = textureData[propertyName] = textureData.texture.createView({ aspect: aspectGPU, dimension: dimensionViewGPU, mipLevelCount });
          }
        }
        entriesGPU.push({ binding: bindingPoint, resource: resourceGPU });
      } else if (binding.isSampler) {
        const textureGPU = backend.get(binding.texture);
        entriesGPU.push({ binding: bindingPoint, resource: textureGPU.sampler });
      }
      bindingPoint++;
    }
    return device.createBindGroup({
      label: "bindGroup_" + bindGroup.name,
      layout: layoutGPU,
      entries: entriesGPU
    });
  }
};
var WebGPUPipelineUtils = class {
  /**
   * Constructs a new utility object.
   *
   * @param {WebGPUBackend} backend - The WebGPU backend.
   */
  constructor(backend) {
    this.backend = backend;
    this._activePipelines = /* @__PURE__ */ new WeakMap();
  }
  /**
   * Sets the given pipeline for the given pass. The method makes sure to only set the
   * pipeline when necessary.
   *
   * @param {(GPURenderPassEncoder|GPUComputePassEncoder)} pass - The pass encoder.
   * @param {(GPURenderPipeline|GPUComputePipeline)} pipeline - The pipeline.
   */
  setPipeline(pass3, pipeline) {
    const currentPipeline = this._activePipelines.get(pass3);
    if (currentPipeline !== pipeline) {
      pass3.setPipeline(pipeline);
      this._activePipelines.set(pass3, pipeline);
    }
  }
  /**
   * Returns the sample count derived from the given render context.
   *
   * @private
   * @param {RenderContext} renderContext - The render context.
   * @return {number} The sample count.
   */
  _getSampleCount(renderContext) {
    return this.backend.utils.getSampleCountRenderContext(renderContext);
  }
  /**
   * Creates a render pipeline for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
   */
  createRenderPipeline(renderObject, promises) {
    const { object, material, geometry, pipeline } = renderObject;
    const { vertexProgram, fragmentProgram } = pipeline;
    const backend = this.backend;
    const device = backend.device;
    const utils = backend.utils;
    const pipelineData = backend.get(pipeline);
    const bindGroupLayouts = [];
    for (const bindGroup of renderObject.getBindings()) {
      const bindingsData = backend.get(bindGroup);
      bindGroupLayouts.push(bindingsData.layout);
    }
    const vertexBuffers = backend.attributeUtils.createShaderVertexBuffers(renderObject);
    let blending;
    if (material.blending !== NoBlending && (material.blending !== NormalBlending || material.transparent !== false)) {
      blending = this._getBlending(material);
    }
    let stencilFront = {};
    if (material.stencilWrite === true) {
      stencilFront = {
        compare: this._getStencilCompare(material),
        failOp: this._getStencilOperation(material.stencilFail),
        depthFailOp: this._getStencilOperation(material.stencilZFail),
        passOp: this._getStencilOperation(material.stencilZPass)
      };
    }
    const colorWriteMask = this._getColorWriteMask(material);
    const targets = [];
    if (renderObject.context.textures !== null) {
      const textures = renderObject.context.textures;
      for (let i2 = 0; i2 < textures.length; i2++) {
        const colorFormat = utils.getTextureFormatGPU(textures[i2]);
        targets.push({
          format: colorFormat,
          blend: blending,
          writeMask: colorWriteMask
        });
      }
    } else {
      const colorFormat = utils.getCurrentColorFormat(renderObject.context);
      targets.push({
        format: colorFormat,
        blend: blending,
        writeMask: colorWriteMask
      });
    }
    const vertexModule = backend.get(vertexProgram).module;
    const fragmentModule = backend.get(fragmentProgram).module;
    const primitiveState = this._getPrimitiveState(object, geometry, material);
    const depthCompare = this._getDepthCompare(material);
    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);
    const sampleCount = this._getSampleCount(renderObject.context);
    const pipelineDescriptor = {
      label: `renderPipeline_${material.name || material.type}_${material.id}`,
      vertex: Object.assign({}, vertexModule, { buffers: vertexBuffers }),
      fragment: Object.assign({}, fragmentModule, { targets }),
      primitive: primitiveState,
      multisample: {
        count: sampleCount,
        alphaToCoverageEnabled: material.alphaToCoverage && sampleCount > 1
      },
      layout: device.createPipelineLayout({
        bindGroupLayouts
      })
    };
    const depthStencil = {};
    const renderDepth = renderObject.context.depth;
    const renderStencil = renderObject.context.stencil;
    if (renderDepth === true || renderStencil === true) {
      if (renderDepth === true) {
        depthStencil.format = depthStencilFormat;
        depthStencil.depthWriteEnabled = material.depthWrite;
        depthStencil.depthCompare = depthCompare;
      }
      if (renderStencil === true) {
        depthStencil.stencilFront = stencilFront;
        depthStencil.stencilBack = {};
        depthStencil.stencilReadMask = material.stencilFuncMask;
        depthStencil.stencilWriteMask = material.stencilWriteMask;
      }
      if (material.polygonOffset === true) {
        depthStencil.depthBias = material.polygonOffsetUnits;
        depthStencil.depthBiasSlopeScale = material.polygonOffsetFactor;
        depthStencil.depthBiasClamp = 0;
      }
      pipelineDescriptor.depthStencil = depthStencil;
    }
    if (promises === null) {
      pipelineData.pipeline = device.createRenderPipeline(pipelineDescriptor);
    } else {
      const p2 = new Promise((resolve) => {
        device.createRenderPipelineAsync(pipelineDescriptor).then((pipeline2) => {
          pipelineData.pipeline = pipeline2;
          resolve();
        });
      });
      promises.push(p2);
    }
  }
  /**
   * Creates GPU render bundle encoder for the given render context.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {?string} [label='renderBundleEncoder'] - The label.
   * @return {GPURenderBundleEncoder} The GPU render bundle encoder.
   */
  createBundleEncoder(renderContext, label3 = "renderBundleEncoder") {
    const backend = this.backend;
    const { utils, device } = backend;
    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderContext);
    const colorFormat = utils.getCurrentColorFormat(renderContext);
    const sampleCount = this._getSampleCount(renderContext);
    const descriptor = {
      label: label3,
      colorFormats: [colorFormat],
      depthStencilFormat,
      sampleCount
    };
    return device.createRenderBundleEncoder(descriptor);
  }
  /**
   * Creates a compute pipeline for the given compute node.
   *
   * @param {ComputePipeline} pipeline - The compute pipeline.
   * @param {Array<BindGroup>} bindings - The bindings.
   */
  createComputePipeline(pipeline, bindings) {
    const backend = this.backend;
    const device = backend.device;
    const computeProgram = backend.get(pipeline.computeProgram).module;
    const pipelineGPU = backend.get(pipeline);
    const bindGroupLayouts = [];
    for (const bindingsGroup of bindings) {
      const bindingsData = backend.get(bindingsGroup);
      bindGroupLayouts.push(bindingsData.layout);
    }
    pipelineGPU.pipeline = device.createComputePipeline({
      compute: computeProgram,
      layout: device.createPipelineLayout({
        bindGroupLayouts
      })
    });
  }
  /**
   * Returns the blending state as a descriptor object required
   * for the pipeline creation.
   *
   * @private
   * @param {Material} material - The material.
   * @return {Object} The blending state.
   */
  _getBlending(material) {
    let color4, alpha;
    const blending = material.blending;
    const blendSrc = material.blendSrc;
    const blendDst = material.blendDst;
    const blendEquation = material.blendEquation;
    if (blending === CustomBlending) {
      const blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : blendSrc;
      const blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : blendDst;
      const blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : blendEquation;
      color4 = {
        srcFactor: this._getBlendFactor(blendSrc),
        dstFactor: this._getBlendFactor(blendDst),
        operation: this._getBlendOperation(blendEquation)
      };
      alpha = {
        srcFactor: this._getBlendFactor(blendSrcAlpha),
        dstFactor: this._getBlendFactor(blendDstAlpha),
        operation: this._getBlendOperation(blendEquationAlpha)
      };
    } else {
      const premultipliedAlpha = material.premultipliedAlpha;
      const setBlend = (srcRGB, dstRGB, srcAlpha, dstAlpha) => {
        color4 = {
          srcFactor: srcRGB,
          dstFactor: dstRGB,
          operation: GPUBlendOperation.Add
        };
        alpha = {
          srcFactor: srcAlpha,
          dstFactor: dstAlpha,
          operation: GPUBlendOperation.Add
        };
      };
      if (premultipliedAlpha) {
        switch (blending) {
          case NormalBlending:
            setBlend(GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);
            break;
          case AdditiveBlending:
            setBlend(GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One);
            break;
          case SubtractiveBlending:
            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);
            break;
          case MultiplyBlending:
            setBlend(GPUBlendFactor.Dst, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.Zero, GPUBlendFactor.One);
            break;
        }
      } else {
        switch (blending) {
          case NormalBlending:
            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);
            break;
          case AdditiveBlending:
            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One);
            break;
          case SubtractiveBlending:
            console.error("THREE.WebGPURenderer: SubtractiveBlending requires material.premultipliedAlpha = true");
            break;
          case MultiplyBlending:
            console.error("THREE.WebGPURenderer: MultiplyBlending requires material.premultipliedAlpha = true");
            break;
        }
      }
    }
    if (color4 !== void 0 && alpha !== void 0) {
      return { color: color4, alpha };
    } else {
      console.error("THREE.WebGPURenderer: Invalid blending: ", blending);
    }
  }
  /**
   * Returns the GPU blend factor which is required for the pipeline creation.
   *
   * @private
   * @param {number} blend - The blend factor as a three.js constant.
   * @return {string} The GPU blend factor.
   */
  _getBlendFactor(blend) {
    let blendFactor;
    switch (blend) {
      case ZeroFactor:
        blendFactor = GPUBlendFactor.Zero;
        break;
      case OneFactor:
        blendFactor = GPUBlendFactor.One;
        break;
      case SrcColorFactor:
        blendFactor = GPUBlendFactor.Src;
        break;
      case OneMinusSrcColorFactor:
        blendFactor = GPUBlendFactor.OneMinusSrc;
        break;
      case SrcAlphaFactor:
        blendFactor = GPUBlendFactor.SrcAlpha;
        break;
      case OneMinusSrcAlphaFactor:
        blendFactor = GPUBlendFactor.OneMinusSrcAlpha;
        break;
      case DstColorFactor:
        blendFactor = GPUBlendFactor.Dst;
        break;
      case OneMinusDstColorFactor:
        blendFactor = GPUBlendFactor.OneMinusDst;
        break;
      case DstAlphaFactor:
        blendFactor = GPUBlendFactor.DstAlpha;
        break;
      case OneMinusDstAlphaFactor:
        blendFactor = GPUBlendFactor.OneMinusDstAlpha;
        break;
      case SrcAlphaSaturateFactor:
        blendFactor = GPUBlendFactor.SrcAlphaSaturated;
        break;
      case BlendColorFactor:
        blendFactor = GPUBlendFactor.Constant;
        break;
      case OneMinusBlendColorFactor:
        blendFactor = GPUBlendFactor.OneMinusConstant;
        break;
      default:
        console.error("THREE.WebGPURenderer: Blend factor not supported.", blend);
    }
    return blendFactor;
  }
  /**
   * Returns the GPU stencil compare function which is required for the pipeline creation.
   *
   * @private
   * @param {Material} material - The material.
   * @return {string} The GPU stencil compare function.
   */
  _getStencilCompare(material) {
    let stencilCompare;
    const stencilFunc = material.stencilFunc;
    switch (stencilFunc) {
      case NeverStencilFunc:
        stencilCompare = GPUCompareFunction.Never;
        break;
      case AlwaysStencilFunc:
        stencilCompare = GPUCompareFunction.Always;
        break;
      case LessStencilFunc:
        stencilCompare = GPUCompareFunction.Less;
        break;
      case LessEqualStencilFunc:
        stencilCompare = GPUCompareFunction.LessEqual;
        break;
      case EqualStencilFunc:
        stencilCompare = GPUCompareFunction.Equal;
        break;
      case GreaterEqualStencilFunc:
        stencilCompare = GPUCompareFunction.GreaterEqual;
        break;
      case GreaterStencilFunc:
        stencilCompare = GPUCompareFunction.Greater;
        break;
      case NotEqualStencilFunc:
        stencilCompare = GPUCompareFunction.NotEqual;
        break;
      default:
        console.error("THREE.WebGPURenderer: Invalid stencil function.", stencilFunc);
    }
    return stencilCompare;
  }
  /**
   * Returns the GPU stencil operation which is required for the pipeline creation.
   *
   * @private
   * @param {number} op - A three.js constant defining the stencil operation.
   * @return {string} The GPU stencil operation.
   */
  _getStencilOperation(op) {
    let stencilOperation;
    switch (op) {
      case KeepStencilOp:
        stencilOperation = GPUStencilOperation.Keep;
        break;
      case ZeroStencilOp:
        stencilOperation = GPUStencilOperation.Zero;
        break;
      case ReplaceStencilOp:
        stencilOperation = GPUStencilOperation.Replace;
        break;
      case InvertStencilOp:
        stencilOperation = GPUStencilOperation.Invert;
        break;
      case IncrementStencilOp:
        stencilOperation = GPUStencilOperation.IncrementClamp;
        break;
      case DecrementStencilOp:
        stencilOperation = GPUStencilOperation.DecrementClamp;
        break;
      case IncrementWrapStencilOp:
        stencilOperation = GPUStencilOperation.IncrementWrap;
        break;
      case DecrementWrapStencilOp:
        stencilOperation = GPUStencilOperation.DecrementWrap;
        break;
      default:
        console.error("THREE.WebGPURenderer: Invalid stencil operation.", stencilOperation);
    }
    return stencilOperation;
  }
  /**
   * Returns the GPU blend operation which is required for the pipeline creation.
   *
   * @private
   * @param {number} blendEquation - A three.js constant defining the blend equation.
   * @return {string} The GPU blend operation.
   */
  _getBlendOperation(blendEquation) {
    let blendOperation;
    switch (blendEquation) {
      case AddEquation:
        blendOperation = GPUBlendOperation.Add;
        break;
      case SubtractEquation:
        blendOperation = GPUBlendOperation.Subtract;
        break;
      case ReverseSubtractEquation:
        blendOperation = GPUBlendOperation.ReverseSubtract;
        break;
      case MinEquation:
        blendOperation = GPUBlendOperation.Min;
        break;
      case MaxEquation:
        blendOperation = GPUBlendOperation.Max;
        break;
      default:
        console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.", blendEquation);
    }
    return blendOperation;
  }
  /**
   * Returns the primitive state as a descriptor object required
   * for the pipeline creation.
   *
   * @private
   * @param {Object3D} object - The 3D object.
   * @param {BufferGeometry} geometry - The geometry.
   * @param {Material} material - The material.
   * @return {Object} The primitive state.
   */
  _getPrimitiveState(object, geometry, material) {
    const descriptor = {};
    const utils = this.backend.utils;
    descriptor.topology = utils.getPrimitiveTopology(object, material);
    if (geometry.index !== null && object.isLine === true && object.isLineSegments !== true) {
      descriptor.stripIndexFormat = geometry.index.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;
    }
    let flipSided = material.side === BackSide;
    if (object.isMesh && object.matrixWorld.determinant() < 0)
      flipSided = !flipSided;
    descriptor.frontFace = flipSided === true ? GPUFrontFace.CW : GPUFrontFace.CCW;
    descriptor.cullMode = material.side === DoubleSide ? GPUCullMode.None : GPUCullMode.Back;
    return descriptor;
  }
  /**
   * Returns the GPU color write mask which is required for the pipeline creation.
   *
   * @private
   * @param {Material} material - The material.
   * @return {number} The GPU color write mask.
   */
  _getColorWriteMask(material) {
    return material.colorWrite === true ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;
  }
  /**
   * Returns the GPU depth compare function which is required for the pipeline creation.
   *
   * @private
   * @param {Material} material - The material.
   * @return {string} The GPU depth compare function.
   */
  _getDepthCompare(material) {
    let depthCompare;
    if (material.depthTest === false) {
      depthCompare = GPUCompareFunction.Always;
    } else {
      const depthFunc = material.depthFunc;
      switch (depthFunc) {
        case NeverDepth:
          depthCompare = GPUCompareFunction.Never;
          break;
        case AlwaysDepth:
          depthCompare = GPUCompareFunction.Always;
          break;
        case LessDepth:
          depthCompare = GPUCompareFunction.Less;
          break;
        case LessEqualDepth:
          depthCompare = GPUCompareFunction.LessEqual;
          break;
        case EqualDepth:
          depthCompare = GPUCompareFunction.Equal;
          break;
        case GreaterEqualDepth:
          depthCompare = GPUCompareFunction.GreaterEqual;
          break;
        case GreaterDepth:
          depthCompare = GPUCompareFunction.Greater;
          break;
        case NotEqualDepth:
          depthCompare = GPUCompareFunction.NotEqual;
          break;
        default:
          console.error("THREE.WebGPUPipelineUtils: Invalid depth function.", depthFunc);
      }
    }
    return depthCompare;
  }
};
var WebGPUTimestampQueryPool = class extends TimestampQueryPool {
  /**
   * Creates a new WebGPU timestamp query pool.
   *
   * @param {GPUDevice} device - The WebGPU device to create queries on.
   * @param {string} type - The type identifier for this query pool.
   * @param {number} [maxQueries=2048] - Maximum number of queries this pool can hold.
   */
  constructor(device, type, maxQueries = 2048) {
    super(maxQueries);
    this.device = device;
    this.type = type;
    this.querySet = this.device.createQuerySet({
      type: "timestamp",
      count: this.maxQueries,
      label: `queryset_global_timestamp_${type}`
    });
    const bufferSize = this.maxQueries * 8;
    this.resolveBuffer = this.device.createBuffer({
      label: `buffer_timestamp_resolve_${type}`,
      size: bufferSize,
      usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
    });
    this.resultBuffer = this.device.createBuffer({
      label: `buffer_timestamp_result_${type}`,
      size: bufferSize,
      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
    });
  }
  /**
   * Allocates a pair of queries for a given render context.
   *
   * @param {string} uid - A unique identifier for the render context.
   * @returns {?number} The base offset for the allocated queries, or null if allocation failed.
   */
  allocateQueriesForContext(uid) {
    if (!this.trackTimestamp || this.isDisposed)
      return null;
    if (this.currentQueryIndex + 2 > this.maxQueries) {
      warnOnce(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`);
      return null;
    }
    const baseOffset = this.currentQueryIndex;
    this.currentQueryIndex += 2;
    this.queryOffsets.set(uid, baseOffset);
    return baseOffset;
  }
  /**
   * Asynchronously resolves all pending queries and returns the total duration.
   * If there's already a pending resolve operation, returns that promise instead.
   *
   * @async
   * @returns {Promise<number>} The total duration in milliseconds, or the last valid value if resolution fails.
   */
  async resolveQueriesAsync() {
    if (!this.trackTimestamp || this.currentQueryIndex === 0 || this.isDisposed) {
      return this.lastValue;
    }
    if (this.pendingResolve) {
      return this.pendingResolve;
    }
    this.pendingResolve = this._resolveQueries();
    try {
      const result = await this.pendingResolve;
      return result;
    } finally {
      this.pendingResolve = null;
    }
  }
  /**
   * Internal method to resolve queries and calculate total duration.
   *
   * @async
   * @private
   * @returns {Promise<number>} The total duration in milliseconds.
   */
  async _resolveQueries() {
    if (this.isDisposed) {
      return this.lastValue;
    }
    try {
      if (this.resultBuffer.mapState !== "unmapped") {
        return this.lastValue;
      }
      const currentOffsets = new Map(this.queryOffsets);
      const queryCount = this.currentQueryIndex;
      const bytesUsed = queryCount * 8;
      this.currentQueryIndex = 0;
      this.queryOffsets.clear();
      const commandEncoder = this.device.createCommandEncoder();
      commandEncoder.resolveQuerySet(
        this.querySet,
        0,
        queryCount,
        this.resolveBuffer,
        0
      );
      commandEncoder.copyBufferToBuffer(
        this.resolveBuffer,
        0,
        this.resultBuffer,
        0,
        bytesUsed
      );
      const commandBuffer = commandEncoder.finish();
      this.device.queue.submit([commandBuffer]);
      if (this.resultBuffer.mapState !== "unmapped") {
        return this.lastValue;
      }
      await this.resultBuffer.mapAsync(GPUMapMode.READ, 0, bytesUsed);
      if (this.isDisposed) {
        if (this.resultBuffer.mapState === "mapped") {
          this.resultBuffer.unmap();
        }
        return this.lastValue;
      }
      const times = new BigUint64Array(this.resultBuffer.getMappedRange(0, bytesUsed));
      let totalDuration = 0;
      for (const [, baseOffset] of currentOffsets) {
        const startTime = times[baseOffset];
        const endTime = times[baseOffset + 1];
        const duration = Number(endTime - startTime) / 1e6;
        totalDuration += duration;
      }
      this.resultBuffer.unmap();
      this.lastValue = totalDuration;
      return totalDuration;
    } catch (error) {
      console.error("Error resolving queries:", error);
      if (this.resultBuffer.mapState === "mapped") {
        this.resultBuffer.unmap();
      }
      return this.lastValue;
    }
  }
  /**
   * Dispose of the query pool.
   *
   * @async
   * @returns {Promise} A Promise that resolves when the dispose has been executed.
   */
  async dispose() {
    if (this.isDisposed) {
      return;
    }
    this.isDisposed = true;
    if (this.pendingResolve) {
      try {
        await this.pendingResolve;
      } catch (error) {
        console.error("Error waiting for pending resolve:", error);
      }
    }
    if (this.resultBuffer && this.resultBuffer.mapState === "mapped") {
      try {
        this.resultBuffer.unmap();
      } catch (error) {
        console.error("Error unmapping buffer:", error);
      }
    }
    if (this.querySet) {
      this.querySet.destroy();
      this.querySet = null;
    }
    if (this.resolveBuffer) {
      this.resolveBuffer.destroy();
      this.resolveBuffer = null;
    }
    if (this.resultBuffer) {
      this.resultBuffer.destroy();
      this.resultBuffer = null;
    }
    this.queryOffsets.clear();
    this.pendingResolve = null;
  }
};
var WebGPUBackend = class extends Backend {
  /**
   * WebGPUBackend options.
   *
   * @typedef {Object} WebGPUBackend~Options
   * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
   * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
   * @property {boolean} [compatibilityMode=false] - Whether the backend should be in compatibility mode or not.
   * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
   * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
   * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
   * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.
   * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.
   * @property {boolean} [trackTimestamp=false] - Whether to track timestamps with a Timestamp Query API or not.
   * @property {string} [powerPreference=undefined] - The power preference.
   * @property {Object} [requiredLimits=undefined] - Specifies the limits that are required by the device request. The request will fail if the adapter cannot provide these limits.
   * @property {GPUDevice} [device=undefined] - If there is an existing GPU device on app level, it can be passed to the renderer as a parameter.
   * @property {number} [outputType=undefined] - Texture type for output to canvas. By default, device's preferred format is used; other formats may incur overhead.
   */
  /**
   * Constructs a new WebGPU backend.
   *
   * @param {WebGPUBackend~Options} [parameters] - The configuration parameter.
   */
  constructor(parameters = {}) {
    super(parameters);
    this.isWebGPUBackend = true;
    this.parameters.alpha = parameters.alpha === void 0 ? true : parameters.alpha;
    this.parameters.compatibilityMode = parameters.compatibilityMode === void 0 ? false : parameters.compatibilityMode;
    this.parameters.requiredLimits = parameters.requiredLimits === void 0 ? {} : parameters.requiredLimits;
    this.compatibilityMode = this.parameters.compatibilityMode;
    this.device = null;
    this.context = null;
    this.colorBuffer = null;
    this.defaultRenderPassdescriptor = null;
    this.utils = new WebGPUUtils(this);
    this.attributeUtils = new WebGPUAttributeUtils(this);
    this.bindingUtils = new WebGPUBindingUtils(this);
    this.pipelineUtils = new WebGPUPipelineUtils(this);
    this.textureUtils = new WebGPUTextureUtils(this);
    this.occludedResolveCache = /* @__PURE__ */ new Map();
  }
  /**
   * Initializes the backend so it is ready for usage.
   *
   * @async
   * @param {Renderer} renderer - The renderer.
   * @return {Promise} A Promise that resolves when the backend has been initialized.
   */
  async init(renderer3) {
    await super.init(renderer3);
    const parameters = this.parameters;
    let device;
    if (parameters.device === void 0) {
      const adapterOptions = {
        powerPreference: parameters.powerPreference,
        featureLevel: parameters.compatibilityMode ? "compatibility" : void 0
      };
      const adapter = typeof navigator !== "undefined" ? await navigator.gpu.requestAdapter(adapterOptions) : null;
      if (adapter === null) {
        throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");
      }
      const features = Object.values(GPUFeatureName);
      const supportedFeatures = [];
      for (const name of features) {
        if (adapter.features.has(name)) {
          supportedFeatures.push(name);
        }
      }
      const deviceDescriptor = {
        requiredFeatures: supportedFeatures,
        requiredLimits: parameters.requiredLimits
      };
      device = await adapter.requestDevice(deviceDescriptor);
    } else {
      device = parameters.device;
    }
    device.lost.then((info) => {
      const deviceLossInfo = {
        api: "WebGPU",
        message: info.message || "Unknown reason",
        reason: info.reason || null,
        originalEvent: info
      };
      renderer3.onDeviceLost(deviceLossInfo);
    });
    const context3 = parameters.context !== void 0 ? parameters.context : renderer3.domElement.getContext("webgpu");
    this.device = device;
    this.context = context3;
    const alphaMode = parameters.alpha ? "premultiplied" : "opaque";
    const toneMappingMode = ColorManagement.getToneMappingMode(this.renderer.outputColorSpace);
    this.context.configure({
      device: this.device,
      format: this.utils.getPreferredCanvasFormat(),
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
      alphaMode,
      toneMapping: {
        mode: toneMappingMode
      }
    });
    this.trackTimestamp = this.trackTimestamp && this.hasFeature(GPUFeatureName.TimestampQuery);
    this.updateSize();
  }
  /**
   * The coordinate system of the backend.
   *
   * @type {number}
   * @readonly
   */
  get coordinateSystem() {
    return WebGPUCoordinateSystem;
  }
  /**
   * This method performs a readback operation by moving buffer data from
   * a storage buffer attribute from the GPU to the CPU.
   *
   * @async
   * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
   * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
   */
  async getArrayBufferAsync(attribute3) {
    return await this.attributeUtils.getArrayBufferAsync(attribute3);
  }
  /**
   * Returns the backend's rendering context.
   *
   * @return {GPUCanvasContext} The rendering context.
   */
  getContext() {
    return this.context;
  }
  /**
   * Returns the default render pass descriptor.
   *
   * In WebGPU, the default framebuffer must be configured
   * like custom framebuffers so the backend needs a render
   * pass descriptor even when rendering directly to screen.
   *
   * @private
   * @return {Object} The render pass descriptor.
   */
  _getDefaultRenderPassDescriptor() {
    let descriptor = this.defaultRenderPassdescriptor;
    if (descriptor === null) {
      const renderer3 = this.renderer;
      descriptor = {
        colorAttachments: [{
          view: null
        }]
      };
      if (this.renderer.depth === true || this.renderer.stencil === true) {
        descriptor.depthStencilAttachment = {
          view: this.textureUtils.getDepthBuffer(renderer3.depth, renderer3.stencil).createView()
        };
      }
      const colorAttachment2 = descriptor.colorAttachments[0];
      if (this.renderer.samples > 0) {
        colorAttachment2.view = this.colorBuffer.createView();
      } else {
        colorAttachment2.resolveTarget = void 0;
      }
      this.defaultRenderPassdescriptor = descriptor;
    }
    const colorAttachment = descriptor.colorAttachments[0];
    if (this.renderer.samples > 0) {
      colorAttachment.resolveTarget = this.context.getCurrentTexture().createView();
    } else {
      colorAttachment.view = this.context.getCurrentTexture().createView();
    }
    return descriptor;
  }
  /**
   * Internal to determine if the current render target is a render target array with depth 2D array texture.
   *
   * @param {RenderContext} renderContext - The render context.
   * @return {boolean} Whether the render target is a render target array with depth 2D array texture.
   *
   * @private
   */
  _isRenderCameraDepthArray(renderContext) {
    return renderContext.depthTexture && renderContext.depthTexture.image.depth > 1 && renderContext.camera.isArrayCamera;
  }
  /**
   * Returns the render pass descriptor for the given render context.
   *
   * @private
   * @param {RenderContext} renderContext - The render context.
   * @param {Object} colorAttachmentsConfig - Configuration object for the color attachments.
   * @return {Object} The render pass descriptor.
   */
  _getRenderPassDescriptor(renderContext, colorAttachmentsConfig = {}) {
    const renderTarget = renderContext.renderTarget;
    const renderTargetData = this.get(renderTarget);
    let descriptors = renderTargetData.descriptors;
    if (descriptors === void 0 || renderTargetData.width !== renderTarget.width || renderTargetData.height !== renderTarget.height || renderTargetData.samples !== renderTarget.samples) {
      descriptors = {};
      renderTargetData.descriptors = descriptors;
    }
    const cacheKey = renderContext.getCacheKey();
    let descriptorBase = descriptors[cacheKey];
    if (descriptorBase === void 0) {
      const textures = renderContext.textures;
      const textureViews = [];
      let sliceIndex;
      const isRenderCameraDepthArray = this._isRenderCameraDepthArray(renderContext);
      for (let i2 = 0; i2 < textures.length; i2++) {
        const textureData = this.get(textures[i2]);
        const viewDescriptor = {
          label: `colorAttachment_${i2}`,
          baseMipLevel: renderContext.activeMipmapLevel,
          mipLevelCount: 1,
          baseArrayLayer: renderContext.activeCubeFace,
          arrayLayerCount: 1,
          dimension: GPUTextureViewDimension.TwoD
        };
        if (renderTarget.isRenderTarget3D) {
          sliceIndex = renderContext.activeCubeFace;
          viewDescriptor.baseArrayLayer = 0;
          viewDescriptor.dimension = GPUTextureViewDimension.ThreeD;
          viewDescriptor.depthOrArrayLayers = textures[i2].image.depth;
        } else if (renderTarget.isRenderTarget && textures[i2].image.depth > 1) {
          if (isRenderCameraDepthArray === true) {
            const cameras = renderContext.camera.cameras;
            for (let layer = 0; layer < cameras.length; layer++) {
              const layerViewDescriptor = {
                ...viewDescriptor,
                baseArrayLayer: layer,
                arrayLayerCount: 1,
                dimension: GPUTextureViewDimension.TwoD
              };
              const textureView = textureData.texture.createView(layerViewDescriptor);
              textureViews.push({
                view: textureView,
                resolveTarget: void 0,
                depthSlice: void 0
              });
            }
          } else {
            viewDescriptor.dimension = GPUTextureViewDimension.TwoDArray;
            viewDescriptor.depthOrArrayLayers = textures[i2].image.depth;
          }
        }
        if (isRenderCameraDepthArray !== true) {
          const textureView = textureData.texture.createView(viewDescriptor);
          let view, resolveTarget;
          if (textureData.msaaTexture !== void 0) {
            view = textureData.msaaTexture.createView();
            resolveTarget = textureView;
          } else {
            view = textureView;
            resolveTarget = void 0;
          }
          textureViews.push({
            view,
            resolveTarget,
            depthSlice: sliceIndex
          });
        }
      }
      descriptorBase = { textureViews };
      if (renderContext.depth) {
        const depthTextureData = this.get(renderContext.depthTexture);
        const options = {};
        if (renderContext.depthTexture.isArrayTexture) {
          options.dimension = GPUTextureViewDimension.TwoD;
          options.arrayLayerCount = 1;
          options.baseArrayLayer = renderContext.activeCubeFace;
        }
        descriptorBase.depthStencilView = depthTextureData.texture.createView(options);
      }
      descriptors[cacheKey] = descriptorBase;
      renderTargetData.width = renderTarget.width;
      renderTargetData.height = renderTarget.height;
      renderTargetData.samples = renderTarget.samples;
      renderTargetData.activeMipmapLevel = renderContext.activeMipmapLevel;
      renderTargetData.activeCubeFace = renderContext.activeCubeFace;
    }
    const descriptor = {
      colorAttachments: []
    };
    for (let i2 = 0; i2 < descriptorBase.textureViews.length; i2++) {
      const viewInfo = descriptorBase.textureViews[i2];
      let clearValue = { r: 0, g: 0, b: 0, a: 1 };
      if (i2 === 0 && colorAttachmentsConfig.clearValue) {
        clearValue = colorAttachmentsConfig.clearValue;
      }
      descriptor.colorAttachments.push({
        view: viewInfo.view,
        depthSlice: viewInfo.depthSlice,
        resolveTarget: viewInfo.resolveTarget,
        loadOp: colorAttachmentsConfig.loadOp || GPULoadOp.Load,
        storeOp: colorAttachmentsConfig.storeOp || GPUStoreOp.Store,
        clearValue
      });
    }
    if (descriptorBase.depthStencilView) {
      descriptor.depthStencilAttachment = {
        view: descriptorBase.depthStencilView
      };
    }
    return descriptor;
  }
  /**
   * This method is executed at the beginning of a render call and prepares
   * the WebGPU state for upcoming render calls
   *
   * @param {RenderContext} renderContext - The render context.
   */
  beginRender(renderContext) {
    const renderContextData = this.get(renderContext);
    renderContextData.frameCalls = this.renderer.info.render.frameCalls;
    const device = this.device;
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    let occlusionQuerySet;
    if (occlusionQueryCount > 0) {
      if (renderContextData.currentOcclusionQuerySet)
        renderContextData.currentOcclusionQuerySet.destroy();
      if (renderContextData.currentOcclusionQueryBuffer)
        renderContextData.currentOcclusionQueryBuffer.destroy();
      renderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;
      renderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;
      renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;
      occlusionQuerySet = device.createQuerySet({ type: "occlusion", count: occlusionQueryCount, label: `occlusionQuerySet_${renderContext.id}` });
      renderContextData.occlusionQuerySet = occlusionQuerySet;
      renderContextData.occlusionQueryIndex = 0;
      renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);
      renderContextData.lastOcclusionObject = null;
    }
    let descriptor;
    if (renderContext.textures === null) {
      descriptor = this._getDefaultRenderPassDescriptor();
    } else {
      descriptor = this._getRenderPassDescriptor(renderContext, { loadOp: GPULoadOp.Load });
    }
    this.initTimestampQuery(TimestampQuery.RENDER, this.getTimestampUID(renderContext), descriptor);
    descriptor.occlusionQuerySet = occlusionQuerySet;
    const depthStencilAttachment = descriptor.depthStencilAttachment;
    if (renderContext.textures !== null) {
      const colorAttachments = descriptor.colorAttachments;
      for (let i2 = 0; i2 < colorAttachments.length; i2++) {
        const colorAttachment = colorAttachments[i2];
        if (renderContext.clearColor) {
          colorAttachment.clearValue = i2 === 0 ? renderContext.clearColorValue : { r: 0, g: 0, b: 0, a: 1 };
          colorAttachment.loadOp = GPULoadOp.Clear;
        } else {
          colorAttachment.loadOp = GPULoadOp.Load;
        }
        colorAttachment.storeOp = GPUStoreOp.Store;
      }
    } else {
      const colorAttachment = descriptor.colorAttachments[0];
      if (renderContext.clearColor) {
        colorAttachment.clearValue = renderContext.clearColorValue;
        colorAttachment.loadOp = GPULoadOp.Clear;
      } else {
        colorAttachment.loadOp = GPULoadOp.Load;
      }
      colorAttachment.storeOp = GPUStoreOp.Store;
    }
    if (renderContext.depth) {
      if (renderContext.clearDepth) {
        depthStencilAttachment.depthClearValue = renderContext.clearDepthValue;
        depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
      } else {
        depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
      }
      depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
    }
    if (renderContext.stencil) {
      if (renderContext.clearStencil) {
        depthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
      } else {
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
      }
      depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
    }
    const encoder = device.createCommandEncoder({ label: "renderContext_" + renderContext.id });
    if (this._isRenderCameraDepthArray(renderContext) === true) {
      const cameras = renderContext.camera.cameras;
      if (!renderContextData.layerDescriptors || renderContextData.layerDescriptors.length !== cameras.length) {
        this._createDepthLayerDescriptors(renderContext, renderContextData, descriptor, cameras);
      } else {
        this._updateDepthLayerDescriptors(renderContext, renderContextData, cameras);
      }
      renderContextData.bundleEncoders = [];
      renderContextData.bundleSets = [];
      for (let i2 = 0; i2 < cameras.length; i2++) {
        const bundleEncoder = this.pipelineUtils.createBundleEncoder(
          renderContext,
          "renderBundleArrayCamera_" + i2
        );
        const bundleSets = {
          attributes: {},
          bindingGroups: [],
          pipeline: null,
          index: null
        };
        renderContextData.bundleEncoders.push(bundleEncoder);
        renderContextData.bundleSets.push(bundleSets);
      }
      renderContextData.currentPass = null;
    } else {
      const currentPass = encoder.beginRenderPass(descriptor);
      renderContextData.currentPass = currentPass;
      if (renderContext.viewport) {
        this.updateViewport(renderContext);
      }
      if (renderContext.scissor) {
        const { x: x2, y: y2, width, height } = renderContext.scissorValue;
        currentPass.setScissorRect(x2, y2, width, height);
      }
    }
    renderContextData.descriptor = descriptor;
    renderContextData.encoder = encoder;
    renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
    renderContextData.renderBundles = [];
  }
  /**
   * This method creates layer descriptors for each camera in an array camera
   * to prepare for rendering to a depth array texture.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {Object} renderContextData - The render context data.
   * @param {Object} descriptor  - The render pass descriptor.
   * @param {ArrayCamera} cameras - The array camera.
   *
   * @private
   */
  _createDepthLayerDescriptors(renderContext, renderContextData, descriptor, cameras) {
    const depthStencilAttachment = descriptor.depthStencilAttachment;
    renderContextData.layerDescriptors = [];
    const depthTextureData = this.get(renderContext.depthTexture);
    if (!depthTextureData.viewCache) {
      depthTextureData.viewCache = [];
    }
    for (let i2 = 0; i2 < cameras.length; i2++) {
      const layerDescriptor = {
        ...descriptor,
        colorAttachments: [{
          ...descriptor.colorAttachments[0],
          view: descriptor.colorAttachments[i2].view
        }]
      };
      if (descriptor.depthStencilAttachment) {
        const layerIndex = i2;
        if (!depthTextureData.viewCache[layerIndex]) {
          depthTextureData.viewCache[layerIndex] = depthTextureData.texture.createView({
            dimension: GPUTextureViewDimension.TwoD,
            baseArrayLayer: i2,
            arrayLayerCount: 1
          });
        }
        layerDescriptor.depthStencilAttachment = {
          view: depthTextureData.viewCache[layerIndex],
          depthLoadOp: depthStencilAttachment.depthLoadOp || GPULoadOp.Clear,
          depthStoreOp: depthStencilAttachment.depthStoreOp || GPUStoreOp.Store,
          depthClearValue: depthStencilAttachment.depthClearValue || 1
        };
        if (renderContext.stencil) {
          layerDescriptor.depthStencilAttachment.stencilLoadOp = depthStencilAttachment.stencilLoadOp;
          layerDescriptor.depthStencilAttachment.stencilStoreOp = depthStencilAttachment.stencilStoreOp;
          layerDescriptor.depthStencilAttachment.stencilClearValue = depthStencilAttachment.stencilClearValue;
        }
      } else {
        layerDescriptor.depthStencilAttachment = { ...depthStencilAttachment };
      }
      renderContextData.layerDescriptors.push(layerDescriptor);
    }
  }
  /**
   * This method updates the layer descriptors for each camera in an array camera
   * to prepare for rendering to a depth array texture.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {Object} renderContextData - The render context data.
   * @param {ArrayCamera} cameras - The array camera.
   *
   */
  _updateDepthLayerDescriptors(renderContext, renderContextData, cameras) {
    for (let i2 = 0; i2 < cameras.length; i2++) {
      const layerDescriptor = renderContextData.layerDescriptors[i2];
      if (layerDescriptor.depthStencilAttachment) {
        const depthAttachment = layerDescriptor.depthStencilAttachment;
        if (renderContext.depth) {
          if (renderContext.clearDepth) {
            depthAttachment.depthClearValue = renderContext.clearDepthValue;
            depthAttachment.depthLoadOp = GPULoadOp.Clear;
          } else {
            depthAttachment.depthLoadOp = GPULoadOp.Load;
          }
        }
        if (renderContext.stencil) {
          if (renderContext.clearStencil) {
            depthAttachment.stencilClearValue = renderContext.clearStencilValue;
            depthAttachment.stencilLoadOp = GPULoadOp.Clear;
          } else {
            depthAttachment.stencilLoadOp = GPULoadOp.Load;
          }
        }
      }
    }
  }
  /**
   * This method is executed at the end of a render call and finalizes work
   * after draw calls.
   *
   * @param {RenderContext} renderContext - The render context.
   */
  finishRender(renderContext) {
    const renderContextData = this.get(renderContext);
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    if (renderContextData.renderBundles.length > 0) {
      renderContextData.currentPass.executeBundles(renderContextData.renderBundles);
    }
    if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {
      renderContextData.currentPass.endOcclusionQuery();
    }
    const encoder = renderContextData.encoder;
    if (this._isRenderCameraDepthArray(renderContext) === true) {
      const bundles = [];
      for (let i2 = 0; i2 < renderContextData.bundleEncoders.length; i2++) {
        const bundleEncoder = renderContextData.bundleEncoders[i2];
        bundles.push(bundleEncoder.finish());
      }
      for (let i2 = 0; i2 < renderContextData.layerDescriptors.length; i2++) {
        if (i2 < bundles.length) {
          const layerDescriptor = renderContextData.layerDescriptors[i2];
          const renderPass = encoder.beginRenderPass(layerDescriptor);
          if (renderContext.viewport) {
            const { x: x2, y: y2, width, height, minDepth, maxDepth } = renderContext.viewportValue;
            renderPass.setViewport(x2, y2, width, height, minDepth, maxDepth);
          }
          if (renderContext.scissor) {
            const { x: x2, y: y2, width, height } = renderContext.scissorValue;
            renderPass.setScissorRect(x2, y2, width, height);
          }
          renderPass.executeBundles([bundles[i2]]);
          renderPass.end();
        }
      }
    } else if (renderContextData.currentPass) {
      renderContextData.currentPass.end();
    }
    if (occlusionQueryCount > 0) {
      const bufferSize = occlusionQueryCount * 8;
      let queryResolveBuffer = this.occludedResolveCache.get(bufferSize);
      if (queryResolveBuffer === void 0) {
        queryResolveBuffer = this.device.createBuffer(
          {
            size: bufferSize,
            usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
          }
        );
        this.occludedResolveCache.set(bufferSize, queryResolveBuffer);
      }
      const readBuffer = this.device.createBuffer(
        {
          size: bufferSize,
          usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
        }
      );
      renderContextData.encoder.resolveQuerySet(renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0);
      renderContextData.encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer, 0, bufferSize);
      renderContextData.occlusionQueryBuffer = readBuffer;
      this.resolveOccludedAsync(renderContext);
    }
    this.device.queue.submit([renderContextData.encoder.finish()]);
    if (renderContext.textures !== null) {
      const textures = renderContext.textures;
      for (let i2 = 0; i2 < textures.length; i2++) {
        const texture3 = textures[i2];
        if (texture3.generateMipmaps === true) {
          this.textureUtils.generateMipmaps(texture3);
        }
      }
    }
  }
  /**
   * Returns `true` if the given 3D object is fully occluded by other
   * 3D objects in the scene.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object is fully occluded or not.
   */
  isOccluded(renderContext, object) {
    const renderContextData = this.get(renderContext);
    return renderContextData.occluded && renderContextData.occluded.has(object);
  }
  /**
   * This method processes the result of occlusion queries and writes it
   * into render context data.
   *
   * @async
   * @param {RenderContext} renderContext - The render context.
   * @return {Promise} A Promise that resolves when the occlusion query results have been processed.
   */
  async resolveOccludedAsync(renderContext) {
    const renderContextData = this.get(renderContext);
    const { currentOcclusionQueryBuffer, currentOcclusionQueryObjects } = renderContextData;
    if (currentOcclusionQueryBuffer && currentOcclusionQueryObjects) {
      const occluded = /* @__PURE__ */ new WeakSet();
      renderContextData.currentOcclusionQueryObjects = null;
      renderContextData.currentOcclusionQueryBuffer = null;
      await currentOcclusionQueryBuffer.mapAsync(GPUMapMode.READ);
      const buffer3 = currentOcclusionQueryBuffer.getMappedRange();
      const results = new BigUint64Array(buffer3);
      for (let i2 = 0; i2 < currentOcclusionQueryObjects.length; i2++) {
        if (results[i2] === BigInt(0)) {
          occluded.add(currentOcclusionQueryObjects[i2]);
        }
      }
      currentOcclusionQueryBuffer.destroy();
      renderContextData.occluded = occluded;
    }
  }
  /**
   * Updates the viewport with the values from the given render context.
   *
   * @param {RenderContext} renderContext - The render context.
   */
  updateViewport(renderContext) {
    const { currentPass } = this.get(renderContext);
    const { x: x2, y: y2, width, height, minDepth, maxDepth } = renderContext.viewportValue;
    currentPass.setViewport(x2, y2, width, height, minDepth, maxDepth);
  }
  /**
   * Returns the clear color and alpha into a single
   * color object.
   *
   * @return {Color4} The clear color.
   */
  getClearColor() {
    const clearColor = super.getClearColor();
    if (this.renderer.alpha === true) {
      clearColor.r *= clearColor.a;
      clearColor.g *= clearColor.a;
      clearColor.b *= clearColor.a;
    }
    return clearColor;
  }
  /**
   * Performs a clear operation.
   *
   * @param {boolean} color - Whether the color buffer should be cleared or not.
   * @param {boolean} depth - Whether the depth buffer should be cleared or not.
   * @param {boolean} stencil - Whether the stencil buffer should be cleared or not.
   * @param {?RenderContext} [renderTargetContext=null] - The render context of the current set render target.
   */
  clear(color4, depth3, stencil, renderTargetContext = null) {
    const device = this.device;
    const renderer3 = this.renderer;
    let colorAttachments = [];
    let depthStencilAttachment;
    let clearValue;
    let supportsDepth;
    let supportsStencil;
    if (color4) {
      const clearColor = this.getClearColor();
      clearValue = { r: clearColor.r, g: clearColor.g, b: clearColor.b, a: clearColor.a };
    }
    if (renderTargetContext === null) {
      supportsDepth = renderer3.depth;
      supportsStencil = renderer3.stencil;
      const descriptor = this._getDefaultRenderPassDescriptor();
      if (color4) {
        colorAttachments = descriptor.colorAttachments;
        const colorAttachment = colorAttachments[0];
        colorAttachment.clearValue = clearValue;
        colorAttachment.loadOp = GPULoadOp.Clear;
        colorAttachment.storeOp = GPUStoreOp.Store;
      }
      if (supportsDepth || supportsStencil) {
        depthStencilAttachment = descriptor.depthStencilAttachment;
      }
    } else {
      supportsDepth = renderTargetContext.depth;
      supportsStencil = renderTargetContext.stencil;
      const clearConfig = {
        loadOp: color4 ? GPULoadOp.Clear : GPULoadOp.Load,
        clearValue: color4 ? clearValue : void 0
      };
      if (supportsDepth) {
        clearConfig.depthLoadOp = depth3 ? GPULoadOp.Clear : GPULoadOp.Load;
        clearConfig.depthClearValue = depth3 ? renderer3.getClearDepth() : void 0;
        clearConfig.depthStoreOp = GPUStoreOp.Store;
      }
      if (supportsStencil) {
        clearConfig.stencilLoadOp = stencil ? GPULoadOp.Clear : GPULoadOp.Load;
        clearConfig.stencilClearValue = stencil ? renderer3.getClearStencil() : void 0;
        clearConfig.stencilStoreOp = GPUStoreOp.Store;
      }
      const descriptor = this._getRenderPassDescriptor(renderTargetContext, clearConfig);
      colorAttachments = descriptor.colorAttachments;
      depthStencilAttachment = descriptor.depthStencilAttachment;
    }
    if (supportsDepth && depthStencilAttachment) {
      if (depth3) {
        depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
        depthStencilAttachment.depthClearValue = renderer3.getClearDepth();
        depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
      } else {
        depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
        depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
      }
    }
    if (supportsStencil && depthStencilAttachment) {
      if (stencil) {
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
        depthStencilAttachment.stencilClearValue = renderer3.getClearStencil();
        depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
      } else {
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
        depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
      }
    }
    const encoder = device.createCommandEncoder({ label: "clear" });
    const currentPass = encoder.beginRenderPass({
      colorAttachments,
      depthStencilAttachment
    });
    currentPass.end();
    device.queue.submit([encoder.finish()]);
  }
  // compute
  /**
   * This method is executed at the beginning of a compute call and
   * prepares the state for upcoming compute tasks.
   *
   * @param {Node|Array<Node>} computeGroup - The compute node(s).
   */
  beginCompute(computeGroup) {
    const groupGPU = this.get(computeGroup);
    groupGPU.frameCalls = this.renderer.info.compute.frameCalls;
    const descriptor = {
      label: "computeGroup_" + computeGroup.id
    };
    this.initTimestampQuery(TimestampQuery.COMPUTE, this.getTimestampUID(computeGroup), descriptor);
    groupGPU.cmdEncoderGPU = this.device.createCommandEncoder({ label: "computeGroup_" + computeGroup.id });
    groupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass(descriptor);
  }
  /**
   * Executes a compute command for the given compute node.
   *
   * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.
   * @param {Node} computeNode - The compute node.
   * @param {Array<BindGroup>} bindings - The bindings.
   * @param {ComputePipeline} pipeline - The compute pipeline.
   * @param {?(Array<number>|number)} [dispatchSizeOrCount=null] - Array with [ x, y, z ] values for dispatch or a single number for the count.
   */
  compute(computeGroup, computeNode, bindings, pipeline, dispatchSizeOrCount = null) {
    const computeNodeData = this.get(computeNode);
    const { passEncoderGPU } = this.get(computeGroup);
    const pipelineGPU = this.get(pipeline).pipeline;
    this.pipelineUtils.setPipeline(passEncoderGPU, pipelineGPU);
    for (let i2 = 0, l2 = bindings.length; i2 < l2; i2++) {
      const bindGroup = bindings[i2];
      const bindingsData = this.get(bindGroup);
      passEncoderGPU.setBindGroup(i2, bindingsData.group);
    }
    let dispatchSize;
    if (dispatchSizeOrCount === null) {
      dispatchSizeOrCount = computeNode.count;
    }
    if (typeof dispatchSizeOrCount === "number") {
      const count = dispatchSizeOrCount;
      if (computeNodeData.dispatchSize === void 0 || computeNodeData.count !== count) {
        computeNodeData.dispatchSize = [0, 1, 1];
        computeNodeData.count = count;
        const workgroupSize = computeNode.workgroupSize;
        let size = workgroupSize[0];
        for (let i2 = 1; i2 < workgroupSize.length; i2++)
          size *= workgroupSize[i2];
        const dispatchCount = Math.ceil(count / size);
        const maxComputeWorkgroupsPerDimension = this.device.limits.maxComputeWorkgroupsPerDimension;
        dispatchSize = [dispatchCount, 1, 1];
        if (dispatchCount > maxComputeWorkgroupsPerDimension) {
          dispatchSize[0] = Math.min(dispatchCount, maxComputeWorkgroupsPerDimension);
          dispatchSize[1] = Math.ceil(dispatchCount / maxComputeWorkgroupsPerDimension);
        }
        computeNodeData.dispatchSize = dispatchSize;
      }
      dispatchSize = computeNodeData.dispatchSize;
    } else {
      dispatchSize = dispatchSizeOrCount;
    }
    passEncoderGPU.dispatchWorkgroups(
      dispatchSize[0],
      dispatchSize[1] || 1,
      dispatchSize[2] || 1
    );
  }
  /**
   * This method is executed at the end of a compute call and
   * finalizes work after compute tasks.
   *
   * @param {Node|Array<Node>} computeGroup - The compute node(s).
   */
  finishCompute(computeGroup) {
    const groupData = this.get(computeGroup);
    groupData.passEncoderGPU.end();
    this.device.queue.submit([groupData.cmdEncoderGPU.finish()]);
  }
  /**
   * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
   * the CPU waits for the GPU to complete its operation (e.g. a compute task).
   *
   * @async
   * @return {Promise} A Promise that resolves when synchronization has been finished.
   */
  async waitForGPU() {
    await this.device.queue.onSubmittedWorkDone();
  }
  // render object
  /**
   * Executes a draw command for the given render object.
   *
   * @param {RenderObject} renderObject - The render object to draw.
   * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.
   */
  draw(renderObject, info) {
    const { object, material, context: context3, pipeline } = renderObject;
    const bindings = renderObject.getBindings();
    const renderContextData = this.get(context3);
    const pipelineGPU = this.get(pipeline).pipeline;
    const index6 = renderObject.getIndex();
    const hasIndex = index6 !== null;
    const drawParams = renderObject.getDrawParameters();
    if (drawParams === null)
      return;
    const setPipelineAndBindings = (passEncoderGPU, currentSets) => {
      this.pipelineUtils.setPipeline(passEncoderGPU, pipelineGPU);
      currentSets.pipeline = pipelineGPU;
      const currentBindingGroups = currentSets.bindingGroups;
      for (let i2 = 0, l2 = bindings.length; i2 < l2; i2++) {
        const bindGroup = bindings[i2];
        const bindingsData = this.get(bindGroup);
        if (currentBindingGroups[bindGroup.index] !== bindGroup.id) {
          passEncoderGPU.setBindGroup(bindGroup.index, bindingsData.group);
          currentBindingGroups[bindGroup.index] = bindGroup.id;
        }
      }
      if (hasIndex === true) {
        if (currentSets.index !== index6) {
          const buffer3 = this.get(index6).buffer;
          const indexFormat = index6.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;
          passEncoderGPU.setIndexBuffer(buffer3, indexFormat);
          currentSets.index = index6;
        }
      }
      const vertexBuffers = renderObject.getVertexBuffers();
      for (let i2 = 0, l2 = vertexBuffers.length; i2 < l2; i2++) {
        const vertexBuffer = vertexBuffers[i2];
        if (currentSets.attributes[i2] !== vertexBuffer) {
          const buffer3 = this.get(vertexBuffer).buffer;
          passEncoderGPU.setVertexBuffer(i2, buffer3);
          currentSets.attributes[i2] = vertexBuffer;
        }
      }
      if (context3.stencil === true && material.stencilWrite === true && renderContextData.currentStencilRef !== material.stencilRef) {
        passEncoderGPU.setStencilReference(material.stencilRef);
        renderContextData.currentStencilRef = material.stencilRef;
      }
    };
    const draw = (passEncoderGPU, currentSets) => {
      setPipelineAndBindings(passEncoderGPU, currentSets);
      if (object.isBatchedMesh === true) {
        const starts = object._multiDrawStarts;
        const counts = object._multiDrawCounts;
        const drawCount = object._multiDrawCount;
        const drawInstances = object._multiDrawInstances;
        if (drawInstances !== null) {
          warnOnce("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");
        }
        for (let i2 = 0; i2 < drawCount; i2++) {
          const count = drawInstances ? drawInstances[i2] : 1;
          const firstInstance = count > 1 ? 0 : i2;
          if (hasIndex === true) {
            passEncoderGPU.drawIndexed(counts[i2], count, starts[i2] / index6.array.BYTES_PER_ELEMENT, 0, firstInstance);
          } else {
            passEncoderGPU.draw(counts[i2], count, starts[i2], firstInstance);
          }
          info.update(object, counts[i2], count);
        }
      } else if (hasIndex === true) {
        const { vertexCount: indexCount, instanceCount, firstVertex: firstIndex } = drawParams;
        const indirect = renderObject.getIndirect();
        if (indirect !== null) {
          const buffer3 = this.get(indirect).buffer;
          passEncoderGPU.drawIndexedIndirect(buffer3, 0);
        } else {
          passEncoderGPU.drawIndexed(indexCount, instanceCount, firstIndex, 0, 0);
        }
        info.update(object, indexCount, instanceCount);
      } else {
        const { vertexCount, instanceCount, firstVertex } = drawParams;
        const indirect = renderObject.getIndirect();
        if (indirect !== null) {
          const buffer3 = this.get(indirect).buffer;
          passEncoderGPU.drawIndirect(buffer3, 0);
        } else {
          passEncoderGPU.draw(vertexCount, instanceCount, firstVertex, 0);
        }
        info.update(object, vertexCount, instanceCount);
      }
    };
    if (renderObject.camera.isArrayCamera && renderObject.camera.cameras.length > 0) {
      const cameraData = this.get(renderObject.camera);
      const cameras = renderObject.camera.cameras;
      const cameraIndex3 = renderObject.getBindingGroup("cameraIndex");
      if (cameraData.indexesGPU === void 0 || cameraData.indexesGPU.length !== cameras.length) {
        const bindingsData = this.get(cameraIndex3);
        const indexesGPU = [];
        const data = new Uint32Array([0, 0, 0, 0]);
        for (let i2 = 0, len = cameras.length; i2 < len; i2++) {
          data[0] = i2;
          const bindGroupIndex = this.bindingUtils.createBindGroupIndex(data, bindingsData.layout);
          indexesGPU.push(bindGroupIndex);
        }
        cameraData.indexesGPU = indexesGPU;
      }
      const pixelRatio = this.renderer.getPixelRatio();
      for (let i2 = 0, len = cameras.length; i2 < len; i2++) {
        const subCamera = cameras[i2];
        if (object.layers.test(subCamera.layers)) {
          const vp = subCamera.viewport;
          let pass3 = renderContextData.currentPass;
          let sets = renderContextData.currentSets;
          if (renderContextData.bundleEncoders) {
            const bundleEncoder = renderContextData.bundleEncoders[i2];
            const bundleSets = renderContextData.bundleSets[i2];
            pass3 = bundleEncoder;
            sets = bundleSets;
          }
          if (vp) {
            pass3.setViewport(
              Math.floor(vp.x * pixelRatio),
              Math.floor(vp.y * pixelRatio),
              Math.floor(vp.width * pixelRatio),
              Math.floor(vp.height * pixelRatio),
              context3.viewportValue.minDepth,
              context3.viewportValue.maxDepth
            );
          }
          if (cameraIndex3 && cameraData.indexesGPU) {
            pass3.setBindGroup(cameraIndex3.index, cameraData.indexesGPU[i2]);
            sets.bindingGroups[cameraIndex3.index] = cameraIndex3.id;
          }
          draw(pass3, sets);
        }
      }
    } else {
      if (renderContextData.currentPass) {
        if (renderContextData.occlusionQuerySet !== void 0) {
          const lastObject = renderContextData.lastOcclusionObject;
          if (lastObject !== object) {
            if (lastObject !== null && lastObject.occlusionTest === true) {
              renderContextData.currentPass.endOcclusionQuery();
              renderContextData.occlusionQueryIndex++;
            }
            if (object.occlusionTest === true) {
              renderContextData.currentPass.beginOcclusionQuery(renderContextData.occlusionQueryIndex);
              renderContextData.occlusionQueryObjects[renderContextData.occlusionQueryIndex] = object;
            }
            renderContextData.lastOcclusionObject = object;
          }
        }
        draw(renderContextData.currentPass, renderContextData.currentSets);
      }
    }
  }
  // cache key
  /**
   * Returns `true` if the render pipeline requires an update.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {boolean} Whether the render pipeline requires an update or not.
   */
  needsRenderUpdate(renderObject) {
    const data = this.get(renderObject);
    const { object, material } = renderObject;
    const utils = this.utils;
    const sampleCount = utils.getSampleCountRenderContext(renderObject.context);
    const colorSpace = utils.getCurrentColorSpace(renderObject.context);
    const colorFormat = utils.getCurrentColorFormat(renderObject.context);
    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);
    const primitiveTopology = utils.getPrimitiveTopology(object, material);
    let needsUpdate = false;
    if (data.material !== material || data.materialVersion !== material.version || data.transparent !== material.transparent || data.blending !== material.blending || data.premultipliedAlpha !== material.premultipliedAlpha || data.blendSrc !== material.blendSrc || data.blendDst !== material.blendDst || data.blendEquation !== material.blendEquation || data.blendSrcAlpha !== material.blendSrcAlpha || data.blendDstAlpha !== material.blendDstAlpha || data.blendEquationAlpha !== material.blendEquationAlpha || data.colorWrite !== material.colorWrite || data.depthWrite !== material.depthWrite || data.depthTest !== material.depthTest || data.depthFunc !== material.depthFunc || data.stencilWrite !== material.stencilWrite || data.stencilFunc !== material.stencilFunc || data.stencilFail !== material.stencilFail || data.stencilZFail !== material.stencilZFail || data.stencilZPass !== material.stencilZPass || data.stencilFuncMask !== material.stencilFuncMask || data.stencilWriteMask !== material.stencilWriteMask || data.side !== material.side || data.alphaToCoverage !== material.alphaToCoverage || data.sampleCount !== sampleCount || data.colorSpace !== colorSpace || data.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat || data.primitiveTopology !== primitiveTopology || data.clippingContextCacheKey !== renderObject.clippingContextCacheKey) {
      data.material = material;
      data.materialVersion = material.version;
      data.transparent = material.transparent;
      data.blending = material.blending;
      data.premultipliedAlpha = material.premultipliedAlpha;
      data.blendSrc = material.blendSrc;
      data.blendDst = material.blendDst;
      data.blendEquation = material.blendEquation;
      data.blendSrcAlpha = material.blendSrcAlpha;
      data.blendDstAlpha = material.blendDstAlpha;
      data.blendEquationAlpha = material.blendEquationAlpha;
      data.colorWrite = material.colorWrite;
      data.depthWrite = material.depthWrite;
      data.depthTest = material.depthTest;
      data.depthFunc = material.depthFunc;
      data.stencilWrite = material.stencilWrite;
      data.stencilFunc = material.stencilFunc;
      data.stencilFail = material.stencilFail;
      data.stencilZFail = material.stencilZFail;
      data.stencilZPass = material.stencilZPass;
      data.stencilFuncMask = material.stencilFuncMask;
      data.stencilWriteMask = material.stencilWriteMask;
      data.side = material.side;
      data.alphaToCoverage = material.alphaToCoverage;
      data.sampleCount = sampleCount;
      data.colorSpace = colorSpace;
      data.colorFormat = colorFormat;
      data.depthStencilFormat = depthStencilFormat;
      data.primitiveTopology = primitiveTopology;
      data.clippingContextCacheKey = renderObject.clippingContextCacheKey;
      needsUpdate = true;
    }
    return needsUpdate;
  }
  /**
   * Returns a cache key that is used to identify render pipelines.
   *
   * @param {RenderObject} renderObject - The render object.
   * @return {string} The cache key.
   */
  getRenderCacheKey(renderObject) {
    const { object, material } = renderObject;
    const utils = this.utils;
    const renderContext = renderObject.context;
    const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
    return [
      material.transparent,
      material.blending,
      material.premultipliedAlpha,
      material.blendSrc,
      material.blendDst,
      material.blendEquation,
      material.blendSrcAlpha,
      material.blendDstAlpha,
      material.blendEquationAlpha,
      material.colorWrite,
      material.depthWrite,
      material.depthTest,
      material.depthFunc,
      material.stencilWrite,
      material.stencilFunc,
      material.stencilFail,
      material.stencilZFail,
      material.stencilZPass,
      material.stencilFuncMask,
      material.stencilWriteMask,
      material.side,
      frontFaceCW,
      utils.getSampleCountRenderContext(renderContext),
      utils.getCurrentColorSpace(renderContext),
      utils.getCurrentColorFormat(renderContext),
      utils.getCurrentDepthStencilFormat(renderContext),
      utils.getPrimitiveTopology(object, material),
      renderObject.getGeometryCacheKey(),
      renderObject.clippingContextCacheKey
    ].join();
  }
  // textures
  /**
   * Creates a GPU sampler for the given texture.
   *
   * @param {Texture} texture - The texture to create the sampler for.
   */
  createSampler(texture3) {
    this.textureUtils.createSampler(texture3);
  }
  /**
   * Destroys the GPU sampler for the given texture.
   *
   * @param {Texture} texture - The texture to destroy the sampler for.
   */
  destroySampler(texture3) {
    this.textureUtils.destroySampler(texture3);
  }
  /**
   * Creates a default texture for the given texture that can be used
   * as a placeholder until the actual texture is ready for usage.
   *
   * @param {Texture} texture - The texture to create a default texture for.
   */
  createDefaultTexture(texture3) {
    this.textureUtils.createDefaultTexture(texture3);
  }
  /**
   * Defines a texture on the GPU for the given texture object.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  createTexture(texture3, options) {
    this.textureUtils.createTexture(texture3, options);
  }
  /**
   * Uploads the updated texture data to the GPU.
   *
   * @param {Texture} texture - The texture.
   * @param {Object} [options={}] - Optional configuration parameter.
   */
  updateTexture(texture3, options) {
    this.textureUtils.updateTexture(texture3, options);
  }
  /**
   * Generates mipmaps for the given texture.
   *
   * @param {Texture} texture - The texture.
   */
  generateMipmaps(texture3) {
    this.textureUtils.generateMipmaps(texture3);
  }
  /**
   * Destroys the GPU data for the given texture object.
   *
   * @param {Texture} texture - The texture.
   */
  destroyTexture(texture3) {
    this.textureUtils.destroyTexture(texture3);
  }
  /**
   * Returns texture data as a typed array.
   *
   * @async
   * @param {Texture} texture - The texture to copy.
   * @param {number} x - The x coordinate of the copy origin.
   * @param {number} y - The y coordinate of the copy origin.
   * @param {number} width - The width of the copy.
   * @param {number} height - The height of the copy.
   * @param {number} faceIndex - The face index.
   * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
   */
  async copyTextureToBuffer(texture3, x2, y2, width, height, faceIndex) {
    return this.textureUtils.copyTextureToBuffer(texture3, x2, y2, width, height, faceIndex);
  }
  /**
   * Inits a time stamp query for the given render context.
   *
   * @param {string} type - The type of the timestamp query (e.g. 'render', 'compute').
   * @param {number} uid - Unique id for the context (e.g. render context id).
   * @param {Object} descriptor - The query descriptor.
   */
  initTimestampQuery(type, uid, descriptor) {
    if (!this.trackTimestamp)
      return;
    if (!this.timestampQueryPool[type]) {
      this.timestampQueryPool[type] = new WebGPUTimestampQueryPool(this.device, type, 2048);
    }
    const timestampQueryPool = this.timestampQueryPool[type];
    const baseOffset = timestampQueryPool.allocateQueriesForContext(uid);
    descriptor.timestampWrites = {
      querySet: timestampQueryPool.querySet,
      beginningOfPassWriteIndex: baseOffset,
      endOfPassWriteIndex: baseOffset + 1
    };
  }
  // node builder
  /**
   * Returns a node builder for the given render object.
   *
   * @param {RenderObject} object - The render object.
   * @param {Renderer} renderer - The renderer.
   * @return {WGSLNodeBuilder} The node builder.
   */
  createNodeBuilder(object, renderer3) {
    return new WGSLNodeBuilder(object, renderer3);
  }
  // program
  /**
   * Creates a shader program from the given programmable stage.
   *
   * @param {ProgrammableStage} program - The programmable stage.
   */
  createProgram(program) {
    const programGPU = this.get(program);
    programGPU.module = {
      module: this.device.createShaderModule({ code: program.code, label: program.stage + (program.name !== "" ? `_${program.name}` : "") }),
      entryPoint: "main"
    };
  }
  /**
   * Destroys the shader program of the given programmable stage.
   *
   * @param {ProgrammableStage} program - The programmable stage.
   */
  destroyProgram(program) {
    this.delete(program);
  }
  // pipelines
  /**
   * Creates a render pipeline for the given render object.
   *
   * @param {RenderObject} renderObject - The render object.
   * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
   */
  createRenderPipeline(renderObject, promises) {
    this.pipelineUtils.createRenderPipeline(renderObject, promises);
  }
  /**
   * Creates a compute pipeline for the given compute node.
   *
   * @param {ComputePipeline} computePipeline - The compute pipeline.
   * @param {Array<BindGroup>} bindings - The bindings.
   */
  createComputePipeline(computePipeline, bindings) {
    this.pipelineUtils.createComputePipeline(computePipeline, bindings);
  }
  /**
   * Prepares the state for encoding render bundles.
   *
   * @param {RenderContext} renderContext - The render context.
   */
  beginBundle(renderContext) {
    const renderContextData = this.get(renderContext);
    renderContextData._currentPass = renderContextData.currentPass;
    renderContextData._currentSets = renderContextData.currentSets;
    renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
    renderContextData.currentPass = this.pipelineUtils.createBundleEncoder(renderContext);
  }
  /**
   * After processing render bundles this method finalizes related work.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {RenderBundle} bundle - The render bundle.
   */
  finishBundle(renderContext, bundle) {
    const renderContextData = this.get(renderContext);
    const bundleEncoder = renderContextData.currentPass;
    const bundleGPU = bundleEncoder.finish();
    this.get(bundle).bundleGPU = bundleGPU;
    renderContextData.currentSets = renderContextData._currentSets;
    renderContextData.currentPass = renderContextData._currentPass;
  }
  /**
   * Adds a render bundle to the render context data.
   *
   * @param {RenderContext} renderContext - The render context.
   * @param {RenderBundle} bundle - The render bundle to add.
   */
  addBundle(renderContext, bundle) {
    const renderContextData = this.get(renderContext);
    renderContextData.renderBundles.push(this.get(bundle).bundleGPU);
  }
  // bindings
  /**
   * Creates bindings from the given bind group definition.
   *
   * @param {BindGroup} bindGroup - The bind group.
   * @param {Array<BindGroup>} bindings - Array of bind groups.
   * @param {number} cacheIndex - The cache index.
   * @param {number} version - The version.
   */
  createBindings(bindGroup, bindings, cacheIndex, version) {
    this.bindingUtils.createBindings(bindGroup, bindings, cacheIndex, version);
  }
  /**
   * Updates the given bind group definition.
   *
   * @param {BindGroup} bindGroup - The bind group.
   * @param {Array<BindGroup>} bindings - Array of bind groups.
   * @param {number} cacheIndex - The cache index.
   * @param {number} version - The version.
   */
  updateBindings(bindGroup, bindings, cacheIndex, version) {
    this.bindingUtils.createBindings(bindGroup, bindings, cacheIndex, version);
  }
  /**
   * Updates a buffer binding.
   *
   *  @param {Buffer} binding - The buffer binding to update.
   */
  updateBinding(binding) {
    this.bindingUtils.updateBinding(binding);
  }
  // attributes
  /**
   * Creates the buffer of an indexed shader attribute.
   *
   * @param {BufferAttribute} attribute - The indexed buffer attribute.
   */
  createIndexAttribute(attribute3) {
    let usage = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST;
    if (attribute3.isStorageBufferAttribute || attribute3.isStorageInstancedBufferAttribute) {
      usage |= GPUBufferUsage.STORAGE;
    }
    this.attributeUtils.createAttribute(attribute3, usage);
  }
  /**
   * Creates the GPU buffer of a shader attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  createAttribute(attribute3) {
    this.attributeUtils.createAttribute(attribute3, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
  }
  /**
   * Creates the GPU buffer of a storage attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  createStorageAttribute(attribute3) {
    this.attributeUtils.createAttribute(attribute3, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
  }
  /**
   * Creates the GPU buffer of an indirect storage attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute.
   */
  createIndirectStorageAttribute(attribute3) {
    this.attributeUtils.createAttribute(attribute3, GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
  }
  /**
   * Updates the GPU buffer of a shader attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute to update.
   */
  updateAttribute(attribute3) {
    this.attributeUtils.updateAttribute(attribute3);
  }
  /**
   * Destroys the GPU buffer of a shader attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute to destroy.
   */
  destroyAttribute(attribute3) {
    this.attributeUtils.destroyAttribute(attribute3);
  }
  // canvas
  /**
   * Triggers an update of the default render pass descriptor.
   */
  updateSize() {
    this.colorBuffer = this.textureUtils.getColorBuffer();
    this.defaultRenderPassdescriptor = null;
  }
  // utils public
  /**
   * Returns the maximum anisotropy texture filtering value.
   *
   * @return {number} The maximum anisotropy texture filtering value.
   */
  getMaxAnisotropy() {
    return 16;
  }
  /**
   * Checks if the given feature is supported by the backend.
   *
   * @param {string} name - The feature's name.
   * @return {boolean} Whether the feature is supported or not.
   */
  hasFeature(name) {
    return this.device.features.has(name);
  }
  /**
   * Copies data of the given source texture to the given destination texture.
   *
   * @param {Texture} srcTexture - The source texture.
   * @param {Texture} dstTexture - The destination texture.
   * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
   * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
   * @param {number} [srcLevel=0] - The mipmap level to copy.
   * @param {number} [dstLevel=0] - The destination mip level to copy to.
   */
  copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
    let dstX = 0;
    let dstY = 0;
    let dstZ = 0;
    let srcX = 0;
    let srcY = 0;
    let srcZ = 0;
    let srcWidth = srcTexture.image.width;
    let srcHeight = srcTexture.image.height;
    let srcDepth = 1;
    if (srcRegion !== null) {
      if (srcRegion.isBox3 === true) {
        srcX = srcRegion.min.x;
        srcY = srcRegion.min.y;
        srcZ = srcRegion.min.z;
        srcWidth = srcRegion.max.x - srcRegion.min.x;
        srcHeight = srcRegion.max.y - srcRegion.min.y;
        srcDepth = srcRegion.max.z - srcRegion.min.z;
      } else {
        srcX = srcRegion.min.x;
        srcY = srcRegion.min.y;
        srcWidth = srcRegion.max.x - srcRegion.min.x;
        srcHeight = srcRegion.max.y - srcRegion.min.y;
        srcDepth = 1;
      }
    }
    if (dstPosition !== null) {
      dstX = dstPosition.x;
      dstY = dstPosition.y;
      dstZ = dstPosition.z || 0;
    }
    const encoder = this.device.createCommandEncoder({ label: "copyTextureToTexture_" + srcTexture.id + "_" + dstTexture.id });
    const sourceGPU = this.get(srcTexture).texture;
    const destinationGPU = this.get(dstTexture).texture;
    encoder.copyTextureToTexture(
      {
        texture: sourceGPU,
        mipLevel: srcLevel,
        origin: { x: srcX, y: srcY, z: srcZ }
      },
      {
        texture: destinationGPU,
        mipLevel: dstLevel,
        origin: { x: dstX, y: dstY, z: dstZ }
      },
      [
        srcWidth,
        srcHeight,
        srcDepth
      ]
    );
    this.device.queue.submit([encoder.finish()]);
    if (dstLevel === 0 && dstTexture.generateMipmaps) {
      this.textureUtils.generateMipmaps(dstTexture);
    }
  }
  /**
   * Copies the current bound framebuffer to the given texture.
   *
   * @param {Texture} texture - The destination texture.
   * @param {RenderContext} renderContext - The render context.
   * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
   */
  copyFramebufferToTexture(texture3, renderContext, rectangle) {
    const renderContextData = this.get(renderContext);
    let sourceGPU = null;
    if (renderContext.renderTarget) {
      if (texture3.isDepthTexture) {
        sourceGPU = this.get(renderContext.depthTexture).texture;
      } else {
        sourceGPU = this.get(renderContext.textures[0]).texture;
      }
    } else {
      if (texture3.isDepthTexture) {
        sourceGPU = this.textureUtils.getDepthBuffer(renderContext.depth, renderContext.stencil);
      } else {
        sourceGPU = this.context.getCurrentTexture();
      }
    }
    const destinationGPU = this.get(texture3).texture;
    if (sourceGPU.format !== destinationGPU.format) {
      console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.", sourceGPU.format, destinationGPU.format);
      return;
    }
    let encoder;
    if (renderContextData.currentPass) {
      renderContextData.currentPass.end();
      encoder = renderContextData.encoder;
    } else {
      encoder = this.device.createCommandEncoder({ label: "copyFramebufferToTexture_" + texture3.id });
    }
    encoder.copyTextureToTexture(
      {
        texture: sourceGPU,
        origin: [rectangle.x, rectangle.y, 0]
      },
      {
        texture: destinationGPU
      },
      [
        rectangle.z,
        rectangle.w
      ]
    );
    if (renderContextData.currentPass) {
      const { descriptor } = renderContextData;
      for (let i2 = 0; i2 < descriptor.colorAttachments.length; i2++) {
        descriptor.colorAttachments[i2].loadOp = GPULoadOp.Load;
      }
      if (renderContext.depth)
        descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
      if (renderContext.stencil)
        descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
      renderContextData.currentPass = encoder.beginRenderPass(descriptor);
      renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
      if (renderContext.viewport) {
        this.updateViewport(renderContext);
      }
      if (renderContext.scissor) {
        const { x: x2, y: y2, width, height } = renderContext.scissorValue;
        renderContextData.currentPass.setScissorRect(x2, y2, width, height);
      }
    } else {
      this.device.queue.submit([encoder.finish()]);
    }
    if (texture3.generateMipmaps) {
      this.textureUtils.generateMipmaps(texture3);
    }
  }
};
var IESSpotLight = class extends SpotLight {
  /**
   * Constructs a new IES spot light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(color4, intensity, distance4, angle, penumbra, decay) {
    super(color4, intensity, distance4, angle, penumbra, decay);
    this.iesMap = null;
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.iesMap = source.iesMap;
    return this;
  }
};
var ProjectorLight = class extends SpotLight {
  /**
   * Constructs a new projector light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(color4, intensity, distance4, angle, penumbra, decay) {
    super(color4, intensity, distance4, angle, penumbra, decay);
    this.aspect = null;
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.aspect = source.aspect;
    return this;
  }
};
var StandardNodeLibrary = class extends NodeLibrary {
  /**
   * Constructs a new standard node library.
   */
  constructor() {
    super();
    this.addMaterial(MeshPhongNodeMaterial, "MeshPhongMaterial");
    this.addMaterial(MeshStandardNodeMaterial, "MeshStandardMaterial");
    this.addMaterial(MeshPhysicalNodeMaterial, "MeshPhysicalMaterial");
    this.addMaterial(MeshToonNodeMaterial, "MeshToonMaterial");
    this.addMaterial(MeshBasicNodeMaterial, "MeshBasicMaterial");
    this.addMaterial(MeshLambertNodeMaterial, "MeshLambertMaterial");
    this.addMaterial(MeshNormalNodeMaterial, "MeshNormalMaterial");
    this.addMaterial(MeshMatcapNodeMaterial, "MeshMatcapMaterial");
    this.addMaterial(LineBasicNodeMaterial, "LineBasicMaterial");
    this.addMaterial(LineDashedNodeMaterial, "LineDashedMaterial");
    this.addMaterial(PointsNodeMaterial, "PointsMaterial");
    this.addMaterial(SpriteNodeMaterial, "SpriteMaterial");
    this.addMaterial(ShadowNodeMaterial, "ShadowMaterial");
    this.addLight(PointLightNode, PointLight);
    this.addLight(DirectionalLightNode, DirectionalLight);
    this.addLight(RectAreaLightNode, RectAreaLight);
    this.addLight(SpotLightNode, SpotLight);
    this.addLight(AmbientLightNode, AmbientLight);
    this.addLight(HemisphereLightNode, HemisphereLight);
    this.addLight(LightProbeNode, LightProbe);
    this.addLight(IESSpotLightNode, IESSpotLight);
    this.addLight(ProjectorLightNode, ProjectorLight);
    this.addToneMapping(linearToneMapping, LinearToneMapping);
    this.addToneMapping(reinhardToneMapping, ReinhardToneMapping);
    this.addToneMapping(cineonToneMapping, CineonToneMapping);
    this.addToneMapping(acesFilmicToneMapping, ACESFilmicToneMapping);
    this.addToneMapping(agxToneMapping, AgXToneMapping);
    this.addToneMapping(neutralToneMapping, NeutralToneMapping);
  }
};
var WebGPURenderer = class extends Renderer {
  /**
   * WebGPURenderer options.
   *
   * @typedef {Object} WebGPURenderer~Options
   * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
   * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
   * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
   * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
   * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
   * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.
   * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.
   * @property {boolean} [multiview=false] - If set to `true`, the renderer will use multiview during WebXR rendering if supported.
   * @property {number} [outputType=undefined] - Texture type for output to canvas. By default, device's preferred format is used; other formats may incur overhead.
   * @property {number} [colorBufferType=HalfFloatType] - Defines the type of color buffers. The default `HalfFloatType` is recommend for best
   * quality. To save memory and bandwidth, `UnsignedByteType` might be used. This will reduce rendering quality though.
   */
  /**
   * Constructs a new WebGPU renderer.
   *
   * @param {WebGPURenderer~Options} [parameters] - The configuration parameter.
   */
  constructor(parameters = {}) {
    let BackendClass;
    if (parameters.forceWebGL) {
      BackendClass = WebGLBackend;
    } else {
      BackendClass = WebGPUBackend;
      parameters.getFallback = () => {
        console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.");
        return new WebGLBackend(parameters);
      };
    }
    const backend = new BackendClass(parameters);
    super(backend, parameters);
    this.library = new StandardNodeLibrary();
    this.isWebGPURenderer = true;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
};

// node_modules/three/build/three.tsl.js
var BRDF_GGX2 = TSL.BRDF_GGX;
var BRDF_Lambert2 = TSL.BRDF_Lambert;
var BasicPointShadowFilter2 = TSL.BasicPointShadowFilter;
var BasicShadowFilter2 = TSL.BasicShadowFilter;
var Break2 = TSL.Break;
var Const2 = TSL.Const;
var Continue2 = TSL.Continue;
var DFGApprox2 = TSL.DFGApprox;
var D_GGX2 = TSL.D_GGX;
var Discard2 = TSL.Discard;
var EPSILON2 = TSL.EPSILON;
var F_Schlick2 = TSL.F_Schlick;
var Fn2 = TSL.Fn;
var INFINITY2 = TSL.INFINITY;
var If2 = TSL.If;
var Loop2 = TSL.Loop;
var NodeAccess2 = TSL.NodeAccess;
var NodeShaderStage2 = TSL.NodeShaderStage;
var NodeType2 = TSL.NodeType;
var NodeUpdateType2 = TSL.NodeUpdateType;
var PCFShadowFilter2 = TSL.PCFShadowFilter;
var PCFSoftShadowFilter2 = TSL.PCFSoftShadowFilter;
var PI3 = TSL.PI;
var PI22 = TSL.PI2;
var PointShadowFilter2 = TSL.PointShadowFilter;
var Return2 = TSL.Return;
var Schlick_to_F02 = TSL.Schlick_to_F0;
var ScriptableNodeResources2 = TSL.ScriptableNodeResources;
var ShaderNode2 = TSL.ShaderNode;
var Stack2 = TSL.Stack;
var Switch2 = TSL.Switch;
var TBNViewMatrix2 = TSL.TBNViewMatrix;
var VSMShadowFilter2 = TSL.VSMShadowFilter;
var V_GGX_SmithCorrelated2 = TSL.V_GGX_SmithCorrelated;
var Var2 = TSL.Var;
var VarIntent2 = TSL.VarIntent;
var abs2 = TSL.abs;
var acesFilmicToneMapping2 = TSL.acesFilmicToneMapping;
var acos2 = TSL.acos;
var add4 = TSL.add;
var addMethodChaining2 = TSL.addMethodChaining;
var addNodeElement2 = TSL.addNodeElement;
var agxToneMapping2 = TSL.agxToneMapping;
var all2 = TSL.all;
var alphaT2 = TSL.alphaT;
var and2 = TSL.and;
var anisotropy2 = TSL.anisotropy;
var anisotropyB2 = TSL.anisotropyB;
var anisotropyT2 = TSL.anisotropyT;
var any2 = TSL.any;
var append2 = TSL.append;
var array2 = TSL.array;
var arrayBuffer2 = TSL.arrayBuffer;
var asin3 = TSL.asin;
var assign2 = TSL.assign;
var atan3 = TSL.atan;
var atan23 = TSL.atan2;
var atomicAdd2 = TSL.atomicAdd;
var atomicAnd2 = TSL.atomicAnd;
var atomicFunc2 = TSL.atomicFunc;
var atomicLoad2 = TSL.atomicLoad;
var atomicMax2 = TSL.atomicMax;
var atomicMin2 = TSL.atomicMin;
var atomicOr2 = TSL.atomicOr;
var atomicStore2 = TSL.atomicStore;
var atomicSub2 = TSL.atomicSub;
var atomicXor2 = TSL.atomicXor;
var attenuationColor2 = TSL.attenuationColor;
var attenuationDistance2 = TSL.attenuationDistance;
var attribute2 = TSL.attribute;
var attributeArray2 = TSL.attributeArray;
var backgroundBlurriness2 = TSL.backgroundBlurriness;
var backgroundIntensity2 = TSL.backgroundIntensity;
var backgroundRotation2 = TSL.backgroundRotation;
var batch2 = TSL.batch;
var bentNormalView2 = TSL.bentNormalView;
var billboarding2 = TSL.billboarding;
var bitAnd2 = TSL.bitAnd;
var bitNot2 = TSL.bitNot;
var bitOr2 = TSL.bitOr;
var bitXor2 = TSL.bitXor;
var bitangentGeometry2 = TSL.bitangentGeometry;
var bitangentLocal2 = TSL.bitangentLocal;
var bitangentView2 = TSL.bitangentView;
var bitangentWorld2 = TSL.bitangentWorld;
var bitcast2 = TSL.bitcast;
var blendBurn2 = TSL.blendBurn;
var blendColor2 = TSL.blendColor;
var blendDodge2 = TSL.blendDodge;
var blendOverlay2 = TSL.blendOverlay;
var blendScreen2 = TSL.blendScreen;
var blur2 = TSL.blur;
var bool2 = TSL.bool;
var buffer2 = TSL.buffer;
var bufferAttribute2 = TSL.bufferAttribute;
var bumpMap2 = TSL.bumpMap;
var burn2 = TSL.burn;
var builtin2 = TSL.builtin;
var bvec22 = TSL.bvec2;
var bvec32 = TSL.bvec3;
var bvec42 = TSL.bvec4;
var bypass2 = TSL.bypass;
var cache2 = TSL.cache;
var call2 = TSL.call;
var cameraFar2 = TSL.cameraFar;
var cameraIndex2 = TSL.cameraIndex;
var cameraNear2 = TSL.cameraNear;
var cameraNormalMatrix2 = TSL.cameraNormalMatrix;
var cameraPosition2 = TSL.cameraPosition;
var cameraProjectionMatrix2 = TSL.cameraProjectionMatrix;
var cameraProjectionMatrixInverse2 = TSL.cameraProjectionMatrixInverse;
var cameraViewMatrix2 = TSL.cameraViewMatrix;
var cameraViewport2 = TSL.cameraViewport;
var cameraWorldMatrix2 = TSL.cameraWorldMatrix;
var cbrt2 = TSL.cbrt;
var cdl2 = TSL.cdl;
var ceil2 = TSL.ceil;
var checker2 = TSL.checker;
var cineonToneMapping2 = TSL.cineonToneMapping;
var clamp2 = TSL.clamp;
var clearcoat2 = TSL.clearcoat;
var clearcoatNormalView2 = TSL.clearcoatNormalView;
var clearcoatRoughness2 = TSL.clearcoatRoughness;
var code2 = TSL.code;
var color3 = TSL.color;
var colorSpaceToWorking2 = TSL.colorSpaceToWorking;
var colorToDirection2 = TSL.colorToDirection;
var compute2 = TSL.compute;
var computeKernel2 = TSL.computeKernel;
var computeSkinning2 = TSL.computeSkinning;
var context2 = TSL.context;
var convert2 = TSL.convert;
var convertColorSpace2 = TSL.convertColorSpace;
var convertToTexture2 = TSL.convertToTexture;
var cos3 = TSL.cos;
var cross2 = TSL.cross;
var cubeTexture2 = TSL.cubeTexture;
var cubeTextureBase2 = TSL.cubeTextureBase;
var cubeToUV2 = TSL.cubeToUV;
var dFdx2 = TSL.dFdx;
var dFdy2 = TSL.dFdy;
var dashSize2 = TSL.dashSize;
var debug2 = TSL.debug;
var decrement2 = TSL.decrement;
var decrementBefore2 = TSL.decrementBefore;
var defaultBuildStages2 = TSL.defaultBuildStages;
var defaultShaderStages2 = TSL.defaultShaderStages;
var defined2 = TSL.defined;
var degrees3 = TSL.degrees;
var deltaTime2 = TSL.deltaTime;
var densityFog2 = TSL.densityFog;
var densityFogFactor2 = TSL.densityFogFactor;
var depth2 = TSL.depth;
var depthPass2 = TSL.depthPass;
var determinant2 = TSL.determinant;
var difference2 = TSL.difference;
var diffuseColor2 = TSL.diffuseColor;
var directPointLight2 = TSL.directPointLight;
var directionToColor2 = TSL.directionToColor;
var directionToFaceDirection2 = TSL.directionToFaceDirection;
var dispersion2 = TSL.dispersion;
var distance3 = TSL.distance;
var div2 = TSL.div;
var dodge2 = TSL.dodge;
var dot2 = TSL.dot;
var drawIndex2 = TSL.drawIndex;
var dynamicBufferAttribute2 = TSL.dynamicBufferAttribute;
var element2 = TSL.element;
var emissive2 = TSL.emissive;
var equal2 = TSL.equal;
var equals3 = TSL.equals;
var equirectUV2 = TSL.equirectUV;
var exp3 = TSL.exp;
var exp22 = TSL.exp2;
var expression2 = TSL.expression;
var faceDirection2 = TSL.faceDirection;
var faceForward2 = TSL.faceForward;
var faceforward2 = TSL.faceforward;
var float2 = TSL.float;
var floatBitsToInt2 = TSL.floatBitsToInt;
var floatBitsToUint2 = TSL.floatBitsToUint;
var floor2 = TSL.floor;
var fog2 = TSL.fog;
var fract2 = TSL.fract;
var frameGroup2 = TSL.frameGroup;
var frameId2 = TSL.frameId;
var frontFacing2 = TSL.frontFacing;
var fwidth2 = TSL.fwidth;
var gain2 = TSL.gain;
var gapSize2 = TSL.gapSize;
var getConstNodeType2 = TSL.getConstNodeType;
var getCurrentStack2 = TSL.getCurrentStack;
var getDirection2 = TSL.getDirection;
var getDistanceAttenuation2 = TSL.getDistanceAttenuation;
var getGeometryRoughness2 = TSL.getGeometryRoughness;
var getNormalFromDepth2 = TSL.getNormalFromDepth;
var getParallaxCorrectNormal2 = TSL.getParallaxCorrectNormal;
var getRoughness2 = TSL.getRoughness;
var getScreenPosition2 = TSL.getScreenPosition;
var getShIrradianceAt2 = TSL.getShIrradianceAt;
var getShadowMaterial2 = TSL.getShadowMaterial;
var getShadowRenderObjectFunction2 = TSL.getShadowRenderObjectFunction;
var getTextureIndex2 = TSL.getTextureIndex;
var getViewPosition2 = TSL.getViewPosition;
var globalId2 = TSL.globalId;
var glsl2 = TSL.glsl;
var glslFn2 = TSL.glslFn;
var grayscale2 = TSL.grayscale;
var greaterThan2 = TSL.greaterThan;
var greaterThanEqual2 = TSL.greaterThanEqual;
var hash2 = TSL.hash;
var highpModelNormalViewMatrix2 = TSL.highpModelNormalViewMatrix;
var highpModelViewMatrix2 = TSL.highpModelViewMatrix;
var hue2 = TSL.hue;
var increment2 = TSL.increment;
var incrementBefore2 = TSL.incrementBefore;
var instance2 = TSL.instance;
var instanceIndex2 = TSL.instanceIndex;
var instancedArray2 = TSL.instancedArray;
var instancedBufferAttribute2 = TSL.instancedBufferAttribute;
var instancedDynamicBufferAttribute2 = TSL.instancedDynamicBufferAttribute;
var instancedMesh2 = TSL.instancedMesh;
var int2 = TSL.int;
var intBitsToFloat2 = TSL.intBitsToFloat;
var inverse2 = TSL.inverse;
var inverseSqrt2 = TSL.inverseSqrt;
var inversesqrt2 = TSL.inversesqrt;
var invocationLocalIndex2 = TSL.invocationLocalIndex;
var invocationSubgroupIndex2 = TSL.invocationSubgroupIndex;
var ior2 = TSL.ior;
var iridescence2 = TSL.iridescence;
var iridescenceIOR2 = TSL.iridescenceIOR;
var iridescenceThickness2 = TSL.iridescenceThickness;
var ivec22 = TSL.ivec2;
var ivec32 = TSL.ivec3;
var ivec42 = TSL.ivec4;
var js2 = TSL.js;
var label2 = TSL.label;
var length2 = TSL.length;
var lengthSq2 = TSL.lengthSq;
var lessThan2 = TSL.lessThan;
var lessThanEqual2 = TSL.lessThanEqual;
var lightPosition2 = TSL.lightPosition;
var lightProjectionUV2 = TSL.lightProjectionUV;
var lightShadowMatrix2 = TSL.lightShadowMatrix;
var lightTargetDirection2 = TSL.lightTargetDirection;
var lightTargetPosition2 = TSL.lightTargetPosition;
var lightViewPosition2 = TSL.lightViewPosition;
var lightingContext2 = TSL.lightingContext;
var lights2 = TSL.lights;
var linearDepth2 = TSL.linearDepth;
var linearToneMapping2 = TSL.linearToneMapping;
var localId2 = TSL.localId;
var log3 = TSL.log;
var log22 = TSL.log2;
var logarithmicDepthToViewZ2 = TSL.logarithmicDepthToViewZ;
var luminance2 = TSL.luminance;
var mat22 = TSL.mat2;
var mat32 = TSL.mat3;
var mat42 = TSL.mat4;
var matcapUV2 = TSL.matcapUV;
var materialAO2 = TSL.materialAO;
var materialAlphaTest2 = TSL.materialAlphaTest;
var materialAnisotropy2 = TSL.materialAnisotropy;
var materialAnisotropyVector2 = TSL.materialAnisotropyVector;
var materialAttenuationColor2 = TSL.materialAttenuationColor;
var materialAttenuationDistance2 = TSL.materialAttenuationDistance;
var materialClearcoat2 = TSL.materialClearcoat;
var materialClearcoatNormal2 = TSL.materialClearcoatNormal;
var materialClearcoatRoughness2 = TSL.materialClearcoatRoughness;
var materialColor2 = TSL.materialColor;
var materialDispersion2 = TSL.materialDispersion;
var materialEmissive2 = TSL.materialEmissive;
var materialEnvIntensity2 = TSL.materialEnvIntensity;
var materialEnvRotation2 = TSL.materialEnvRotation;
var materialIOR2 = TSL.materialIOR;
var materialIridescence2 = TSL.materialIridescence;
var materialIridescenceIOR2 = TSL.materialIridescenceIOR;
var materialIridescenceThickness2 = TSL.materialIridescenceThickness;
var materialLightMap2 = TSL.materialLightMap;
var materialLineDashOffset2 = TSL.materialLineDashOffset;
var materialLineDashSize2 = TSL.materialLineDashSize;
var materialLineGapSize2 = TSL.materialLineGapSize;
var materialLineScale2 = TSL.materialLineScale;
var materialLineWidth2 = TSL.materialLineWidth;
var materialMetalness2 = TSL.materialMetalness;
var materialNormal2 = TSL.materialNormal;
var materialOpacity2 = TSL.materialOpacity;
var materialPointSize2 = TSL.materialPointSize;
var materialReference2 = TSL.materialReference;
var materialReflectivity2 = TSL.materialReflectivity;
var materialRefractionRatio2 = TSL.materialRefractionRatio;
var materialRotation2 = TSL.materialRotation;
var materialRoughness2 = TSL.materialRoughness;
var materialSheen2 = TSL.materialSheen;
var materialSheenRoughness2 = TSL.materialSheenRoughness;
var materialShininess2 = TSL.materialShininess;
var materialSpecular2 = TSL.materialSpecular;
var materialSpecularColor2 = TSL.materialSpecularColor;
var materialSpecularIntensity2 = TSL.materialSpecularIntensity;
var materialSpecularStrength2 = TSL.materialSpecularStrength;
var materialThickness2 = TSL.materialThickness;
var materialTransmission2 = TSL.materialTransmission;
var max4 = TSL.max;
var maxMipLevel2 = TSL.maxMipLevel;
var mediumpModelViewMatrix2 = TSL.mediumpModelViewMatrix;
var metalness2 = TSL.metalness;
var min3 = TSL.min;
var mix2 = TSL.mix;
var mixElement2 = TSL.mixElement;
var mod2 = TSL.mod;
var modInt2 = TSL.modInt;
var modelDirection2 = TSL.modelDirection;
var modelNormalMatrix2 = TSL.modelNormalMatrix;
var modelPosition2 = TSL.modelPosition;
var modelRadius2 = TSL.modelRadius;
var modelScale2 = TSL.modelScale;
var modelViewMatrix2 = TSL.modelViewMatrix;
var modelViewPosition2 = TSL.modelViewPosition;
var modelViewProjection2 = TSL.modelViewProjection;
var modelWorldMatrix2 = TSL.modelWorldMatrix;
var modelWorldMatrixInverse2 = TSL.modelWorldMatrixInverse;
var morphReference2 = TSL.morphReference;
var mrt2 = TSL.mrt;
var mul2 = TSL.mul;
var mx_aastep2 = TSL.mx_aastep;
var mx_add2 = TSL.mx_add;
var mx_atan22 = TSL.mx_atan2;
var mx_cell_noise_float2 = TSL.mx_cell_noise_float;
var mx_contrast2 = TSL.mx_contrast;
var mx_divide2 = TSL.mx_divide;
var mx_fractal_noise_float2 = TSL.mx_fractal_noise_float;
var mx_fractal_noise_vec22 = TSL.mx_fractal_noise_vec2;
var mx_fractal_noise_vec32 = TSL.mx_fractal_noise_vec3;
var mx_fractal_noise_vec42 = TSL.mx_fractal_noise_vec4;
var mx_frame2 = TSL.mx_frame;
var mx_heighttonormal2 = TSL.mx_heighttonormal;
var mx_hsvtorgb2 = TSL.mx_hsvtorgb;
var mx_ifequal2 = TSL.mx_ifequal;
var mx_ifgreater2 = TSL.mx_ifgreater;
var mx_ifgreatereq2 = TSL.mx_ifgreatereq;
var mx_invert2 = TSL.mx_invert;
var mx_modulo2 = TSL.mx_modulo;
var mx_multiply2 = TSL.mx_multiply;
var mx_noise_float2 = TSL.mx_noise_float;
var mx_noise_vec32 = TSL.mx_noise_vec3;
var mx_noise_vec42 = TSL.mx_noise_vec4;
var mx_place2d2 = TSL.mx_place2d;
var mx_power2 = TSL.mx_power;
var mx_ramp42 = TSL.mx_ramp4;
var mx_ramplr2 = TSL.mx_ramplr;
var mx_ramptb2 = TSL.mx_ramptb;
var mx_rgbtohsv2 = TSL.mx_rgbtohsv;
var mx_rotate2d2 = TSL.mx_rotate2d;
var mx_rotate3d2 = TSL.mx_rotate3d;
var mx_safepower2 = TSL.mx_safepower;
var mx_separate2 = TSL.mx_separate;
var mx_splitlr2 = TSL.mx_splitlr;
var mx_splittb2 = TSL.mx_splittb;
var mx_srgb_texture_to_lin_rec7092 = TSL.mx_srgb_texture_to_lin_rec709;
var mx_subtract2 = TSL.mx_subtract;
var mx_timer2 = TSL.mx_timer;
var mx_transform_uv2 = TSL.mx_transform_uv;
var mx_unifiednoise2d2 = TSL.mx_unifiednoise2d;
var mx_unifiednoise3d2 = TSL.mx_unifiednoise3d;
var mx_worley_noise_float2 = TSL.mx_worley_noise_float;
var mx_worley_noise_vec22 = TSL.mx_worley_noise_vec2;
var mx_worley_noise_vec32 = TSL.mx_worley_noise_vec3;
var negate2 = TSL.negate;
var neutralToneMapping2 = TSL.neutralToneMapping;
var nodeArray2 = TSL.nodeArray;
var nodeImmutable2 = TSL.nodeImmutable;
var nodeObject2 = TSL.nodeObject;
var nodeObjectIntent2 = TSL.nodeObjectIntent;
var nodeObjects2 = TSL.nodeObjects;
var nodeProxy2 = TSL.nodeProxy;
var nodeProxyIntent2 = TSL.nodeProxyIntent;
var normalFlat2 = TSL.normalFlat;
var normalGeometry2 = TSL.normalGeometry;
var normalLocal2 = TSL.normalLocal;
var normalMap2 = TSL.normalMap;
var normalView2 = TSL.normalView;
var normalViewGeometry2 = TSL.normalViewGeometry;
var normalWorld2 = TSL.normalWorld;
var normalWorldGeometry2 = TSL.normalWorldGeometry;
var normalize2 = TSL.normalize;
var not2 = TSL.not;
var notEqual2 = TSL.notEqual;
var numWorkgroups2 = TSL.numWorkgroups;
var objectDirection2 = TSL.objectDirection;
var objectGroup2 = TSL.objectGroup;
var objectPosition2 = TSL.objectPosition;
var objectRadius2 = TSL.objectRadius;
var objectScale2 = TSL.objectScale;
var objectViewPosition2 = TSL.objectViewPosition;
var objectWorldMatrix2 = TSL.objectWorldMatrix;
var OnObjectUpdate2 = TSL.OnObjectUpdate;
var OnMaterialUpdate2 = TSL.OnMaterialUpdate;
var oneMinus2 = TSL.oneMinus;
var or2 = TSL.or;
var orthographicDepthToViewZ2 = TSL.orthographicDepthToViewZ;
var oscSawtooth2 = TSL.oscSawtooth;
var oscSine2 = TSL.oscSine;
var oscSquare2 = TSL.oscSquare;
var oscTriangle2 = TSL.oscTriangle;
var output2 = TSL.output;
var outputStruct2 = TSL.outputStruct;
var overlay2 = TSL.overlay;
var overloadingFn2 = TSL.overloadingFn;
var parabola2 = TSL.parabola;
var parallaxDirection2 = TSL.parallaxDirection;
var parallaxUV2 = TSL.parallaxUV;
var parameter2 = TSL.parameter;
var pass2 = TSL.pass;
var passTexture2 = TSL.passTexture;
var pcurve2 = TSL.pcurve;
var perspectiveDepthToViewZ2 = TSL.perspectiveDepthToViewZ;
var pmremTexture2 = TSL.pmremTexture;
var pointShadow2 = TSL.pointShadow;
var pointUV2 = TSL.pointUV;
var pointWidth2 = TSL.pointWidth;
var positionGeometry2 = TSL.positionGeometry;
var positionLocal2 = TSL.positionLocal;
var positionPrevious2 = TSL.positionPrevious;
var positionView2 = TSL.positionView;
var positionViewDirection2 = TSL.positionViewDirection;
var positionWorld2 = TSL.positionWorld;
var positionWorldDirection2 = TSL.positionWorldDirection;
var posterize2 = TSL.posterize;
var pow5 = TSL.pow;
var pow22 = TSL.pow2;
var pow32 = TSL.pow3;
var pow42 = TSL.pow4;
var premultiplyAlpha2 = TSL.premultiplyAlpha;
var property2 = TSL.property;
var radians3 = TSL.radians;
var rand2 = TSL.rand;
var range2 = TSL.range;
var rangeFog2 = TSL.rangeFog;
var rangeFogFactor2 = TSL.rangeFogFactor;
var reciprocal2 = TSL.reciprocal;
var reference2 = TSL.reference;
var referenceBuffer2 = TSL.referenceBuffer;
var reflect2 = TSL.reflect;
var reflectVector2 = TSL.reflectVector;
var reflectView2 = TSL.reflectView;
var reflector2 = TSL.reflector;
var refract2 = TSL.refract;
var refractVector2 = TSL.refractVector;
var refractView2 = TSL.refractView;
var reinhardToneMapping2 = TSL.reinhardToneMapping;
var remap2 = TSL.remap;
var remapClamp2 = TSL.remapClamp;
var renderGroup2 = TSL.renderGroup;
var renderOutput2 = TSL.renderOutput;
var rendererReference2 = TSL.rendererReference;
var rotate2 = TSL.rotate;
var rotateUV2 = TSL.rotateUV;
var roughness2 = TSL.roughness;
var round2 = TSL.round;
var rtt2 = TSL.rtt;
var sRGBTransferEOTF2 = TSL.sRGBTransferEOTF;
var sRGBTransferOETF2 = TSL.sRGBTransferOETF;
var sample2 = TSL.sample;
var sampler2 = TSL.sampler;
var samplerComparison2 = TSL.samplerComparison;
var saturate3 = TSL.saturate;
var saturation2 = TSL.saturation;
var screen2 = TSL.screen;
var screenCoordinate2 = TSL.screenCoordinate;
var screenDPR2 = TSL.screenDPR;
var screenSize2 = TSL.screenSize;
var screenUV2 = TSL.screenUV;
var scriptable2 = TSL.scriptable;
var scriptableValue2 = TSL.scriptableValue;
var select2 = TSL.select;
var setCurrentStack2 = TSL.setCurrentStack;
var setName2 = TSL.setName;
var shaderStages2 = TSL.shaderStages;
var shadow2 = TSL.shadow;
var shadowPositionWorld2 = TSL.shadowPositionWorld;
var shapeCircle2 = TSL.shapeCircle;
var sharedUniformGroup2 = TSL.sharedUniformGroup;
var sheen2 = TSL.sheen;
var sheenRoughness2 = TSL.sheenRoughness;
var shiftLeft2 = TSL.shiftLeft;
var shiftRight2 = TSL.shiftRight;
var shininess2 = TSL.shininess;
var sign4 = TSL.sign;
var sin3 = TSL.sin;
var sinc2 = TSL.sinc;
var skinning2 = TSL.skinning;
var smoothstep2 = TSL.smoothstep;
var smoothstepElement2 = TSL.smoothstepElement;
var specularColor2 = TSL.specularColor;
var specularF902 = TSL.specularF90;
var spherizeUV2 = TSL.spherizeUV;
var split2 = TSL.split;
var spritesheetUV2 = TSL.spritesheetUV;
var sqrt3 = TSL.sqrt;
var stack2 = TSL.stack;
var step2 = TSL.step;
var stepElement2 = TSL.stepElement;
var storage2 = TSL.storage;
var storageBarrier2 = TSL.storageBarrier;
var storageObject2 = TSL.storageObject;
var storageTexture2 = TSL.storageTexture;
var string2 = TSL.string;
var struct2 = TSL.struct;
var sub2 = TSL.sub;
var subgroupAdd2 = TSL.subgroupAdd;
var subgroupAll2 = TSL.subgroupAll;
var subgroupAnd2 = TSL.subgroupAnd;
var subgroupAny2 = TSL.subgroupAny;
var subgroupBallot2 = TSL.subgroupBallot;
var subgroupBroadcast2 = TSL.subgroupBroadcast;
var subgroupBroadcastFirst2 = TSL.subgroupBroadcastFirst;
var subBuild2 = TSL.subBuild;
var subgroupElect2 = TSL.subgroupElect;
var subgroupExclusiveAdd2 = TSL.subgroupExclusiveAdd;
var subgroupExclusiveMul2 = TSL.subgroupExclusiveMul;
var subgroupInclusiveAdd2 = TSL.subgroupInclusiveAdd;
var subgroupInclusiveMul2 = TSL.subgroupInclusiveMul;
var subgroupIndex2 = TSL.subgroupIndex;
var subgroupMax2 = TSL.subgroupMax;
var subgroupMin2 = TSL.subgroupMin;
var subgroupMul2 = TSL.subgroupMul;
var subgroupOr2 = TSL.subgroupOr;
var subgroupShuffle2 = TSL.subgroupShuffle;
var subgroupShuffleDown2 = TSL.subgroupShuffleDown;
var subgroupShuffleUp2 = TSL.subgroupShuffleUp;
var subgroupShuffleXor2 = TSL.subgroupShuffleXor;
var subgroupSize2 = TSL.subgroupSize;
var subgroupXor2 = TSL.subgroupXor;
var tan2 = TSL.tan;
var tangentGeometry2 = TSL.tangentGeometry;
var tangentLocal2 = TSL.tangentLocal;
var tangentView2 = TSL.tangentView;
var tangentWorld2 = TSL.tangentWorld;
var texture2 = TSL.texture;
var texture3D2 = TSL.texture3D;
var textureBarrier2 = TSL.textureBarrier;
var textureBicubic2 = TSL.textureBicubic;
var textureBicubicLevel2 = TSL.textureBicubicLevel;
var textureCubeUV2 = TSL.textureCubeUV;
var textureLoad2 = TSL.textureLoad;
var textureSize2 = TSL.textureSize;
var textureStore2 = TSL.textureStore;
var thickness2 = TSL.thickness;
var time2 = TSL.time;
var toneMapping2 = TSL.toneMapping;
var toneMappingExposure2 = TSL.toneMappingExposure;
var toonOutlinePass2 = TSL.toonOutlinePass;
var transformDirection2 = TSL.transformDirection;
var transformNormal2 = TSL.transformNormal;
var transformNormalToView2 = TSL.transformNormalToView;
var transformedClearcoatNormalView2 = TSL.transformedClearcoatNormalView;
var transformedNormalView2 = TSL.transformedNormalView;
var transformedNormalWorld2 = TSL.transformedNormalWorld;
var transmission2 = TSL.transmission;
var transpose2 = TSL.transpose;
var triNoise3D2 = TSL.triNoise3D;
var triplanarTexture2 = TSL.triplanarTexture;
var triplanarTextures2 = TSL.triplanarTextures;
var trunc2 = TSL.trunc;
var uint2 = TSL.uint;
var uintBitsToFloat2 = TSL.uintBitsToFloat;
var uniform2 = TSL.uniform;
var uniformArray2 = TSL.uniformArray;
var uniformCubeTexture2 = TSL.uniformCubeTexture;
var uniformGroup2 = TSL.uniformGroup;
var uniformFlow2 = TSL.uniformFlow;
var uniformTexture2 = TSL.uniformTexture;
var unpremultiplyAlpha2 = TSL.unpremultiplyAlpha;
var userData2 = TSL.userData;
var uv2 = TSL.uv;
var uvec22 = TSL.uvec2;
var uvec32 = TSL.uvec3;
var uvec42 = TSL.uvec4;
var varying2 = TSL.varying;
var varyingProperty2 = TSL.varyingProperty;
var vec22 = TSL.vec2;
var vec32 = TSL.vec3;
var vec42 = TSL.vec4;
var vectorComponents2 = TSL.vectorComponents;
var velocity2 = TSL.velocity;
var vertexColor2 = TSL.vertexColor;
var vertexIndex2 = TSL.vertexIndex;
var vertexStage2 = TSL.vertexStage;
var vibrance2 = TSL.vibrance;
var viewZToLogarithmicDepth2 = TSL.viewZToLogarithmicDepth;
var viewZToOrthographicDepth2 = TSL.viewZToOrthographicDepth;
var viewZToPerspectiveDepth2 = TSL.viewZToPerspectiveDepth;
var viewport2 = TSL.viewport;
var viewportCoordinate2 = TSL.viewportCoordinate;
var viewportDepthTexture2 = TSL.viewportDepthTexture;
var viewportLinearDepth2 = TSL.viewportLinearDepth;
var viewportMipTexture2 = TSL.viewportMipTexture;
var viewportResolution2 = TSL.viewportResolution;
var viewportSafeUV2 = TSL.viewportSafeUV;
var viewportSharedTexture2 = TSL.viewportSharedTexture;
var viewportSize2 = TSL.viewportSize;
var viewportTexture2 = TSL.viewportTexture;
var viewportUV2 = TSL.viewportUV;
var wgsl2 = TSL.wgsl;
var wgslFn2 = TSL.wgslFn;
var workgroupArray2 = TSL.workgroupArray;
var workgroupBarrier2 = TSL.workgroupBarrier;
var workgroupId2 = TSL.workgroupId;
var workingToColorSpace2 = TSL.workingToColorSpace;
var xor2 = TSL.xor;

// node_modules/three/examples/jsm/lines/LineSegmentsGeometry.js
var _box = new Box3();
var _vector3 = new Vector3();
var LineSegmentsGeometry = class extends InstancedBufferGeometry {
  /**
   * Constructs a new line segments geometry.
   */
  constructor() {
    super();
    this.isLineSegmentsGeometry = true;
    this.type = "LineSegmentsGeometry";
    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];
    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];
    const index6 = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];
    this.setIndex(index6);
    this.setAttribute("position", new Float32BufferAttribute(positions, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  /**
   * Applies the given 4x4 transformation matrix to the geometry.
   *
   * @param {Matrix4} matrix - The matrix to apply.
   * @return {LineSegmentsGeometry} A reference to this instance.
   */
  applyMatrix4(matrix) {
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0) {
      start.applyMatrix4(matrix);
      end.applyMatrix4(matrix);
      start.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  /**
   * Sets the given line positions for this geometry. The length must be a multiple of six since
   * each line segment is defined by a start end vertex in the pattern `(xyz xyz)`.
   *
   * @param {Float32Array|Array<number>} array - The position data to set.
   * @return {LineSegmentsGeometry} A reference to this geometry.
   */
  setPositions(array3) {
    let lineSegments;
    if (array3 instanceof Float32Array) {
      lineSegments = array3;
    } else if (Array.isArray(array3)) {
      lineSegments = new Float32Array(array3);
    }
    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);
    this.setAttribute("instanceStart", new InterleavedBufferAttribute(instanceBuffer, 3, 0));
    this.setAttribute("instanceEnd", new InterleavedBufferAttribute(instanceBuffer, 3, 3));
    this.instanceCount = this.attributes.instanceStart.count;
    this.computeBoundingBox();
    this.computeBoundingSphere();
    return this;
  }
  /**
   * Sets the given line colors for this geometry. The length must be a multiple of six since
   * each line segment is defined by a start end color in the pattern `(rgb rgb)`.
   *
   * @param {Float32Array|Array<number>} array - The position data to set.
   * @return {LineSegmentsGeometry} A reference to this geometry.
   */
  setColors(array3) {
    let colors;
    if (array3 instanceof Float32Array) {
      colors = array3;
    } else if (Array.isArray(array3)) {
      colors = new Float32Array(array3);
    }
    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);
    this.setAttribute("instanceColorStart", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));
    this.setAttribute("instanceColorEnd", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));
    return this;
  }
  /**
   * Setups this line segments geometry from the given wireframe geometry.
   *
   * @param {WireframeGeometry} geometry - The geometry that should be used as a data source for this geometry.
   * @return {LineSegmentsGeometry} A reference to this geometry.
   */
  fromWireframeGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  /**
   * Setups this line segments geometry from the given edges geometry.
   *
   * @param {EdgesGeometry} geometry - The geometry that should be used as a data source for this geometry.
   * @return {LineSegmentsGeometry} A reference to this geometry.
   */
  fromEdgesGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  /**
   * Setups this line segments geometry from the given mesh.
   *
   * @param {Mesh} mesh - The mesh geometry that should be used as a data source for this geometry.
   * @return {LineSegmentsGeometry} A reference to this geometry.
   */
  fromMesh(mesh) {
    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));
    return this;
  }
  /**
   * Setups this line segments geometry from the given line segments.
   *
   * @param {LineSegments} lineSegments - The line segments that should be used as a data source for this geometry.
   * Assumes the source geometry is not using indices.
   * @return {LineSegmentsGeometry} A reference to this geometry.
   */
  fromLineSegments(lineSegments) {
    const geometry = lineSegments.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      this.boundingBox.setFromBufferAttribute(start);
      _box.setFromBufferAttribute(end);
      this.boundingBox.union(_box);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    if (this.boundingBox === null) {
      this.computeBoundingBox();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      const center = this.boundingSphere.center;
      this.boundingBox.getCenter(center);
      let maxRadiusSq = 0;
      for (let i2 = 0, il = start.count; i2 < il; i2++) {
        _vector3.fromBufferAttribute(start, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector3));
        _vector3.fromBufferAttribute(end, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector3));
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.", this);
      }
    }
  }
  toJSON() {
  }
};

// node_modules/three/examples/jsm/lines/LineMaterial.js
UniformsLib.line = {
  worldUnits: { value: 1 },
  linewidth: { value: 1 },
  resolution: { value: new Vector2(1, 1) },
  dashOffset: { value: 0 },
  dashScale: { value: 1 },
  dashSize: { value: 1 },
  gapSize: { value: 1 }
  // todo FIX - maybe change to totalSize
};
ShaderLib["line"] = {
  uniforms: UniformsUtils.merge([
    UniformsLib.common,
    UniformsLib.fog,
    UniformsLib.line
  ]),
  vertexShader: (
    /* glsl */
    `
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );
				vec3 worldUp = normalize( cross( worldDir, tmpFwd ) );
				vec3 worldFwd = cross( worldDir, worldUp );
				worldPos = position.y < 0.5 ? start: end;

				// height offset
				float hw = linewidth * 0.5;
				worldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// cap extension
					worldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;

					// add width to the box
					worldPos.xyz += worldFwd * hw;

					// endcaps
					if ( position.y > 1.0 || position.y < 0.0 ) {

						worldPos.xyz -= worldFwd * 2.0 * hw;

					}

				#endif

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`
  ),
  fragmentShader: (
    /* glsl */
    `
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			float alpha = opacity;
			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`
  )
};
var LineMaterial = class extends ShaderMaterial {
  /**
   * Constructs a new line segments geometry.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(parameters) {
    super({
      type: "LineMaterial",
      uniforms: UniformsUtils.clone(ShaderLib["line"].uniforms),
      vertexShader: ShaderLib["line"].vertexShader,
      fragmentShader: ShaderLib["line"].fragmentShader,
      clipping: true
      // required for clipping support
    });
    this.isLineMaterial = true;
    this.setValues(parameters);
  }
  /**
   * The material's color.
   *
   * @type {Color}
   * @default (1,1,1)
   */
  get color() {
    return this.uniforms.diffuse.value;
  }
  set color(value) {
    this.uniforms.diffuse.value = value;
  }
  /**
   * Whether the material's sizes (width, dash gaps) are in world units.
   *
   * @type {boolean}
   * @default false
   */
  get worldUnits() {
    return "WORLD_UNITS" in this.defines;
  }
  set worldUnits(value) {
    if (value === true) {
      this.defines.WORLD_UNITS = "";
    } else {
      delete this.defines.WORLD_UNITS;
    }
  }
  /**
   * Controls line thickness in CSS pixel units when `worldUnits` is `false` (default),
   * or in world units when `worldUnits` is `true`.
   *
   * @type {number}
   * @default 1
   */
  get linewidth() {
    return this.uniforms.linewidth.value;
  }
  set linewidth(value) {
    if (!this.uniforms.linewidth)
      return;
    this.uniforms.linewidth.value = value;
  }
  /**
   * Whether the line is dashed, or solid.
   *
   * @type {boolean}
   * @default false
   */
  get dashed() {
    return "USE_DASH" in this.defines;
  }
  set dashed(value) {
    if (value === true !== this.dashed) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_DASH = "";
    } else {
      delete this.defines.USE_DASH;
    }
  }
  /**
   * The scale of the dashes and gaps.
   *
   * @type {number}
   * @default 1
   */
  get dashScale() {
    return this.uniforms.dashScale.value;
  }
  set dashScale(value) {
    this.uniforms.dashScale.value = value;
  }
  /**
   * The size of the dash.
   *
   * @type {number}
   * @default 1
   */
  get dashSize() {
    return this.uniforms.dashSize.value;
  }
  set dashSize(value) {
    this.uniforms.dashSize.value = value;
  }
  /**
   * Where in the dash cycle the dash starts.
   *
   * @type {number}
   * @default 0
   */
  get dashOffset() {
    return this.uniforms.dashOffset.value;
  }
  set dashOffset(value) {
    this.uniforms.dashOffset.value = value;
  }
  /**
   * The size of the gap.
   *
   * @type {number}
   * @default 0
   */
  get gapSize() {
    return this.uniforms.gapSize.value;
  }
  set gapSize(value) {
    this.uniforms.gapSize.value = value;
  }
  /**
   * The opacity.
   *
   * @type {number}
   * @default 1
   */
  get opacity() {
    return this.uniforms.opacity.value;
  }
  set opacity(value) {
    if (!this.uniforms)
      return;
    this.uniforms.opacity.value = value;
  }
  /**
   * The size of the viewport, in screen pixels. This must be kept updated to make
   * screen-space rendering accurate.The `LineSegments2.onBeforeRender` callback
   * performs the update for visible objects.
   *
   * @type {Vector2}
   */
  get resolution() {
    return this.uniforms.resolution.value;
  }
  set resolution(value) {
    this.uniforms.resolution.value.copy(value);
  }
  /**
   * Whether to use alphaToCoverage or not. When enabled, this can improve the
   * anti-aliasing of line edges when using MSAA.
   *
   * @type {boolean}
   */
  get alphaToCoverage() {
    return "USE_ALPHA_TO_COVERAGE" in this.defines;
  }
  set alphaToCoverage(value) {
    if (!this.defines)
      return;
    if (value === true !== this.alphaToCoverage) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_ALPHA_TO_COVERAGE = "";
    } else {
      delete this.defines.USE_ALPHA_TO_COVERAGE;
    }
  }
};

// node_modules/three/examples/jsm/lines/LineSegments2.js
var _viewport2 = new Vector4();
var _start = new Vector3();
var _end = new Vector3();
var _start4 = new Vector4();
var _end4 = new Vector4();
var _ssOrigin = new Vector4();
var _ssOrigin3 = new Vector3();
var _mvMatrix = new Matrix4();
var _line = new Line3();
var _closestPoint = new Vector3();
var _box2 = new Box3();
var _sphere2 = new Sphere();
var _clipToWorldVector = new Vector4();
var _ray;
var _lineWidth;
function getWorldSpaceHalfWidth(camera3, distance4, resolution2) {
  _clipToWorldVector.set(0, 0, -distance4, 1).applyMatrix4(camera3.projectionMatrix);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  _clipToWorldVector.x = _lineWidth / resolution2.width;
  _clipToWorldVector.y = _lineWidth / resolution2.height;
  _clipToWorldVector.applyMatrix4(camera3.projectionMatrixInverse);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));
}
function raycastWorldUnits(lineSegments, intersects2) {
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  for (let i2 = 0, l2 = segmentCount; i2 < l2; i2++) {
    _line.start.fromBufferAttribute(instanceStart, i2);
    _line.end.fromBufferAttribute(instanceEnd, i2);
    _line.applyMatrix4(matrixWorld);
    const pointOnLine = new Vector3();
    const point = new Vector3();
    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);
    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;
    if (isInside) {
      intersects2.push({
        point,
        pointOnLine,
        distance: _ray.origin.distanceTo(point),
        object: lineSegments,
        face: null,
        faceIndex: i2,
        uv: null,
        uv1: null
      });
    }
  }
}
function raycastScreenSpace(lineSegments, camera3, intersects2) {
  const projectionMatrix = camera3.projectionMatrix;
  const material = lineSegments.material;
  const resolution2 = material.resolution;
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  const near = -camera3.near;
  _ray.at(1, _ssOrigin);
  _ssOrigin.w = 1;
  _ssOrigin.applyMatrix4(camera3.matrixWorldInverse);
  _ssOrigin.applyMatrix4(projectionMatrix);
  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);
  _ssOrigin.x *= resolution2.x / 2;
  _ssOrigin.y *= resolution2.y / 2;
  _ssOrigin.z = 0;
  _ssOrigin3.copy(_ssOrigin);
  _mvMatrix.multiplyMatrices(camera3.matrixWorldInverse, matrixWorld);
  for (let i2 = 0, l2 = segmentCount; i2 < l2; i2++) {
    _start4.fromBufferAttribute(instanceStart, i2);
    _end4.fromBufferAttribute(instanceEnd, i2);
    _start4.w = 1;
    _end4.w = 1;
    _start4.applyMatrix4(_mvMatrix);
    _end4.applyMatrix4(_mvMatrix);
    const isBehindCameraNear = _start4.z > near && _end4.z > near;
    if (isBehindCameraNear) {
      continue;
    }
    if (_start4.z > near) {
      const deltaDist = _start4.z - _end4.z;
      const t2 = (_start4.z - near) / deltaDist;
      _start4.lerp(_end4, t2);
    } else if (_end4.z > near) {
      const deltaDist = _end4.z - _start4.z;
      const t2 = (_end4.z - near) / deltaDist;
      _end4.lerp(_start4, t2);
    }
    _start4.applyMatrix4(projectionMatrix);
    _end4.applyMatrix4(projectionMatrix);
    _start4.multiplyScalar(1 / _start4.w);
    _end4.multiplyScalar(1 / _end4.w);
    _start4.x *= resolution2.x / 2;
    _start4.y *= resolution2.y / 2;
    _end4.x *= resolution2.x / 2;
    _end4.y *= resolution2.y / 2;
    _line.start.copy(_start4);
    _line.start.z = 0;
    _line.end.copy(_end4);
    _line.end.z = 0;
    const param = _line.closestPointToPointParameter(_ssOrigin3, true);
    _line.at(param, _closestPoint);
    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);
    const isInClipSpace = zPos >= -1 && zPos <= 1;
    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;
    if (isInClipSpace && isInside) {
      _line.start.fromBufferAttribute(instanceStart, i2);
      _line.end.fromBufferAttribute(instanceEnd, i2);
      _line.start.applyMatrix4(matrixWorld);
      _line.end.applyMatrix4(matrixWorld);
      const pointOnLine = new Vector3();
      const point = new Vector3();
      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);
      intersects2.push({
        point,
        pointOnLine,
        distance: _ray.origin.distanceTo(point),
        object: lineSegments,
        face: null,
        faceIndex: i2,
        uv: null,
        uv1: null
      });
    }
  }
}
var LineSegments2 = class extends Mesh {
  /**
   * Constructs a new wide line.
   *
   * @param {LineSegmentsGeometry} [geometry] - The line geometry.
   * @param {LineMaterial} [material] - The line material.
   */
  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLineSegments2 = true;
    this.type = "LineSegments2";
  }
  /**
   * Computes an array of distance values which are necessary for rendering dashed lines.
   * For each vertex in the geometry, the method calculates the cumulative length from the
   * current point to the very beginning of the line.
   *
   * @return {LineSegments2} A reference to this instance.
   */
  computeLineDistances() {
    const geometry = this.geometry;
    const instanceStart = geometry.attributes.instanceStart;
    const instanceEnd = geometry.attributes.instanceEnd;
    const lineDistances = new Float32Array(2 * instanceStart.count);
    for (let i2 = 0, j2 = 0, l2 = instanceStart.count; i2 < l2; i2++, j2 += 2) {
      _start.fromBufferAttribute(instanceStart, i2);
      _end.fromBufferAttribute(instanceEnd, i2);
      lineDistances[j2] = j2 === 0 ? 0 : lineDistances[j2 - 1];
      lineDistances[j2 + 1] = lineDistances[j2] + _start.distanceTo(_end);
    }
    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);
    geometry.setAttribute("instanceDistanceStart", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));
    geometry.setAttribute("instanceDistanceEnd", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));
    return this;
  }
  /**
   * Computes intersection points between a casted ray and this instance.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(raycaster, intersects2) {
    const worldUnits = this.material.worldUnits;
    const camera3 = raycaster.camera;
    if (camera3 === null && !worldUnits) {
      console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');
    }
    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;
    _ray = raycaster.ray;
    const matrixWorld = this.matrixWorld;
    const geometry = this.geometry;
    const material = this.material;
    _lineWidth = material.linewidth + threshold;
    if (geometry.boundingSphere === null) {
      geometry.computeBoundingSphere();
    }
    _sphere2.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);
    let sphereMargin;
    if (worldUnits) {
      sphereMargin = _lineWidth * 0.5;
    } else {
      const distanceToSphere = Math.max(camera3.near, _sphere2.distanceToPoint(_ray.origin));
      sphereMargin = getWorldSpaceHalfWidth(camera3, distanceToSphere, material.resolution);
    }
    _sphere2.radius += sphereMargin;
    if (_ray.intersectsSphere(_sphere2) === false) {
      return;
    }
    if (geometry.boundingBox === null) {
      geometry.computeBoundingBox();
    }
    _box2.copy(geometry.boundingBox).applyMatrix4(matrixWorld);
    let boxMargin;
    if (worldUnits) {
      boxMargin = _lineWidth * 0.5;
    } else {
      const distanceToBox = Math.max(camera3.near, _box2.distanceToPoint(_ray.origin));
      boxMargin = getWorldSpaceHalfWidth(camera3, distanceToBox, material.resolution);
    }
    _box2.expandByScalar(boxMargin);
    if (_ray.intersectsBox(_box2) === false) {
      return;
    }
    if (worldUnits) {
      raycastWorldUnits(this, intersects2);
    } else {
      raycastScreenSpace(this, camera3, intersects2);
    }
  }
  onBeforeRender(renderer3) {
    const uniforms = this.material.uniforms;
    if (uniforms && uniforms.resolution) {
      renderer3.getViewport(_viewport2);
      this.material.uniforms.resolution.value.set(_viewport2.z, _viewport2.w);
    }
  }
};

// node_modules/three/examples/jsm/lines/LineGeometry.js
var LineGeometry = class extends LineSegmentsGeometry {
  /**
   * Constructs a new line geometry.
   */
  constructor() {
    super();
    this.isLineGeometry = true;
    this.type = "LineGeometry";
  }
  /**
   * Sets the given line positions for this geometry.
   *
   * @param {Float32Array|Array<number>} array - The position data to set.
   * @return {LineGeometry} A reference to this geometry.
   */
  setPositions(array3) {
    const length3 = array3.length - 3;
    const points = new Float32Array(2 * length3);
    for (let i2 = 0; i2 < length3; i2 += 3) {
      points[2 * i2] = array3[i2];
      points[2 * i2 + 1] = array3[i2 + 1];
      points[2 * i2 + 2] = array3[i2 + 2];
      points[2 * i2 + 3] = array3[i2 + 3];
      points[2 * i2 + 4] = array3[i2 + 4];
      points[2 * i2 + 5] = array3[i2 + 5];
    }
    super.setPositions(points);
    return this;
  }
  /**
   * Sets the given line colors for this geometry.
   *
   * @param {Float32Array|Array<number>} array - The position data to set.
   * @return {LineGeometry} A reference to this geometry.
   */
  setColors(array3) {
    const length3 = array3.length - 3;
    const colors = new Float32Array(2 * length3);
    for (let i2 = 0; i2 < length3; i2 += 3) {
      colors[2 * i2] = array3[i2];
      colors[2 * i2 + 1] = array3[i2 + 1];
      colors[2 * i2 + 2] = array3[i2 + 2];
      colors[2 * i2 + 3] = array3[i2 + 3];
      colors[2 * i2 + 4] = array3[i2 + 4];
      colors[2 * i2 + 5] = array3[i2 + 5];
    }
    super.setColors(colors);
    return this;
  }
  /**
   * Setups this line segments geometry from the given sequence of points.
   *
   * @param {Array<Vector3|Vector2>} points - An array of points in 2D or 3D space.
   * @return {LineGeometry} A reference to this geometry.
   */
  setFromPoints(points) {
    const length3 = points.length - 1;
    const positions = new Float32Array(6 * length3);
    for (let i2 = 0; i2 < length3; i2++) {
      positions[6 * i2] = points[i2].x;
      positions[6 * i2 + 1] = points[i2].y;
      positions[6 * i2 + 2] = points[i2].z || 0;
      positions[6 * i2 + 3] = points[i2 + 1].x;
      positions[6 * i2 + 4] = points[i2 + 1].y;
      positions[6 * i2 + 5] = points[i2 + 1].z || 0;
    }
    super.setPositions(positions);
    return this;
  }
  /**
   * Setups this line segments geometry from the given line.
   *
   * @param {Line} line - The line that should be used as a data source for this geometry.
   * @return {LineGeometry} A reference to this geometry.
   */
  fromLine(line) {
    const geometry = line.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
};

// node_modules/three/examples/jsm/lines/Line2.js
var Line2 = class extends LineSegments2 {
  /**
   * Constructs a new wide line.
   *
   * @param {LineGeometry} [geometry] - The line geometry.
   * @param {LineMaterial} [material] - The line material.
   */
  constructor(geometry = new LineGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLine2 = true;
    this.type = "Line2";
  }
};

// node_modules/three/examples/jsm/geometries/TextGeometry.js
var TextGeometry = class extends ExtrudeGeometry {
  /**
   * Constructs a new text geometry.
   *
   * @param {string} text - The text that should be transformed into a geometry.
   * @param {TextGeometry~Options} [parameters] - The text settings.
   */
  constructor(text, parameters = {}) {
    const font = parameters.font;
    if (font === void 0) {
      super();
    } else {
      const shapes = font.generateShapes(text, parameters.size);
      if (parameters.depth === void 0)
        parameters.depth = 50;
      if (parameters.bevelThickness === void 0)
        parameters.bevelThickness = 10;
      if (parameters.bevelSize === void 0)
        parameters.bevelSize = 8;
      if (parameters.bevelEnabled === void 0)
        parameters.bevelEnabled = false;
      super(shapes, parameters);
    }
    this.type = "TextGeometry";
  }
};

// node_modules/three/examples/jsm/loaders/FontLoader.js
var Font = class {
  /**
   * Constructs a new font.
   *
   * @param {Object} data - The font data as JSON.
   */
  constructor(data) {
    this.isFont = true;
    this.type = "Font";
    this.data = data;
  }
  /**
   * Generates geometry shapes from the given text and size. The result of this method
   * should be used with {@link ShapeGeometry} to generate the actual geometry data.
   *
   * @param {string} text - The text.
   * @param {number} [size=100] - The text size.
   * @return {Array<Shape>} An array of shapes representing the text.
   */
  generateShapes(text, size = 100) {
    const shapes = [];
    const paths = createPaths(text, size, this.data);
    for (let p2 = 0, pl = paths.length; p2 < pl; p2++) {
      shapes.push(...paths[p2].toShapes());
    }
    return shapes;
  }
};
function createPaths(text, size, data) {
  const chars = Array.from(text);
  const scale2 = size / data.resolution;
  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale2;
  const paths = [];
  let offsetX = 0, offsetY = 0;
  for (let i2 = 0; i2 < chars.length; i2++) {
    const char = chars[i2];
    if (char === "\n") {
      offsetX = 0;
      offsetY -= line_height;
    } else {
      const ret = createPath(char, scale2, offsetX, offsetY, data);
      offsetX += ret.offsetX;
      paths.push(ret.path);
    }
  }
  return paths;
}
function createPath(char, scale2, offsetX, offsetY, data) {
  const glyph = data.glyphs[char] || data.glyphs["?"];
  if (!glyph) {
    console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
    return;
  }
  const path = new ShapePath();
  let x2, y2, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
  if (glyph.o) {
    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
    for (let i2 = 0, l2 = outline.length; i2 < l2; ) {
      const action = outline[i2++];
      switch (action) {
        case "m":
          x2 = outline[i2++] * scale2 + offsetX;
          y2 = outline[i2++] * scale2 + offsetY;
          path.moveTo(x2, y2);
          break;
        case "l":
          x2 = outline[i2++] * scale2 + offsetX;
          y2 = outline[i2++] * scale2 + offsetY;
          path.lineTo(x2, y2);
          break;
        case "q":
          cpx = outline[i2++] * scale2 + offsetX;
          cpy = outline[i2++] * scale2 + offsetY;
          cpx1 = outline[i2++] * scale2 + offsetX;
          cpy1 = outline[i2++] * scale2 + offsetY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          break;
        case "b":
          cpx = outline[i2++] * scale2 + offsetX;
          cpy = outline[i2++] * scale2 + offsetY;
          cpx1 = outline[i2++] * scale2 + offsetX;
          cpy1 = outline[i2++] * scale2 + offsetY;
          cpx2 = outline[i2++] * scale2 + offsetX;
          cpy2 = outline[i2++] * scale2 + offsetY;
          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
          break;
      }
    }
  }
  return { offsetX: glyph.ha * scale2, path };
}

// node_modules/three-globe/dist/three-globe.mjs
function _arrayLikeToArray9(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles9(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles8(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray9(r2);
}
function _assertClassBrand3(e2, t2, n2) {
  if ("function" == typeof e2 ? e2 === t2 : e2.has(t2))
    return arguments.length < 3 ? t2 : n2;
  throw new TypeError("Private element is not present on this object");
}
function _assertThisInitialized4(e2) {
  if (void 0 === e2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}
function asyncGeneratorStep(n2, t2, e2, r2, o2, a2, c2) {
  try {
    var i2 = n2[a2](c2), u2 = i2.value;
  } catch (n3) {
    return void e2(n3);
  }
  i2.done ? t2(u2) : Promise.resolve(u2).then(r2, o2);
}
function _asyncToGenerator(n2) {
  return function() {
    var t2 = this, e2 = arguments;
    return new Promise(function(r2, o2) {
      var a2 = n2.apply(t2, e2);
      function _next(n3) {
        asyncGeneratorStep(a2, r2, o2, _next, _throw, "next", n3);
      }
      function _throw(n3) {
        asyncGeneratorStep(a2, r2, o2, _next, _throw, "throw", n3);
      }
      _next(void 0);
    });
  };
}
function _callSuper4(t2, o2, e2) {
  return o2 = _getPrototypeOf4(o2), _possibleConstructorReturn4(t2, _isNativeReflectConstruct4() ? Reflect.construct(o2, e2 || [], _getPrototypeOf4(t2).constructor) : o2.apply(t2, e2));
}
function _checkPrivateRedeclaration3(e2, t2) {
  if (t2.has(e2))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classCallCheck6(a2, n2) {
  if (!(a2 instanceof n2))
    throw new TypeError("Cannot call a class as a function");
}
function _classPrivateFieldGet23(s2, a2) {
  return s2.get(_assertClassBrand3(s2, a2));
}
function _classPrivateFieldInitSpec3(e2, t2, a2) {
  _checkPrivateRedeclaration3(e2, t2), t2.set(e2, a2);
}
function _classPrivateFieldSet23(s2, a2, r2) {
  return s2.set(_assertClassBrand3(s2, a2), r2), r2;
}
function _construct(t2, e2, r2) {
  if (_isNativeReflectConstruct4())
    return Reflect.construct.apply(null, arguments);
  var o2 = [null];
  o2.push.apply(o2, e2);
  var p2 = new (t2.bind.apply(t2, o2))();
  return p2;
}
function _defineProperties3(e2, r2) {
  for (var t2 = 0; t2 < r2.length; t2++) {
    var o2 = r2[t2];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, _toPropertyKey5(o2.key), o2);
  }
}
function _createClass6(e2, r2, t2) {
  return r2 && _defineProperties3(e2.prototype, r2), Object.defineProperty(e2, "prototype", {
    writable: false
  }), e2;
}
function _defineProperty3(e2, r2, t2) {
  return (r2 = _toPropertyKey5(r2)) in e2 ? Object.defineProperty(e2, r2, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r2] = t2, e2;
}
function _get() {
  return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e2, t2, r2) {
    var p2 = _superPropBase(e2, t2);
    if (p2) {
      var n2 = Object.getOwnPropertyDescriptor(p2, t2);
      return n2.get ? n2.get.call(arguments.length < 3 ? e2 : r2) : n2.value;
    }
  }, _get.apply(null, arguments);
}
function _getPrototypeOf4(t2) {
  return _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf4(t2);
}
function _inherits4(t2, e2) {
  if ("function" != typeof e2 && null !== e2)
    throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e2 && e2.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e2 && _setPrototypeOf4(t2, e2);
}
function _isNativeReflectConstruct4() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct4 = function() {
    return !!t2;
  })();
}
function _iterableToArray8(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit9(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f2 = false;
      } else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest9() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread8() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e2);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread2(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
      _defineProperty3(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
function _objectWithoutProperties2(e2, t2) {
  if (null == e2)
    return {};
  var o2, r2, i2 = _objectWithoutPropertiesLoose2(e2, t2);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e2);
    for (r2 = 0; r2 < n2.length; r2++)
      o2 = n2[r2], -1 === t2.indexOf(o2) && {}.propertyIsEnumerable.call(e2, o2) && (i2[o2] = e2[o2]);
  }
  return i2;
}
function _objectWithoutPropertiesLoose2(r2, e2) {
  if (null == r2)
    return {};
  var t2 = {};
  for (var n2 in r2)
    if ({}.hasOwnProperty.call(r2, n2)) {
      if (-1 !== e2.indexOf(n2))
        continue;
      t2[n2] = r2[n2];
    }
  return t2;
}
function _possibleConstructorReturn4(t2, e2) {
  if (e2 && ("object" == typeof e2 || "function" == typeof e2))
    return e2;
  if (void 0 !== e2)
    throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized4(t2);
}
function _regenerator() {
  var e2, t2, r2 = "function" == typeof Symbol ? Symbol : {}, n2 = r2.iterator || "@@iterator", o2 = r2.toStringTag || "@@toStringTag";
  function i2(r3, n3, o3, i3) {
    var c3 = n3 && n3.prototype instanceof Generator ? n3 : Generator, u3 = Object.create(c3.prototype);
    return _regeneratorDefine(u3, "_invoke", function(r4, n4, o4) {
      var i4, c4, u4, f3 = 0, p2 = o4 || [], y2 = false, G2 = {
        p: 0,
        n: 0,
        v: e2,
        a: d2,
        f: d2.bind(e2, 4),
        d: function(t3, r5) {
          return i4 = t3, c4 = 0, u4 = e2, G2.n = r5, a2;
        }
      };
      function d2(r5, n5) {
        for (c4 = r5, u4 = n5, t2 = 0; !y2 && f3 && !o5 && t2 < p2.length; t2++) {
          var o5, i5 = p2[t2], d3 = G2.p, l2 = i5[2];
          r5 > 3 ? (o5 = l2 === n5) && (u4 = i5[(c4 = i5[4]) ? 5 : (c4 = 3, 3)], i5[4] = i5[5] = e2) : i5[0] <= d3 && ((o5 = r5 < 2 && d3 < i5[1]) ? (c4 = 0, G2.v = n5, G2.n = i5[1]) : d3 < l2 && (o5 = r5 < 3 || i5[0] > n5 || n5 > l2) && (i5[4] = r5, i5[5] = n5, G2.n = l2, c4 = 0));
        }
        if (o5 || r5 > 1)
          return a2;
        throw y2 = true, n5;
      }
      return function(o5, p3, l2) {
        if (f3 > 1)
          throw TypeError("Generator is already running");
        for (y2 && 1 === p3 && d2(p3, l2), c4 = p3, u4 = l2; (t2 = c4 < 2 ? e2 : u4) || !y2; ) {
          i4 || (c4 ? c4 < 3 ? (c4 > 1 && (G2.n = -1), d2(c4, u4)) : G2.n = u4 : G2.v = u4);
          try {
            if (f3 = 2, i4) {
              if (c4 || (o5 = "next"), t2 = i4[o5]) {
                if (!(t2 = t2.call(i4, u4)))
                  throw TypeError("iterator result is not an object");
                if (!t2.done)
                  return t2;
                u4 = t2.value, c4 < 2 && (c4 = 0);
              } else
                1 === c4 && (t2 = i4.return) && t2.call(i4), c4 < 2 && (u4 = TypeError("The iterator does not provide a '" + o5 + "' method"), c4 = 1);
              i4 = e2;
            } else if ((t2 = (y2 = G2.n < 0) ? u4 : r4.call(n4, G2)) !== a2)
              break;
          } catch (t3) {
            i4 = e2, c4 = 1, u4 = t3;
          } finally {
            f3 = 1;
          }
        }
        return {
          value: t2,
          done: y2
        };
      };
    }(r3, o3, i3), true), u3;
  }
  var a2 = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  t2 = Object.getPrototypeOf;
  var c2 = [][n2] ? t2(t2([][n2]())) : (_regeneratorDefine(t2 = {}, n2, function() {
    return this;
  }), t2), u2 = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c2);
  function f2(e3) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(e3, GeneratorFunctionPrototype) : (e3.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e3, o2, "GeneratorFunction")), e3.prototype = Object.create(u2), e3;
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(u2, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine(GeneratorFunctionPrototype, o2, "GeneratorFunction"), _regeneratorDefine(u2), _regeneratorDefine(u2, o2, "Generator"), _regeneratorDefine(u2, n2, function() {
    return this;
  }), _regeneratorDefine(u2, "toString", function() {
    return "[object Generator]";
  }), (_regenerator = function() {
    return {
      w: i2,
      m: f2
    };
  })();
}
function _regeneratorDefine(e2, r2, n2, t2) {
  var i2 = Object.defineProperty;
  try {
    i2({}, "", {});
  } catch (e3) {
    i2 = 0;
  }
  _regeneratorDefine = function(e3, r3, n3, t3) {
    function o2(r4, n4) {
      _regeneratorDefine(e3, r4, function(e4) {
        return this._invoke(r4, n4, e4);
      });
    }
    r3 ? i2 ? i2(e3, r3, {
      value: n3,
      enumerable: !t3,
      configurable: !t3,
      writable: !t3
    }) : e3[r3] = n3 : (o2("next", 0), o2("throw", 1), o2("return", 2));
  }, _regeneratorDefine(e2, r2, n2, t2);
}
function _setPrototypeOf4(t2, e2) {
  return _setPrototypeOf4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, _setPrototypeOf4(t2, e2);
}
function _slicedToArray9(r2, e2) {
  return _arrayWithHoles9(r2) || _iterableToArrayLimit9(r2, e2) || _unsupportedIterableToArray9(r2, e2) || _nonIterableRest9();
}
function _superPropBase(t2, o2) {
  for (; !{}.hasOwnProperty.call(t2, o2) && null !== (t2 = _getPrototypeOf4(t2)); )
    ;
  return t2;
}
function _superPropGet(t2, o2, e2, r2) {
  var p2 = _get(_getPrototypeOf4(t2.prototype), o2, e2);
  return "function" == typeof p2 ? function(t3) {
    return p2.apply(e2, t3);
  } : p2;
}
function _toConsumableArray8(r2) {
  return _arrayWithoutHoles8(r2) || _iterableToArray8(r2) || _unsupportedIterableToArray9(r2) || _nonIterableSpread8();
}
function _toPrimitive5(t2, r2) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2);
    if ("object" != typeof i2)
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}
function _toPropertyKey5(t2) {
  var i2 = _toPrimitive5(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray9(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray9(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray9(r2, a2) : void 0;
  }
}
var _materialDispose2 = function materialDispose2(material) {
  if (material instanceof Array) {
    material.forEach(_materialDispose2);
  } else {
    if (material.map) {
      material.map.dispose();
    }
    material.dispose();
  }
};
var _deallocate2 = function deallocate2(obj) {
  if (obj.geometry) {
    obj.geometry.dispose();
  }
  if (obj.material) {
    _materialDispose2(obj.material);
  }
  if (obj.texture) {
    obj.texture.dispose();
  }
  if (obj.children) {
    obj.children.forEach(_deallocate2);
  }
};
var emptyObject3 = function emptyObject4(obj) {
  if (obj && obj.children)
    while (obj.children.length) {
      var childObj = obj.children[0];
      obj.remove(childObj);
      _deallocate2(childObj);
    }
};
function linkKapsule(kapsulePropName, kapsuleType) {
  var dummyK = new kapsuleType();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange15(v2, state) {
          state[kapsulePropName][prop](v2);
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        var kapsuleInstance = state[kapsulePropName];
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
        return returnVal === kapsuleInstance ? this : returnVal;
      };
    }
  };
}
var GLOBE_RADIUS = 100;
function getGlobeRadius() {
  return GLOBE_RADIUS;
}
function polar2Cartesian4(lat, lng) {
  var relAltitude = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  var r2 = GLOBE_RADIUS * (1 + relAltitude);
  var phiSin = Math.sin(phi);
  return {
    x: r2 * phiSin * Math.cos(theta),
    y: r2 * Math.cos(phi),
    z: r2 * phiSin * Math.sin(theta)
  };
}
function cartesian2Polar2(_ref) {
  var x2 = _ref.x, y2 = _ref.y, z2 = _ref.z;
  var r2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
  var phi = Math.acos(y2 / r2);
  var theta = Math.atan2(z2, x2);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    // keep within [-180, 180] boundaries
    altitude: r2 / GLOBE_RADIUS - 1
  };
}
function deg2Rad$1(deg) {
  return deg * Math.PI / 180;
}
var THREE$i = window.THREE ? window.THREE : {
  BackSide,
  BufferAttribute,
  Color,
  Mesh,
  ShaderMaterial
};
var vertexShader = "\nuniform float hollowRadius;\n\nvarying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvarying float vCameraDistanceToObjCenter;\nvarying float vVertexAngularDistanceToHollowRadius;\n\nvoid main() {    \n  vVertexNormal	= normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  \n  vec4 objCenterViewPosition = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n  vCameraDistanceToObjCenter = length(objCenterViewPosition);\n  \n  float edgeAngle = atan(hollowRadius / vCameraDistanceToObjCenter);\n  float vertexAngle = acos(dot(normalize(modelViewMatrix * vec4(position, 1.0)), normalize(objCenterViewPosition)));\n  vVertexAngularDistanceToHollowRadius = vertexAngle - edgeAngle;\n\n  gl_Position	= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}";
var fragmentShader = "\nuniform vec3 color;\nuniform float coefficient;\nuniform float power;\nuniform float hollowRadius;\n\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvarying float vCameraDistanceToObjCenter;\nvarying float vVertexAngularDistanceToHollowRadius;\n\nvoid main() {\n  if (vCameraDistanceToObjCenter < hollowRadius) discard; // inside the hollowRadius\n  if (vVertexAngularDistanceToHollowRadius < 0.0) discard; // frag position is within the hollow radius\n\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex	= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity	= pow(\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\n    power\n  );\n  gl_FragColor = vec4(color, intensity);\n}";
function createGlowMaterial(coefficient, color4, power, hollowRadius) {
  return new THREE$i.ShaderMaterial({
    depthWrite: false,
    transparent: true,
    vertexShader,
    fragmentShader,
    uniforms: {
      coefficient: {
        value: coefficient
      },
      color: {
        value: new THREE$i.Color(color4)
      },
      power: {
        value: power
      },
      hollowRadius: {
        value: hollowRadius
      }
    }
  });
}
function createGlowGeometry(geometry, size) {
  var glowGeometry = geometry.clone();
  var position = new Float32Array(geometry.attributes.position.count * 3);
  for (var idx = 0, len = position.length; idx < len; idx++) {
    var normal2 = geometry.attributes.normal.array[idx];
    var curPos = geometry.attributes.position.array[idx];
    position[idx] = curPos + normal2 * size;
  }
  glowGeometry.setAttribute("position", new THREE$i.BufferAttribute(position, 3));
  return glowGeometry;
}
var GlowMesh = function(_THREE$Mesh) {
  function GlowMesh2(geometry) {
    var _this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$color = _ref.color, color4 = _ref$color === void 0 ? "gold" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 2 : _ref$size, _ref$coefficient = _ref.coefficient, coefficient = _ref$coefficient === void 0 ? 0.5 : _ref$coefficient, _ref$power = _ref.power, power = _ref$power === void 0 ? 1 : _ref$power, _ref$hollowRadius = _ref.hollowRadius, hollowRadius = _ref$hollowRadius === void 0 ? 0 : _ref$hollowRadius, _ref$backside = _ref.backside, backside = _ref$backside === void 0 ? true : _ref$backside;
    _classCallCheck6(this, GlowMesh2);
    _this = _callSuper4(this, GlowMesh2);
    var glowGeometry = createGlowGeometry(geometry, size);
    var glowMaterial = createGlowMaterial(coefficient, color4, power, hollowRadius);
    backside && (glowMaterial.side = THREE$i.BackSide);
    _this.geometry = glowGeometry;
    _this.material = glowMaterial;
    return _this;
  }
  _inherits4(GlowMesh2, _THREE$Mesh);
  return _createClass6(GlowMesh2);
}(THREE$i.Mesh);
var THREE$h = window.THREE ? window.THREE : {
  Color,
  Group,
  LineBasicMaterial,
  LineSegments,
  Mesh,
  MeshPhongMaterial,
  SphereGeometry,
  SRGBColorSpace,
  TextureLoader
};
var GlobeLayerKapsule = index2({
  props: {
    globeImageUrl: {},
    bumpImageUrl: {},
    showGlobe: {
      "default": true,
      onChange: function onChange(showGlobe, state) {
        state.globeGroup.visible = !!showGlobe;
      },
      triggerUpdate: false
    },
    showGraticules: {
      "default": false,
      onChange: function onChange2(showGraticules, state) {
        state.graticulesObj.visible = !!showGraticules;
      },
      triggerUpdate: false
    },
    showAtmosphere: {
      "default": true,
      onChange: function onChange3(showAtmosphere, state) {
        state.atmosphereObj && (state.atmosphereObj.visible = !!showAtmosphere);
      },
      triggerUpdate: false
    },
    atmosphereColor: {
      "default": "lightskyblue"
    },
    atmosphereAltitude: {
      "default": 0.15
    },
    globeCurvatureResolution: {
      "default": 4
    },
    globeTileEngineUrl: {
      onChange: function onChange4(v2, state) {
        state.tileEngine.tileUrl = v2;
      }
    },
    globeTileEngineMaxLevel: {
      "default": 17,
      onChange: function onChange5(v2, state) {
        state.tileEngine.maxLevel = v2;
      },
      triggerUpdate: false
    },
    updatePov: {
      onChange: function onChange6(v2, state) {
        state.tileEngine.updatePov(v2);
      },
      triggerUpdate: false
    },
    onReady: {
      "default": function _default() {
      },
      triggerUpdate: false
    }
  },
  methods: {
    globeMaterial: function globeMaterial(state, _globeMaterial) {
      if (_globeMaterial !== void 0) {
        state.globeObj.material = _globeMaterial || state.defaultGlobeMaterial;
        return this;
      }
      return state.globeObj.material;
    },
    _destructor: function _destructor(state) {
      emptyObject3(state.globeObj);
      emptyObject3(state.tileEngine);
      emptyObject3(state.graticulesObj);
    }
  },
  stateInit: function stateInit() {
    var defaultGlobeMaterial = new THREE$h.MeshPhongMaterial({
      color: 0
    });
    var globeObj = new THREE$h.Mesh(void 0, defaultGlobeMaterial);
    globeObj.rotation.y = -Math.PI / 2;
    var tileEngine = new ThreeSlippyMapGlobe(GLOBE_RADIUS);
    var globeGroup = new THREE$h.Group();
    globeGroup.__globeObjType = "globe";
    globeGroup.add(globeObj);
    globeGroup.add(tileEngine);
    var graticulesObj = new THREE$h.LineSegments(new GeoJsonGeometry(graticule10(), GLOBE_RADIUS, 2), new THREE$h.LineBasicMaterial({
      color: "lightgrey",
      transparent: true,
      opacity: 0.1
    }));
    return {
      globeGroup,
      globeObj,
      graticulesObj,
      defaultGlobeMaterial,
      tileEngine
    };
  },
  init: function init(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.scene.add(state.globeGroup);
    state.scene.add(state.graticulesObj);
    state.ready = false;
  },
  update: function update2(state, changedProps) {
    var globeMaterial2 = state.globeObj.material;
    state.tileEngine.visible = !(state.globeObj.visible = !state.globeTileEngineUrl);
    if (changedProps.hasOwnProperty("globeCurvatureResolution")) {
      var _state$globeObj$geome;
      (_state$globeObj$geome = state.globeObj.geometry) === null || _state$globeObj$geome === void 0 || _state$globeObj$geome.dispose();
      var widthSegments = Math.max(4, Math.round(360 / state.globeCurvatureResolution));
      state.globeObj.geometry = new THREE$h.SphereGeometry(GLOBE_RADIUS, widthSegments, widthSegments / 2);
      state.tileEngine.curvatureResolution = state.globeCurvatureResolution;
    }
    if (changedProps.hasOwnProperty("globeImageUrl")) {
      if (!state.globeImageUrl) {
        !globeMaterial2.color && (globeMaterial2.color = new THREE$h.Color(0));
      } else {
        new THREE$h.TextureLoader().load(state.globeImageUrl, function(texture3) {
          texture3.colorSpace = THREE$h.SRGBColorSpace;
          globeMaterial2.map = texture3;
          globeMaterial2.color = null;
          globeMaterial2.needsUpdate = true;
          !state.ready && (state.ready = true) && setTimeout(state.onReady);
        });
      }
    }
    if (changedProps.hasOwnProperty("bumpImageUrl")) {
      if (!state.bumpImageUrl) {
        globeMaterial2.bumpMap = null;
        globeMaterial2.needsUpdate = true;
      } else {
        state.bumpImageUrl && new THREE$h.TextureLoader().load(state.bumpImageUrl, function(texture3) {
          globeMaterial2.bumpMap = texture3;
          globeMaterial2.needsUpdate = true;
        });
      }
    }
    if (changedProps.hasOwnProperty("atmosphereColor") || changedProps.hasOwnProperty("atmosphereAltitude")) {
      if (state.atmosphereObj) {
        state.scene.remove(state.atmosphereObj);
        emptyObject3(state.atmosphereObj);
      }
      if (state.atmosphereColor && state.atmosphereAltitude) {
        var obj = state.atmosphereObj = new GlowMesh(state.globeObj.geometry, {
          color: state.atmosphereColor,
          size: GLOBE_RADIUS * state.atmosphereAltitude,
          hollowRadius: GLOBE_RADIUS,
          coefficient: 0.1,
          power: 3.5
          // dispersion
        });
        obj.visible = !!state.showAtmosphere;
        obj.__globeObjType = "atmosphere";
        state.scene.add(obj);
      }
    }
    if (!state.ready && (!state.globeImageUrl || state.globeTileEngineUrl)) {
      state.ready = true;
      state.onReady();
    }
  }
});
var colorStr2Hex = function colorStr2Hex2(str) {
  return isNaN(str) ? parseInt(tinycolor(str).toHex(), 16) : str;
};
var colorAlpha = function colorAlpha2(str) {
  return str && isNaN(str) ? color(str).opacity : 1;
};
var color2ShaderArr = function color2ShaderArr2(str) {
  var includeAlpha = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var sRGBColorSpace = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var color4;
  var alpha = 1;
  var rgbaMatch = /^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.eE+-]+)\s*\)$/.exec(str.trim().toLowerCase());
  if (rgbaMatch) {
    var _rgbaMatch$slice = rgbaMatch.slice(1), _rgbaMatch$slice2 = _slicedToArray9(_rgbaMatch$slice, 4), r2 = _rgbaMatch$slice2[0], g2 = _rgbaMatch$slice2[1], b = _rgbaMatch$slice2[2], a2 = _rgbaMatch$slice2[3];
    color4 = new Color("rgb(".concat(+r2, ",").concat(+g2, ",").concat(+b, ")"));
    alpha = Math.min(+a2, 1);
  } else {
    color4 = new Color(str);
  }
  sRGBColorSpace && color4.convertLinearToSRGB();
  var rgbArr = color4.toArray();
  return includeAlpha ? [].concat(_toConsumableArray8(rgbArr), [alpha]) : rgbArr;
};
function setMaterialOpacity(material, opacity, depthWrite) {
  material.opacity = opacity;
  material.transparent = opacity < 1;
  material.depthWrite = opacity >= 1;
  return material;
}
var THREE$g = window.THREE ? window.THREE : {
  BufferAttribute
};
function array2BufferAttr(data) {
  var itemSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var ArrayClass = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Float32Array;
  if (itemSize === 1) {
    return new THREE$g.BufferAttribute(new ArrayClass(data), itemSize);
  }
  var ba = new THREE$g.BufferAttribute(new ArrayClass(data.length * itemSize), itemSize);
  for (var idx = 0, l2 = data.length; idx < l2; idx++) {
    ba.set(data[idx], idx * itemSize);
  }
  return ba;
}
function bufferAttr2Array(ba) {
  var itemSize = ba.itemSize;
  var res = [];
  for (var i2 = 0; i2 < ba.count; i2++) {
    res.push(ba.array.slice(i2 * itemSize, (i2 + 1) * itemSize));
  }
  return res;
}
var _dataBindAttr = /* @__PURE__ */ new WeakMap();
var _objBindAttr = /* @__PURE__ */ new WeakMap();
var _removeDelay = /* @__PURE__ */ new WeakMap();
var ThreeDigest = function(_DataBindMapper) {
  function ThreeDigest2(scene3) {
    var _this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$dataBindAttr = _ref.dataBindAttr, dataBindAttr = _ref$dataBindAttr === void 0 ? "__data" : _ref$dataBindAttr, _ref$objBindAttr = _ref.objBindAttr, objBindAttr = _ref$objBindAttr === void 0 ? "__threeObj" : _ref$objBindAttr, _ref$removeDelay = _ref.removeDelay, removeDelay = _ref$removeDelay === void 0 ? 0 : _ref$removeDelay;
    _classCallCheck6(this, ThreeDigest2);
    _this = _callSuper4(this, ThreeDigest2);
    _defineProperty3(_this, "scene", void 0);
    _classPrivateFieldInitSpec3(_this, _dataBindAttr, void 0);
    _classPrivateFieldInitSpec3(_this, _objBindAttr, void 0);
    _classPrivateFieldInitSpec3(_this, _removeDelay, void 0);
    _this.scene = scene3;
    _classPrivateFieldSet23(_dataBindAttr, _this, dataBindAttr);
    _classPrivateFieldSet23(_objBindAttr, _this, objBindAttr);
    _classPrivateFieldSet23(_removeDelay, _this, removeDelay);
    _this.onRemoveObj(function() {
    });
    return _this;
  }
  _inherits4(ThreeDigest2, _DataBindMapper);
  return _createClass6(ThreeDigest2, [{
    key: "onCreateObj",
    value: function onCreateObj(fn) {
      var _this2 = this;
      _superPropGet(ThreeDigest2, "onCreateObj", this)([function(d2) {
        var obj = fn(d2);
        d2[_classPrivateFieldGet23(_objBindAttr, _this2)] = obj;
        obj[_classPrivateFieldGet23(_dataBindAttr, _this2)] = d2;
        _this2.scene.add(obj);
        return obj;
      }]);
      return this;
    }
  }, {
    key: "onRemoveObj",
    value: function onRemoveObj(fn) {
      var _this3 = this;
      _superPropGet(ThreeDigest2, "onRemoveObj", this)([function(obj, dId) {
        var d2 = _superPropGet(ThreeDigest2, "getData", _this3)([obj]);
        fn(obj, dId);
        var removeFn = function removeFn2() {
          _this3.scene.remove(obj);
          emptyObject3(obj);
          delete d2[_classPrivateFieldGet23(_objBindAttr, _this3)];
        };
        _classPrivateFieldGet23(_removeDelay, _this3) ? setTimeout(removeFn, _classPrivateFieldGet23(_removeDelay, _this3)) : removeFn();
      }]);
      return this;
    }
  }]);
}(DataBindMapper);
var THREE$f = window.THREE ? window.THREE : {
  BufferGeometry,
  CylinderGeometry,
  Matrix4,
  Mesh,
  MeshLambertMaterial,
  Object3D,
  Vector3
};
var bfg$2 = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils$2 = bfg$2.BufferGeometryUtils || bfg$2;
var PointsLayerKapsule = index2({
  props: {
    pointsData: {
      "default": []
    },
    pointLat: {
      "default": "lat"
    },
    pointLng: {
      "default": "lng"
    },
    pointColor: {
      "default": function _default2() {
        return "#ffffaa";
      }
    },
    pointAltitude: {
      "default": 0.1
    },
    // in units of globe radius
    pointRadius: {
      "default": 0.25
    },
    // in deg
    pointResolution: {
      "default": 12,
      triggerUpdate: false
    },
    // how many slice segments in the cylinder's circumference
    pointsMerge: {
      "default": false
    },
    // boolean. Whether to merge all points into a single mesh for rendering performance
    pointsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init2(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjPoint"
    });
  },
  update: function update3(state, changedProps) {
    var latAccessor = index3(state.pointLat);
    var lngAccessor = index3(state.pointLng);
    var altitudeAccessor = index3(state.pointAltitude);
    var radiusAccessor = index3(state.pointRadius);
    var colorAccessor = index3(state.pointColor);
    var pointGeometry = new THREE$f.CylinderGeometry(1, 1, 1, state.pointResolution);
    pointGeometry.applyMatrix4(new THREE$f.Matrix4().makeRotationX(Math.PI / 2));
    pointGeometry.applyMatrix4(new THREE$f.Matrix4().makeTranslation(0, 0, -0.5));
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    var pointMaterials = {};
    if (!state.pointsMerge && changedProps.hasOwnProperty("pointsMerge")) {
      emptyObject3(state.scene);
    }
    state.dataMapper.scene = state.pointsMerge ? new THREE$f.Object3D() : state.scene;
    state.dataMapper.onCreateObj(createObj).onUpdateObj(updateObj).digest(state.pointsData);
    if (state.pointsMerge) {
      var pointsGeometry = !state.pointsData.length ? new THREE$f.BufferGeometry() : (BufferGeometryUtils$2.mergeGeometries || BufferGeometryUtils$2.mergeBufferGeometries)(state.pointsData.map(function(d2) {
        var obj = state.dataMapper.getObj(d2);
        var geom = obj.geometry.clone();
        obj.updateMatrix();
        geom.applyMatrix4(obj.matrix);
        var color4 = color2ShaderArr(colorAccessor(d2));
        geom.setAttribute("color", array2BufferAttr(Array(geom.getAttribute("position").count).fill(color4), 4));
        return geom;
      }));
      var points = new THREE$f.Mesh(pointsGeometry, new THREE$f.MeshLambertMaterial({
        color: 16777215,
        transparent: true,
        vertexColors: true
      }));
      points.__globeObjType = "points";
      points.__data = state.pointsData;
      state.dataMapper.clear();
      emptyObject3(state.scene);
      state.scene.add(points);
    }
    function createObj() {
      var obj = new THREE$f.Mesh(pointGeometry);
      obj.__globeObjType = "point";
      return obj;
    }
    function updateObj(obj, d2) {
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, r2 = _obj$__currentTargetD.r, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;
        Object.assign(obj.position, polar2Cartesian4(lat, lng));
        var globeCenter = state.pointsMerge ? new THREE$f.Vector3(0, 0, 0) : state.scene.localToWorld(new THREE$f.Vector3(0, 0, 0));
        obj.lookAt(globeCenter);
        obj.scale.x = obj.scale.y = Math.min(30, r2) * pxPerDeg;
        obj.scale.z = Math.max(alt * GLOBE_RADIUS, 0.1);
      };
      var targetD = {
        alt: +altitudeAccessor(d2),
        r: +radiusAccessor(d2),
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2)
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (state.pointsMerge || !state.pointsTransitionDuration || state.pointsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.pointsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
      if (!state.pointsMerge) {
        var color4 = colorAccessor(d2);
        var opacity = color4 ? colorAlpha(color4) : 0;
        var showCyl = !!opacity;
        obj.visible = showCyl;
        if (showCyl) {
          if (!pointMaterials.hasOwnProperty(color4)) {
            pointMaterials[color4] = new THREE$f.MeshLambertMaterial({
              color: colorStr2Hex(color4),
              transparent: opacity < 1,
              opacity
            });
          }
          obj.material = pointMaterials[color4];
        }
      }
    }
  }
});
var dashedLineShaders = function dashedLineShaders2() {
  return {
    uniforms: {
      // dash param defaults, all relative to full length
      dashOffset: {
        value: 0
      },
      dashSize: {
        value: 1
      },
      gapSize: {
        value: 0
      },
      dashTranslate: {
        value: 0
      }
      // used for animating the dash
    },
    vertexShader: "\n    ".concat(ShaderChunk.common, "\n    ").concat(ShaderChunk.logdepthbuf_pars_vertex, "\n  \n    uniform float dashTranslate; \n\n    attribute vec4 color;\n    varying vec4 vColor;\n    \n    attribute float relDistance;\n    varying float vRelDistance;\n\n    void main() {\n      // pass through colors and distances\n      vColor = color;\n      vRelDistance = relDistance + dashTranslate;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  \n      ").concat(ShaderChunk.logdepthbuf_vertex, "\n    }\n  "),
    fragmentShader: "\n    ".concat(ShaderChunk.logdepthbuf_pars_fragment, "\n\n    uniform float dashOffset; \n    uniform float dashSize;\n    uniform float gapSize; \n    \n    varying vec4 vColor;\n    varying float vRelDistance;\n    \n    void main() {\n      // ignore pixels in the gap\n      if (vRelDistance < dashOffset) discard;\n      if (mod(vRelDistance - dashOffset, dashSize + gapSize) > dashSize) discard;\n    \n      // set px color: [r, g, b, a], interpolated between vertices \n      gl_FragColor = vColor; \n  \n      ").concat(ShaderChunk.logdepthbuf_fragment, "\n    }\n  ")
  };
};
var invisibleUndergroundShaderExtend = function invisibleUndergroundShaderExtend2(shader) {
  shader.uniforms.uSurfaceRadius = {
    type: "float",
    value: 0
  };
  shader.vertexShader = ("attribute float surfaceRadius;\nvarying float vSurfaceRadius;\nvarying vec3 vPos;\n" + shader.vertexShader).replace("void main() {", ["void main() {", "vSurfaceRadius = surfaceRadius;", "vPos = position;"].join("\n"));
  shader.fragmentShader = ("uniform float uSurfaceRadius;\nvarying float vSurfaceRadius;\nvarying vec3 vPos;\n" + shader.fragmentShader).replace("void main() {", ["void main() {", "if (length(vPos) < max(uSurfaceRadius, vSurfaceRadius)) discard;"].join("\n"));
  return shader;
};
var setRadiusShaderExtend = function setRadiusShaderExtend2(shader) {
  shader.vertexShader = "\n    attribute float r;\n    \n    const float PI = 3.1415926535897932384626433832795;\n    float toRad(in float a) {\n      return a * PI / 180.0;\n    }\n    \n    vec3 Polar2Cartesian(in vec3 c) { // [lat, lng, r]\n      float phi = toRad(90.0 - c.x);\n      float theta = toRad(90.0 - c.y);\n      float r = c.z;\n      return vec3( // x,y,z\n        r * sin(phi) * cos(theta),\n        r * cos(phi),\n        r * sin(phi) * sin(theta)\n      );\n    }\n    \n    vec2 Cartesian2Polar(in vec3 p) {\n      float r = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      float phi = acos(p.y / r);\n      float theta = atan(p.z, p.x);\n      return vec2( // lat,lng\n        90.0 - phi * 180.0 / PI,\n        90.0 - theta * 180.0 / PI - (theta < -PI / 2.0 ? 360.0 : 0.0)\n      );\n    }\n    ".concat(shader.vertexShader.replace("}", "                  \n        vec3 pos = Polar2Cartesian(vec3(Cartesian2Polar(position), r));\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n      }\n    "), "\n  ");
  return shader;
};
var applyShaderExtensionToMaterial = function applyShaderExtensionToMaterial2(material, extensionFn) {
  material.onBeforeCompile = function(shader) {
    material.userData.shader = extensionFn(shader);
  };
  return material;
};
var setExtendedMaterialUniforms = function setExtendedMaterialUniforms2(material) {
  var uniformsFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function(u2) {
    return u2;
  };
  if (material.userData.shader) {
    uniformsFn(material.userData.shader.uniforms);
  } else {
    var curFn = material.onBeforeCompile;
    material.onBeforeCompile = function(shader) {
      curFn(shader);
      uniformsFn(shader.uniforms);
    };
  }
};
var _excluded = ["stroke"];
var THREE$e = window.THREE ? window.THREE : {
  BufferGeometry,
  CubicBezierCurve3,
  Curve,
  Group,
  Line,
  Mesh,
  NormalBlending,
  ShaderMaterial,
  TubeGeometry,
  Vector3
};
var FrameTicker$2 = import_frame_ticker.default["default"] || import_frame_ticker.default;
var ArcsLayerKapsule = index2({
  props: {
    arcsData: {
      "default": []
    },
    arcStartLat: {
      "default": "startLat"
    },
    arcStartLng: {
      "default": "startLng"
    },
    arcStartAltitude: {
      "default": 0
    },
    arcEndLat: {
      "default": "endLat"
    },
    arcEndLng: {
      "default": "endLng"
    },
    arcEndAltitude: {
      "default": 0
    },
    arcColor: {
      "default": function _default3() {
        return "#ffffaa";
      }
    },
    // single color, array of colors or color interpolation fn
    arcAltitude: {},
    // in units of globe radius
    arcAltitudeAutoScale: {
      "default": 0.5
    },
    // scale altitude proportional to great-arc distance between the two points
    arcStroke: {},
    // in deg
    arcCurveResolution: {
      "default": 64,
      triggerUpdate: false
    },
    // how many straight segments in the curve
    arcCircularResolution: {
      "default": 6,
      triggerUpdate: false
    },
    // how many slice segments in the tube's circumference
    arcDashLength: {
      "default": 1
    },
    // in units of line length
    arcDashGap: {
      "default": 0
    },
    arcDashInitialGap: {
      "default": 0
    },
    arcDashAnimateTime: {
      "default": 0
    },
    // ms
    arcsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  methods: {
    pauseAnimation: function pauseAnimation(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor2(state) {
      var _state$ticker3;
      state.sharedMaterial.dispose();
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  stateInit: function stateInit2(_ref) {
    var tweenGroup = _ref.tweenGroup;
    return {
      tweenGroup,
      ticker: new FrameTicker$2(),
      sharedMaterial: new THREE$e.ShaderMaterial(_objectSpread2(_objectSpread2({}, dashedLineShaders()), {}, {
        transparent: true,
        blending: THREE$e.NormalBlending
      }))
    };
  },
  init: function init3(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjArc"
    }).onCreateObj(function() {
      var obj = new THREE$e.Group();
      obj.__globeObjType = "arc";
      return obj;
    });
    state.ticker.onTick.add(function(_2, timeDelta) {
      state.dataMapper.entries().map(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 2), obj = _ref3[1];
        return obj;
      }).filter(function(o2) {
        return o2.children.length && o2.children[0].material && o2.children[0].__dashAnimateStep;
      }).forEach(function(o2) {
        var obj = o2.children[0];
        var step3 = obj.__dashAnimateStep * timeDelta;
        var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
        obj.material.uniforms.dashTranslate.value = curTranslate + step3;
      });
    });
  },
  update: function update4(state) {
    var startLatAccessor = index3(state.arcStartLat);
    var startLngAccessor = index3(state.arcStartLng);
    var startAltAccessor = index3(state.arcStartAltitude);
    var endLatAccessor = index3(state.arcEndLat);
    var endLngAccessor = index3(state.arcEndLng);
    var endAltAccessor = index3(state.arcEndAltitude);
    var altitudeAccessor = index3(state.arcAltitude);
    var altitudeAutoScaleAccessor = index3(state.arcAltitudeAutoScale);
    var strokeAccessor = index3(state.arcStroke);
    var colorAccessor = index3(state.arcColor);
    var dashLengthAccessor = index3(state.arcDashLength);
    var dashGapAccessor = index3(state.arcDashGap);
    var dashInitialGapAccessor = index3(state.arcDashInitialGap);
    var dashAnimateTimeAccessor = index3(state.arcDashAnimateTime);
    state.dataMapper.onUpdateObj(function(group, arc) {
      var stroke = strokeAccessor(arc);
      var useTube = stroke !== null && stroke !== void 0;
      if (!group.children.length || useTube !== (group.children[0].type === "Mesh")) {
        emptyObject3(group);
        var _obj = useTube ? new THREE$e.Mesh() : new THREE$e.Line(new THREE$e.BufferGeometry());
        _obj.material = state.sharedMaterial.clone();
        group.add(_obj);
      }
      var obj = group.children[0];
      Object.assign(obj.material.uniforms, {
        dashSize: {
          value: dashLengthAccessor(arc)
        },
        gapSize: {
          value: dashGapAccessor(arc)
        },
        dashOffset: {
          value: dashInitialGapAccessor(arc)
        }
      });
      var dashAnimateTime = dashAnimateTimeAccessor(arc);
      obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
      var vertexColorArray = calcColorVertexArray(
        colorAccessor(arc),
        // single, array of colors or interpolator
        state.arcCurveResolution,
        // numSegments
        useTube ? state.arcCircularResolution + 1 : 1
        // num vertices per segment
      );
      var vertexRelDistanceArray = calcVertexRelDistances(
        state.arcCurveResolution,
        // numSegments
        useTube ? state.arcCircularResolution + 1 : 1,
        // num vertices per segment
        true
        // run from end to start, to animate in the correct direction
      );
      obj.geometry.setAttribute("color", vertexColorArray);
      obj.geometry.setAttribute("relDistance", vertexRelDistanceArray);
      var applyUpdate = function applyUpdate2(td) {
        var _group$__currentTarge = group.__currentTargetD = td, stroke2 = _group$__currentTarge.stroke, curveD = _objectWithoutProperties2(_group$__currentTarge, _excluded);
        var curve = calcCurve(curveD);
        if (useTube) {
          obj.geometry && obj.geometry.dispose();
          obj.geometry = new THREE$e.TubeGeometry(curve, state.arcCurveResolution, stroke2 / 2, state.arcCircularResolution);
          obj.geometry.setAttribute("color", vertexColorArray);
          obj.geometry.setAttribute("relDistance", vertexRelDistanceArray);
        } else {
          obj.geometry.setFromPoints(curve.getPoints(state.arcCurveResolution));
        }
      };
      var targetD = {
        stroke,
        alt: altitudeAccessor(arc),
        altAutoScale: +altitudeAutoScaleAccessor(arc),
        startLat: +startLatAccessor(arc),
        startLng: +startLngAccessor(arc),
        startAlt: +startAltAccessor(arc),
        endLat: +endLatAccessor(arc),
        endLng: +endLngAccessor(arc),
        endAlt: +endAltAccessor(arc)
      };
      var currentTargetD = group.__currentTargetD || Object.assign({}, targetD, {
        altAutoScale: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.arcsTransitionDuration || state.arcsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.arcsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(state.arcsData);
    function calcCurve(_ref4) {
      var alt = _ref4.alt, altAutoScale = _ref4.altAutoScale, startLat = _ref4.startLat, startLng = _ref4.startLng, startAlt = _ref4.startAlt, endLat = _ref4.endLat, endLng = _ref4.endLng, endAlt = _ref4.endAlt;
      var getVec = function getVec2(_ref5) {
        var _ref6 = _slicedToArray9(_ref5, 3), lng = _ref6[0], lat = _ref6[1], alt2 = _ref6[2];
        var _polar2Cartesian = polar2Cartesian4(lat, lng, alt2), x2 = _polar2Cartesian.x, y2 = _polar2Cartesian.y, z2 = _polar2Cartesian.z;
        return new THREE$e.Vector3(x2, y2, z2);
      };
      var startPnt = [startLng, startLat];
      var endPnt = [endLng, endLat];
      var altitude = alt;
      (altitude === null || altitude === void 0) && // by default set altitude proportional to the great-arc distance
      (altitude = distance_default(startPnt, endPnt) / 2 * altAutoScale + Math.max(startAlt, endAlt));
      if (altitude || startAlt || endAlt) {
        var interpolate = interpolate_default(startPnt, endPnt);
        var calcAltCp = function calcAltCp2(a0, a1) {
          return a1 + (a1 - a0) * (a0 < a1 ? 0.5 : 0.25);
        };
        var _map = [0.25, 0.75].map(function(t2) {
          return [].concat(_toConsumableArray8(interpolate(t2)), [calcAltCp(t2 < 0.5 ? startAlt : endAlt, altitude)]);
        }), _map2 = _slicedToArray9(_map, 2), m1Pnt = _map2[0], m2Pnt = _map2[1];
        var curve = _construct(THREE$e.CubicBezierCurve3, _toConsumableArray8([[].concat(startPnt, [startAlt]), m1Pnt, m2Pnt, [].concat(endPnt, [endAlt])].map(getVec)));
        return curve;
      } else {
        var _alt = 1e-3;
        return calcSphereArc.apply(void 0, _toConsumableArray8([[].concat(startPnt, [_alt]), [].concat(endPnt, [_alt])].map(getVec)));
      }
      function calcSphereArc(startVec, endVec) {
        var angle = startVec.angleTo(endVec);
        var getGreatCirclePoint = angle === 0 ? function() {
          return startVec.clone();
        } : function(t2) {
          return new THREE$e.Vector3().addVectors(startVec.clone().multiplyScalar(Math.sin((1 - t2) * angle)), endVec.clone().multiplyScalar(Math.sin(t2 * angle))).divideScalar(Math.sin(angle));
        };
        var sphereArc = new THREE$e.Curve();
        sphereArc.getPoint = getGreatCirclePoint;
        return sphereArc;
      }
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array || colors instanceof Function) {
        var colorInterpolator = colors instanceof Array ? linear().domain(colors.map(function(_2, idx) {
          return idx / (colors.length - 1);
        })).range(colors) : colors;
        getVertexColor = function getVertexColor2(t2) {
          return color2ShaderArr(colorInterpolator(t2), true, true);
        };
      } else {
        var vertexColor3 = color2ShaderArr(colors, true, true);
        getVertexColor = function getVertexColor2() {
          return vertexColor3;
        };
      }
      var vertexColors = [];
      for (var v2 = 0, l2 = numVerticesGroup; v2 < l2; v2++) {
        var _vertexColor = getVertexColor(v2 / (l2 - 1));
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexColors.push(_vertexColor);
        }
      }
      return array2BufferAttr(vertexColors, 4);
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var vertexDistances = [];
      for (var v2 = 0, l2 = numVerticesGroup; v2 < l2; v2++) {
        var relDistance = v2 / (l2 - 1);
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexDistances.push(relDistance);
        }
      }
      invert && vertexDistances.reverse();
      return array2BufferAttr(vertexDistances, 1);
    }
  }
});
var THREE$d = window.THREE ? window.THREE : {
  BufferGeometry,
  DoubleSide,
  Mesh,
  MeshLambertMaterial,
  Object3D
};
var bfg$1 = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils$1 = bfg$1.BufferGeometryUtils || bfg$1;
var HexBinLayerKapsule = index2({
  props: {
    hexBinPointsData: {
      "default": []
    },
    hexBinPointLat: {
      "default": "lat"
    },
    hexBinPointLng: {
      "default": "lng"
    },
    hexBinPointWeight: {
      "default": 1
    },
    hexBinResolution: {
      "default": 4
    },
    // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.
    hexMargin: {
      "default": 0.2
    },
    // in fraction of diameter
    hexTopCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    hexTopColor: {
      "default": function _default4() {
        return "#ffffaa";
      }
    },
    hexSideColor: {
      "default": function _default5() {
        return "#ffffaa";
      }
    },
    hexAltitude: {
      "default": function _default6(_ref) {
        var sumWeight = _ref.sumWeight;
        return sumWeight * 0.01;
      }
    },
    // in units of globe radius
    hexBinMerge: {
      "default": false
    },
    // boolean. Whether to merge all hex geometries into a single mesh for rendering performance
    hexTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init4(threeObj, state, _ref2) {
    var tweenGroup = _ref2.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHexbin"
    });
  },
  update: function update5(state, changedProps) {
    var latAccessor = index3(state.hexBinPointLat);
    var lngAccessor = index3(state.hexBinPointLng);
    var weightAccessor = index3(state.hexBinPointWeight);
    var altitudeAccessor = index3(state.hexAltitude);
    var topColorAccessor = index3(state.hexTopColor);
    var sideColorAccessor = index3(state.hexSideColor);
    var marginAccessor = index3(state.hexMargin);
    var byH3Idx = index4(state.hexBinPointsData.map(function(d2) {
      return _objectSpread2(_objectSpread2({}, d2), {}, {
        h3Idx: latLngToCell(latAccessor(d2), lngAccessor(d2), state.hexBinResolution)
      });
    }), "h3Idx");
    var hexBins = Object.entries(byH3Idx).map(function(_ref3) {
      var _ref4 = _slicedToArray9(_ref3, 2), h3Idx = _ref4[0], points = _ref4[1];
      return {
        h3Idx,
        points,
        sumWeight: points.reduce(function(agg, d2) {
          return agg + +weightAccessor(d2);
        }, 0)
      };
    });
    var hexMaterials = {};
    if (!state.hexBinMerge && changedProps.hasOwnProperty("hexBinMerge")) {
      emptyObject3(state.scene);
    }
    state.dataMapper.scene = state.hexBinMerge ? new THREE$d.Object3D() : state.scene;
    state.dataMapper.id(function(d2) {
      return d2.h3Idx;
    }).onCreateObj(createObj).onUpdateObj(updateObj).digest(hexBins);
    if (state.hexBinMerge) {
      var hexPointsGeometry = !hexBins.length ? new THREE$d.BufferGeometry() : (BufferGeometryUtils$1.mergeGeometries || BufferGeometryUtils$1.mergeBufferGeometries)(hexBins.map(function(d2) {
        var obj = state.dataMapper.getObj(d2);
        var geom = obj.geometry.toNonIndexed();
        obj.updateMatrix();
        geom.applyMatrix4(obj.matrix);
        var topColor = color2ShaderArr(topColorAccessor(d2));
        var sideColor = color2ShaderArr(sideColorAccessor(d2));
        var nVertices = geom.getAttribute("position").count;
        var topFaceIdx = geom.groups[0].count;
        geom.setAttribute("color", array2BufferAttr(_toConsumableArray8(new Array(nVertices)).map(function(_2, idx) {
          return idx >= topFaceIdx ? topColor : sideColor;
        }), 4));
        return geom;
      }));
      var hexMaterial = new THREE$d.MeshLambertMaterial({
        color: 16777215,
        transparent: true,
        vertexColors: true,
        side: THREE$d.DoubleSide
      });
      hexMaterial.onBeforeCompile = function(shader) {
        hexMaterial.userData.shader = invisibleUndergroundShaderExtend(shader);
      };
      var hexPoints = new THREE$d.Mesh(hexPointsGeometry, hexMaterial);
      hexPoints.__globeObjType = "hexBinPoints";
      hexPoints.__data = hexBins;
      state.dataMapper.clear();
      emptyObject3(state.scene);
      state.scene.add(hexPoints);
    }
    function createObj(d2) {
      var obj = new THREE$d.Mesh();
      obj.__hexCenter = cellToLatLng(d2.h3Idx);
      obj.__hexGeoJson = cellToBoundary(d2.h3Idx, true).reverse();
      var centerLng = obj.__hexCenter[1];
      obj.__hexGeoJson.forEach(function(d3) {
        var edgeLng = d3[0];
        if (Math.abs(centerLng - edgeLng) > 170) {
          d3[0] += centerLng > edgeLng ? 360 : -360;
        }
      });
      obj.__globeObjType = "hexbin";
      return obj;
    }
    function updateObj(obj, d2) {
      var relNum = function relNum2(st, end, rat) {
        return st - (st - end) * rat;
      };
      var margin = Math.max(0, Math.min(1, +marginAccessor(d2)));
      var _obj$__hexCenter = _slicedToArray9(obj.__hexCenter, 2), clat = _obj$__hexCenter[0], clng = _obj$__hexCenter[1];
      var geoJson = margin === 0 ? obj.__hexGeoJson : obj.__hexGeoJson.map(function(_ref5) {
        var _ref6 = _slicedToArray9(_ref5, 2), elng = _ref6[0], elat = _ref6[1];
        return [[elng, clng], [elat, clat]].map(function(_ref7) {
          var _ref8 = _slicedToArray9(_ref7, 2), st = _ref8[0], end = _ref8[1];
          return relNum(st, end, margin);
        });
      });
      var topCurvatureResolution = state.hexTopCurvatureResolution;
      obj.geometry && obj.geometry.dispose();
      obj.geometry = new ConicPolygonGeometry([geoJson], 0, GLOBE_RADIUS, false, true, true, topCurvatureResolution);
      var targetD = {
        alt: +altitudeAccessor(d2)
      };
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
        obj.scale.x = obj.scale.y = obj.scale.z = 1 + alt;
        var vertexSurfaceRadius = GLOBE_RADIUS / (alt + 1);
        obj.geometry.setAttribute("surfaceRadius", array2BufferAttr(Array(obj.geometry.getAttribute("position").count).fill(vertexSurfaceRadius), 1));
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (state.hexBinMerge || !state.hexTransitionDuration || state.hexTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.hexTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
      if (!state.hexBinMerge) {
        var sideColor = sideColorAccessor(d2);
        var topColor = topColorAccessor(d2);
        [sideColor, topColor].forEach(function(color4) {
          if (!hexMaterials.hasOwnProperty(color4)) {
            var opacity = colorAlpha(color4);
            hexMaterials[color4] = applyShaderExtensionToMaterial(new THREE$d.MeshLambertMaterial({
              color: colorStr2Hex(color4),
              transparent: opacity < 1,
              opacity,
              side: THREE$d.DoubleSide
            }), invisibleUndergroundShaderExtend);
          }
        });
        obj.material = [sideColor, topColor].map(function(color4) {
          return hexMaterials[color4];
        });
      }
    }
  }
});
var sq = function sq2(x2) {
  return x2 * x2;
};
var toRad = function toRad2(x2) {
  return x2 * Math.PI / 180;
};
function geoDistance(a2, b) {
  var sqrt4 = Math.sqrt;
  var cos4 = Math.cos;
  var hav = function hav2(x2) {
    return sq(Math.sin(x2 / 2));
  };
  var latA = toRad(a2[1]);
  var latB = toRad(b[1]);
  var lngA = toRad(a2[0]);
  var lngB = toRad(b[0]);
  return 2 * Math.asin(sqrt4(hav(latB - latA) + cos4(latA) * cos4(latB) * hav(lngB - lngA)));
}
var sqrt2PI = Math.sqrt(2 * Math.PI);
function gaussianKernel(x2, bw) {
  return Math.exp(-sq(x2 / bw) / 2) / (bw * sqrt2PI);
}
var getGeoKDE = function getGeoKDE2(_ref) {
  var _ref2 = _slicedToArray9(_ref, 2), lng = _ref2[0], lat = _ref2[1];
  var data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref3$lngAccessor = _ref3.lngAccessor, lngAccessor = _ref3$lngAccessor === void 0 ? function(d2) {
    return d2[0];
  } : _ref3$lngAccessor, _ref3$latAccessor = _ref3.latAccessor, latAccessor = _ref3$latAccessor === void 0 ? function(d2) {
    return d2[1];
  } : _ref3$latAccessor, _ref3$weightAccessor = _ref3.weightAccessor, weightAccessor = _ref3$weightAccessor === void 0 ? function() {
    return 1;
  } : _ref3$weightAccessor, bandwidth = _ref3.bandwidth;
  var pnt = [lng, lat];
  var bwRad = bandwidth * Math.PI / 180;
  return sum(data.map(function(d2) {
    var weight = weightAccessor(d2);
    if (!weight)
      return 0;
    var dist = geoDistance(pnt, [lngAccessor(d2), latAccessor(d2)]);
    return gaussianKernel(dist, bwRad) * weight;
  }));
};
var computeGeoKde = function() {
  var _ref4 = _asyncToGenerator(_regenerator().m(function _callee(vertexGeoCoords) {
    var _navigator;
    var data, _ref5, _ref5$lngAccessor, lngAccessor, _ref5$latAccessor, latAccessor, _ref5$weightAccessor, weightAccessor, bandwidth, BW_RADIUS_INFLUENCE, Fn3, If3, uniform3, storage3, _float, instanceIndex3, Loop3, sqrt4, sin4, cos4, asin4, exp4, negate3, sCoords, sData, res, sRes, PI4, sqrt2PI2, sq3, hav, geoDistance2, gaussianKernel2, bwRad, maxRRad, n2, computeShaderFn, computeNode, renderer3, _args = arguments, _t, _t2, _t3;
    return _regenerator().w(function(_context) {
      while (1)
        switch (_context.n) {
          case 0:
            data = _args.length > 1 && _args[1] !== void 0 ? _args[1] : [];
            _ref5 = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {}, _ref5$lngAccessor = _ref5.lngAccessor, lngAccessor = _ref5$lngAccessor === void 0 ? function(d2) {
              return d2[0];
            } : _ref5$lngAccessor, _ref5$latAccessor = _ref5.latAccessor, latAccessor = _ref5$latAccessor === void 0 ? function(d2) {
              return d2[1];
            } : _ref5$latAccessor, _ref5$weightAccessor = _ref5.weightAccessor, weightAccessor = _ref5$weightAccessor === void 0 ? function() {
              return 1;
            } : _ref5$weightAccessor, bandwidth = _ref5.bandwidth;
            if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.gpu) {
              _context.n = 1;
              break;
            }
            console.warn("WebGPU not enabled in browser. Please consider enabling it to improve performance.");
            return _context.a(2, vertexGeoCoords.map(function(coords) {
              return getGeoKDE(coords, data, {
                lngAccessor,
                latAccessor,
                weightAccessor,
                bandwidth
              });
            }));
          case 1:
            BW_RADIUS_INFLUENCE = 4;
            Fn3 = Fn2, If3 = If2, uniform3 = uniform2, storage3 = storage2, _float = float2, instanceIndex3 = instanceIndex2, Loop3 = Loop2, sqrt4 = sqrt3, sin4 = sin3, cos4 = cos3, asin4 = asin3, exp4 = exp3, negate3 = negate2;
            sCoords = storage3(new StorageInstancedBufferAttribute(new Float32Array(vertexGeoCoords.flat().map(toRad)), 2), "vec2", vertexGeoCoords.length);
            sData = storage3(new StorageInstancedBufferAttribute(new Float32Array(data.map(function(d2) {
              return [toRad(lngAccessor(d2)), toRad(latAccessor(d2)), weightAccessor(d2)];
            }).flat()), 3), "vec3", data.length);
            res = new StorageInstancedBufferAttribute(vertexGeoCoords.length, 1);
            sRes = storage3(res, "float", vertexGeoCoords.length);
            PI4 = _float(Math.PI);
            sqrt2PI2 = sqrt4(PI4.mul(2));
            sq3 = function sq4(x2) {
              return x2.mul(x2);
            };
            hav = function hav2(x2) {
              return sq3(sin4(x2.div(2)));
            };
            geoDistance2 = function geoDistance3(a2, b) {
              var latA = _float(a2[1]);
              var latB = _float(b[1]);
              var lngA = _float(a2[0]);
              var lngB = _float(b[0]);
              return _float(2).mul(asin4(sqrt4(hav(latB.sub(latA)).add(cos4(latA).mul(cos4(latB)).mul(hav(lngB.sub(lngA)))))));
            };
            gaussianKernel2 = function gaussianKernel3(x2, bw) {
              return exp4(negate3(sq3(x2.div(bw)).div(2))).div(bw.mul(sqrt2PI2));
            };
            bwRad = uniform3(toRad(bandwidth));
            maxRRad = uniform3(toRad(bandwidth * BW_RADIUS_INFLUENCE));
            n2 = uniform3(data.length);
            computeShaderFn = Fn3(function() {
              var coords = sCoords.element(instanceIndex3);
              var res2 = sRes.element(instanceIndex3);
              res2.assign(0);
              Loop3(n2, function(_ref6) {
                var i2 = _ref6.i;
                var d2 = sData.element(i2);
                var weight = d2.z;
                If3(weight, function() {
                  var dist = geoDistance2(d2.xy, coords.xy);
                  If3(dist && dist.lessThan(maxRRad), function() {
                    res2.addAssign(gaussianKernel2(dist, bwRad).mul(weight));
                  });
                });
              });
            });
            computeNode = computeShaderFn().compute(vertexGeoCoords.length);
            renderer3 = new WebGPURenderer();
            _context.n = 2;
            return renderer3.computeAsync(computeNode);
          case 2:
            _t = Array;
            _t2 = Float32Array;
            _context.n = 3;
            return renderer3.getArrayBufferAsync(res);
          case 3:
            _t3 = _context.v;
            return _context.a(2, _t.from.call(_t, new _t2(_t3)));
        }
    }, _callee);
  }));
  return function computeGeoKde2(_x) {
    return _ref4.apply(this, arguments);
  };
}();
var THREE$c = window.THREE ? window.THREE : {
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var RES_BW_FACTOR = 3.5;
var MIN_RESOLUTION = 0.1;
var NUM_COLORS = 100;
var defaultColorInterpolator = function defaultColorInterpolator2(t2) {
  var c2 = color(turbo_default(t2));
  c2.opacity = Math.cbrt(t2);
  return c2.formatRgb();
};
var HeatmapsLayerKapsule = index2({
  props: {
    heatmapsData: {
      "default": []
    },
    heatmapPoints: {
      "default": function _default7(pnts) {
        return pnts;
      }
    },
    heatmapPointLat: {
      "default": function _default8(d2) {
        return d2[0];
      }
    },
    heatmapPointLng: {
      "default": function _default9(d2) {
        return d2[1];
      }
    },
    heatmapPointWeight: {
      "default": 1
    },
    heatmapBandwidth: {
      "default": 2.5
    },
    // Gaussian kernel bandwidth, in angular degrees
    heatmapColorFn: {
      "default": function _default10() {
        return defaultColorInterpolator;
      }
    },
    heatmapColorSaturation: {
      "default": 1.5
    },
    // multiplier for color scale max
    heatmapBaseAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    heatmapTopAltitude: {},
    // in units of globe radius
    heatmapsTransitionDuration: {
      "default": 0,
      triggerUpdate: false
    }
    // ms
  },
  init: function init5(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHeatmap"
    }).onCreateObj(function() {
      var obj = new THREE$c.Mesh(new THREE$c.SphereGeometry(GLOBE_RADIUS), applyShaderExtensionToMaterial(new THREE$c.MeshLambertMaterial({
        vertexColors: true,
        transparent: true
      }), setRadiusShaderExtend));
      obj.__globeObjType = "heatmap";
      return obj;
    });
  },
  update: function update6(state) {
    var pointsAccessor = index3(state.heatmapPoints);
    var latPntAccessor = index3(state.heatmapPointLat);
    var lngPntAccessor = index3(state.heatmapPointLng);
    var weightPntAccessor = index3(state.heatmapPointWeight);
    var bandwidthAccessor = index3(state.heatmapBandwidth);
    var colorFnAccessor = index3(state.heatmapColorFn);
    var saturationAccessor = index3(state.heatmapColorSaturation);
    var baseAltitudeAccessor = index3(state.heatmapBaseAltitude);
    var topAltitudeAccessor = index3(state.heatmapTopAltitude);
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var bandwidth = bandwidthAccessor(d2);
      var colorFn = colorFnAccessor(d2);
      var saturation3 = saturationAccessor(d2);
      var baseAlt = baseAltitudeAccessor(d2);
      var topAlt = topAltitudeAccessor(d2);
      var pnts = pointsAccessor(d2).map(function(pnt) {
        var lat = latPntAccessor(pnt);
        var lng = lngPntAccessor(pnt);
        var _polar2Cartesian = polar2Cartesian4(lat, lng), x2 = _polar2Cartesian.x, y2 = _polar2Cartesian.y, z2 = _polar2Cartesian.z;
        return {
          x: x2,
          y: y2,
          z: z2,
          lat,
          lng,
          weight: weightPntAccessor(pnt)
        };
      });
      var resolution2 = Math.max(MIN_RESOLUTION, bandwidth / RES_BW_FACTOR);
      var equatorNumSegments = Math.ceil(360 / (resolution2 || -1));
      if (obj.geometry.parameters.widthSegments !== equatorNumSegments) {
        obj.geometry.dispose();
        obj.geometry = new THREE$c.SphereGeometry(GLOBE_RADIUS, equatorNumSegments, equatorNumSegments / 2);
      }
      var vertexCoords = bufferAttr2Array(obj.geometry.getAttribute("position"));
      var vertexGeoCoords = vertexCoords.map(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 3), x2 = _ref3[0], y2 = _ref3[1], z2 = _ref3[2];
        var _cartesian2Polar = cartesian2Polar2({
          x: x2,
          y: y2,
          z: z2
        }), lng = _cartesian2Polar.lng, lat = _cartesian2Polar.lat;
        return [lng, lat];
      });
      computeGeoKde(vertexGeoCoords, pnts, {
        latAccessor: function latAccessor(d3) {
          return d3.lat;
        },
        lngAccessor: function lngAccessor(d3) {
          return d3.lng;
        },
        weightAccessor: function weightAccessor(d3) {
          return d3.weight;
        },
        bandwidth
      }).then(function(kdeVals) {
        var colors = _toConsumableArray8(new Array(NUM_COLORS)).map(function(_2, idx) {
          return color2ShaderArr(colorFn(idx / (NUM_COLORS - 1)));
        });
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, kdeVals2 = _obj$__currentTargetD.kdeVals, topAlt2 = _obj$__currentTargetD.topAlt, saturation4 = _obj$__currentTargetD.saturation;
          var maxVal = max(kdeVals2.map(Math.abs)) || 1e-15;
          var colorScale = quantize([0, maxVal / saturation4], colors);
          obj.geometry.setAttribute("color", array2BufferAttr(kdeVals2.map(function(v2) {
            return colorScale(Math.abs(v2));
          }), 4));
          var rScale = linear([0, maxVal], [GLOBE_RADIUS * (1 + baseAlt), GLOBE_RADIUS * (1 + (topAlt2 || baseAlt))]);
          obj.geometry.setAttribute("r", array2BufferAttr(kdeVals2.map(rScale)));
        };
        var targetD = {
          kdeVals,
          topAlt,
          saturation: saturation3
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          kdeVals: kdeVals.map(function() {
            return 0;
          }),
          topAlt: !topAlt ? topAlt : baseAlt,
          saturation: 0.5
        });
        currentTargetD.kdeVals.length !== kdeVals.length && (currentTargetD.kdeVals = kdeVals.slice());
        if (Object.keys(targetD).some(function(k2) {
          return currentTargetD[k2] !== targetD[k2];
        })) {
          if (!state.heatmapsTransitionDuration || state.heatmapsTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.heatmapsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
          }
        }
      });
    }).digest(state.heatmapsData);
  }
});
var THREE$b = window.THREE ? window.THREE : {
  DoubleSide,
  Group,
  LineBasicMaterial,
  LineSegments,
  Mesh,
  MeshBasicMaterial
};
var PolygonsLayerKapsule = index2({
  props: {
    polygonsData: {
      "default": []
    },
    polygonGeoJsonGeometry: {
      "default": "geometry"
    },
    polygonSideColor: {
      "default": function _default11() {
        return "#ffffaa";
      }
    },
    polygonSideMaterial: {},
    polygonCapColor: {
      "default": function _default12() {
        return "#ffffaa";
      }
    },
    polygonCapMaterial: {},
    polygonStrokeColor: {},
    polygonAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    polygonCapCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    polygonsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init6(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjPolygon"
    }).id(function(d2) {
      return d2.id;
    }).onCreateObj(function() {
      var obj = new THREE$b.Group();
      obj.__defaultSideMaterial = applyShaderExtensionToMaterial(new THREE$b.MeshBasicMaterial({
        side: THREE$b.DoubleSide,
        depthWrite: true
      }), invisibleUndergroundShaderExtend);
      obj.__defaultCapMaterial = new THREE$b.MeshBasicMaterial({
        side: THREE$b.DoubleSide,
        depthWrite: true
      });
      obj.add(new THREE$b.Mesh(void 0, [
        obj.__defaultSideMaterial,
        // side material
        obj.__defaultCapMaterial
        // cap material
      ]));
      obj.add(new THREE$b.LineSegments(void 0, new THREE$b.LineBasicMaterial()));
      obj.__globeObjType = "polygon";
      return obj;
    });
  },
  update: function update7(state) {
    var geoJsonAccessor = index3(state.polygonGeoJsonGeometry);
    var altitudeAccessor = index3(state.polygonAltitude);
    var capCurvatureResolutionAccessor = index3(state.polygonCapCurvatureResolution);
    var capColorAccessor = index3(state.polygonCapColor);
    var capMaterialAccessor = index3(state.polygonCapMaterial);
    var sideColorAccessor = index3(state.polygonSideColor);
    var sideMaterialAccessor = index3(state.polygonSideMaterial);
    var strokeColorAccessor = index3(state.polygonStrokeColor);
    var singlePolygons = [];
    state.polygonsData.forEach(function(polygon) {
      var objAttrs = {
        data: polygon,
        capColor: capColorAccessor(polygon),
        capMaterial: capMaterialAccessor(polygon),
        sideColor: sideColorAccessor(polygon),
        sideMaterial: sideMaterialAccessor(polygon),
        strokeColor: strokeColorAccessor(polygon),
        altitude: +altitudeAccessor(polygon),
        capCurvatureResolution: +capCurvatureResolutionAccessor(polygon)
      };
      var geoJson = geoJsonAccessor(polygon);
      var geoId = polygon.__id || "".concat(Math.round(Math.random() * 1e9));
      polygon.__id = geoId;
      if (geoJson.type === "Polygon") {
        singlePolygons.push(_objectSpread2({
          id: "".concat(geoId, "_0"),
          coords: geoJson.coordinates
        }, objAttrs));
      } else if (geoJson.type === "MultiPolygon") {
        singlePolygons.push.apply(singlePolygons, _toConsumableArray8(geoJson.coordinates.map(function(coords, idx) {
          return _objectSpread2({
            id: "".concat(geoId, "_").concat(idx),
            coords
          }, objAttrs);
        })));
      } else {
        console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
      }
    });
    state.dataMapper.onUpdateObj(function(obj, _ref2) {
      var coords = _ref2.coords, capColor = _ref2.capColor, capMaterial = _ref2.capMaterial, sideColor = _ref2.sideColor, sideMaterial = _ref2.sideMaterial, strokeColor = _ref2.strokeColor, altitude = _ref2.altitude, capCurvatureResolution = _ref2.capCurvatureResolution;
      var _obj$children = _slicedToArray9(obj.children, 2), conicObj = _obj$children[0], strokeObj = _obj$children[1];
      var addStroke = !!strokeColor;
      strokeObj.visible = addStroke;
      var hasCap = !!(capColor || capMaterial);
      var hasSide = !!(sideColor || sideMaterial);
      if (!objMatch(conicObj.geometry.parameters || {}, {
        polygonGeoJson: coords,
        curvatureResolution: capCurvatureResolution,
        closedTop: hasCap,
        includeSides: hasSide
      })) {
        conicObj.geometry && conicObj.geometry.dispose();
        conicObj.geometry = new ConicPolygonGeometry(coords, 0, GLOBE_RADIUS, false, hasCap, hasSide, capCurvatureResolution);
      }
      if (addStroke && (!strokeObj.geometry.parameters || strokeObj.geometry.parameters.geoJson.coordinates !== coords || strokeObj.geometry.parameters.resolution !== capCurvatureResolution)) {
        strokeObj.geometry && strokeObj.geometry.dispose();
        strokeObj.geometry = new GeoJsonGeometry({
          type: "Polygon",
          coordinates: coords
        }, GLOBE_RADIUS, capCurvatureResolution);
      }
      var sideIdx = hasSide ? 0 : -1;
      var capIdx = !hasCap ? -1 : hasSide ? 1 : 0;
      sideIdx >= 0 && (conicObj.material[sideIdx] = sideMaterial || obj.__defaultSideMaterial);
      capIdx >= 0 && (conicObj.material[capIdx] = capMaterial || obj.__defaultCapMaterial);
      [[!sideMaterial && sideColor, sideIdx], [!capMaterial && capColor, capIdx]].forEach(function(_ref3) {
        var _ref4 = _slicedToArray9(_ref3, 2), color4 = _ref4[0], materialIdx = _ref4[1];
        if (!color4 || materialIdx < 0)
          return;
        var material2 = conicObj.material[materialIdx];
        var opacity2 = colorAlpha(color4);
        material2.color.set(colorStr2Hex(color4));
        material2.transparent = opacity2 < 1;
        material2.opacity = opacity2;
      });
      if (addStroke) {
        var material = strokeObj.material;
        var opacity = colorAlpha(strokeColor);
        material.color.set(colorStr2Hex(strokeColor));
        material.transparent = opacity < 1;
        material.opacity = opacity;
      }
      var targetD = {
        alt: altitude
      };
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
        conicObj.scale.x = conicObj.scale.y = conicObj.scale.z = 1 + alt;
        addStroke && (strokeObj.scale.x = strokeObj.scale.y = strokeObj.scale.z = 1 + alt + 1e-4);
        setExtendedMaterialUniforms(obj.__defaultSideMaterial, function(uniforms) {
          return uniforms.uSurfaceRadius.value = GLOBE_RADIUS / (alt + 1);
        });
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.polygonsTransitionDuration || state.polygonsTransitionDuration < 0 || currentTargetD.alt === targetD.alt) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.polygonsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(singlePolygons);
  }
});
function objMatch(obj, attrs) {
  var compFn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return function(a2, b) {
      return a2 === b;
    };
  };
  return Object.entries(attrs).every(function(_ref5) {
    var _ref6 = _slicedToArray9(_ref5, 2), k2 = _ref6[0], v2 = _ref6[1];
    return obj.hasOwnProperty(k2) && compFn(k2)(obj[k2], v2);
  });
}
var THREE$a = window.THREE ? window.THREE : {
  BufferGeometry,
  DoubleSide,
  Mesh,
  MeshLambertMaterial,
  Vector3
};
var bfg = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils = bfg.BufferGeometryUtils || bfg;
var HexedPolygonsLayerKapsule = index2({
  props: {
    hexPolygonsData: {
      "default": []
    },
    hexPolygonGeoJsonGeometry: {
      "default": "geometry"
    },
    hexPolygonColor: {
      "default": function _default13() {
        return "#ffffaa";
      }
    },
    hexPolygonAltitude: {
      "default": 1e-3
    },
    // in units of globe radius
    hexPolygonResolution: {
      "default": 3
    },
    // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.
    hexPolygonMargin: {
      "default": 0.2
    },
    // in fraction of hex diameter
    hexPolygonUseDots: {
      "default": false
    },
    // if points should be circular instead of hexagonal
    hexPolygonCurvatureResolution: {
      "default": 5
    },
    // in angular degrees, only relevant for hex tops
    hexPolygonDotResolution: {
      "default": 12
    },
    // how many slice segments in the dot circle's circumference
    hexPolygonsTransitionDuration: {
      "default": 0,
      triggerUpdate: false
    }
    // ms
  },
  init: function init7(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHexPolygon"
    }).onCreateObj(function() {
      var obj = new THREE$a.Mesh(void 0, new THREE$a.MeshLambertMaterial({
        side: THREE$a.DoubleSide
      }));
      obj.__globeObjType = "hexPolygon";
      return obj;
    });
  },
  update: function update8(state) {
    var geoJsonAccessor = index3(state.hexPolygonGeoJsonGeometry);
    var colorAccessor = index3(state.hexPolygonColor);
    var altitudeAccessor = index3(state.hexPolygonAltitude);
    var resolutionAccessor = index3(state.hexPolygonResolution);
    var marginAccessor = index3(state.hexPolygonMargin);
    var useDotsAccessor = index3(state.hexPolygonUseDots);
    var curvatureResolutionAccessor = index3(state.hexPolygonCurvatureResolution);
    var dotResolutionAccessor = index3(state.hexPolygonDotResolution);
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var geoJson = geoJsonAccessor(d2);
      var h3Res = resolutionAccessor(d2);
      var alt = altitudeAccessor(d2);
      var margin = Math.max(0, Math.min(1, +marginAccessor(d2)));
      var useDots = useDotsAccessor(d2);
      var curvatureResolution = curvatureResolutionAccessor(d2);
      var dotResolution = dotResolutionAccessor(d2);
      var color4 = colorAccessor(d2);
      var opacity = colorAlpha(color4);
      obj.material.color.set(colorStr2Hex(color4));
      obj.material.transparent = opacity < 1;
      obj.material.opacity = opacity;
      var targetD = {
        alt,
        margin,
        curvatureResolution
      };
      var memD = {
        geoJson,
        h3Res
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      var currentMemD = obj.__currentMemD || memD;
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      }) || Object.keys(memD).some(function(k2) {
        return currentMemD[k2] !== memD[k2];
      })) {
        obj.__currentMemD = memD;
        var h3Idxs = [];
        if (geoJson.type === "Polygon") {
          polygonToCells(geoJson.coordinates, h3Res, true).forEach(function(idx) {
            return h3Idxs.push(idx);
          });
        } else if (geoJson.type === "MultiPolygon") {
          geoJson.coordinates.forEach(function(coords) {
            return polygonToCells(coords, h3Res, true).forEach(function(idx) {
              return h3Idxs.push(idx);
            });
          });
        } else {
          console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
        }
        var hexBins = h3Idxs.map(function(h3Idx) {
          var hexCenter = cellToLatLng(h3Idx);
          var hexGeoJson = cellToBoundary(h3Idx, true).reverse();
          var centerLng = hexCenter[1];
          hexGeoJson.forEach(function(d3) {
            var edgeLng = d3[0];
            if (Math.abs(centerLng - edgeLng) > 170) {
              d3[0] += centerLng > edgeLng ? 360 : -360;
            }
          });
          return {
            h3Idx,
            hexCenter,
            hexGeoJson
          };
        });
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, alt2 = _obj$__currentTargetD.alt, margin2 = _obj$__currentTargetD.margin, curvatureResolution2 = _obj$__currentTargetD.curvatureResolution;
          obj.geometry && obj.geometry.dispose();
          obj.geometry = !hexBins.length ? new THREE$a.BufferGeometry() : (BufferGeometryUtils.mergeGeometries || BufferGeometryUtils.mergeBufferGeometries)(hexBins.map(function(h2) {
            var _h$hexCenter = _slicedToArray9(h2.hexCenter, 2), clat = _h$hexCenter[0], clng = _h$hexCenter[1];
            if (useDots) {
              var centerPos = polar2Cartesian4(clat, clng, alt2);
              var edgePos = polar2Cartesian4(h2.hexGeoJson[0][1], h2.hexGeoJson[0][0], alt2);
              var r2 = 0.85 * (1 - margin2) * new THREE$a.Vector3(centerPos.x, centerPos.y, centerPos.z).distanceTo(new THREE$a.Vector3(edgePos.x, edgePos.y, edgePos.z));
              var geometry = new CircleGeometry(r2, dotResolution);
              geometry.rotateX(deg2Rad$1(-clat));
              geometry.rotateY(deg2Rad$1(clng));
              geometry.translate(centerPos.x, centerPos.y, centerPos.z);
              return geometry;
            } else {
              var relNum = function relNum2(st, end, rat) {
                return st - (st - end) * rat;
              };
              var _geoJson = margin2 === 0 ? h2.hexGeoJson : h2.hexGeoJson.map(function(_ref2) {
                var _ref3 = _slicedToArray9(_ref2, 2), elng = _ref3[0], elat = _ref3[1];
                return [[elng, clng], [elat, clat]].map(function(_ref4) {
                  var _ref5 = _slicedToArray9(_ref4, 2), st = _ref5[0], end = _ref5[1];
                  return relNum(st, end, margin2);
                });
              });
              return new ConicPolygonGeometry([_geoJson], GLOBE_RADIUS, GLOBE_RADIUS * (1 + alt2), false, true, false, curvatureResolution2);
            }
          }));
        };
        if (!state.hexPolygonsTransitionDuration || state.hexPolygonsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.hexPolygonsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(state.hexPolygonsData);
  }
});
var THREE$9 = window.THREE ? window.THREE : {
  Vector3
};
function interpolateVectors(fromPnts, toPnts) {
  var extendArr = function extendArr2(arr, length3) {
    var repeatItem = arr[arr.length - 1];
    return [].concat(_toConsumableArray8(arr), _toConsumableArray8(Array(length3 - arr.length).fill(repeatItem)));
  };
  var arrLength = Math.max(fromPnts.length, toPnts.length);
  var interpolator = array_default.apply(void 0, _toConsumableArray8([fromPnts, toPnts].map(function(pnts) {
    return pnts.map(function(_ref) {
      var x2 = _ref.x, y2 = _ref.y, z2 = _ref.z;
      return [x2, y2, z2];
    });
  }).map(function(arr) {
    return extendArr(arr, arrLength);
  })));
  return function(k2) {
    return k2 === 0 ? fromPnts : k2 === 1 ? toPnts : interpolator(k2).map(function(_ref2) {
      var _ref3 = _slicedToArray9(_ref2, 3), x2 = _ref3[0], y2 = _ref3[1], z2 = _ref3[2];
      return new THREE$9.Vector3(x2, y2, z2);
    });
  };
}
var THREE$8 = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  Group,
  Line,
  NormalBlending,
  ShaderMaterial,
  Vector3
};
var FrameTicker$1 = import_frame_ticker.default["default"] || import_frame_ticker.default;
var PathsLayerKapsule = index2({
  props: {
    pathsData: {
      "default": []
    },
    pathPoints: {
      "default": function _default14(pnts) {
        return pnts;
      }
    },
    pathPointLat: {
      "default": function _default15(arr) {
        return arr[0];
      }
    },
    pathPointLng: {
      "default": function _default16(arr) {
        return arr[1];
      }
    },
    pathPointAlt: {
      "default": 1e-3
    },
    pathResolution: {
      "default": 2
    },
    // in deg
    pathColor: {
      "default": function _default17() {
        return "#ffffaa";
      }
    },
    // single color, array of colors or color interpolation fn
    pathStroke: {},
    // in deg
    pathDashLength: {
      "default": 1
    },
    // in units of line length
    pathDashGap: {
      "default": 0
    },
    pathDashInitialGap: {
      "default": 0
    },
    pathDashAnimateTime: {
      "default": 0
    },
    // ms
    pathTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    },
    // ms
    rendererSize: {}
    // necessary to set correct fatline proportions
  },
  methods: {
    pauseAnimation: function pauseAnimation2(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation2(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor3(state) {
      var _state$ticker3;
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  stateInit: function stateInit3(_ref) {
    var tweenGroup = _ref.tweenGroup;
    return {
      tweenGroup,
      ticker: new FrameTicker$1(),
      sharedMaterial: new THREE$8.ShaderMaterial(_objectSpread2(_objectSpread2({}, dashedLineShaders()), {}, {
        transparent: true,
        blending: THREE$8.NormalBlending
      }))
    };
  },
  init: function init8(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjPath"
    }).onCreateObj(function() {
      var obj = new THREE$8.Group();
      obj.__globeObjType = "path";
      return obj;
    });
    state.ticker.onTick.add(function(_2, timeDelta) {
      state.dataMapper.entries().map(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 2), obj = _ref3[1];
        return obj;
      }).filter(function(o2) {
        return o2.children.length && o2.children[0].material && o2.children[0].__dashAnimateStep;
      }).forEach(function(o2) {
        var obj = o2.children[0];
        var step3 = obj.__dashAnimateStep * timeDelta;
        if (obj.type === "Line") {
          var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
          obj.material.uniforms.dashTranslate.value = curTranslate + step3;
        } else if (obj.type === "Line2") {
          var offset = obj.material.dashOffset - step3;
          var dashLength = obj.material.dashSize + obj.material.gapSize;
          while (offset <= -dashLength)
            offset += dashLength;
          obj.material.dashOffset = offset;
        }
      });
    });
  },
  update: function update9(state) {
    var pointsAccessor = index3(state.pathPoints);
    var pointLatAccessor = index3(state.pathPointLat);
    var pointLngAccessor = index3(state.pathPointLng);
    var pointAltAccessor = index3(state.pathPointAlt);
    var strokeAccessor = index3(state.pathStroke);
    var colorAccessor = index3(state.pathColor);
    var dashLengthAccessor = index3(state.pathDashLength);
    var dashGapAccessor = index3(state.pathDashGap);
    var dashInitialGapAccessor = index3(state.pathDashInitialGap);
    var dashAnimateTimeAccessor = index3(state.pathDashAnimateTime);
    state.dataMapper.onUpdateObj(function(group, path) {
      var stroke = strokeAccessor(path);
      var useFatLine = stroke !== null && stroke !== void 0;
      if (!group.children.length || useFatLine === (group.children[0].type === "Line")) {
        emptyObject3(group);
        var _obj = useFatLine ? new Line2(new LineGeometry(), new LineMaterial()) : new THREE$8.Line(
          new THREE$8.BufferGeometry(),
          state.sharedMaterial.clone()
          // Separate material instance per object to have dedicated uniforms (but shared shaders)
        );
        group.add(_obj);
      }
      var obj = group.children[0];
      var points = calcPath(pointsAccessor(path), pointLatAccessor, pointLngAccessor, pointAltAccessor, state.pathResolution);
      var dashAnimateTime = dashAnimateTimeAccessor(path);
      obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
      if (!useFatLine) {
        Object.assign(obj.material.uniforms, {
          dashSize: {
            value: dashLengthAccessor(path)
          },
          gapSize: {
            value: dashGapAccessor(path)
          },
          dashOffset: {
            value: dashInitialGapAccessor(path)
          }
        });
        var vertexColorArray = calcColorVertexArray(
          colorAccessor(path),
          // single, array of colors or interpolator
          points.length
          // numSegments
        );
        var vertexRelDistanceArray = calcVertexRelDistances(
          points.length,
          // numSegments
          1,
          // num vertices per segment
          true
          // run from end to start, to animate in the correct direction
        );
        obj.geometry.setAttribute("color", vertexColorArray);
        obj.geometry.setAttribute("relDistance", vertexRelDistanceArray);
      } else {
        obj.material.resolution = state.rendererSize;
        {
          var dashLength = dashLengthAccessor(path);
          var dashGap = dashGapAccessor(path);
          var dashInitialGap = dashInitialGapAccessor(path);
          obj.material.dashed = dashGap > 0;
          obj.material.dashed ? obj.material.defines.USE_DASH = "" : delete obj.material.defines.USE_DASH;
          if (obj.material.dashed) {
            obj.material.dashScale = 1 / calcLineDistance(points);
            obj.material.dashSize = dashLength;
            obj.material.gapSize = dashGap;
            obj.material.dashOffset = -dashInitialGap;
          }
        }
        {
          var colors = colorAccessor(path);
          if (colors instanceof Array) {
            var _vertexColorArray = calcColorVertexArray(
              colorAccessor(path),
              // single, array of colors or interpolator
              points.length - 1,
              // numSegments
              1,
              // num vertices per segment
              false
            );
            obj.geometry.setColors(_vertexColorArray.array);
            obj.material.vertexColors = true;
          } else {
            var color4 = colors;
            var opacity = colorAlpha(color4);
            obj.material.color = new THREE$8.Color(colorStr2Hex(color4));
            obj.material.transparent = opacity < 1;
            obj.material.opacity = opacity;
            obj.material.vertexColors = false;
          }
        }
        obj.material.needsUpdate = true;
      }
      var pointsInterpolator = interpolateVectors(group.__currentTargetD && group.__currentTargetD.points || [points[0]], points);
      var applyUpdate = function applyUpdate2(td) {
        var _group$__currentTarge = group.__currentTargetD = td, stroke2 = _group$__currentTarge.stroke, interpolK = _group$__currentTarge.interpolK;
        var kPoints = group.__currentTargetD.points = pointsInterpolator(interpolK);
        if (useFatLine) {
          var _ref4;
          obj.geometry.setPositions((_ref4 = []).concat.apply(_ref4, _toConsumableArray8(kPoints.map(function(_ref5) {
            var x2 = _ref5.x, y2 = _ref5.y, z2 = _ref5.z;
            return [x2, y2, z2];
          }))));
          obj.material.linewidth = stroke2;
          obj.material.dashed && obj.computeLineDistances();
        } else {
          obj.geometry.setFromPoints(kPoints);
          obj.geometry.computeBoundingSphere();
        }
      };
      var targetD = {
        stroke,
        interpolK: 1
      };
      var currentTargetD = Object.assign({}, group.__currentTargetD || targetD, {
        interpolK: 0
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.pathTransitionDuration || state.pathTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.pathTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(state.pathsData);
    function calcLineDistance(pnts) {
      var totalDist = 0;
      var prevPnt;
      pnts.forEach(function(pnt) {
        prevPnt && (totalDist += prevPnt.distanceTo(pnt));
        prevPnt = pnt;
      });
      return totalDist;
    }
    function calcPath(points, latAccessor, lngAccessor, altAccessor, angularResolution) {
      var getInterpolatedVals = function getInterpolatedVals2(start, end, numPnts) {
        var result = [];
        for (var i2 = 1; i2 <= numPnts; i2++) {
          result.push(start + (end - start) * i2 / (numPnts + 1));
        }
        return result;
      };
      var interpolateLine3 = function interpolateLine4() {
        var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var result = [];
        var prevPnt = null;
        lineCoords.forEach(function(pnt) {
          if (prevPnt) {
            while (Math.abs(prevPnt[1] - pnt[1]) > 180)
              prevPnt[1] += 360 * (prevPnt[1] < pnt[1] ? 1 : -1);
            var dist = Math.sqrt(Math.pow(pnt[0] - prevPnt[0], 2) + Math.pow(pnt[1] - prevPnt[1], 2));
            if (dist > maxDegDistance) {
              var numAdditionalPnts = Math.floor(dist / maxDegDistance);
              var lats = getInterpolatedVals(prevPnt[0], pnt[0], numAdditionalPnts);
              var lngs = getInterpolatedVals(prevPnt[1], pnt[1], numAdditionalPnts);
              var alts = getInterpolatedVals(prevPnt[2], pnt[2], numAdditionalPnts);
              for (var i2 = 0, len = lats.length; i2 < len; i2++) {
                result.push([lats[i2], lngs[i2], alts[i2]]);
              }
            }
          }
          result.push(prevPnt = pnt);
        });
        return result;
      };
      var getVec = function getVec2(_ref6) {
        var _ref7 = _slicedToArray9(_ref6, 3), lat = _ref7[0], lng = _ref7[1], alt = _ref7[2];
        var _polar2Cartesian = polar2Cartesian4(lat, lng, alt), x2 = _polar2Cartesian.x, y2 = _polar2Cartesian.y, z2 = _polar2Cartesian.z;
        return new THREE$8.Vector3(x2, y2, z2);
      };
      return interpolateLine3(points.map(function(pnt) {
        return [latAccessor(pnt), lngAccessor(pnt), altAccessor(pnt)];
      }), angularResolution).map(getVec);
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var includeAlpha = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array || colors instanceof Function) {
        var colorInterpolator = colors instanceof Array ? linear().domain(colors.map(function(_2, idx) {
          return idx / (colors.length - 1);
        })).range(colors) : colors;
        getVertexColor = function getVertexColor2(t2) {
          return color2ShaderArr(colorInterpolator(t2), includeAlpha, true);
        };
      } else {
        var vertexColor3 = color2ShaderArr(colors, includeAlpha, true);
        getVertexColor = function getVertexColor2() {
          return vertexColor3;
        };
      }
      var vertexColors = [];
      for (var v2 = 0, l2 = numVerticesGroup; v2 < l2; v2++) {
        var _vertexColor = getVertexColor(v2 / (l2 - 1));
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexColors.push(_vertexColor);
        }
      }
      return array2BufferAttr(vertexColors, includeAlpha ? 4 : 3);
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var vertexDistances = [];
      for (var v2 = 0, l2 = numVerticesGroup; v2 < l2; v2++) {
        var relDistance = v2 / (l2 - 1);
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexDistances.push(relDistance);
        }
      }
      invert && vertexDistances.reverse();
      return array2BufferAttr(vertexDistances, 1);
    }
  }
});
var THREE$7 = window.THREE ? window.THREE : {
  Euler,
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var TilesLayerKapsule = index2({
  props: {
    tilesData: {
      "default": []
    },
    tileLat: {
      "default": "lat"
    },
    // tile centroid
    tileLng: {
      "default": "lng"
    },
    tileAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    tileWidth: {
      "default": 1
    },
    // in lng degrees
    tileHeight: {
      "default": 1
    },
    // in lat degrees
    tileUseGlobeProjection: {
      "default": true
    },
    // whether to size tiles relative to the globe coordinate system, or independently
    tileMaterial: {
      "default": function _default18() {
        return new THREE$7.MeshLambertMaterial({
          color: "#ffbb88",
          opacity: 0.4,
          transparent: true
        });
      }
    },
    tileCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    tilesTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init9(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjTile"
    }).onCreateObj(function() {
      var obj = new THREE$7.Mesh();
      obj.__globeObjType = "tile";
      return obj;
    });
  },
  update: function update10(state) {
    var latAccessor = index3(state.tileLat);
    var lngAccessor = index3(state.tileLng);
    var altitudeAccessor = index3(state.tileAltitude);
    var widthAccessor = index3(state.tileWidth);
    var heightAccessor = index3(state.tileHeight);
    var useGlobeProjectionAccessor = index3(state.tileUseGlobeProjection);
    var materialAccessor = index3(state.tileMaterial);
    var curvatureResolutionAccessor = index3(state.tileCurvatureResolution);
    state.dataMapper.onUpdateObj(function(obj, d2) {
      obj.material = materialAccessor(d2);
      var useGlobeProjection = useGlobeProjectionAccessor(d2);
      var curvatureResolution = curvatureResolutionAccessor(d2);
      var applyPosition = function applyPosition2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, width = _obj$__currentTargetD.width, height = _obj$__currentTargetD.height;
        var rotLng = deg2Rad2(lng);
        var rotLat = deg2Rad2(-lat);
        obj.geometry && obj.geometry.dispose();
        obj.geometry = new THREE$7.SphereGeometry(GLOBE_RADIUS * (1 + alt), Math.ceil(width / (curvatureResolution || -1)), Math.ceil(height / (curvatureResolution || -1)), deg2Rad2(90 - width / 2) + (useGlobeProjection ? rotLng : 0), deg2Rad2(width), deg2Rad2(90 - height / 2) + (useGlobeProjection ? rotLat : 0), deg2Rad2(height));
        if (!useGlobeProjection) {
          obj.setRotationFromEuler(new THREE$7.Euler(rotLat, rotLng, 0, "YXZ"));
        }
      };
      var targetD = {
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2),
        alt: +altitudeAccessor(d2),
        width: +widthAccessor(d2),
        height: +heightAccessor(d2)
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        width: 0,
        height: 0
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.tilesTransitionDuration || state.tilesTransitionDuration < 0) {
          applyPosition(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.tilesTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyPosition).start());
        }
      }
    }).digest(state.tilesData);
  }
});
var deg2Rad2 = function deg2Rad3(deg) {
  return deg * Math.PI / 180;
};
var THREE$6 = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  Points,
  PointsMaterial
};
var ParticlesLayerKapsule = index2({
  props: {
    particlesData: {
      "default": []
    },
    particlesList: {
      "default": function _default19(d2) {
        return d2;
      }
    },
    // arrays of arrays
    particleLat: {
      "default": "lat"
    },
    particleLng: {
      "default": "lng"
    },
    particleAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    particlesSize: {
      "default": 0.5
    },
    particlesSizeAttenuation: {
      "default": true
    },
    particlesColor: {
      "default": function _default20() {
        return "white";
      }
    },
    particlesTexture: {}
  },
  init: function init10(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjParticles"
    }).onCreateObj(function() {
      var obj = new THREE$6.Points(new THREE$6.BufferGeometry(), new THREE$6.PointsMaterial());
      obj.__globeObjType = "particles";
      return obj;
    }).onUpdateObj(function(obj, d2) {
      var particlesListAccessor = index3(state.particlesList);
      var latAccessor = index3(state.particleLat);
      var lngAccessor = index3(state.particleLng);
      var altitudeAccessor = index3(state.particleAltitude);
      obj.geometry.setAttribute("position", array2BufferAttr(particlesListAccessor(d2).map(function(p2) {
        return Object.values(polar2Cartesian4(latAccessor(p2), lngAccessor(p2), altitudeAccessor(p2)));
      }), 3));
    });
  },
  update: function update11(state, changedProps) {
    if (["particlesData", "particlesList", "particleLat", "particleLng", "particleAltitude"].some(function(p2) {
      return changedProps.hasOwnProperty(p2);
    })) {
      state.dataMapper.digest(state.particlesData);
    }
    var colorAccessor = index3(state.particlesColor);
    var sizeAccessor = index3(state.particlesSize);
    var sizeAttenuationAccessor = index3(state.particlesSizeAttenuation);
    var textureAccessor = index3(state.particlesTexture);
    state.dataMapper.entries().forEach(function(_ref) {
      var _ref2 = _slicedToArray9(_ref, 2), d2 = _ref2[0], obj = _ref2[1];
      obj.material.size = sizeAccessor(d2);
      obj.material.sizeAttenuation = sizeAttenuationAccessor(d2);
      if (!state.particlesTexture) {
        var color4 = colorAccessor(d2);
        var opacity = colorAlpha(color4);
        obj.material.color = new THREE$6.Color(colorStr2Hex(color4));
        obj.material.transparent = opacity < 1;
        obj.material.opacity = opacity;
        obj.material.alphaTest = 0;
      } else {
        obj.material.color = new THREE$6.Color(16777215);
        obj.material.transparent = false;
        obj.material.alphaTest = 0.5;
        obj.material.map = textureAccessor(d2);
      }
    });
  }
});
var THREE$5 = window.THREE ? window.THREE : {
  BufferGeometry
};
var CircleLineGeometry = function(_THREE$BufferGeometry) {
  function CircleLineGeometry2() {
    var _this;
    var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    var segmentCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 32;
    _classCallCheck6(this, CircleLineGeometry2);
    _this = _callSuper4(this, CircleLineGeometry2);
    _this.type = "CircleLineGeometry";
    _this.parameters = {
      radius,
      segmentCount
    };
    var points = [];
    for (var i2 = 0; i2 <= segmentCount; i2++) {
      var theta = (i2 / segmentCount - 0.25) * Math.PI * 2;
      points.push({
        x: Math.cos(theta) * radius,
        y: Math.sin(theta) * radius,
        z: 0
      });
    }
    _this.setFromPoints(points);
    return _this;
  }
  _inherits4(CircleLineGeometry2, _THREE$BufferGeometry);
  return _createClass6(CircleLineGeometry2);
}(THREE$5.BufferGeometry);
var THREE$4 = window.THREE ? window.THREE : {
  Color,
  Group,
  Line,
  LineBasicMaterial,
  Vector3
};
var FrameTicker = import_frame_ticker.default["default"] || import_frame_ticker.default;
var RingsLayerKapsule = index2({
  props: {
    ringsData: {
      "default": []
    },
    ringLat: {
      "default": "lat"
    },
    ringLng: {
      "default": "lng"
    },
    ringAltitude: {
      "default": 15e-4
    },
    ringColor: {
      "default": function _default21() {
        return "#ffffaa";
      },
      triggerUpdate: false
    },
    // single color, array of colors or color interpolation fn
    ringResolution: {
      "default": 64,
      triggerUpdate: false
    },
    // how many slice segments in each circle's circumference
    ringMaxRadius: {
      "default": 2,
      triggerUpdate: false
    },
    // degrees
    ringPropagationSpeed: {
      "default": 1,
      triggerUpdate: false
    },
    // degrees/s
    ringRepeatPeriod: {
      "default": 700,
      triggerUpdate: false
    }
    // ms
  },
  methods: {
    pauseAnimation: function pauseAnimation3(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation3(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor4(state) {
      var _state$ticker3;
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  init: function init11(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjRing",
      removeDelay: 3e4
      // wait until all rings are gone
    }).onCreateObj(function() {
      var obj = new THREE$4.Group();
      obj.__globeObjType = "ring";
      return obj;
    });
    state.ticker = new FrameTicker();
    state.ticker.onTick.add(function(time3) {
      if (!state.ringsData.length)
        return;
      var colorAccessor = index3(state.ringColor);
      var altitudeAccessor = index3(state.ringAltitude);
      var maxRadiusAccessor = index3(state.ringMaxRadius);
      var propagationSpeedAccessor = index3(state.ringPropagationSpeed);
      var repeatPeriodAccessor = index3(state.ringRepeatPeriod);
      state.dataMapper.entries().filter(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 2), o2 = _ref3[1];
        return o2;
      }).forEach(function(_ref4) {
        var _ref5 = _slicedToArray9(_ref4, 2), d2 = _ref5[0], obj = _ref5[1];
        if ((obj.__nextRingTime || 0) <= time3) {
          var periodSecs = repeatPeriodAccessor(d2) / 1e3;
          obj.__nextRingTime = time3 + (periodSecs <= 0 ? Infinity : periodSecs);
          var circleObj = new THREE$4.Line(new CircleLineGeometry(1, state.ringResolution), new THREE$4.LineBasicMaterial());
          var colors = colorAccessor(d2);
          var isMultiColor = colors instanceof Array || colors instanceof Function;
          var colorInterpolator;
          if (!isMultiColor) {
            circleObj.material.color = new THREE$4.Color(colorStr2Hex(colors));
            setMaterialOpacity(circleObj.material, colorAlpha(colors));
          } else {
            if (colors instanceof Array) {
              colorInterpolator = linear().domain(colors.map(function(_2, idx) {
                return idx / (colors.length - 1);
              })).range(colors);
              circleObj.material.transparent = colors.some(function(c2) {
                return colorAlpha(c2) < 1;
              });
            } else {
              colorInterpolator = colors;
              circleObj.material.transparent = true;
            }
          }
          var curveR = GLOBE_RADIUS * (1 + altitudeAccessor(d2));
          var maxRadius = maxRadiusAccessor(d2);
          var maxAngle = maxRadius * Math.PI / 180;
          var propagationSpeed = propagationSpeedAccessor(d2);
          var isReverse = propagationSpeed <= 0;
          var updateFn = function updateFn2(_ref6) {
            var t2 = _ref6.t;
            var ang = (isReverse ? 1 - t2 : t2) * maxAngle;
            circleObj.scale.x = circleObj.scale.y = curveR * Math.sin(ang);
            circleObj.position.z = curveR * (1 - Math.cos(ang));
            if (isMultiColor) {
              var color4 = colorInterpolator(t2);
              circleObj.material.color = new THREE$4.Color(colorStr2Hex(color4));
              circleObj.material.transparent && (circleObj.material.opacity = colorAlpha(color4));
            }
          };
          if (propagationSpeed === 0) {
            updateFn({
              t: 0
            });
            obj.add(circleObj);
          } else {
            var transitionTime = Math.abs(maxRadius / propagationSpeed) * 1e3;
            state.tweenGroup.add(new Tween({
              t: 0
            }).to({
              t: 1
            }, transitionTime).onUpdate(updateFn).onStart(function() {
              return obj.add(circleObj);
            }).onComplete(function() {
              obj.remove(circleObj);
              _deallocate2(circleObj);
            }).start());
          }
        }
      });
    });
  },
  update: function update12(state) {
    var latAccessor = index3(state.ringLat);
    var lngAccessor = index3(state.ringLng);
    var altitudeAccessor = index3(state.ringAltitude);
    var globeCenter = state.scene.localToWorld(new THREE$4.Vector3(0, 0, 0));
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var lat = latAccessor(d2);
      var lng = lngAccessor(d2);
      var alt = altitudeAccessor(d2);
      Object.assign(obj.position, polar2Cartesian4(lat, lng, alt));
      obj.lookAt(globeCenter);
    }).digest(state.ringsData);
  }
});
var glyphs = { "0": { x_min: 73, x_max: 715, ha: 792, o: "m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 " }, "1": { x_min: 215.671875, x_max: 574, ha: 792, o: "m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 " }, "2": { x_min: 59, x_max: 731, ha: 792, o: "m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 " }, "3": { x_min: 54, x_max: 737, ha: 792, o: "m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 " }, "4": { x_min: 48, x_max: 742.453125, ha: 792, o: "m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 " }, "5": { x_min: 54.171875, x_max: 738, ha: 792, o: "m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 " }, "6": { x_min: 53, x_max: 739, ha: 792, o: "m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 " }, "7": { x_min: 58.71875, x_max: 730.953125, ha: 792, o: "m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 " }, "8": { x_min: 55, x_max: 736, ha: 792, o: "m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 " }, "9": { x_min: 53, x_max: 739, ha: 792, o: "m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 " }, "ο": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 " }, S: { x_min: 0, x_max: 788, ha: 890, o: "m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 " }, "¦": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "/": { x_min: 183.25, x_max: 608.328125, ha: 792, o: "m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 " }, "Τ": { x_min: -0.4375, x_max: 777.453125, ha: 839, o: "m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 " }, y: { x_min: 0, x_max: 684.78125, ha: 771, o: "m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 " }, "Π": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 " }, "ΐ": { x_min: -111, x_max: 339, ha: 361, o: "m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 " }, g: { x_min: 0, x_max: 686, ha: 838, o: "m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 " }, "²": { x_min: 0, x_max: 442, ha: 539, o: "m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 " }, "–": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, "Κ": { x_min: 0, x_max: 819.5625, ha: 893, o: "m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, "ƒ": { x_min: -46.265625, x_max: 392, ha: 513, o: "m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 " }, e: { x_min: 0, x_max: 714, ha: 813, o: "m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 " }, "ό": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 " }, J: { x_min: 0, x_max: 588, ha: 699, o: "m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 " }, "»": { x_min: -1, x_max: 503, ha: 601, o: "m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 " }, "©": { x_min: -3, x_max: 1008, ha: 1106, o: "m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 " }, "ώ": { x_min: 0, x_max: 922, ha: 1030, o: "m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 " }, "^": { x_min: 193.0625, x_max: 598.609375, ha: 792, o: "m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 " }, "«": { x_min: 0, x_max: 507.203125, ha: 604, o: "m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 " }, D: { x_min: 0, x_max: 828, ha: 935, o: "m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 " }, "∙": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "ÿ": { x_min: 0, x_max: 47, ha: 125, o: "m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 " }, w: { x_min: 0, x_max: 1009.71875, ha: 1100, o: "m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 " }, $: { x_min: 0, x_max: 700, ha: 793, o: "m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 " }, "\\": { x_min: -0.015625, x_max: 425.0625, ha: 522, o: "m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 " }, "µ": { x_min: 0, x_max: 697.21875, ha: 747, o: "m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 " }, "Ι": { x_min: 42, x_max: 181, ha: 297, o: "m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 " }, "Ύ": { x_min: 0, x_max: 1144.5, ha: 1214, o: "m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "’": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "Ν": { x_min: 0, x_max: 801, ha: 915, o: "m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 " }, "-": { x_min: 8.71875, x_max: 350.390625, ha: 478, o: "m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 " }, Q: { x_min: 0, x_max: 968, ha: 1072, o: "m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 " }, "ς": { x_min: 1, x_max: 676.28125, ha: 740, o: "m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 " }, M: { x_min: 0, x_max: 954, ha: 1067, o: "m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 " }, "Ψ": { x_min: 0, x_max: 1006, ha: 1094, o: "m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 " }, C: { x_min: 0, x_max: 886, ha: 944, o: "m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 " }, "!": { x_min: 0, x_max: 138, ha: 236, o: "m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 " }, "{": { x_min: 0, x_max: 480.5625, ha: 578, o: "m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 " }, X: { x_min: -0.015625, x_max: 854.15625, ha: 940, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 " }, "#": { x_min: 0, x_max: 963.890625, ha: 1061, o: "m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 " }, "ι": { x_min: 42, x_max: 284, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 " }, "Ά": { x_min: 0, x_max: 906.953125, ha: 982, o: "m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, ")": { x_min: 0, x_max: 318, ha: 415, o: "m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 " }, "ε": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 " }, "Δ": { x_min: 0, x_max: 952.78125, ha: 1028, o: "m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 " }, "}": { x_min: 0, x_max: 481, ha: 578, o: "m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 " }, "‰": { x_min: -3, x_max: 1672, ha: 1821, o: "m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 " }, a: { x_min: 0, x_max: 698.609375, ha: 794, o: "m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 " }, "—": { x_min: 0, x_max: 941.671875, ha: 1039, o: "m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 " }, "=": { x_min: 8.71875, x_max: 780.953125, ha: 792, o: "m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 " }, N: { x_min: 0, x_max: 801, ha: 914, o: "m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 " }, "ρ": { x_min: 0, x_max: 712, ha: 797, o: "m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 " }, "¯": { x_min: 0, x_max: 941.671875, ha: 938, o: "m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 " }, Z: { x_min: 0, x_max: 779, ha: 849, o: "m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 " }, u: { x_min: 0, x_max: 617, ha: 729, o: "m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 " }, k: { x_min: 0, x_max: 612.484375, ha: 697, o: "m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 " }, "Η": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "Α": { x_min: 0, x_max: 906.953125, ha: 985, o: "m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, s: { x_min: 0, x_max: 604, ha: 697, o: "m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 " }, B: { x_min: 0, x_max: 778, ha: 876, o: "m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 " }, "…": { x_min: 0, x_max: 614, ha: 708, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 " }, "?": { x_min: 0, x_max: 607, ha: 704, o: "m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 " }, H: { x_min: 0, x_max: 803, ha: 915, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "ν": { x_min: 0, x_max: 675, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 " }, c: { x_min: 1, x_max: 701.390625, ha: 775, o: "m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 " }, "¶": { x_min: 0, x_max: 566.671875, ha: 678, o: "m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 " }, "β": { x_min: 0, x_max: 660, ha: 745, o: "m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 " }, "Μ": { x_min: 0, x_max: 954, ha: 1068, o: "m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 " }, "Ό": { x_min: 0.109375, x_max: 1120, ha: 1217, o: "m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "Ή": { x_min: 0, x_max: 1158, ha: 1275, o: "m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "•": { x_min: 0, x_max: 663.890625, ha: 775, o: "m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 " }, "¥": { x_min: 0.1875, x_max: 819.546875, ha: 886, o: "m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 " }, "(": { x_min: 0, x_max: 318.0625, ha: 415, o: "m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 " }, U: { x_min: 0, x_max: 796, ha: 904, o: "m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 " }, "γ": { x_min: 0.5, x_max: 744.953125, ha: 822, o: "m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 " }, "α": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 " }, F: { x_min: 0, x_max: 683.328125, ha: 717, o: "m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 " }, "­": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, ":": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "Χ": { x_min: 0, x_max: 854.171875, ha: 935, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 " }, "*": { x_min: 116, x_max: 674, ha: 792, o: "m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 " }, "†": { x_min: 0, x_max: 777, ha: 835, o: "m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 " }, "°": { x_min: 0, x_max: 347, ha: 444, o: "m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 " }, V: { x_min: 0, x_max: 862.71875, ha: 940, o: "m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 " }, "Ξ": { x_min: 0, x_max: 734.71875, ha: 763, o: "m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 " }, " ": { x_min: 0, x_max: 0, ha: 853 }, "Ϋ": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 " }, "”": { x_min: 0, x_max: 347, ha: 454, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 " }, "@": { x_min: 0, x_max: 1260, ha: 1357, o: "m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 " }, "Ί": { x_min: 0, x_max: 499, ha: 613, o: "m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 " }, i: { x_min: 14, x_max: 136, ha: 275, o: "m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 " }, "Β": { x_min: 0, x_max: 778, ha: 877, o: "m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 " }, "υ": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 " }, "]": { x_min: 0, x_max: 275, ha: 372, o: "m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 " }, m: { x_min: 0, x_max: 1019, ha: 1128, o: "m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 " }, "χ": { x_min: 8.328125, x_max: 780.5625, ha: 815, o: "m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 " }, "ί": { x_min: 42, x_max: 326.71875, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 " }, "Ζ": { x_min: 0, x_max: 779.171875, ha: 850, o: "m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 " }, R: { x_min: 0, x_max: 781.953125, ha: 907, o: "m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 " }, o: { x_min: 0, x_max: 713, ha: 821, o: "m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 " }, K: { x_min: 0, x_max: 819.46875, ha: 906, o: "m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, ",": { x_min: 0, x_max: 142, ha: 239, o: "m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 " }, d: { x_min: 0, x_max: 683, ha: 796, o: "m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 " }, "¨": { x_min: -109, x_max: 247, ha: 232, o: "m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 " }, E: { x_min: 0, x_max: 736.109375, ha: 789, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, Y: { x_min: 0, x_max: 820, ha: 886, o: "m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 " }, '"': { x_min: 0, x_max: 299, ha: 396, o: "m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "‹": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "„": { x_min: 0, x_max: 364, ha: 467, o: "m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 " }, "δ": { x_min: 1, x_max: 710, ha: 810, o: "m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 " }, "έ": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 " }, "ω": { x_min: 0, x_max: 922, ha: 1031, o: "m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 " }, "´": { x_min: 0, x_max: 96, ha: 251, o: "m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "±": { x_min: 11, x_max: 781, ha: 792, o: "m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 " }, "|": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "ϋ": { x_min: 0, x_max: 617, ha: 725, o: "m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 " }, "§": { x_min: 0, x_max: 593, ha: 690, o: "m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 " }, b: { x_min: 0, x_max: 685, ha: 783, o: "m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 " }, q: { x_min: 0, x_max: 683, ha: 876, o: "m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 " }, "Ω": { x_min: -0.171875, x_max: 969.5625, ha: 1068, o: "m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 " }, "ύ": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 " }, z: { x_min: -0.015625, x_max: 613.890625, ha: 697, o: "m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 " }, "™": { x_min: 0, x_max: 894, ha: 1e3, o: "m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 " }, "ή": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 " }, "Θ": { x_min: 0, x_max: 960, ha: 1056, o: "m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 " }, "®": { x_min: -3, x_max: 1008, ha: 1106, o: "m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 " }, "~": { x_min: 0, x_max: 833, ha: 931, o: "m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 " }, "Ε": { x_min: 0, x_max: 736.21875, ha: 778, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, "³": { x_min: 0, x_max: 450, ha: 547, o: "m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 " }, "[": { x_min: 0, x_max: 273.609375, ha: 371, o: "m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 " }, L: { x_min: 0, x_max: 645.828125, ha: 696, o: "m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 " }, "σ": { x_min: 0, x_max: 803.390625, ha: 894, o: "m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 " }, "ζ": { x_min: 0, x_max: 573, ha: 642, o: "m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 " }, "θ": { x_min: 0, x_max: 674, ha: 778, o: "m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 " }, "Ο": { x_min: 0, x_max: 958, ha: 1054, o: "m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 " }, "Γ": { x_min: 0, x_max: 705.28125, ha: 749, o: "m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 " }, " ": { x_min: 0, x_max: 0, ha: 375 }, "%": { x_min: -3, x_max: 1089, ha: 1186, o: "m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 " }, P: { x_min: 0, x_max: 726, ha: 806, o: "m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 " }, "Έ": { x_min: 0, x_max: 1078.21875, ha: 1118, o: "m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "Ώ": { x_min: 0.125, x_max: 1136.546875, ha: 1235, o: "m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 " }, _: { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 " }, "Ϊ": { x_min: -110, x_max: 246, ha: 275, o: "m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 " }, "+": { x_min: 23, x_max: 768, ha: 792, o: "m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 " }, "½": { x_min: 0, x_max: 1050, ha: 1149, o: "m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 " }, "Ρ": { x_min: 0, x_max: 720, ha: 783, o: "m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 " }, "'": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "ª": { x_min: 0, x_max: 350, ha: 397, o: "m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 " }, "΅": { x_min: 0, x_max: 450, ha: 553, o: "m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 " }, T: { x_min: 0, x_max: 777, ha: 835, o: "m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 " }, "Φ": { x_min: 0, x_max: 915, ha: 997, o: "m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 " }, "⁋": { x_min: 0, x_max: 0, ha: 694 }, j: { x_min: -77.78125, x_max: 167, ha: 349, o: "m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 " }, "Σ": { x_min: 0, x_max: 756.953125, ha: 819, o: "m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 " }, "›": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, "<": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "£": { x_min: 0, x_max: 704.484375, ha: 801, o: "m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 " }, t: { x_min: 0, x_max: 367, ha: 458, o: "m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 " }, "¬": { x_min: 0, x_max: 706, ha: 803, o: "m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 " }, "λ": { x_min: 0, x_max: 750, ha: 803, o: "m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 " }, W: { x_min: 0, x_max: 1263.890625, ha: 1351, o: "m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 " }, ">": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, v: { x_min: 0, x_max: 675.15625, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 " }, "τ": { x_min: 0.28125, x_max: 644.5, ha: 703, o: "m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 " }, "ξ": { x_min: 0, x_max: 624.9375, ha: 699, o: "m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 " }, "&": { x_min: -3, x_max: 894.25, ha: 992, o: "m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 " }, "Λ": { x_min: 0, x_max: 862.5, ha: 942, o: "m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 " }, I: { x_min: 41, x_max: 180, ha: 293, o: "m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 " }, G: { x_min: 0, x_max: 921, ha: 1011, o: "m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 " }, "ΰ": { x_min: 0, x_max: 617, ha: 725, o: "m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 " }, "`": { x_min: 0, x_max: 138.890625, ha: 236, o: "m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 " }, "·": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "Υ": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 " }, r: { x_min: 0, x_max: 355.5625, ha: 432, o: "m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 " }, x: { x_min: 0, x_max: 675, ha: 764, o: "m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 " }, "μ": { x_min: 0, x_max: 696.609375, ha: 747, o: "m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 " }, h: { x_min: 0, x_max: 615, ha: 724, o: "m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 " }, ".": { x_min: 0, x_max: 142, ha: 239, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "φ": { x_min: -2, x_max: 878, ha: 974, o: "m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 " }, ";": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 " }, f: { x_min: 0, x_max: 378, ha: 472, o: "m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 " }, "“": { x_min: 1, x_max: 348.21875, ha: 454, o: "m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 " }, A: { x_min: 0.03125, x_max: 906.953125, ha: 1008, o: "m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 " }, "‘": { x_min: 1, x_max: 139.890625, ha: 236, o: "m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 " }, "ϊ": { x_min: -70, x_max: 283, ha: 361, o: "m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 " }, "π": { x_min: -0.21875, x_max: 773.21875, ha: 857, o: "m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 " }, "ά": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 " }, O: { x_min: 0, x_max: 958, ha: 1057, o: "m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 " }, n: { x_min: 0, x_max: 615, ha: 724, o: "m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 " }, l: { x_min: 41, x_max: 166, ha: 279, o: "m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 " }, "¤": { x_min: 40.09375, x_max: 728.796875, ha: 825, o: "m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 " }, "κ": { x_min: 0, x_max: 632.328125, ha: 679, o: "m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 " }, p: { x_min: 0, x_max: 685, ha: 786, o: "m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 " }, "‡": { x_min: 0, x_max: 777, ha: 835, o: "m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 " }, "ψ": { x_min: 0, x_max: 808, ha: 907, o: "m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 " }, "η": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 " } };
var cssFontWeight = "normal";
var ascender = 1189;
var underlinePosition = -100;
var cssFontStyle = "normal";
var boundingBox = { yMin: -334, xMin: -111, yMax: 1189, xMax: 1672 };
var resolution = 1e3;
var original_font_information = { postscript_name: "Helvetiker-Regular", version_string: "Version 1.00 2004 initial release", vendor_url: "http://www.magenta.gr/", full_font_name: "Helvetiker", font_family_name: "Helvetiker", copyright: "Copyright (c) Μagenta ltd, 2004", description: "", trademark: "", designer: "", designer_url: "", unique_font_identifier: "Μagenta ltd:Helvetiker:22-10-104", license_url: "http://www.ellak.gr/fonts/MgOpen/license.html", license_description: 'Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license ("Fonts") and associated documentation files (the "Font Software"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word "MgOpen", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the "MgOpen" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.', manufacturer_name: "Μagenta ltd", font_sub_family_name: "Regular" };
var descender = -334;
var familyName = "Helvetiker";
var lineHeight = 1522;
var underlineThickness = 50;
var defaultTypeFace = { glyphs, cssFontWeight, ascender, underlinePosition, cssFontStyle, boundingBox, resolution, original_font_information, descender, familyName, lineHeight, underlineThickness };
var THREE$3 = _objectSpread2(_objectSpread2({}, window.THREE ? window.THREE : {
  BoxGeometry,
  CircleGeometry,
  DoubleSide,
  Group,
  Mesh,
  MeshLambertMaterial,
  TextGeometry,
  Vector3
}), {}, {
  Font,
  TextGeometry
});
var LabelsLayerKapsule = index2({
  props: {
    labelsData: {
      "default": []
    },
    labelLat: {
      "default": "lat"
    },
    labelLng: {
      "default": "lng"
    },
    labelAltitude: {
      "default": 2e-3
    },
    // in units of globe radius
    labelText: {
      "default": "text"
    },
    labelSize: {
      "default": 0.5
    },
    // text height in deg
    labelTypeFace: {
      "default": defaultTypeFace,
      onChange: function onChange7(tf, state) {
        state.font = new THREE$3.Font(tf);
      }
    },
    labelColor: {
      "default": function _default22() {
        return "lightgrey";
      }
    },
    labelRotation: {
      "default": 0
    },
    // clockwise degrees, relative to the latitute parallel plane
    labelResolution: {
      "default": 3
    },
    // how many segments in the text's curves
    labelIncludeDot: {
      "default": true
    },
    labelDotRadius: {
      "default": 0.1
    },
    // in deg
    labelDotOrientation: {
      "default": function _default23() {
        return "bottom";
      }
    },
    // right, top, bottom
    labelsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init12(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    var circleGeometry = new THREE$3.CircleGeometry(1, 32);
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjLabel"
    }).onCreateObj(function() {
      var material = new THREE$3.MeshLambertMaterial();
      material.side = DoubleSide;
      var obj = new THREE$3.Group();
      obj.add(new THREE$3.Mesh(circleGeometry, material));
      var textObj = new THREE$3.Mesh(void 0, material);
      obj.add(textObj);
      var bbObj = new THREE$3.Mesh();
      bbObj.visible = false;
      textObj.add(bbObj);
      obj.__globeObjType = "label";
      return obj;
    });
  },
  update: function update13(state) {
    var latAccessor = index3(state.labelLat);
    var lngAccessor = index3(state.labelLng);
    var altitudeAccessor = index3(state.labelAltitude);
    var textAccessor = index3(state.labelText);
    var sizeAccessor = index3(state.labelSize);
    var rotationAccessor = index3(state.labelRotation);
    var colorAccessor = index3(state.labelColor);
    var includeDotAccessor = index3(state.labelIncludeDot);
    var dotRadiusAccessor = index3(state.labelDotRadius);
    var dotOrientationAccessor = index3(state.labelDotOrientation);
    var orientations = /* @__PURE__ */ new Set(["right", "top", "bottom"]);
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var _obj$children = _slicedToArray9(obj.children, 2), dotObj = _obj$children[0], textObj = _obj$children[1];
      var _textObj$children = _slicedToArray9(textObj.children, 1), bbObj = _textObj$children[0];
      var color4 = colorAccessor(d2);
      var opacity = colorAlpha(color4);
      textObj.material.color.set(colorStr2Hex(color4));
      textObj.material.transparent = opacity < 1;
      textObj.material.opacity = opacity;
      var includeDot = includeDotAccessor(d2);
      var dotOrient = dotOrientationAccessor(d2);
      !includeDot || !orientations.has(dotOrient) && (dotOrient = "bottom");
      var dotR = includeDot ? +dotRadiusAccessor(d2) * pxPerDeg : 1e-12;
      dotObj.scale.x = dotObj.scale.y = dotR;
      var textHeight = +sizeAccessor(d2) * pxPerDeg;
      textObj.geometry && textObj.geometry.dispose();
      textObj.geometry = new THREE$3.TextGeometry(textAccessor(d2), {
        font: state.font,
        size: textHeight,
        depth: 0,
        bevelEnabled: true,
        bevelThickness: 0,
        bevelSize: 0,
        curveSegments: state.labelResolution
      });
      bbObj.geometry && bbObj.geometry.dispose();
      textObj.geometry.computeBoundingBox();
      bbObj.geometry = _construct(THREE$3.BoxGeometry, _toConsumableArray8(new THREE$3.Vector3().subVectors(textObj.geometry.boundingBox.max, textObj.geometry.boundingBox.min).clampScalar(0, Infinity).toArray()));
      dotOrient !== "right" && textObj.geometry.center();
      if (includeDot) {
        var padding = dotR + textHeight / 2;
        dotOrient === "right" && (textObj.position.x = padding);
        textObj.position.y = {
          right: -textHeight / 2,
          // center vertically
          top: padding + textHeight / 2,
          bottom: -padding - textHeight / 2
        }[dotOrient];
      }
      var applyPosition = function applyPosition2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, rot = _obj$__currentTargetD.rot, scale2 = _obj$__currentTargetD.scale;
        Object.assign(obj.position, polar2Cartesian4(lat, lng, alt));
        obj.lookAt(state.scene.localToWorld(new THREE$3.Vector3(0, 0, 0)));
        obj.rotateY(Math.PI);
        obj.rotateZ(-rot * Math.PI / 180);
        obj.scale.x = obj.scale.y = obj.scale.z = scale2;
      };
      var targetD = {
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2),
        alt: +altitudeAccessor(d2),
        rot: +rotationAccessor(d2),
        scale: 1
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        scale: 1e-12
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.labelsTransitionDuration || state.labelsTransitionDuration < 0) {
          applyPosition(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.labelsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyPosition).start());
        }
      }
    }).digest(state.labelsData);
  }
});
var THREE$2 = _objectSpread2(_objectSpread2({}, window.THREE ? window.THREE : {}), {}, {
  CSS2DObject
});
var HtmlElementsLayerKapsule = index2({
  props: {
    htmlElementsData: {
      "default": []
    },
    htmlLat: {
      "default": "lat"
    },
    htmlLng: {
      "default": "lng"
    },
    htmlAltitude: {
      "default": 0
    },
    // in units of globe radius
    htmlElement: {},
    htmlElementVisibilityModifier: {
      triggerUpdate: false
    },
    htmlTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    },
    // ms
    isBehindGlobe: {
      onChange: function onChange8() {
        this.updateObjVisibility();
      },
      triggerUpdate: false
    }
  },
  methods: {
    updateObjVisibility: function updateObjVisibility(state, obj) {
      if (!state.dataMapper)
        return;
      var objs = obj ? [obj] : state.dataMapper.entries().map(function(_ref) {
        var _ref2 = _slicedToArray9(_ref, 2), o2 = _ref2[1];
        return o2;
      }).filter(function(d2) {
        return d2;
      });
      objs.forEach(function(obj2) {
        var isVisible = !state.isBehindGlobe || !state.isBehindGlobe(obj2.position);
        if (state.htmlElementVisibilityModifier) {
          obj2.visible = true;
          state.htmlElementVisibilityModifier(obj2.element, isVisible);
        } else {
          obj2.visible = isVisible;
        }
      });
    }
  },
  init: function init13(threeObj, state, _ref3) {
    var tweenGroup = _ref3.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHtml"
    }).onCreateObj(function(d2) {
      var elem = index3(state.htmlElement)(d2);
      var obj = new THREE$2.CSS2DObject(elem);
      obj.__globeObjType = "html";
      return obj;
    });
  },
  update: function update14(state, changedProps) {
    var _this = this;
    var latAccessor = index3(state.htmlLat);
    var lngAccessor = index3(state.htmlLng);
    var altitudeAccessor = index3(state.htmlAltitude);
    changedProps.hasOwnProperty("htmlElement") && state.dataMapper.clear();
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;
        Object.assign(obj.position, polar2Cartesian4(lat, lng, alt));
        _this.updateObjVisibility(obj);
      };
      var targetD = {
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2),
        alt: +altitudeAccessor(d2)
      };
      if (!state.htmlTransitionDuration || state.htmlTransitionDuration < 0 || !obj.__currentTargetD) {
        applyUpdate(targetD);
      } else {
        state.tweenGroup.add(new Tween(obj.__currentTargetD).to(targetD, state.htmlTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
      }
    }).digest(state.htmlElementsData);
  }
});
var THREE$1 = window.THREE ? window.THREE : {
  Group,
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var ObjectsLayerKapsule = index2({
  props: {
    objectsData: {
      "default": []
    },
    objectLat: {
      "default": "lat"
    },
    objectLng: {
      "default": "lng"
    },
    objectAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    objectFacesSurface: {
      "default": true
    },
    objectRotation: {},
    objectThreeObject: {
      "default": new THREE$1.Mesh(
        // default object: yellow sphere
        new THREE$1.SphereGeometry(1, 16, 8),
        new THREE$1.MeshLambertMaterial({
          color: "#ffffaa",
          transparent: true,
          opacity: 0.7
        })
      )
    }
  },
  init: function init14(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjObject"
    }).onCreateObj(function(d2) {
      var obj = index3(state.objectThreeObject)(d2);
      if (state.objectThreeObject === obj) {
        obj = obj.clone();
      }
      var g2 = new THREE$1.Group();
      g2.add(obj);
      g2.__globeObjType = "object";
      return g2;
    });
  },
  update: function update15(state, changedProps) {
    var latAccessor = index3(state.objectLat);
    var lngAccessor = index3(state.objectLng);
    var altitudeAccessor = index3(state.objectAltitude);
    var parallelAccessor = index3(state.objectFacesSurface);
    var rotationAccessor = index3(state.objectRotation);
    changedProps.hasOwnProperty("objectThreeObject") && state.dataMapper.clear();
    state.dataMapper.onUpdateObj(function(objG, d2) {
      var lat = +latAccessor(d2);
      var lng = +lngAccessor(d2);
      var alt = +altitudeAccessor(d2);
      Object.assign(objG.position, polar2Cartesian4(lat, lng, alt));
      parallelAccessor(d2) ? objG.setRotationFromEuler(new Euler(deg2Rad$1(-lat), deg2Rad$1(lng), 0, "YXZ")) : objG.rotation.set(0, 0, 0);
      var obj = objG.children[0];
      var rot = rotationAccessor(d2);
      rot && obj.setRotationFromEuler(new Euler(deg2Rad$1(rot.x || 0), deg2Rad$1(rot.y || 0), deg2Rad$1(rot.z || 0)));
    }).digest(state.objectsData);
  }
});
var CustomLayerKapsule = index2({
  props: {
    customLayerData: {
      "default": []
    },
    customThreeObject: {},
    customThreeObjectUpdate: {
      triggerUpdate: false
    }
  },
  init: function init15(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjCustom"
    }).onCreateObj(function(d2) {
      var obj = index3(state.customThreeObject)(d2, GLOBE_RADIUS);
      if (obj) {
        if (state.customThreeObject === obj) {
          obj = obj.clone();
        }
        obj.__globeObjType = "custom";
      }
      return obj;
    });
  },
  update: function update16(state, changedProps) {
    if (!state.customThreeObjectUpdate) {
      emptyObject3(state.scene);
    }
    var customObjectUpdateAccessor = index3(state.customThreeObjectUpdate);
    changedProps.hasOwnProperty("customThreeObject") && state.dataMapper.clear();
    state.dataMapper.onUpdateObj(function(obj, d2) {
      return customObjectUpdateAccessor(obj, d2, GLOBE_RADIUS);
    }).digest(state.customLayerData);
  }
});
var THREE3 = window.THREE ? window.THREE : {
  Camera,
  Group,
  Vector2,
  Vector3
};
var layers = ["globeLayer", "pointsLayer", "arcsLayer", "hexBinLayer", "heatmapsLayer", "polygonsLayer", "hexedPolygonsLayer", "pathsLayer", "tilesLayer", "particlesLayer", "ringsLayer", "labelsLayer", "htmlElementsLayer", "objectsLayer", "customLayer"];
var bindGlobeLayer = linkKapsule("globeLayer", GlobeLayerKapsule);
var linkedGlobeLayerProps = Object.assign.apply(Object, _toConsumableArray8(["globeImageUrl", "bumpImageUrl", "globeCurvatureResolution", "globeTileEngineUrl", "globeTileEngineMaxLevel", "showGlobe", "showGraticules", "showAtmosphere", "atmosphereColor", "atmosphereAltitude"].map(function(p2) {
  return _defineProperty3({}, p2, bindGlobeLayer.linkProp(p2));
})));
var linkedGlobeLayerMethods = Object.assign.apply(Object, _toConsumableArray8(["globeMaterial"].map(function(p2) {
  return _defineProperty3({}, p2, bindGlobeLayer.linkMethod(p2));
})));
var bindPointsLayer = linkKapsule("pointsLayer", PointsLayerKapsule);
var linkedPointsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["pointsData", "pointLat", "pointLng", "pointColor", "pointAltitude", "pointRadius", "pointResolution", "pointsMerge", "pointsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindPointsLayer.linkProp(p2));
})));
var bindArcsLayer = linkKapsule("arcsLayer", ArcsLayerKapsule);
var linkedArcsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["arcsData", "arcStartLat", "arcStartLng", "arcStartAltitude", "arcEndLat", "arcEndLng", "arcEndAltitude", "arcColor", "arcAltitude", "arcAltitudeAutoScale", "arcStroke", "arcCurveResolution", "arcCircularResolution", "arcDashLength", "arcDashGap", "arcDashInitialGap", "arcDashAnimateTime", "arcsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindArcsLayer.linkProp(p2));
})));
var bindHexBinLayer = linkKapsule("hexBinLayer", HexBinLayerKapsule);
var linkedHexBinLayerProps = Object.assign.apply(Object, _toConsumableArray8(["hexBinPointsData", "hexBinPointLat", "hexBinPointLng", "hexBinPointWeight", "hexBinResolution", "hexMargin", "hexTopCurvatureResolution", "hexTopColor", "hexSideColor", "hexAltitude", "hexBinMerge", "hexTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHexBinLayer.linkProp(p2));
})));
var bindHeatmapsLayer = linkKapsule("heatmapsLayer", HeatmapsLayerKapsule);
var linkedHeatmapsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["heatmapsData", "heatmapPoints", "heatmapPointLat", "heatmapPointLng", "heatmapPointWeight", "heatmapBandwidth", "heatmapColorFn", "heatmapColorSaturation", "heatmapBaseAltitude", "heatmapTopAltitude", "heatmapsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHeatmapsLayer.linkProp(p2));
})));
var bindHexedPolygonsLayer = linkKapsule("hexedPolygonsLayer", HexedPolygonsLayerKapsule);
var linkedHexedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["hexPolygonsData", "hexPolygonGeoJsonGeometry", "hexPolygonColor", "hexPolygonAltitude", "hexPolygonResolution", "hexPolygonMargin", "hexPolygonUseDots", "hexPolygonCurvatureResolution", "hexPolygonDotResolution", "hexPolygonsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHexedPolygonsLayer.linkProp(p2));
})));
var bindPolygonsLayer = linkKapsule("polygonsLayer", PolygonsLayerKapsule);
var linkedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["polygonsData", "polygonGeoJsonGeometry", "polygonCapColor", "polygonCapMaterial", "polygonSideColor", "polygonSideMaterial", "polygonStrokeColor", "polygonAltitude", "polygonCapCurvatureResolution", "polygonsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindPolygonsLayer.linkProp(p2));
})));
var bindPathsLayer = linkKapsule("pathsLayer", PathsLayerKapsule);
var linkedPathsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["pathsData", "pathPoints", "pathPointLat", "pathPointLng", "pathPointAlt", "pathResolution", "pathColor", "pathStroke", "pathDashLength", "pathDashGap", "pathDashInitialGap", "pathDashAnimateTime", "pathTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindPathsLayer.linkProp(p2));
})));
var bindTilesLayer = linkKapsule("tilesLayer", TilesLayerKapsule);
var linkedTilesLayerProps = Object.assign.apply(Object, _toConsumableArray8(["tilesData", "tileLat", "tileLng", "tileAltitude", "tileWidth", "tileHeight", "tileUseGlobeProjection", "tileMaterial", "tileCurvatureResolution", "tilesTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindTilesLayer.linkProp(p2));
})));
var bindParticlesLayer = linkKapsule("particlesLayer", ParticlesLayerKapsule);
var linkedParticlesLayerProps = Object.assign.apply(Object, _toConsumableArray8(["particlesData", "particlesList", "particleLat", "particleLng", "particleAltitude", "particlesSize", "particlesSizeAttenuation", "particlesColor", "particlesTexture"].map(function(p2) {
  return _defineProperty3({}, p2, bindParticlesLayer.linkProp(p2));
})));
var bindRingsLayer = linkKapsule("ringsLayer", RingsLayerKapsule);
var linkedRingsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["ringsData", "ringLat", "ringLng", "ringAltitude", "ringColor", "ringResolution", "ringMaxRadius", "ringPropagationSpeed", "ringRepeatPeriod"].map(function(p2) {
  return _defineProperty3({}, p2, bindRingsLayer.linkProp(p2));
})));
var bindLabelsLayer = linkKapsule("labelsLayer", LabelsLayerKapsule);
var linkedLabelsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["labelsData", "labelLat", "labelLng", "labelAltitude", "labelRotation", "labelText", "labelSize", "labelTypeFace", "labelColor", "labelResolution", "labelIncludeDot", "labelDotRadius", "labelDotOrientation", "labelsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindLabelsLayer.linkProp(p2));
})));
var bindHtmlElementsLayer = linkKapsule("htmlElementsLayer", HtmlElementsLayerKapsule);
var linkedHtmlElementsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["htmlElementsData", "htmlLat", "htmlLng", "htmlAltitude", "htmlElement", "htmlElementVisibilityModifier", "htmlTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHtmlElementsLayer.linkProp(p2));
})));
var bindObjectsLayer = linkKapsule("objectsLayer", ObjectsLayerKapsule);
var linkedObjectsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["objectsData", "objectLat", "objectLng", "objectAltitude", "objectRotation", "objectFacesSurface", "objectThreeObject"].map(function(p2) {
  return _defineProperty3({}, p2, bindObjectsLayer.linkProp(p2));
})));
var bindCustomLayer = linkKapsule("customLayer", CustomLayerKapsule);
var linkedCustomLayerProps = Object.assign.apply(Object, _toConsumableArray8(["customLayerData", "customThreeObject", "customThreeObjectUpdate"].map(function(p2) {
  return _defineProperty3({}, p2, bindCustomLayer.linkProp(p2));
})));
var Globe = index2({
  props: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({
    onGlobeReady: {
      triggerUpdate: false
    },
    rendererSize: {
      "default": new THREE3.Vector2(window.innerWidth, window.innerHeight),
      onChange: function onChange9(rendererSize, state) {
        state.pathsLayer.rendererSize(rendererSize);
      },
      triggerUpdate: false
    }
  }, linkedGlobeLayerProps), linkedPointsLayerProps), linkedArcsLayerProps), linkedHexBinLayerProps), linkedHeatmapsLayerProps), linkedPolygonsLayerProps), linkedHexedPolygonsLayerProps), linkedPathsLayerProps), linkedTilesLayerProps), linkedParticlesLayerProps), linkedRingsLayerProps), linkedLabelsLayerProps), linkedHtmlElementsLayerProps), linkedObjectsLayerProps), linkedCustomLayerProps),
  methods: _objectSpread2({
    getGlobeRadius,
    getCoords: function getCoords(state) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return polar2Cartesian4.apply(void 0, args);
    },
    toGeoCoords: function toGeoCoords(state) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return cartesian2Polar2.apply(void 0, args);
    },
    setPointOfView: function setPointOfView(state, camera3) {
      var globalPov = camera3 instanceof THREE3.Camera ? camera3.position : camera3;
      var globeRadius = getGlobeRadius();
      var isBehindGlobe = void 0;
      if (state.scene && globalPov) {
        var pov, povDist, povEdgeDist, povEdgeAngle;
        isBehindGlobe = function isBehindGlobe2(pos) {
          pov === void 0 && (pov = globalPov.clone().applyMatrix4(state.scene.matrixWorld.clone().invert()));
          povDist === void 0 && (povDist = pov.length());
          povEdgeDist === void 0 && (povEdgeDist = Math.sqrt(Math.pow(povDist, 2) - Math.pow(globeRadius, 2)));
          povEdgeAngle === void 0 && (povEdgeAngle = Math.acos(povEdgeDist / povDist));
          var povPosDist = pov.distanceTo(pos);
          if (povPosDist < povEdgeDist)
            return false;
          var posDist = pos.length();
          var povPosAngle = Math.acos((Math.pow(povDist, 2) + Math.pow(povPosDist, 2) - Math.pow(posDist, 2)) / (2 * povDist * povPosDist));
          return povPosAngle < povEdgeAngle;
        };
      }
      state.layersThatNeedUpdatePov.forEach(function(l2) {
        return l2.updatePov(camera3);
      });
      state.layersThatNeedBehindGlobeChecker.forEach(function(l2) {
        return l2.isBehindGlobe(isBehindGlobe);
      });
    },
    pauseAnimation: function pauseAnimation4(state) {
      if (state.animationFrameRequestId !== null) {
        cancelAnimationFrame(state.animationFrameRequestId);
        state.animationFrameRequestId = null;
      }
      state.pausableLayers.forEach(function(l2) {
        var _l$pauseAnimation;
        return (_l$pauseAnimation = l2.pauseAnimation) === null || _l$pauseAnimation === void 0 ? void 0 : _l$pauseAnimation.call(l2);
      });
      return this;
    },
    resumeAnimation: function resumeAnimation4(state) {
      if (state.animationFrameRequestId === null) {
        this._animationCycle();
      }
      state.pausableLayers.forEach(function(l2) {
        var _l$resumeAnimation;
        return (_l$resumeAnimation = l2.resumeAnimation) === null || _l$resumeAnimation === void 0 ? void 0 : _l$resumeAnimation.call(l2);
      });
      return this;
    },
    _animationCycle: function _animationCycle(state) {
      state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);
      state.tweenGroup.update();
    },
    _destructor: function _destructor5(state) {
      this.pauseAnimation();
      state.destructableLayers.forEach(function(l2) {
        return l2._destructor();
      });
    }
  }, linkedGlobeLayerMethods),
  stateInit: function stateInit4() {
    var tweenGroup = new Group2();
    var initProps = {
      tweenGroup
    };
    var layers2 = {
      globeLayer: GlobeLayerKapsule(initProps),
      pointsLayer: PointsLayerKapsule(initProps),
      arcsLayer: ArcsLayerKapsule(initProps),
      hexBinLayer: HexBinLayerKapsule(initProps),
      heatmapsLayer: HeatmapsLayerKapsule(initProps),
      polygonsLayer: PolygonsLayerKapsule(initProps),
      hexedPolygonsLayer: HexedPolygonsLayerKapsule(initProps),
      pathsLayer: PathsLayerKapsule(initProps),
      tilesLayer: TilesLayerKapsule(initProps),
      particlesLayer: ParticlesLayerKapsule(initProps),
      ringsLayer: RingsLayerKapsule(initProps),
      labelsLayer: LabelsLayerKapsule(initProps),
      htmlElementsLayer: HtmlElementsLayerKapsule(initProps),
      objectsLayer: ObjectsLayerKapsule(initProps),
      customLayer: CustomLayerKapsule(initProps)
    };
    return _objectSpread2(_objectSpread2({
      tweenGroup
    }, layers2), {}, {
      layersThatNeedUpdatePov: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("updatePov");
      }),
      layersThatNeedBehindGlobeChecker: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("isBehindGlobe");
      }),
      destructableLayers: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("_destructor");
      }),
      pausableLayers: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("pauseAnimation");
      })
    });
  },
  init: function init16(threeObj, state, _ref15) {
    var _ref15$animateIn = _ref15.animateIn, animateIn = _ref15$animateIn === void 0 ? true : _ref15$animateIn, _ref15$waitForGlobeRe = _ref15.waitForGlobeReady, waitForGlobeReady = _ref15$waitForGlobeRe === void 0 ? true : _ref15$waitForGlobeRe;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.scene.visible = false;
    layers.forEach(function(layer) {
      var g2 = new THREE3.Group();
      state.scene.add(g2);
      state[layer](g2);
    });
    var initGlobe = function initGlobe2() {
      if (animateIn) {
        state.scene.scale.set(1e-6, 1e-6, 1e-6);
        state.tweenGroup.add(new Tween({
          k: 1e-6
        }).to({
          k: 1
        }, 600).easing(Easing.Quadratic.Out).onUpdate(function(_ref16) {
          var k2 = _ref16.k;
          return state.scene.scale.set(k2, k2, k2);
        }).start());
        var rotAxis = new THREE3.Vector3(0, 1, 0);
        state.tweenGroup.add(new Tween({
          rot: Math.PI * 2
        }).to({
          rot: 0
        }, 1200).easing(Easing.Quintic.Out).onUpdate(function(_ref17) {
          var rot = _ref17.rot;
          return state.scene.setRotationFromAxisAngle(rotAxis, rot);
        }).start());
      }
      state.scene.visible = true;
      state.onGlobeReady && state.onGlobeReady();
    };
    waitForGlobeReady ? state.globeLayer.onReady(initGlobe) : initGlobe();
    this._animationCycle();
  },
  update: function update17(state) {
  }
});
function fromKapsule(kapsule) {
  var baseClass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Object;
  var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var Globe3 = function(_baseClass) {
    function Globe4() {
      var _this;
      _classCallCheck6(this, Globe4);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper4(this, Globe4, [].concat(args));
      _this.__kapsuleInstance = _construct(kapsule, [].concat(_toConsumableArray8(initKapsuleWithSelf ? [_this] : []), args));
      return _this;
    }
    _inherits4(Globe4, _baseClass);
    return _createClass6(Globe4);
  }(baseClass);
  Object.keys(kapsule()).forEach(function(m2) {
    return Globe3.prototype[m2] = function() {
      var _this$__kapsuleInstan;
      var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m2].apply(_this$__kapsuleInstan, arguments);
      return returnVal === this.__kapsuleInstance ? this : returnVal;
    };
  });
  return Globe3;
}
var three = window.THREE ? window.THREE : {
  Group
};
var threeGlobe = fromKapsule(Globe, three.Group, true);

// node_modules/three/examples/jsm/controls/TrackballControls.js
var _changeEvent = { type: "change" };
var _startEvent = { type: "start" };
var _endEvent = { type: "end" };
var _EPS = 1e-6;
var _STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };
var _v2 = new Vector2();
var _mouseChange = new Vector2();
var _objectUp = new Vector3();
var _pan = new Vector3();
var _axis = new Vector3();
var _quaternion = new Quaternion();
var _eyeDirection = new Vector3();
var _objectUpDirection = new Vector3();
var _objectSidewaysDirection = new Vector3();
var _moveDirection = new Vector3();
var TrackballControls = class extends Controls {
  /**
   * Constructs a new controls instance.
   *
   * @param {Object3D} object - The object that is managed by the controls.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(object, domElement = null) {
    super(object, domElement);
    this.screen = { left: 0, top: 0, width: 0, height: 0 };
    this.rotateSpeed = 1;
    this.zoomSpeed = 1.2;
    this.panSpeed = 0.3;
    this.noRotate = false;
    this.noZoom = false;
    this.noPan = false;
    this.staticMoving = false;
    this.dynamicDampingFactor = 0.2;
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.keys = [
      "KeyA",
      "KeyS",
      "KeyD"
      /*D*/
    ];
    this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
    this.target = new Vector3();
    this.state = _STATE.NONE;
    this.keyState = _STATE.NONE;
    this._lastPosition = new Vector3();
    this._lastZoom = 1;
    this._touchZoomDistanceStart = 0;
    this._touchZoomDistanceEnd = 0;
    this._lastAngle = 0;
    this._eye = new Vector3();
    this._movePrev = new Vector2();
    this._moveCurr = new Vector2();
    this._lastAxis = new Vector3();
    this._zoomStart = new Vector2();
    this._zoomEnd = new Vector2();
    this._panStart = new Vector2();
    this._panEnd = new Vector2();
    this._pointers = [];
    this._pointerPositions = {};
    this._onPointerMove = onPointerMove.bind(this);
    this._onPointerDown = onPointerDown.bind(this);
    this._onPointerUp = onPointerUp.bind(this);
    this._onPointerCancel = onPointerCancel.bind(this);
    this._onContextMenu = onContextMenu.bind(this);
    this._onMouseWheel = onMouseWheel.bind(this);
    this._onKeyDown = onKeyDown.bind(this);
    this._onKeyUp = onKeyUp.bind(this);
    this._onTouchStart = onTouchStart.bind(this);
    this._onTouchMove = onTouchMove.bind(this);
    this._onTouchEnd = onTouchEnd.bind(this);
    this._onMouseDown = onMouseDown.bind(this);
    this._onMouseMove = onMouseMove.bind(this);
    this._onMouseUp = onMouseUp.bind(this);
    this._target0 = this.target.clone();
    this._position0 = this.object.position.clone();
    this._up0 = this.object.up.clone();
    this._zoom0 = this.object.zoom;
    if (domElement !== null) {
      this.connect(domElement);
      this.handleResize();
    }
    this.update();
  }
  connect(element3) {
    super.connect(element3);
    window.addEventListener("keydown", this._onKeyDown);
    window.addEventListener("keyup", this._onKeyUp);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointercancel", this._onPointerCancel);
    this.domElement.addEventListener("wheel", this._onMouseWheel, { passive: false });
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
    this.domElement.style.touchAction = "none";
  }
  disconnect() {
    window.removeEventListener("keydown", this._onKeyDown);
    window.removeEventListener("keyup", this._onKeyUp);
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerCancel);
    this.domElement.removeEventListener("wheel", this._onMouseWheel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
    this.domElement.style.touchAction = "auto";
  }
  dispose() {
    this.disconnect();
  }
  /**
   * Must be called if the application window is resized.
   */
  handleResize() {
    const box = this.domElement.getBoundingClientRect();
    const d2 = this.domElement.ownerDocument.documentElement;
    this.screen.left = box.left + window.pageXOffset - d2.clientLeft;
    this.screen.top = box.top + window.pageYOffset - d2.clientTop;
    this.screen.width = box.width;
    this.screen.height = box.height;
  }
  update() {
    this._eye.subVectors(this.object.position, this.target);
    if (!this.noRotate) {
      this._rotateCamera();
    }
    if (!this.noZoom) {
      this._zoomCamera();
    }
    if (!this.noPan) {
      this._panCamera();
    }
    this.object.position.addVectors(this.target, this._eye);
    if (this.object.isPerspectiveCamera) {
      this._checkDistances();
      this.object.lookAt(this.target);
      if (this._lastPosition.distanceToSquared(this.object.position) > _EPS) {
        this.dispatchEvent(_changeEvent);
        this._lastPosition.copy(this.object.position);
      }
    } else if (this.object.isOrthographicCamera) {
      this.object.lookAt(this.target);
      if (this._lastPosition.distanceToSquared(this.object.position) > _EPS || this._lastZoom !== this.object.zoom) {
        this.dispatchEvent(_changeEvent);
        this._lastPosition.copy(this.object.position);
        this._lastZoom = this.object.zoom;
      }
    } else {
      console.warn("THREE.TrackballControls: Unsupported camera type.");
    }
  }
  /**
   * Resets the controls to its initial state.
   */
  reset() {
    this.state = _STATE.NONE;
    this.keyState = _STATE.NONE;
    this.target.copy(this._target0);
    this.object.position.copy(this._position0);
    this.object.up.copy(this._up0);
    this.object.zoom = this._zoom0;
    this.object.updateProjectionMatrix();
    this._eye.subVectors(this.object.position, this.target);
    this.object.lookAt(this.target);
    this.dispatchEvent(_changeEvent);
    this._lastPosition.copy(this.object.position);
    this._lastZoom = this.object.zoom;
  }
  _panCamera() {
    _mouseChange.copy(this._panEnd).sub(this._panStart);
    if (_mouseChange.lengthSq()) {
      if (this.object.isOrthographicCamera) {
        const scale_x = (this.object.right - this.object.left) / this.object.zoom / this.domElement.clientWidth;
        const scale_y = (this.object.top - this.object.bottom) / this.object.zoom / this.domElement.clientWidth;
        _mouseChange.x *= scale_x;
        _mouseChange.y *= scale_y;
      }
      _mouseChange.multiplyScalar(this._eye.length() * this.panSpeed);
      _pan.copy(this._eye).cross(this.object.up).setLength(_mouseChange.x);
      _pan.add(_objectUp.copy(this.object.up).setLength(_mouseChange.y));
      this.object.position.add(_pan);
      this.target.add(_pan);
      if (this.staticMoving) {
        this._panStart.copy(this._panEnd);
      } else {
        this._panStart.add(_mouseChange.subVectors(this._panEnd, this._panStart).multiplyScalar(this.dynamicDampingFactor));
      }
    }
  }
  _rotateCamera() {
    _moveDirection.set(this._moveCurr.x - this._movePrev.x, this._moveCurr.y - this._movePrev.y, 0);
    let angle = _moveDirection.length();
    if (angle) {
      this._eye.copy(this.object.position).sub(this.target);
      _eyeDirection.copy(this._eye).normalize();
      _objectUpDirection.copy(this.object.up).normalize();
      _objectSidewaysDirection.crossVectors(_objectUpDirection, _eyeDirection).normalize();
      _objectUpDirection.setLength(this._moveCurr.y - this._movePrev.y);
      _objectSidewaysDirection.setLength(this._moveCurr.x - this._movePrev.x);
      _moveDirection.copy(_objectUpDirection.add(_objectSidewaysDirection));
      _axis.crossVectors(_moveDirection, this._eye).normalize();
      angle *= this.rotateSpeed;
      _quaternion.setFromAxisAngle(_axis, angle);
      this._eye.applyQuaternion(_quaternion);
      this.object.up.applyQuaternion(_quaternion);
      this._lastAxis.copy(_axis);
      this._lastAngle = angle;
    } else if (!this.staticMoving && this._lastAngle) {
      this._lastAngle *= Math.sqrt(1 - this.dynamicDampingFactor);
      this._eye.copy(this.object.position).sub(this.target);
      _quaternion.setFromAxisAngle(this._lastAxis, this._lastAngle);
      this._eye.applyQuaternion(_quaternion);
      this.object.up.applyQuaternion(_quaternion);
    }
    this._movePrev.copy(this._moveCurr);
  }
  _zoomCamera() {
    let factor;
    if (this.state === _STATE.TOUCH_ZOOM_PAN) {
      factor = this._touchZoomDistanceStart / this._touchZoomDistanceEnd;
      this._touchZoomDistanceStart = this._touchZoomDistanceEnd;
      if (this.object.isPerspectiveCamera) {
        this._eye.multiplyScalar(factor);
      } else if (this.object.isOrthographicCamera) {
        this.object.zoom = MathUtils.clamp(this.object.zoom / factor, this.minZoom, this.maxZoom);
        if (this._lastZoom !== this.object.zoom) {
          this.object.updateProjectionMatrix();
        }
      } else {
        console.warn("THREE.TrackballControls: Unsupported camera type");
      }
    } else {
      factor = 1 + (this._zoomEnd.y - this._zoomStart.y) * this.zoomSpeed;
      if (factor !== 1 && factor > 0) {
        if (this.object.isPerspectiveCamera) {
          this._eye.multiplyScalar(factor);
        } else if (this.object.isOrthographicCamera) {
          this.object.zoom = MathUtils.clamp(this.object.zoom / factor, this.minZoom, this.maxZoom);
          if (this._lastZoom !== this.object.zoom) {
            this.object.updateProjectionMatrix();
          }
        } else {
          console.warn("THREE.TrackballControls: Unsupported camera type");
        }
      }
      if (this.staticMoving) {
        this._zoomStart.copy(this._zoomEnd);
      } else {
        this._zoomStart.y += (this._zoomEnd.y - this._zoomStart.y) * this.dynamicDampingFactor;
      }
    }
  }
  _getMouseOnScreen(pageX, pageY) {
    _v2.set(
      (pageX - this.screen.left) / this.screen.width,
      (pageY - this.screen.top) / this.screen.height
    );
    return _v2;
  }
  _getMouseOnCircle(pageX, pageY) {
    _v2.set(
      (pageX - this.screen.width * 0.5 - this.screen.left) / (this.screen.width * 0.5),
      (this.screen.height + 2 * (this.screen.top - pageY)) / this.screen.width
      // screen.width intentional
    );
    return _v2;
  }
  _addPointer(event) {
    this._pointers.push(event);
  }
  _removePointer(event) {
    delete this._pointerPositions[event.pointerId];
    for (let i2 = 0; i2 < this._pointers.length; i2++) {
      if (this._pointers[i2].pointerId == event.pointerId) {
        this._pointers.splice(i2, 1);
        return;
      }
    }
  }
  _trackPointer(event) {
    let position = this._pointerPositions[event.pointerId];
    if (position === void 0) {
      position = new Vector2();
      this._pointerPositions[event.pointerId] = position;
    }
    position.set(event.pageX, event.pageY);
  }
  _getSecondPointerPosition(event) {
    const pointer = event.pointerId === this._pointers[0].pointerId ? this._pointers[1] : this._pointers[0];
    return this._pointerPositions[pointer.pointerId];
  }
  _checkDistances() {
    if (!this.noZoom || !this.noPan) {
      if (this._eye.lengthSq() > this.maxDistance * this.maxDistance) {
        this.object.position.addVectors(this.target, this._eye.setLength(this.maxDistance));
        this._zoomStart.copy(this._zoomEnd);
      }
      if (this._eye.lengthSq() < this.minDistance * this.minDistance) {
        this.object.position.addVectors(this.target, this._eye.setLength(this.minDistance));
        this._zoomStart.copy(this._zoomEnd);
      }
    }
  }
};
function onPointerDown(event) {
  if (this.enabled === false)
    return;
  if (this._pointers.length === 0) {
    this.domElement.setPointerCapture(event.pointerId);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
  }
  this._addPointer(event);
  if (event.pointerType === "touch") {
    this._onTouchStart(event);
  } else {
    this._onMouseDown(event);
  }
}
function onPointerMove(event) {
  if (this.enabled === false)
    return;
  if (event.pointerType === "touch") {
    this._onTouchMove(event);
  } else {
    this._onMouseMove(event);
  }
}
function onPointerUp(event) {
  if (this.enabled === false)
    return;
  if (event.pointerType === "touch") {
    this._onTouchEnd(event);
  } else {
    this._onMouseUp();
  }
  this._removePointer(event);
  if (this._pointers.length === 0) {
    this.domElement.releasePointerCapture(event.pointerId);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
  }
}
function onPointerCancel(event) {
  this._removePointer(event);
}
function onKeyUp() {
  if (this.enabled === false)
    return;
  this.keyState = _STATE.NONE;
  window.addEventListener("keydown", this._onKeyDown);
}
function onKeyDown(event) {
  if (this.enabled === false)
    return;
  window.removeEventListener("keydown", this._onKeyDown);
  if (this.keyState !== _STATE.NONE) {
    return;
  } else if (event.code === this.keys[_STATE.ROTATE] && !this.noRotate) {
    this.keyState = _STATE.ROTATE;
  } else if (event.code === this.keys[_STATE.ZOOM] && !this.noZoom) {
    this.keyState = _STATE.ZOOM;
  } else if (event.code === this.keys[_STATE.PAN] && !this.noPan) {
    this.keyState = _STATE.PAN;
  }
}
function onMouseDown(event) {
  let mouseAction;
  switch (event.button) {
    case 0:
      mouseAction = this.mouseButtons.LEFT;
      break;
    case 1:
      mouseAction = this.mouseButtons.MIDDLE;
      break;
    case 2:
      mouseAction = this.mouseButtons.RIGHT;
      break;
    default:
      mouseAction = -1;
  }
  switch (mouseAction) {
    case MOUSE.DOLLY:
      this.state = _STATE.ZOOM;
      break;
    case MOUSE.ROTATE:
      this.state = _STATE.ROTATE;
      break;
    case MOUSE.PAN:
      this.state = _STATE.PAN;
      break;
    default:
      this.state = _STATE.NONE;
  }
  const state = this.keyState !== _STATE.NONE ? this.keyState : this.state;
  if (state === _STATE.ROTATE && !this.noRotate) {
    this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
    this._movePrev.copy(this._moveCurr);
  } else if (state === _STATE.ZOOM && !this.noZoom) {
    this._zoomStart.copy(this._getMouseOnScreen(event.pageX, event.pageY));
    this._zoomEnd.copy(this._zoomStart);
  } else if (state === _STATE.PAN && !this.noPan) {
    this._panStart.copy(this._getMouseOnScreen(event.pageX, event.pageY));
    this._panEnd.copy(this._panStart);
  }
  this.dispatchEvent(_startEvent);
}
function onMouseMove(event) {
  const state = this.keyState !== _STATE.NONE ? this.keyState : this.state;
  if (state === _STATE.ROTATE && !this.noRotate) {
    this._movePrev.copy(this._moveCurr);
    this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
  } else if (state === _STATE.ZOOM && !this.noZoom) {
    this._zoomEnd.copy(this._getMouseOnScreen(event.pageX, event.pageY));
  } else if (state === _STATE.PAN && !this.noPan) {
    this._panEnd.copy(this._getMouseOnScreen(event.pageX, event.pageY));
  }
}
function onMouseUp() {
  this.state = _STATE.NONE;
  this.dispatchEvent(_endEvent);
}
function onMouseWheel(event) {
  if (this.enabled === false)
    return;
  if (this.noZoom === true)
    return;
  event.preventDefault();
  switch (event.deltaMode) {
    case 2:
      this._zoomStart.y -= event.deltaY * 0.025;
      break;
    case 1:
      this._zoomStart.y -= event.deltaY * 0.01;
      break;
    default:
      this._zoomStart.y -= event.deltaY * 25e-5;
      break;
  }
  this.dispatchEvent(_startEvent);
  this.dispatchEvent(_endEvent);
}
function onContextMenu(event) {
  if (this.enabled === false)
    return;
  event.preventDefault();
}
function onTouchStart(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      this.state = _STATE.TOUCH_ROTATE;
      this._moveCurr.copy(this._getMouseOnCircle(this._pointers[0].pageX, this._pointers[0].pageY));
      this._movePrev.copy(this._moveCurr);
      break;
    default:
      this.state = _STATE.TOUCH_ZOOM_PAN;
      const dx = this._pointers[0].pageX - this._pointers[1].pageX;
      const dy = this._pointers[0].pageY - this._pointers[1].pageY;
      this._touchZoomDistanceEnd = this._touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);
      const x2 = (this._pointers[0].pageX + this._pointers[1].pageX) / 2;
      const y2 = (this._pointers[0].pageY + this._pointers[1].pageY) / 2;
      this._panStart.copy(this._getMouseOnScreen(x2, y2));
      this._panEnd.copy(this._panStart);
      break;
  }
  this.dispatchEvent(_startEvent);
}
function onTouchMove(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      this._movePrev.copy(this._moveCurr);
      this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
      break;
    default:
      const position = this._getSecondPointerPosition(event);
      const dx = event.pageX - position.x;
      const dy = event.pageY - position.y;
      this._touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);
      const x2 = (event.pageX + position.x) / 2;
      const y2 = (event.pageY + position.y) / 2;
      this._panEnd.copy(this._getMouseOnScreen(x2, y2));
      break;
  }
}
function onTouchEnd(event) {
  switch (this._pointers.length) {
    case 0:
      this.state = _STATE.NONE;
      break;
    case 1:
      this.state = _STATE.TOUCH_ROTATE;
      this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
      this._movePrev.copy(this._moveCurr);
      break;
    case 2:
      this.state = _STATE.TOUCH_ZOOM_PAN;
      for (let i2 = 0; i2 < this._pointers.length; i2++) {
        if (this._pointers[i2].pointerId !== event.pointerId) {
          const position = this._pointerPositions[this._pointers[i2].pointerId];
          this._moveCurr.copy(this._getMouseOnCircle(position.x, position.y));
          this._movePrev.copy(this._moveCurr);
          break;
        }
      }
      break;
  }
  this.dispatchEvent(_endEvent);
}

// node_modules/three/examples/jsm/controls/OrbitControls.js
var _changeEvent2 = { type: "change" };
var _startEvent2 = { type: "start" };
var _endEvent2 = { type: "end" };
var _ray2 = new Ray();
var _plane2 = new Plane();
var _TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);
var _v = new Vector3();
var _twoPI = 2 * Math.PI;
var _STATE2 = {
  NONE: -1,
  ROTATE: 0,
  DOLLY: 1,
  PAN: 2,
  TOUCH_ROTATE: 3,
  TOUCH_PAN: 4,
  TOUCH_DOLLY_PAN: 5,
  TOUCH_DOLLY_ROTATE: 6
};
var _EPS2 = 1e-6;
var OrbitControls = class extends Controls {
  /**
   * Constructs a new controls instance.
   *
   * @param {Object3D} object - The object that is managed by the controls.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(object, domElement = null) {
    super(object, domElement);
    this.state = _STATE2.NONE;
    this.target = new Vector3();
    this.cursor = new Vector3();
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.minTargetRadius = 0;
    this.maxTargetRadius = Infinity;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.minAzimuthAngle = -Infinity;
    this.maxAzimuthAngle = Infinity;
    this.enableDamping = false;
    this.dampingFactor = 0.05;
    this.enableZoom = true;
    this.zoomSpeed = 1;
    this.enableRotate = true;
    this.rotateSpeed = 1;
    this.keyRotateSpeed = 1;
    this.enablePan = true;
    this.panSpeed = 1;
    this.screenSpacePanning = true;
    this.keyPanSpeed = 7;
    this.zoomToCursor = false;
    this.autoRotate = false;
    this.autoRotateSpeed = 2;
    this.keys = { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" };
    this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
    this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
    this.target0 = this.target.clone();
    this.position0 = this.object.position.clone();
    this.zoom0 = this.object.zoom;
    this._domElementKeyEvents = null;
    this._lastPosition = new Vector3();
    this._lastQuaternion = new Quaternion();
    this._lastTargetPosition = new Vector3();
    this._quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));
    this._quatInverse = this._quat.clone().invert();
    this._spherical = new Spherical();
    this._sphericalDelta = new Spherical();
    this._scale = 1;
    this._panOffset = new Vector3();
    this._rotateStart = new Vector2();
    this._rotateEnd = new Vector2();
    this._rotateDelta = new Vector2();
    this._panStart = new Vector2();
    this._panEnd = new Vector2();
    this._panDelta = new Vector2();
    this._dollyStart = new Vector2();
    this._dollyEnd = new Vector2();
    this._dollyDelta = new Vector2();
    this._dollyDirection = new Vector3();
    this._mouse = new Vector2();
    this._performCursorZoom = false;
    this._pointers = [];
    this._pointerPositions = {};
    this._controlActive = false;
    this._onPointerMove = onPointerMove2.bind(this);
    this._onPointerDown = onPointerDown2.bind(this);
    this._onPointerUp = onPointerUp2.bind(this);
    this._onContextMenu = onContextMenu2.bind(this);
    this._onMouseWheel = onMouseWheel2.bind(this);
    this._onKeyDown = onKeyDown2.bind(this);
    this._onTouchStart = onTouchStart2.bind(this);
    this._onTouchMove = onTouchMove2.bind(this);
    this._onMouseDown = onMouseDown2.bind(this);
    this._onMouseMove = onMouseMove2.bind(this);
    this._interceptControlDown = interceptControlDown.bind(this);
    this._interceptControlUp = interceptControlUp.bind(this);
    if (this.domElement !== null) {
      this.connect(this.domElement);
    }
    this.update();
  }
  connect(element3) {
    super.connect(element3);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointercancel", this._onPointerUp);
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
    this.domElement.addEventListener("wheel", this._onMouseWheel, { passive: false });
    const document2 = this.domElement.getRootNode();
    document2.addEventListener("keydown", this._interceptControlDown, { passive: true, capture: true });
    this.domElement.style.touchAction = "none";
  }
  disconnect() {
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerUp);
    this.domElement.removeEventListener("wheel", this._onMouseWheel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
    this.stopListenToKeyEvents();
    const document2 = this.domElement.getRootNode();
    document2.removeEventListener("keydown", this._interceptControlDown, { capture: true });
    this.domElement.style.touchAction = "auto";
  }
  dispose() {
    this.disconnect();
  }
  /**
   * Get the current vertical rotation, in radians.
   *
   * @return {number} The current vertical rotation, in radians.
   */
  getPolarAngle() {
    return this._spherical.phi;
  }
  /**
   * Get the current horizontal rotation, in radians.
   *
   * @return {number} The current horizontal rotation, in radians.
   */
  getAzimuthalAngle() {
    return this._spherical.theta;
  }
  /**
   * Returns the distance from the camera to the target.
   *
   * @return {number} The distance from the camera to the target.
   */
  getDistance() {
    return this.object.position.distanceTo(this.target);
  }
  /**
   * Adds key event listeners to the given DOM element.
   * `window` is a recommended argument for using this method.
   *
   * @param {HTMLDOMElement} domElement - The DOM element
   */
  listenToKeyEvents(domElement) {
    domElement.addEventListener("keydown", this._onKeyDown);
    this._domElementKeyEvents = domElement;
  }
  /**
   * Removes the key event listener previously defined with `listenToKeyEvents()`.
   */
  stopListenToKeyEvents() {
    if (this._domElementKeyEvents !== null) {
      this._domElementKeyEvents.removeEventListener("keydown", this._onKeyDown);
      this._domElementKeyEvents = null;
    }
  }
  /**
   * Save the current state of the controls. This can later be recovered with `reset()`.
   */
  saveState() {
    this.target0.copy(this.target);
    this.position0.copy(this.object.position);
    this.zoom0 = this.object.zoom;
  }
  /**
   * Reset the controls to their state from either the last time the `saveState()`
   * was called, or the initial state.
   */
  reset() {
    this.target.copy(this.target0);
    this.object.position.copy(this.position0);
    this.object.zoom = this.zoom0;
    this.object.updateProjectionMatrix();
    this.dispatchEvent(_changeEvent2);
    this.update();
    this.state = _STATE2.NONE;
  }
  update(deltaTime3 = null) {
    const position = this.object.position;
    _v.copy(position).sub(this.target);
    _v.applyQuaternion(this._quat);
    this._spherical.setFromVector3(_v);
    if (this.autoRotate && this.state === _STATE2.NONE) {
      this._rotateLeft(this._getAutoRotationAngle(deltaTime3));
    }
    if (this.enableDamping) {
      this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;
      this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;
    } else {
      this._spherical.theta += this._sphericalDelta.theta;
      this._spherical.phi += this._sphericalDelta.phi;
    }
    let min4 = this.minAzimuthAngle;
    let max5 = this.maxAzimuthAngle;
    if (isFinite(min4) && isFinite(max5)) {
      if (min4 < -Math.PI)
        min4 += _twoPI;
      else if (min4 > Math.PI)
        min4 -= _twoPI;
      if (max5 < -Math.PI)
        max5 += _twoPI;
      else if (max5 > Math.PI)
        max5 -= _twoPI;
      if (min4 <= max5) {
        this._spherical.theta = Math.max(min4, Math.min(max5, this._spherical.theta));
      } else {
        this._spherical.theta = this._spherical.theta > (min4 + max5) / 2 ? Math.max(min4, this._spherical.theta) : Math.min(max5, this._spherical.theta);
      }
    }
    this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));
    this._spherical.makeSafe();
    if (this.enableDamping === true) {
      this.target.addScaledVector(this._panOffset, this.dampingFactor);
    } else {
      this.target.add(this._panOffset);
    }
    this.target.sub(this.cursor);
    this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);
    this.target.add(this.cursor);
    let zoomChanged = false;
    if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {
      this._spherical.radius = this._clampDistance(this._spherical.radius);
    } else {
      const prevRadius = this._spherical.radius;
      this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);
      zoomChanged = prevRadius != this._spherical.radius;
    }
    _v.setFromSpherical(this._spherical);
    _v.applyQuaternion(this._quatInverse);
    position.copy(this.target).add(_v);
    this.object.lookAt(this.target);
    if (this.enableDamping === true) {
      this._sphericalDelta.theta *= 1 - this.dampingFactor;
      this._sphericalDelta.phi *= 1 - this.dampingFactor;
      this._panOffset.multiplyScalar(1 - this.dampingFactor);
    } else {
      this._sphericalDelta.set(0, 0, 0);
      this._panOffset.set(0, 0, 0);
    }
    if (this.zoomToCursor && this._performCursorZoom) {
      let newRadius = null;
      if (this.object.isPerspectiveCamera) {
        const prevRadius = _v.length();
        newRadius = this._clampDistance(prevRadius * this._scale);
        const radiusDelta = prevRadius - newRadius;
        this.object.position.addScaledVector(this._dollyDirection, radiusDelta);
        this.object.updateMatrixWorld();
        zoomChanged = !!radiusDelta;
      } else if (this.object.isOrthographicCamera) {
        const mouseBefore = new Vector3(this._mouse.x, this._mouse.y, 0);
        mouseBefore.unproject(this.object);
        const prevZoom = this.object.zoom;
        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
        this.object.updateProjectionMatrix();
        zoomChanged = prevZoom !== this.object.zoom;
        const mouseAfter = new Vector3(this._mouse.x, this._mouse.y, 0);
        mouseAfter.unproject(this.object);
        this.object.position.sub(mouseAfter).add(mouseBefore);
        this.object.updateMatrixWorld();
        newRadius = _v.length();
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
        this.zoomToCursor = false;
      }
      if (newRadius !== null) {
        if (this.screenSpacePanning) {
          this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);
        } else {
          _ray2.origin.copy(this.object.position);
          _ray2.direction.set(0, 0, -1).transformDirection(this.object.matrix);
          if (Math.abs(this.object.up.dot(_ray2.direction)) < _TILT_LIMIT) {
            this.object.lookAt(this.target);
          } else {
            _plane2.setFromNormalAndCoplanarPoint(this.object.up, this.target);
            _ray2.intersectPlane(_plane2, this.target);
          }
        }
      }
    } else if (this.object.isOrthographicCamera) {
      const prevZoom = this.object.zoom;
      this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
      if (prevZoom !== this.object.zoom) {
        this.object.updateProjectionMatrix();
        zoomChanged = true;
      }
    }
    this._scale = 1;
    this._performCursorZoom = false;
    if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS2 || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS2 || this._lastTargetPosition.distanceToSquared(this.target) > _EPS2) {
      this.dispatchEvent(_changeEvent2);
      this._lastPosition.copy(this.object.position);
      this._lastQuaternion.copy(this.object.quaternion);
      this._lastTargetPosition.copy(this.target);
      return true;
    }
    return false;
  }
  _getAutoRotationAngle(deltaTime3) {
    if (deltaTime3 !== null) {
      return _twoPI / 60 * this.autoRotateSpeed * deltaTime3;
    } else {
      return _twoPI / 60 / 60 * this.autoRotateSpeed;
    }
  }
  _getZoomScale(delta) {
    const normalizedDelta = Math.abs(delta * 0.01);
    return Math.pow(0.95, this.zoomSpeed * normalizedDelta);
  }
  _rotateLeft(angle) {
    this._sphericalDelta.theta -= angle;
  }
  _rotateUp(angle) {
    this._sphericalDelta.phi -= angle;
  }
  _panLeft(distance4, objectMatrix) {
    _v.setFromMatrixColumn(objectMatrix, 0);
    _v.multiplyScalar(-distance4);
    this._panOffset.add(_v);
  }
  _panUp(distance4, objectMatrix) {
    if (this.screenSpacePanning === true) {
      _v.setFromMatrixColumn(objectMatrix, 1);
    } else {
      _v.setFromMatrixColumn(objectMatrix, 0);
      _v.crossVectors(this.object.up, _v);
    }
    _v.multiplyScalar(distance4);
    this._panOffset.add(_v);
  }
  // deltaX and deltaY are in pixels; right and down are positive
  _pan(deltaX, deltaY) {
    const element3 = this.domElement;
    if (this.object.isPerspectiveCamera) {
      const position = this.object.position;
      _v.copy(position).sub(this.target);
      let targetDistance = _v.length();
      targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180);
      this._panLeft(2 * deltaX * targetDistance / element3.clientHeight, this.object.matrix);
      this._panUp(2 * deltaY * targetDistance / element3.clientHeight, this.object.matrix);
    } else if (this.object.isOrthographicCamera) {
      this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element3.clientWidth, this.object.matrix);
      this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element3.clientHeight, this.object.matrix);
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
      this.enablePan = false;
    }
  }
  _dollyOut(dollyScale) {
    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
      this._scale /= dollyScale;
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
      this.enableZoom = false;
    }
  }
  _dollyIn(dollyScale) {
    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
      this._scale *= dollyScale;
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
      this.enableZoom = false;
    }
  }
  _updateZoomParameters(x2, y2) {
    if (!this.zoomToCursor) {
      return;
    }
    this._performCursorZoom = true;
    const rect = this.domElement.getBoundingClientRect();
    const dx = x2 - rect.left;
    const dy = y2 - rect.top;
    const w4 = rect.width;
    const h2 = rect.height;
    this._mouse.x = dx / w4 * 2 - 1;
    this._mouse.y = -(dy / h2) * 2 + 1;
    this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();
  }
  _clampDistance(dist) {
    return Math.max(this.minDistance, Math.min(this.maxDistance, dist));
  }
  //
  // event callbacks - update the object state
  //
  _handleMouseDownRotate(event) {
    this._rotateStart.set(event.clientX, event.clientY);
  }
  _handleMouseDownDolly(event) {
    this._updateZoomParameters(event.clientX, event.clientX);
    this._dollyStart.set(event.clientX, event.clientY);
  }
  _handleMouseDownPan(event) {
    this._panStart.set(event.clientX, event.clientY);
  }
  _handleMouseMoveRotate(event) {
    this._rotateEnd.set(event.clientX, event.clientY);
    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
    const element3 = this.domElement;
    this._rotateLeft(_twoPI * this._rotateDelta.x / element3.clientHeight);
    this._rotateUp(_twoPI * this._rotateDelta.y / element3.clientHeight);
    this._rotateStart.copy(this._rotateEnd);
    this.update();
  }
  _handleMouseMoveDolly(event) {
    this._dollyEnd.set(event.clientX, event.clientY);
    this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);
    if (this._dollyDelta.y > 0) {
      this._dollyOut(this._getZoomScale(this._dollyDelta.y));
    } else if (this._dollyDelta.y < 0) {
      this._dollyIn(this._getZoomScale(this._dollyDelta.y));
    }
    this._dollyStart.copy(this._dollyEnd);
    this.update();
  }
  _handleMouseMovePan(event) {
    this._panEnd.set(event.clientX, event.clientY);
    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
    this._pan(this._panDelta.x, this._panDelta.y);
    this._panStart.copy(this._panEnd);
    this.update();
  }
  _handleMouseWheel(event) {
    this._updateZoomParameters(event.clientX, event.clientY);
    if (event.deltaY < 0) {
      this._dollyIn(this._getZoomScale(event.deltaY));
    } else if (event.deltaY > 0) {
      this._dollyOut(this._getZoomScale(event.deltaY));
    }
    this.update();
  }
  _handleKeyDown(event) {
    let needsUpdate = false;
    switch (event.code) {
      case this.keys.UP:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          if (this.enableRotate) {
            this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
          }
        } else {
          if (this.enablePan) {
            this._pan(0, this.keyPanSpeed);
          }
        }
        needsUpdate = true;
        break;
      case this.keys.BOTTOM:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          if (this.enableRotate) {
            this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
          }
        } else {
          if (this.enablePan) {
            this._pan(0, -this.keyPanSpeed);
          }
        }
        needsUpdate = true;
        break;
      case this.keys.LEFT:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          if (this.enableRotate) {
            this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
          }
        } else {
          if (this.enablePan) {
            this._pan(this.keyPanSpeed, 0);
          }
        }
        needsUpdate = true;
        break;
      case this.keys.RIGHT:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          if (this.enableRotate) {
            this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
          }
        } else {
          if (this.enablePan) {
            this._pan(-this.keyPanSpeed, 0);
          }
        }
        needsUpdate = true;
        break;
    }
    if (needsUpdate) {
      event.preventDefault();
      this.update();
    }
  }
  _handleTouchStartRotate(event) {
    if (this._pointers.length === 1) {
      this._rotateStart.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._rotateStart.set(x2, y2);
    }
  }
  _handleTouchStartPan(event) {
    if (this._pointers.length === 1) {
      this._panStart.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._panStart.set(x2, y2);
    }
  }
  _handleTouchStartDolly(event) {
    const position = this._getSecondPointerPosition(event);
    const dx = event.pageX - position.x;
    const dy = event.pageY - position.y;
    const distance4 = Math.sqrt(dx * dx + dy * dy);
    this._dollyStart.set(0, distance4);
  }
  _handleTouchStartDollyPan(event) {
    if (this.enableZoom)
      this._handleTouchStartDolly(event);
    if (this.enablePan)
      this._handleTouchStartPan(event);
  }
  _handleTouchStartDollyRotate(event) {
    if (this.enableZoom)
      this._handleTouchStartDolly(event);
    if (this.enableRotate)
      this._handleTouchStartRotate(event);
  }
  _handleTouchMoveRotate(event) {
    if (this._pointers.length == 1) {
      this._rotateEnd.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._rotateEnd.set(x2, y2);
    }
    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
    const element3 = this.domElement;
    this._rotateLeft(_twoPI * this._rotateDelta.x / element3.clientHeight);
    this._rotateUp(_twoPI * this._rotateDelta.y / element3.clientHeight);
    this._rotateStart.copy(this._rotateEnd);
  }
  _handleTouchMovePan(event) {
    if (this._pointers.length === 1) {
      this._panEnd.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._panEnd.set(x2, y2);
    }
    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
    this._pan(this._panDelta.x, this._panDelta.y);
    this._panStart.copy(this._panEnd);
  }
  _handleTouchMoveDolly(event) {
    const position = this._getSecondPointerPosition(event);
    const dx = event.pageX - position.x;
    const dy = event.pageY - position.y;
    const distance4 = Math.sqrt(dx * dx + dy * dy);
    this._dollyEnd.set(0, distance4);
    this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));
    this._dollyOut(this._dollyDelta.y);
    this._dollyStart.copy(this._dollyEnd);
    const centerX = (event.pageX + position.x) * 0.5;
    const centerY = (event.pageY + position.y) * 0.5;
    this._updateZoomParameters(centerX, centerY);
  }
  _handleTouchMoveDollyPan(event) {
    if (this.enableZoom)
      this._handleTouchMoveDolly(event);
    if (this.enablePan)
      this._handleTouchMovePan(event);
  }
  _handleTouchMoveDollyRotate(event) {
    if (this.enableZoom)
      this._handleTouchMoveDolly(event);
    if (this.enableRotate)
      this._handleTouchMoveRotate(event);
  }
  // pointers
  _addPointer(event) {
    this._pointers.push(event.pointerId);
  }
  _removePointer(event) {
    delete this._pointerPositions[event.pointerId];
    for (let i2 = 0; i2 < this._pointers.length; i2++) {
      if (this._pointers[i2] == event.pointerId) {
        this._pointers.splice(i2, 1);
        return;
      }
    }
  }
  _isTrackingPointer(event) {
    for (let i2 = 0; i2 < this._pointers.length; i2++) {
      if (this._pointers[i2] == event.pointerId)
        return true;
    }
    return false;
  }
  _trackPointer(event) {
    let position = this._pointerPositions[event.pointerId];
    if (position === void 0) {
      position = new Vector2();
      this._pointerPositions[event.pointerId] = position;
    }
    position.set(event.pageX, event.pageY);
  }
  _getSecondPointerPosition(event) {
    const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];
    return this._pointerPositions[pointerId];
  }
  //
  _customWheelEvent(event) {
    const mode = event.deltaMode;
    const newEvent = {
      clientX: event.clientX,
      clientY: event.clientY,
      deltaY: event.deltaY
    };
    switch (mode) {
      case 1:
        newEvent.deltaY *= 16;
        break;
      case 2:
        newEvent.deltaY *= 100;
        break;
    }
    if (event.ctrlKey && !this._controlActive) {
      newEvent.deltaY *= 10;
    }
    return newEvent;
  }
};
function onPointerDown2(event) {
  if (this.enabled === false)
    return;
  if (this._pointers.length === 0) {
    this.domElement.setPointerCapture(event.pointerId);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
  }
  if (this._isTrackingPointer(event))
    return;
  this._addPointer(event);
  if (event.pointerType === "touch") {
    this._onTouchStart(event);
  } else {
    this._onMouseDown(event);
  }
}
function onPointerMove2(event) {
  if (this.enabled === false)
    return;
  if (event.pointerType === "touch") {
    this._onTouchMove(event);
  } else {
    this._onMouseMove(event);
  }
}
function onPointerUp2(event) {
  this._removePointer(event);
  switch (this._pointers.length) {
    case 0:
      this.domElement.releasePointerCapture(event.pointerId);
      this.domElement.removeEventListener("pointermove", this._onPointerMove);
      this.domElement.removeEventListener("pointerup", this._onPointerUp);
      this.dispatchEvent(_endEvent2);
      this.state = _STATE2.NONE;
      break;
    case 1:
      const pointerId = this._pointers[0];
      const position = this._pointerPositions[pointerId];
      this._onTouchStart({ pointerId, pageX: position.x, pageY: position.y });
      break;
  }
}
function onMouseDown2(event) {
  let mouseAction;
  switch (event.button) {
    case 0:
      mouseAction = this.mouseButtons.LEFT;
      break;
    case 1:
      mouseAction = this.mouseButtons.MIDDLE;
      break;
    case 2:
      mouseAction = this.mouseButtons.RIGHT;
      break;
    default:
      mouseAction = -1;
  }
  switch (mouseAction) {
    case MOUSE.DOLLY:
      if (this.enableZoom === false)
        return;
      this._handleMouseDownDolly(event);
      this.state = _STATE2.DOLLY;
      break;
    case MOUSE.ROTATE:
      if (event.ctrlKey || event.metaKey || event.shiftKey) {
        if (this.enablePan === false)
          return;
        this._handleMouseDownPan(event);
        this.state = _STATE2.PAN;
      } else {
        if (this.enableRotate === false)
          return;
        this._handleMouseDownRotate(event);
        this.state = _STATE2.ROTATE;
      }
      break;
    case MOUSE.PAN:
      if (event.ctrlKey || event.metaKey || event.shiftKey) {
        if (this.enableRotate === false)
          return;
        this._handleMouseDownRotate(event);
        this.state = _STATE2.ROTATE;
      } else {
        if (this.enablePan === false)
          return;
        this._handleMouseDownPan(event);
        this.state = _STATE2.PAN;
      }
      break;
    default:
      this.state = _STATE2.NONE;
  }
  if (this.state !== _STATE2.NONE) {
    this.dispatchEvent(_startEvent2);
  }
}
function onMouseMove2(event) {
  switch (this.state) {
    case _STATE2.ROTATE:
      if (this.enableRotate === false)
        return;
      this._handleMouseMoveRotate(event);
      break;
    case _STATE2.DOLLY:
      if (this.enableZoom === false)
        return;
      this._handleMouseMoveDolly(event);
      break;
    case _STATE2.PAN:
      if (this.enablePan === false)
        return;
      this._handleMouseMovePan(event);
      break;
  }
}
function onMouseWheel2(event) {
  if (this.enabled === false || this.enableZoom === false || this.state !== _STATE2.NONE)
    return;
  event.preventDefault();
  this.dispatchEvent(_startEvent2);
  this._handleMouseWheel(this._customWheelEvent(event));
  this.dispatchEvent(_endEvent2);
}
function onKeyDown2(event) {
  if (this.enabled === false)
    return;
  this._handleKeyDown(event);
}
function onTouchStart2(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      switch (this.touches.ONE) {
        case TOUCH.ROTATE:
          if (this.enableRotate === false)
            return;
          this._handleTouchStartRotate(event);
          this.state = _STATE2.TOUCH_ROTATE;
          break;
        case TOUCH.PAN:
          if (this.enablePan === false)
            return;
          this._handleTouchStartPan(event);
          this.state = _STATE2.TOUCH_PAN;
          break;
        default:
          this.state = _STATE2.NONE;
      }
      break;
    case 2:
      switch (this.touches.TWO) {
        case TOUCH.DOLLY_PAN:
          if (this.enableZoom === false && this.enablePan === false)
            return;
          this._handleTouchStartDollyPan(event);
          this.state = _STATE2.TOUCH_DOLLY_PAN;
          break;
        case TOUCH.DOLLY_ROTATE:
          if (this.enableZoom === false && this.enableRotate === false)
            return;
          this._handleTouchStartDollyRotate(event);
          this.state = _STATE2.TOUCH_DOLLY_ROTATE;
          break;
        default:
          this.state = _STATE2.NONE;
      }
      break;
    default:
      this.state = _STATE2.NONE;
  }
  if (this.state !== _STATE2.NONE) {
    this.dispatchEvent(_startEvent2);
  }
}
function onTouchMove2(event) {
  this._trackPointer(event);
  switch (this.state) {
    case _STATE2.TOUCH_ROTATE:
      if (this.enableRotate === false)
        return;
      this._handleTouchMoveRotate(event);
      this.update();
      break;
    case _STATE2.TOUCH_PAN:
      if (this.enablePan === false)
        return;
      this._handleTouchMovePan(event);
      this.update();
      break;
    case _STATE2.TOUCH_DOLLY_PAN:
      if (this.enableZoom === false && this.enablePan === false)
        return;
      this._handleTouchMoveDollyPan(event);
      this.update();
      break;
    case _STATE2.TOUCH_DOLLY_ROTATE:
      if (this.enableZoom === false && this.enableRotate === false)
        return;
      this._handleTouchMoveDollyRotate(event);
      this.update();
      break;
    default:
      this.state = _STATE2.NONE;
  }
}
function onContextMenu2(event) {
  if (this.enabled === false)
    return;
  event.preventDefault();
}
function interceptControlDown(event) {
  if (event.key === "Control") {
    this._controlActive = true;
    const document2 = this.domElement.getRootNode();
    document2.addEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
  }
}
function interceptControlUp(event) {
  if (event.key === "Control") {
    this._controlActive = false;
    const document2 = this.domElement.getRootNode();
    document2.removeEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
  }
}

// node_modules/three/examples/jsm/controls/FlyControls.js
var _changeEvent3 = { type: "change" };
var _EPS3 = 1e-6;
var _tmpQuaternion = new Quaternion();
var FlyControls = class extends Controls {
  /**
   * Constructs a new controls instance.
   *
   * @param {Object3D} object - The object that is managed by the controls.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(object, domElement = null) {
    super(object, domElement);
    this.movementSpeed = 1;
    this.rollSpeed = 5e-3;
    this.dragToLook = false;
    this.autoForward = false;
    this._moveState = { up: 0, down: 0, left: 0, right: 0, forward: 0, back: 0, pitchUp: 0, pitchDown: 0, yawLeft: 0, yawRight: 0, rollLeft: 0, rollRight: 0 };
    this._moveVector = new Vector3(0, 0, 0);
    this._rotationVector = new Vector3(0, 0, 0);
    this._lastQuaternion = new Quaternion();
    this._lastPosition = new Vector3();
    this._status = 0;
    this._onKeyDown = onKeyDown3.bind(this);
    this._onKeyUp = onKeyUp2.bind(this);
    this._onPointerMove = onPointerMove3.bind(this);
    this._onPointerDown = onPointerDown3.bind(this);
    this._onPointerUp = onPointerUp3.bind(this);
    this._onPointerCancel = onPointerCancel2.bind(this);
    this._onContextMenu = onContextMenu3.bind(this);
    if (domElement !== null) {
      this.connect(domElement);
    }
  }
  connect(element3) {
    super.connect(element3);
    window.addEventListener("keydown", this._onKeyDown);
    window.addEventListener("keyup", this._onKeyUp);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
    this.domElement.addEventListener("pointercancel", this._onPointerCancel);
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
  }
  disconnect() {
    window.removeEventListener("keydown", this._onKeyDown);
    window.removeEventListener("keyup", this._onKeyUp);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerCancel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
  }
  dispose() {
    this.disconnect();
  }
  update(delta) {
    if (this.enabled === false)
      return;
    const object = this.object;
    const moveMult = delta * this.movementSpeed;
    const rotMult = delta * this.rollSpeed;
    object.translateX(this._moveVector.x * moveMult);
    object.translateY(this._moveVector.y * moveMult);
    object.translateZ(this._moveVector.z * moveMult);
    _tmpQuaternion.set(this._rotationVector.x * rotMult, this._rotationVector.y * rotMult, this._rotationVector.z * rotMult, 1).normalize();
    object.quaternion.multiply(_tmpQuaternion);
    if (this._lastPosition.distanceToSquared(object.position) > _EPS3 || 8 * (1 - this._lastQuaternion.dot(object.quaternion)) > _EPS3) {
      this.dispatchEvent(_changeEvent3);
      this._lastQuaternion.copy(object.quaternion);
      this._lastPosition.copy(object.position);
    }
  }
  // private
  _updateMovementVector() {
    const forward = this._moveState.forward || this.autoForward && !this._moveState.back ? 1 : 0;
    this._moveVector.x = -this._moveState.left + this._moveState.right;
    this._moveVector.y = -this._moveState.down + this._moveState.up;
    this._moveVector.z = -forward + this._moveState.back;
  }
  _updateRotationVector() {
    this._rotationVector.x = -this._moveState.pitchDown + this._moveState.pitchUp;
    this._rotationVector.y = -this._moveState.yawRight + this._moveState.yawLeft;
    this._rotationVector.z = -this._moveState.rollRight + this._moveState.rollLeft;
  }
  _getContainerDimensions() {
    if (this.domElement != document) {
      return {
        size: [this.domElement.offsetWidth, this.domElement.offsetHeight],
        offset: [this.domElement.offsetLeft, this.domElement.offsetTop]
      };
    } else {
      return {
        size: [window.innerWidth, window.innerHeight],
        offset: [0, 0]
      };
    }
  }
};
function onKeyDown3(event) {
  if (event.altKey || this.enabled === false) {
    return;
  }
  switch (event.code) {
    case "ShiftLeft":
    case "ShiftRight":
      this.movementSpeedMultiplier = 0.1;
      break;
    case "KeyW":
      this._moveState.forward = 1;
      break;
    case "KeyS":
      this._moveState.back = 1;
      break;
    case "KeyA":
      this._moveState.left = 1;
      break;
    case "KeyD":
      this._moveState.right = 1;
      break;
    case "KeyR":
      this._moveState.up = 1;
      break;
    case "KeyF":
      this._moveState.down = 1;
      break;
    case "ArrowUp":
      this._moveState.pitchUp = 1;
      break;
    case "ArrowDown":
      this._moveState.pitchDown = 1;
      break;
    case "ArrowLeft":
      this._moveState.yawLeft = 1;
      break;
    case "ArrowRight":
      this._moveState.yawRight = 1;
      break;
    case "KeyQ":
      this._moveState.rollLeft = 1;
      break;
    case "KeyE":
      this._moveState.rollRight = 1;
      break;
  }
  this._updateMovementVector();
  this._updateRotationVector();
}
function onKeyUp2(event) {
  if (this.enabled === false)
    return;
  switch (event.code) {
    case "ShiftLeft":
    case "ShiftRight":
      this.movementSpeedMultiplier = 1;
      break;
    case "KeyW":
      this._moveState.forward = 0;
      break;
    case "KeyS":
      this._moveState.back = 0;
      break;
    case "KeyA":
      this._moveState.left = 0;
      break;
    case "KeyD":
      this._moveState.right = 0;
      break;
    case "KeyR":
      this._moveState.up = 0;
      break;
    case "KeyF":
      this._moveState.down = 0;
      break;
    case "ArrowUp":
      this._moveState.pitchUp = 0;
      break;
    case "ArrowDown":
      this._moveState.pitchDown = 0;
      break;
    case "ArrowLeft":
      this._moveState.yawLeft = 0;
      break;
    case "ArrowRight":
      this._moveState.yawRight = 0;
      break;
    case "KeyQ":
      this._moveState.rollLeft = 0;
      break;
    case "KeyE":
      this._moveState.rollRight = 0;
      break;
  }
  this._updateMovementVector();
  this._updateRotationVector();
}
function onPointerDown3(event) {
  if (this.enabled === false)
    return;
  if (this.dragToLook) {
    this._status++;
  } else {
    switch (event.button) {
      case 0:
        this._moveState.forward = 1;
        break;
      case 2:
        this._moveState.back = 1;
        break;
    }
    this._updateMovementVector();
  }
}
function onPointerMove3(event) {
  if (this.enabled === false)
    return;
  if (!this.dragToLook || this._status > 0) {
    const container = this._getContainerDimensions();
    const halfWidth = container.size[0] / 2;
    const halfHeight = container.size[1] / 2;
    this._moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;
    this._moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;
    this._updateRotationVector();
  }
}
function onPointerUp3(event) {
  if (this.enabled === false)
    return;
  if (this.dragToLook) {
    this._status--;
    this._moveState.yawLeft = this._moveState.pitchDown = 0;
  } else {
    switch (event.button) {
      case 0:
        this._moveState.forward = 0;
        break;
      case 2:
        this._moveState.back = 0;
        break;
    }
    this._updateMovementVector();
  }
  this._updateRotationVector();
}
function onPointerCancel2() {
  if (this.enabled === false)
    return;
  if (this.dragToLook) {
    this._status = 0;
    this._moveState.yawLeft = this._moveState.pitchDown = 0;
  } else {
    this._moveState.forward = 0;
    this._moveState.back = 0;
    this._updateMovementVector();
  }
  this._updateRotationVector();
}
function onContextMenu3(event) {
  if (this.enabled === false)
    return;
  event.preventDefault();
}

// node_modules/three/examples/jsm/shaders/CopyShader.js
var CopyShader = {
  name: "CopyShader",
  uniforms: {
    "tDiffuse": { value: null },
    "opacity": { value: 1 }
  },
  vertexShader: (
    /* glsl */
    `

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`
  ),
  fragmentShader: (
    /* glsl */
    `

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`
  )
};

// node_modules/three/examples/jsm/postprocessing/Pass.js
var Pass = class {
  /**
   * Constructs a new pass.
   */
  constructor() {
    this.isPass = true;
    this.enabled = true;
    this.needsSwap = true;
    this.clear = false;
    this.renderToScreen = false;
  }
  /**
   * Sets the size of the pass.
   *
   * @abstract
   * @param {number} width - The width to set.
   * @param {number} height - The height to set.
   */
  setSize() {
  }
  /**
   * This method holds the render logic of a pass. It must be implemented in all derived classes.
   *
   * @abstract
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering
   * destination for the pass.
   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the
   * previous pass from this buffer.
   * @param {number} deltaTime - The delta time in seconds.
   * @param {boolean} maskActive - Whether masking is active or not.
   */
  render() {
    console.error("THREE.Pass: .render() must be implemented in derived pass.");
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever the pass is no longer used in your app.
   *
   * @abstract
   */
  dispose() {
  }
};
var _camera3 = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
var FullscreenTriangleGeometry = class extends BufferGeometry {
  constructor() {
    super();
    this.setAttribute("position", new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
    this.setAttribute("uv", new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));
  }
};
var _geometry2 = new FullscreenTriangleGeometry();
var FullScreenQuad = class {
  /**
   * Constructs a new full screen quad.
   *
   * @param {?Material} material - The material to render te full screen quad with.
   */
  constructor(material) {
    this._mesh = new Mesh(_geometry2, material);
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever the instance is no longer used in your app.
   */
  dispose() {
    this._mesh.geometry.dispose();
  }
  /**
   * Renders the full screen quad.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   */
  render(renderer3) {
    renderer3.render(this._mesh, _camera3);
  }
  /**
   * The quad's material.
   *
   * @type {?Material}
   */
  get material() {
    return this._mesh.material;
  }
  set material(value) {
    this._mesh.material = value;
  }
};

// node_modules/three/examples/jsm/postprocessing/ShaderPass.js
var ShaderPass = class extends Pass {
  /**
   * Constructs a new shader pass.
   *
   * @param {Object|ShaderMaterial} [shader] - A shader object holding vertex and fragment shader as well as
   * defines and uniforms. It's also valid to pass a custom shader material.
   * @param {string} [textureID='tDiffuse'] - The name of the texture uniform that should sample
   * the read buffer.
   */
  constructor(shader, textureID = "tDiffuse") {
    super();
    this.textureID = textureID;
    this.uniforms = null;
    this.material = null;
    if (shader instanceof ShaderMaterial) {
      this.uniforms = shader.uniforms;
      this.material = shader;
    } else if (shader) {
      this.uniforms = UniformsUtils.clone(shader.uniforms);
      this.material = new ShaderMaterial({
        name: shader.name !== void 0 ? shader.name : "unspecified",
        defines: Object.assign({}, shader.defines),
        uniforms: this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader
      });
    }
    this._fsQuad = new FullScreenQuad(this.material);
  }
  /**
   * Performs the shader pass.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering
   * destination for the pass.
   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the
   * previous pass from this buffer.
   * @param {number} deltaTime - The delta time in seconds.
   * @param {boolean} maskActive - Whether masking is active or not.
   */
  render(renderer3, writeBuffer, readBuffer) {
    if (this.uniforms[this.textureID]) {
      this.uniforms[this.textureID].value = readBuffer.texture;
    }
    this._fsQuad.material = this.material;
    if (this.renderToScreen) {
      renderer3.setRenderTarget(null);
      this._fsQuad.render(renderer3);
    } else {
      renderer3.setRenderTarget(writeBuffer);
      if (this.clear)
        renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
      this._fsQuad.render(renderer3);
    }
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever the pass is no longer used in your app.
   */
  dispose() {
    this.material.dispose();
    this._fsQuad.dispose();
  }
};

// node_modules/three/examples/jsm/postprocessing/MaskPass.js
var MaskPass = class extends Pass {
  /**
   * Constructs a new mask pass.
   *
   * @param {Scene} scene - The 3D objects in this scene will define the mask.
   * @param {Camera} camera - The camera.
   */
  constructor(scene3, camera3) {
    super();
    this.scene = scene3;
    this.camera = camera3;
    this.clear = true;
    this.needsSwap = false;
    this.inverse = false;
  }
  /**
   * Performs a mask pass with the configured scene and camera.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering
   * destination for the pass.
   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the
   * previous pass from this buffer.
   * @param {number} deltaTime - The delta time in seconds.
   * @param {boolean} maskActive - Whether masking is active or not.
   */
  render(renderer3, writeBuffer, readBuffer) {
    const context3 = renderer3.getContext();
    const state = renderer3.state;
    state.buffers.color.setMask(false);
    state.buffers.depth.setMask(false);
    state.buffers.color.setLocked(true);
    state.buffers.depth.setLocked(true);
    let writeValue, clearValue;
    if (this.inverse) {
      writeValue = 0;
      clearValue = 1;
    } else {
      writeValue = 1;
      clearValue = 0;
    }
    state.buffers.stencil.setTest(true);
    state.buffers.stencil.setOp(context3.REPLACE, context3.REPLACE, context3.REPLACE);
    state.buffers.stencil.setFunc(context3.ALWAYS, writeValue, 4294967295);
    state.buffers.stencil.setClear(clearValue);
    state.buffers.stencil.setLocked(true);
    renderer3.setRenderTarget(readBuffer);
    if (this.clear)
      renderer3.clear();
    renderer3.render(this.scene, this.camera);
    renderer3.setRenderTarget(writeBuffer);
    if (this.clear)
      renderer3.clear();
    renderer3.render(this.scene, this.camera);
    state.buffers.color.setLocked(false);
    state.buffers.depth.setLocked(false);
    state.buffers.color.setMask(true);
    state.buffers.depth.setMask(true);
    state.buffers.stencil.setLocked(false);
    state.buffers.stencil.setFunc(context3.EQUAL, 1, 4294967295);
    state.buffers.stencil.setOp(context3.KEEP, context3.KEEP, context3.KEEP);
    state.buffers.stencil.setLocked(true);
  }
};
var ClearMaskPass = class extends Pass {
  /**
   * Constructs a new clear mask pass.
   */
  constructor() {
    super();
    this.needsSwap = false;
  }
  /**
   * Performs the clear of the currently defined mask.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering
   * destination for the pass.
   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the
   * previous pass from this buffer.
   * @param {number} deltaTime - The delta time in seconds.
   * @param {boolean} maskActive - Whether masking is active or not.
   */
  render(renderer3) {
    renderer3.state.buffers.stencil.setLocked(false);
    renderer3.state.buffers.stencil.setTest(false);
  }
};

// node_modules/three/examples/jsm/postprocessing/EffectComposer.js
var EffectComposer = class {
  /**
   * Constructs a new effect composer.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} [renderTarget] - This render target and a clone will
   * be used as the internal read and write buffers. If not given, the composer creates
   * the buffers automatically.
   */
  constructor(renderer3, renderTarget) {
    this.renderer = renderer3;
    this._pixelRatio = renderer3.getPixelRatio();
    if (renderTarget === void 0) {
      const size = renderer3.getSize(new Vector2());
      this._width = size.width;
      this._height = size.height;
      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType });
      renderTarget.texture.name = "EffectComposer.rt1";
    } else {
      this._width = renderTarget.width;
      this._height = renderTarget.height;
    }
    this.renderTarget1 = renderTarget;
    this.renderTarget2 = renderTarget.clone();
    this.renderTarget2.texture.name = "EffectComposer.rt2";
    this.writeBuffer = this.renderTarget1;
    this.readBuffer = this.renderTarget2;
    this.renderToScreen = true;
    this.passes = [];
    this.copyPass = new ShaderPass(CopyShader);
    this.copyPass.material.blending = NoBlending;
    this.clock = new Clock();
  }
  /**
   * Swaps the internal read/write buffers.
   */
  swapBuffers() {
    const tmp = this.readBuffer;
    this.readBuffer = this.writeBuffer;
    this.writeBuffer = tmp;
  }
  /**
   * Adds the given pass to the pass chain.
   *
   * @param {Pass} pass - The pass to add.
   */
  addPass(pass3) {
    this.passes.push(pass3);
    pass3.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
  }
  /**
   * Inserts the given pass at a given index.
   *
   * @param {Pass} pass - The pass to insert.
   * @param {number} index - The index into the pass chain.
   */
  insertPass(pass3, index6) {
    this.passes.splice(index6, 0, pass3);
    pass3.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
  }
  /**
   * Removes the given pass from the pass chain.
   *
   * @param {Pass} pass - The pass to remove.
   */
  removePass(pass3) {
    const index6 = this.passes.indexOf(pass3);
    if (index6 !== -1) {
      this.passes.splice(index6, 1);
    }
  }
  /**
   * Returns `true` if the pass for the given index is the last enabled pass in the pass chain.
   *
   * @param {number} passIndex - The pass index.
   * @return {boolean} Whether the pass for the given index is the last pass in the pass chain.
   */
  isLastEnabledPass(passIndex) {
    for (let i2 = passIndex + 1; i2 < this.passes.length; i2++) {
      if (this.passes[i2].enabled) {
        return false;
      }
    }
    return true;
  }
  /**
   * Executes all enabled post-processing passes in order to produce the final frame.
   *
   * @param {number} deltaTime - The delta time in seconds. If not given, the composer computes
   * its own time delta value.
   */
  render(deltaTime3) {
    if (deltaTime3 === void 0) {
      deltaTime3 = this.clock.getDelta();
    }
    const currentRenderTarget = this.renderer.getRenderTarget();
    let maskActive = false;
    for (let i2 = 0, il = this.passes.length; i2 < il; i2++) {
      const pass3 = this.passes[i2];
      if (pass3.enabled === false)
        continue;
      pass3.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i2);
      pass3.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime3, maskActive);
      if (pass3.needsSwap) {
        if (maskActive) {
          const context3 = this.renderer.getContext();
          const stencil = this.renderer.state.buffers.stencil;
          stencil.setFunc(context3.NOTEQUAL, 1, 4294967295);
          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime3);
          stencil.setFunc(context3.EQUAL, 1, 4294967295);
        }
        this.swapBuffers();
      }
      if (MaskPass !== void 0) {
        if (pass3 instanceof MaskPass) {
          maskActive = true;
        } else if (pass3 instanceof ClearMaskPass) {
          maskActive = false;
        }
      }
    }
    this.renderer.setRenderTarget(currentRenderTarget);
  }
  /**
   * Resets the internal state of the EffectComposer.
   *
   * @param {WebGLRenderTarget} [renderTarget] - This render target has the same purpose like
   * the one from the constructor. If set, it is used to setup the read and write buffers.
   */
  reset(renderTarget) {
    if (renderTarget === void 0) {
      const size = this.renderer.getSize(new Vector2());
      this._pixelRatio = this.renderer.getPixelRatio();
      this._width = size.width;
      this._height = size.height;
      renderTarget = this.renderTarget1.clone();
      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
    }
    this.renderTarget1.dispose();
    this.renderTarget2.dispose();
    this.renderTarget1 = renderTarget;
    this.renderTarget2 = renderTarget.clone();
    this.writeBuffer = this.renderTarget1;
    this.readBuffer = this.renderTarget2;
  }
  /**
   * Resizes the internal read and write buffers as well as all passes. Similar to {@link WebGLRenderer#setSize},
   * this method honors the current pixel ration.
   *
   * @param {number} width - The width in logical pixels.
   * @param {number} height - The height in logical pixels.
   */
  setSize(width, height) {
    this._width = width;
    this._height = height;
    const effectiveWidth = this._width * this._pixelRatio;
    const effectiveHeight = this._height * this._pixelRatio;
    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);
    for (let i2 = 0; i2 < this.passes.length; i2++) {
      this.passes[i2].setSize(effectiveWidth, effectiveHeight);
    }
  }
  /**
   * Sets device pixel ratio. This is usually used for HiDPI device to prevent blurring output.
   * Setting the pixel ratio will automatically resize the composer.
   *
   * @param {number} pixelRatio - The pixel ratio to set.
   */
  setPixelRatio(pixelRatio) {
    this._pixelRatio = pixelRatio;
    this.setSize(this._width, this._height);
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever the composer is no longer used in your app.
   */
  dispose() {
    this.renderTarget1.dispose();
    this.renderTarget2.dispose();
    this.copyPass.dispose();
  }
};

// node_modules/three/examples/jsm/postprocessing/RenderPass.js
var RenderPass = class extends Pass {
  /**
   * Constructs a new render pass.
   *
   * @param {Scene} scene - The scene to render.
   * @param {Camera} camera - The camera.
   * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used
   * for all objects in the scene.
   * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.
   * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.
   */
  constructor(scene3, camera3, overrideMaterial = null, clearColor = null, clearAlpha = null) {
    super();
    this.scene = scene3;
    this.camera = camera3;
    this.overrideMaterial = overrideMaterial;
    this.clearColor = clearColor;
    this.clearAlpha = clearAlpha;
    this.clear = true;
    this.clearDepth = false;
    this.needsSwap = false;
    this._oldClearColor = new Color();
  }
  /**
   * Performs a beauty pass with the configured scene and camera.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering
   * destination for the pass.
   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the
   * previous pass from this buffer.
   * @param {number} deltaTime - The delta time in seconds.
   * @param {boolean} maskActive - Whether masking is active or not.
   */
  render(renderer3, writeBuffer, readBuffer) {
    const oldAutoClear = renderer3.autoClear;
    renderer3.autoClear = false;
    let oldClearAlpha, oldOverrideMaterial;
    if (this.overrideMaterial !== null) {
      oldOverrideMaterial = this.scene.overrideMaterial;
      this.scene.overrideMaterial = this.overrideMaterial;
    }
    if (this.clearColor !== null) {
      renderer3.getClearColor(this._oldClearColor);
      renderer3.setClearColor(this.clearColor, renderer3.getClearAlpha());
    }
    if (this.clearAlpha !== null) {
      oldClearAlpha = renderer3.getClearAlpha();
      renderer3.setClearAlpha(this.clearAlpha);
    }
    if (this.clearDepth == true) {
      renderer3.clearDepth();
    }
    renderer3.setRenderTarget(this.renderToScreen ? null : readBuffer);
    if (this.clear === true) {
      renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
    }
    renderer3.render(this.scene, this.camera);
    if (this.clearColor !== null) {
      renderer3.setClearColor(this._oldClearColor);
    }
    if (this.clearAlpha !== null) {
      renderer3.setClearAlpha(oldClearAlpha);
    }
    if (this.overrideMaterial !== null) {
      this.scene.overrideMaterial = oldOverrideMaterial;
    }
    renderer3.autoClear = oldAutoClear;
  }
};

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n2) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var t2 = arguments[e2];
      for (var r2 in t2)
        ({}).hasOwnProperty.call(t2, r2) && (n2[r2] = t2[r2]);
    }
    return n2;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized5(e2) {
  if (void 0 === e2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf5(t2, e2) {
  return _setPrototypeOf5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, _setPrototypeOf5(t2, e2);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t2, o2) {
  t2.prototype = Object.create(o2.prototype), t2.prototype.constructor = t2, _setPrototypeOf5(t2, o2);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf5(t2) {
  return _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf5(t2);
}

// node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(t2) {
  try {
    return -1 !== Function.toString.call(t2).indexOf("[native code]");
  } catch (n2) {
    return "function" == typeof t2;
  }
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct5() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct5 = function _isNativeReflectConstruct6() {
    return !!t2;
  })();
}

// node_modules/@babel/runtime/helpers/esm/construct.js
function _construct2(t2, e2, r2) {
  if (_isNativeReflectConstruct5())
    return Reflect.construct.apply(null, arguments);
  var o2 = [null];
  o2.push.apply(o2, e2);
  var p2 = new (t2.bind.apply(t2, o2))();
  return r2 && _setPrototypeOf5(p2, r2.prototype), p2;
}

// node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js
function _wrapNativeSuper(t2) {
  var r2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return _wrapNativeSuper = function _wrapNativeSuper2(t3) {
    if (null === t3 || !_isNativeFunction(t3))
      return t3;
    if ("function" != typeof t3)
      throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r2) {
      if (r2.has(t3))
        return r2.get(t3);
      r2.set(t3, Wrapper);
    }
    function Wrapper() {
      return _construct2(t3, arguments, _getPrototypeOf5(this).constructor);
    }
    return Wrapper.prototype = Object.create(t3.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }), _setPrototypeOf5(Wrapper, t3);
  }, _wrapNativeSuper(t2);
}

// node_modules/polished/dist/polished.esm.js
var ERRORS = {
  "1": "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",
  "2": "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",
  "3": "Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",
  "4": "Couldn't generate valid rgb string from %s, it returned %s.\n\n",
  "5": "Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",
  "6": "Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",
  "7": "Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",
  "8": "Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",
  "9": "Please provide a number of steps to the modularScale helper.\n\n",
  "10": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "11": 'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n',
  "12": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n',
  "13": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n',
  "14": 'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "15": 'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "16": "You must provide a template to this method.\n\n",
  "17": "You passed an unsupported selector state to this method.\n\n",
  "18": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "19": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "20": "expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "21": "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "22": "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "23": "fontFace expects a name of a font-family.\n\n",
  "24": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "25": "fontFace expects localFonts to be an array.\n\n",
  "26": "fontFace expects fileFormats to be an array.\n\n",
  "27": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "28": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "29": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "30": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "31": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",
  "32": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",
  "33": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",
  "34": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "35": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "36": "Property must be a string value.\n\n",
  "37": "Syntax Error at %s.\n\n",
  "38": "Formula contains a function that needs parentheses at %s.\n\n",
  "39": "Formula is missing closing parenthesis at %s.\n\n",
  "40": "Formula has too many closing parentheses at %s.\n\n",
  "41": "All values in a formula must have the same unit or be unitless.\n\n",
  "42": "Please provide a number of steps to the modularScale helper.\n\n",
  "43": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "44": "Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",
  "45": "Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",
  "46": "Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",
  "47": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "48": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "49": "Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "50": "Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",
  "51": "Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",
  "52": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "53": "fontFace expects localFonts to be an array.\n\n",
  "54": "fontFace expects fileFormats to be an array.\n\n",
  "55": "fontFace expects a name of a font-family.\n\n",
  "56": "linearGradient requries at least 2 color-stops to properly render.\n\n",
  "57": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "58": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "59": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "60": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "61": "Property must be a string value.\n\n",
  "62": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "63": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "64": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",
  "65": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",
  "66": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",
  "67": "You must provide a template to this method.\n\n",
  "68": "You passed an unsupported selector state to this method.\n\n",
  "69": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n',
  "70": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n',
  "71": 'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "72": 'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "73": "Please provide a valid CSS variable.\n\n",
  "74": "CSS variable not found and no default was provided.\n\n",
  "75": "important requires a valid style object, got a %s instead.\n\n",
  "76": "fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",
  "77": 'remToPx expects a value in "rem" but you provided it in "%s".\n\n',
  "78": 'base must be set in "px" or "%" but you set it in "%s".\n'
};
function format() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var a2 = args[0];
  var b = [];
  var c2;
  for (c2 = 1; c2 < args.length; c2 += 1) {
    b.push(args[c2]);
  }
  b.forEach(function(d2) {
    a2 = a2.replace(/%[a-z]/, d2);
  });
  return a2;
}
var PolishedError = function(_Error) {
  _inheritsLoose(PolishedError2, _Error);
  function PolishedError2(code3) {
    var _this;
    if (false) {
      _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code3 + " for more information.") || this;
    } else {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      _this = _Error.call(this, format.apply(void 0, [ERRORS[code3]].concat(args))) || this;
    }
    return _assertThisInitialized5(_this);
  }
  return PolishedError2;
}(_wrapNativeSuper(Error));
function endsWith(string3, suffix) {
  return string3.substr(-suffix.length) === suffix;
}
var cssRegex$1 = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/;
function stripUnit(value) {
  if (typeof value !== "string")
    return value;
  var matchedValue = value.match(cssRegex$1);
  return matchedValue ? parseFloat(value) : value;
}
var pxtoFactory = function pxtoFactory2(to) {
  return function(pxval, base) {
    if (base === void 0) {
      base = "16px";
    }
    var newPxval = pxval;
    var newBase = base;
    if (typeof pxval === "string") {
      if (!endsWith(pxval, "px")) {
        throw new PolishedError(69, to, pxval);
      }
      newPxval = stripUnit(pxval);
    }
    if (typeof base === "string") {
      if (!endsWith(base, "px")) {
        throw new PolishedError(70, to, base);
      }
      newBase = stripUnit(base);
    }
    if (typeof newPxval === "string") {
      throw new PolishedError(71, pxval, to);
    }
    if (typeof newBase === "string") {
      throw new PolishedError(72, base, to);
    }
    return "" + newPxval / newBase + to;
  };
};
var pixelsto = pxtoFactory;
var em = pixelsto("em");
var rem = pixelsto("rem");
function colorToInt(color4) {
  return Math.round(color4 * 255);
}
function convertToInt(red, green, blue) {
  return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
}
function hslToRgb2(hue3, saturation3, lightness, convert3) {
  if (convert3 === void 0) {
    convert3 = convertToInt;
  }
  if (saturation3 === 0) {
    return convert3(lightness, lightness, lightness);
  }
  var huePrime = (hue3 % 360 + 360) % 360 / 60;
  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation3;
  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  var red = 0;
  var green = 0;
  var blue = 0;
  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }
  var lightnessModification = lightness - chroma / 2;
  var finalRed = red + lightnessModification;
  var finalGreen = green + lightnessModification;
  var finalBlue = blue + lightnessModification;
  return convert3(finalRed, finalGreen, finalBlue);
}
var namedColorMap = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "00ffff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "0000ff",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "00ffff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "ff00ff",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "639",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
function nameToHex(color4) {
  if (typeof color4 !== "string")
    return color4;
  var normalizedColorName = color4.toLowerCase();
  return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color4;
}
var hexRegex = /^#[a-fA-F0-9]{6}$/;
var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
var rgbRegex = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i;
var rgbaRegex = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var hslaRegex = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
function parseToRgb(color4) {
  if (typeof color4 !== "string") {
    throw new PolishedError(3);
  }
  var normalizedColor = nameToHex(color4);
  if (normalizedColor.match(hexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
    };
  }
  if (normalizedColor.match(hexRgbaRegex)) {
    var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
      alpha
    };
  }
  if (normalizedColor.match(reducedHexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
    };
  }
  if (normalizedColor.match(reducedRgbaHexRegex)) {
    var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
      alpha: _alpha
    };
  }
  var rgbMatched = rgbRegex.exec(normalizedColor);
  if (rgbMatched) {
    return {
      red: parseInt("" + rgbMatched[1], 10),
      green: parseInt("" + rgbMatched[2], 10),
      blue: parseInt("" + rgbMatched[3], 10)
    };
  }
  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));
  if (rgbaMatched) {
    return {
      red: parseInt("" + rgbaMatched[1], 10),
      green: parseInt("" + rgbaMatched[2], 10),
      blue: parseInt("" + rgbaMatched[3], 10),
      alpha: parseFloat("" + rgbaMatched[4]) > 1 ? parseFloat("" + rgbaMatched[4]) / 100 : parseFloat("" + rgbaMatched[4])
    };
  }
  var hslMatched = hslRegex.exec(normalizedColor);
  if (hslMatched) {
    var hue3 = parseInt("" + hslMatched[1], 10);
    var saturation3 = parseInt("" + hslMatched[2], 10) / 100;
    var lightness = parseInt("" + hslMatched[3], 10) / 100;
    var rgbColorString = "rgb(" + hslToRgb2(hue3, saturation3, lightness) + ")";
    var hslRgbMatched = rgbRegex.exec(rgbColorString);
    if (!hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, rgbColorString);
    }
    return {
      red: parseInt("" + hslRgbMatched[1], 10),
      green: parseInt("" + hslRgbMatched[2], 10),
      blue: parseInt("" + hslRgbMatched[3], 10)
    };
  }
  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));
  if (hslaMatched) {
    var _hue = parseInt("" + hslaMatched[1], 10);
    var _saturation = parseInt("" + hslaMatched[2], 10) / 100;
    var _lightness = parseInt("" + hslaMatched[3], 10) / 100;
    var _rgbColorString = "rgb(" + hslToRgb2(_hue, _saturation, _lightness) + ")";
    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);
    if (!_hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, _rgbColorString);
    }
    return {
      red: parseInt("" + _hslRgbMatched[1], 10),
      green: parseInt("" + _hslRgbMatched[2], 10),
      blue: parseInt("" + _hslRgbMatched[3], 10),
      alpha: parseFloat("" + hslaMatched[4]) > 1 ? parseFloat("" + hslaMatched[4]) / 100 : parseFloat("" + hslaMatched[4])
    };
  }
  throw new PolishedError(5);
}
function rgbToHsl2(color4) {
  var red = color4.red / 255;
  var green = color4.green / 255;
  var blue = color4.blue / 255;
  var max5 = Math.max(red, green, blue);
  var min4 = Math.min(red, green, blue);
  var lightness = (max5 + min4) / 2;
  if (max5 === min4) {
    if (color4.alpha !== void 0) {
      return {
        hue: 0,
        saturation: 0,
        lightness,
        alpha: color4.alpha
      };
    } else {
      return {
        hue: 0,
        saturation: 0,
        lightness
      };
    }
  }
  var hue3;
  var delta = max5 - min4;
  var saturation3 = lightness > 0.5 ? delta / (2 - max5 - min4) : delta / (max5 + min4);
  switch (max5) {
    case red:
      hue3 = (green - blue) / delta + (green < blue ? 6 : 0);
      break;
    case green:
      hue3 = (blue - red) / delta + 2;
      break;
    default:
      hue3 = (red - green) / delta + 4;
      break;
  }
  hue3 *= 60;
  if (color4.alpha !== void 0) {
    return {
      hue: hue3,
      saturation: saturation3,
      lightness,
      alpha: color4.alpha
    };
  }
  return {
    hue: hue3,
    saturation: saturation3,
    lightness
  };
}
function parseToHsl(color4) {
  return rgbToHsl2(parseToRgb(color4));
}
var reduceHexValue = function reduceHexValue2(value) {
  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
    return "#" + value[1] + value[3] + value[5];
  }
  return value;
};
var reduceHexValue$1 = reduceHexValue;
function numberToHex(value) {
  var hex = value.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}
function colorToHex(color4) {
  return numberToHex(Math.round(color4 * 255));
}
function convertToHex(red, green, blue) {
  return reduceHexValue$1("#" + colorToHex(red) + colorToHex(green) + colorToHex(blue));
}
function hslToHex(hue3, saturation3, lightness) {
  return hslToRgb2(hue3, saturation3, lightness, convertToHex);
}
function hsl(value, saturation3, lightness) {
  if (typeof value === "number" && typeof saturation3 === "number" && typeof lightness === "number") {
    return hslToHex(value, saturation3, lightness);
  } else if (typeof value === "object" && saturation3 === void 0 && lightness === void 0) {
    return hslToHex(value.hue, value.saturation, value.lightness);
  }
  throw new PolishedError(1);
}
function hsla(value, saturation3, lightness, alpha) {
  if (typeof value === "number" && typeof saturation3 === "number" && typeof lightness === "number" && typeof alpha === "number") {
    return alpha >= 1 ? hslToHex(value, saturation3, lightness) : "rgba(" + hslToRgb2(value, saturation3, lightness) + "," + alpha + ")";
  } else if (typeof value === "object" && saturation3 === void 0 && lightness === void 0 && alpha === void 0) {
    return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : "rgba(" + hslToRgb2(value.hue, value.saturation, value.lightness) + "," + value.alpha + ")";
  }
  throw new PolishedError(2);
}
function rgb(value, green, blue) {
  if (typeof value === "number" && typeof green === "number" && typeof blue === "number") {
    return reduceHexValue$1("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
  } else if (typeof value === "object" && green === void 0 && blue === void 0) {
    return reduceHexValue$1("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
  }
  throw new PolishedError(6);
}
function rgba(firstValue, secondValue, thirdValue, fourthValue) {
  if (typeof firstValue === "string" && typeof secondValue === "number") {
    var rgbValue = parseToRgb(firstValue);
    return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
  } else if (typeof firstValue === "number" && typeof secondValue === "number" && typeof thirdValue === "number" && typeof fourthValue === "number") {
    return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
  } else if (typeof firstValue === "object" && secondValue === void 0 && thirdValue === void 0 && fourthValue === void 0) {
    return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
  }
  throw new PolishedError(7);
}
var isRgb = function isRgb2(color4) {
  return typeof color4.red === "number" && typeof color4.green === "number" && typeof color4.blue === "number" && (typeof color4.alpha !== "number" || typeof color4.alpha === "undefined");
};
var isRgba = function isRgba2(color4) {
  return typeof color4.red === "number" && typeof color4.green === "number" && typeof color4.blue === "number" && typeof color4.alpha === "number";
};
var isHsl = function isHsl2(color4) {
  return typeof color4.hue === "number" && typeof color4.saturation === "number" && typeof color4.lightness === "number" && (typeof color4.alpha !== "number" || typeof color4.alpha === "undefined");
};
var isHsla = function isHsla2(color4) {
  return typeof color4.hue === "number" && typeof color4.saturation === "number" && typeof color4.lightness === "number" && typeof color4.alpha === "number";
};
function toColorString(color4) {
  if (typeof color4 !== "object")
    throw new PolishedError(8);
  if (isRgba(color4))
    return rgba(color4);
  if (isRgb(color4))
    return rgb(color4);
  if (isHsla(color4))
    return hsla(color4);
  if (isHsl(color4))
    return hsl(color4);
  throw new PolishedError(8);
}
function curried(f2, length3, acc) {
  return function fn() {
    var combined = acc.concat(Array.prototype.slice.call(arguments));
    return combined.length >= length3 ? f2.apply(this, combined) : curried(f2, length3, combined);
  };
}
function curry(f2) {
  return curried(f2, f2.length, []);
}
function adjustHue(degree, color4) {
  if (color4 === "transparent")
    return color4;
  var hslColor = parseToHsl(color4);
  return toColorString(_extends({}, hslColor, {
    hue: hslColor.hue + parseFloat(degree)
  }));
}
var curriedAdjustHue = curry(adjustHue);
function guard(lowerBoundary, upperBoundary, value) {
  return Math.max(lowerBoundary, Math.min(upperBoundary, value));
}
function darken2(amount, color4) {
  if (color4 === "transparent")
    return color4;
  var hslColor = parseToHsl(color4);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))
  }));
}
var curriedDarken = curry(darken2);
function desaturate2(amount, color4) {
  if (color4 === "transparent")
    return color4;
  var hslColor = parseToHsl(color4);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))
  }));
}
var curriedDesaturate = curry(desaturate2);
function lighten2(amount, color4) {
  if (color4 === "transparent")
    return color4;
  var hslColor = parseToHsl(color4);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))
  }));
}
var curriedLighten = curry(lighten2);
function mix3(weight, color4, otherColor) {
  if (color4 === "transparent")
    return otherColor;
  if (otherColor === "transparent")
    return color4;
  if (weight === 0)
    return otherColor;
  var parsedColor1 = parseToRgb(color4);
  var color1 = _extends({}, parsedColor1, {
    alpha: typeof parsedColor1.alpha === "number" ? parsedColor1.alpha : 1
  });
  var parsedColor2 = parseToRgb(otherColor);
  var color22 = _extends({}, parsedColor2, {
    alpha: typeof parsedColor2.alpha === "number" ? parsedColor2.alpha : 1
  });
  var alphaDelta = color1.alpha - color22.alpha;
  var x2 = parseFloat(weight) * 2 - 1;
  var y2 = x2 * alphaDelta === -1 ? x2 : x2 + alphaDelta;
  var z2 = 1 + x2 * alphaDelta;
  var weight1 = (y2 / z2 + 1) / 2;
  var weight2 = 1 - weight1;
  var mixedColor = {
    red: Math.floor(color1.red * weight1 + color22.red * weight2),
    green: Math.floor(color1.green * weight1 + color22.green * weight2),
    blue: Math.floor(color1.blue * weight1 + color22.blue * weight2),
    alpha: color1.alpha * parseFloat(weight) + color22.alpha * (1 - parseFloat(weight))
  };
  return rgba(mixedColor);
}
var curriedMix = curry(mix3);
var mix$1 = curriedMix;
function opacify(amount, color4) {
  if (color4 === "transparent")
    return color4;
  var parsedColor = parseToRgb(color4);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)
  });
  return rgba(colorWithAlpha);
}
var curriedOpacify = curry(opacify);
var curriedOpacify$1 = curriedOpacify;
function saturate4(amount, color4) {
  if (color4 === "transparent")
    return color4;
  var hslColor = parseToHsl(color4);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))
  }));
}
var curriedSaturate = curry(saturate4);
function setHue(hue3, color4) {
  if (color4 === "transparent")
    return color4;
  return toColorString(_extends({}, parseToHsl(color4), {
    hue: parseFloat(hue3)
  }));
}
var curriedSetHue = curry(setHue);
function setLightness(lightness, color4) {
  if (color4 === "transparent")
    return color4;
  return toColorString(_extends({}, parseToHsl(color4), {
    lightness: parseFloat(lightness)
  }));
}
var curriedSetLightness = curry(setLightness);
function setSaturation(saturation3, color4) {
  if (color4 === "transparent")
    return color4;
  return toColorString(_extends({}, parseToHsl(color4), {
    saturation: parseFloat(saturation3)
  }));
}
var curriedSetSaturation = curry(setSaturation);
function shade(percentage, color4) {
  if (color4 === "transparent")
    return color4;
  return mix$1(parseFloat(percentage), "rgb(0, 0, 0)", color4);
}
var curriedShade = curry(shade);
function tint(percentage, color4) {
  if (color4 === "transparent")
    return color4;
  return mix$1(parseFloat(percentage), "rgb(255, 255, 255)", color4);
}
var curriedTint = curry(tint);
function transparentize(amount, color4) {
  if (color4 === "transparent")
    return color4;
  var parsedColor = parseToRgb(color4);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)
  });
  return rgba(colorWithAlpha);
}
var curriedTransparentize = curry(transparentize);

// node_modules/preact/dist/preact.module.js
var n;
var l;
var u;
var t;
var i;
var r;
var o;
var e;
var f;
var c;
var s;
var a;
var h;
var p = {};
var v = [];
var y = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
var w = Array.isArray;
function d(n2, l2) {
  for (var u2 in l2)
    n2[u2] = l2[u2];
  return n2;
}
function g(n2) {
  n2 && n2.parentNode && n2.parentNode.removeChild(n2);
}
function _(l2, u2, t2) {
  var i2, r2, o2, e2 = {};
  for (o2 in u2)
    "key" == o2 ? i2 = u2[o2] : "ref" == o2 ? r2 = u2[o2] : e2[o2] = u2[o2];
  if (arguments.length > 2 && (e2.children = arguments.length > 3 ? n.call(arguments, 2) : t2), "function" == typeof l2 && null != l2.defaultProps)
    for (o2 in l2.defaultProps)
      void 0 === e2[o2] && (e2[o2] = l2.defaultProps[o2]);
  return m(l2, e2, i2, r2, null);
}
function m(n2, t2, i2, r2, o2) {
  var e2 = { type: n2, props: t2, key: i2, ref: r2, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o2 ? ++u : o2, __i: -1, __u: 0 };
  return null == o2 && null != l.vnode && l.vnode(e2), e2;
}
function k(n2) {
  return n2.children;
}
function x(n2, l2) {
  this.props = n2, this.context = l2;
}
function S(n2, l2) {
  if (null == l2)
    return n2.__ ? S(n2.__, n2.__i + 1) : null;
  for (var u2; l2 < n2.__k.length; l2++)
    if (null != (u2 = n2.__k[l2]) && null != u2.__e)
      return u2.__e;
  return "function" == typeof n2.type ? S(n2) : null;
}
function C(n2) {
  var l2, u2;
  if (null != (n2 = n2.__) && null != n2.__c) {
    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++)
      if (null != (u2 = n2.__k[l2]) && null != u2.__e) {
        n2.__e = n2.__c.base = u2.__e;
        break;
      }
    return C(n2);
  }
}
function M(n2) {
  (!n2.__d && (n2.__d = true) && i.push(n2) && !$.__r++ || r != l.debounceRendering) && ((r = l.debounceRendering) || o)($);
}
function $() {
  for (var n2, u2, t2, r2, o2, f2, c2, s2 = 1; i.length; )
    i.length > s2 && i.sort(e), n2 = i.shift(), s2 = i.length, n2.__d && (t2 = void 0, r2 = void 0, o2 = (r2 = (u2 = n2).__v).__e, f2 = [], c2 = [], u2.__P && ((t2 = d({}, r2)).__v = r2.__v + 1, l.vnode && l.vnode(t2), O(u2.__P, t2, r2, u2.__n, u2.__P.namespaceURI, 32 & r2.__u ? [o2] : null, f2, null == o2 ? S(r2) : o2, !!(32 & r2.__u), c2), t2.__v = r2.__v, t2.__.__k[t2.__i] = t2, N2(f2, t2, c2), r2.__e = r2.__ = null, t2.__e != o2 && C(t2)));
  $.__r = 0;
}
function I(n2, l2, u2, t2, i2, r2, o2, e2, f2, c2, s2) {
  var a2, h2, y2, w4, d2, g2, _2, m2 = t2 && t2.__k || v, b = l2.length;
  for (f2 = P(u2, l2, m2, f2, b), a2 = 0; a2 < b; a2++)
    null != (y2 = u2.__k[a2]) && (h2 = -1 == y2.__i ? p : m2[y2.__i] || p, y2.__i = a2, g2 = O(n2, y2, h2, i2, r2, o2, e2, f2, c2, s2), w4 = y2.__e, y2.ref && h2.ref != y2.ref && (h2.ref && B2(h2.ref, null, y2), s2.push(y2.ref, y2.__c || w4, y2)), null == d2 && null != w4 && (d2 = w4), (_2 = !!(4 & y2.__u)) || h2.__k === y2.__k ? f2 = A(y2, f2, n2, _2) : "function" == typeof y2.type && void 0 !== g2 ? f2 = g2 : w4 && (f2 = w4.nextSibling), y2.__u &= -7);
  return u2.__e = d2, f2;
}
function P(n2, l2, u2, t2, i2) {
  var r2, o2, e2, f2, c2, s2 = u2.length, a2 = s2, h2 = 0;
  for (n2.__k = new Array(i2), r2 = 0; r2 < i2; r2++)
    null != (o2 = l2[r2]) && "boolean" != typeof o2 && "function" != typeof o2 ? (f2 = r2 + h2, (o2 = n2.__k[r2] = "string" == typeof o2 || "number" == typeof o2 || "bigint" == typeof o2 || o2.constructor == String ? m(null, o2, null, null, null) : w(o2) ? m(k, { children: o2 }, null, null, null) : null == o2.constructor && o2.__b > 0 ? m(o2.type, o2.props, o2.key, o2.ref ? o2.ref : null, o2.__v) : o2).__ = n2, o2.__b = n2.__b + 1, e2 = null, -1 != (c2 = o2.__i = L(o2, u2, f2, a2)) && (a2--, (e2 = u2[c2]) && (e2.__u |= 2)), null == e2 || null == e2.__v ? (-1 == c2 && (i2 > s2 ? h2-- : i2 < s2 && h2++), "function" != typeof o2.type && (o2.__u |= 4)) : c2 != f2 && (c2 == f2 - 1 ? h2-- : c2 == f2 + 1 ? h2++ : (c2 > f2 ? h2-- : h2++, o2.__u |= 4))) : n2.__k[r2] = null;
  if (a2)
    for (r2 = 0; r2 < s2; r2++)
      null != (e2 = u2[r2]) && 0 == (2 & e2.__u) && (e2.__e == t2 && (t2 = S(e2)), D(e2, e2));
  return t2;
}
function A(n2, l2, u2, t2) {
  var i2, r2;
  if ("function" == typeof n2.type) {
    for (i2 = n2.__k, r2 = 0; i2 && r2 < i2.length; r2++)
      i2[r2] && (i2[r2].__ = n2, l2 = A(i2[r2], l2, u2, t2));
    return l2;
  }
  n2.__e != l2 && (t2 && (l2 && n2.type && !l2.parentNode && (l2 = S(n2)), u2.insertBefore(n2.__e, l2 || null)), l2 = n2.__e);
  do {
    l2 = l2 && l2.nextSibling;
  } while (null != l2 && 8 == l2.nodeType);
  return l2;
}
function L(n2, l2, u2, t2) {
  var i2, r2, o2, e2 = n2.key, f2 = n2.type, c2 = l2[u2], s2 = null != c2 && 0 == (2 & c2.__u);
  if (null === c2 && null == n2.key || s2 && e2 == c2.key && f2 == c2.type)
    return u2;
  if (t2 > (s2 ? 1 : 0)) {
    for (i2 = u2 - 1, r2 = u2 + 1; i2 >= 0 || r2 < l2.length; )
      if (null != (c2 = l2[o2 = i2 >= 0 ? i2-- : r2++]) && 0 == (2 & c2.__u) && e2 == c2.key && f2 == c2.type)
        return o2;
  }
  return -1;
}
function T2(n2, l2, u2) {
  "-" == l2[0] ? n2.setProperty(l2, null == u2 ? "" : u2) : n2[l2] = null == u2 ? "" : "number" != typeof u2 || y.test(l2) ? u2 : u2 + "px";
}
function j(n2, l2, u2, t2, i2) {
  var r2, o2;
  n:
    if ("style" == l2)
      if ("string" == typeof u2)
        n2.style.cssText = u2;
      else {
        if ("string" == typeof t2 && (n2.style.cssText = t2 = ""), t2)
          for (l2 in t2)
            u2 && l2 in u2 || T2(n2.style, l2, "");
        if (u2)
          for (l2 in u2)
            t2 && u2[l2] == t2[l2] || T2(n2.style, l2, u2[l2]);
      }
    else if ("o" == l2[0] && "n" == l2[1])
      r2 = l2 != (l2 = l2.replace(f, "$1")), o2 = l2.toLowerCase(), l2 = o2 in n2 || "onFocusOut" == l2 || "onFocusIn" == l2 ? o2.slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + r2] = u2, u2 ? t2 ? u2.u = t2.u : (u2.u = c, n2.addEventListener(l2, r2 ? a : s, r2)) : n2.removeEventListener(l2, r2 ? a : s, r2);
    else {
      if ("http://www.w3.org/2000/svg" == i2)
        l2 = l2.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if ("width" != l2 && "height" != l2 && "href" != l2 && "list" != l2 && "form" != l2 && "tabIndex" != l2 && "download" != l2 && "rowSpan" != l2 && "colSpan" != l2 && "role" != l2 && "popover" != l2 && l2 in n2)
        try {
          n2[l2] = null == u2 ? "" : u2;
          break n;
        } catch (n3) {
        }
      "function" == typeof u2 || (null == u2 || false === u2 && "-" != l2[4] ? n2.removeAttribute(l2) : n2.setAttribute(l2, "popover" == l2 && 1 == u2 ? "" : u2));
    }
}
function F(n2) {
  return function(u2) {
    if (this.l) {
      var t2 = this.l[u2.type + n2];
      if (null == u2.t)
        u2.t = c++;
      else if (u2.t < t2.u)
        return;
      return t2(l.event ? l.event(u2) : u2);
    }
  };
}
function O(n2, u2, t2, i2, r2, o2, e2, f2, c2, s2) {
  var a2, h2, p2, v2, y2, _2, m2, b, S2, C2, M2, $2, P2, A2, H, L2, T3, j2 = u2.type;
  if (null != u2.constructor)
    return null;
  128 & t2.__u && (c2 = !!(32 & t2.__u), o2 = [f2 = u2.__e = t2.__e]), (a2 = l.__b) && a2(u2);
  n:
    if ("function" == typeof j2)
      try {
        if (b = u2.props, S2 = "prototype" in j2 && j2.prototype.render, C2 = (a2 = j2.contextType) && i2[a2.__c], M2 = a2 ? C2 ? C2.props.value : a2.__ : i2, t2.__c ? m2 = (h2 = u2.__c = t2.__c).__ = h2.__E : (S2 ? u2.__c = h2 = new j2(b, M2) : (u2.__c = h2 = new x(b, M2), h2.constructor = j2, h2.render = E), C2 && C2.sub(h2), h2.props = b, h2.state || (h2.state = {}), h2.context = M2, h2.__n = i2, p2 = h2.__d = true, h2.__h = [], h2._sb = []), S2 && null == h2.__s && (h2.__s = h2.state), S2 && null != j2.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = d({}, h2.__s)), d(h2.__s, j2.getDerivedStateFromProps(b, h2.__s))), v2 = h2.props, y2 = h2.state, h2.__v = u2, p2)
          S2 && null == j2.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), S2 && null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
        else {
          if (S2 && null == j2.getDerivedStateFromProps && b !== v2 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(b, M2), !h2.__e && null != h2.shouldComponentUpdate && false === h2.shouldComponentUpdate(b, h2.__s, M2) || u2.__v == t2.__v) {
            for (u2.__v != t2.__v && (h2.props = b, h2.state = h2.__s, h2.__d = false), u2.__e = t2.__e, u2.__k = t2.__k, u2.__k.some(function(n3) {
              n3 && (n3.__ = u2);
            }), $2 = 0; $2 < h2._sb.length; $2++)
              h2.__h.push(h2._sb[$2]);
            h2._sb = [], h2.__h.length && e2.push(h2);
            break n;
          }
          null != h2.componentWillUpdate && h2.componentWillUpdate(b, h2.__s, M2), S2 && null != h2.componentDidUpdate && h2.__h.push(function() {
            h2.componentDidUpdate(v2, y2, _2);
          });
        }
        if (h2.context = M2, h2.props = b, h2.__P = n2, h2.__e = false, P2 = l.__r, A2 = 0, S2) {
          for (h2.state = h2.__s, h2.__d = false, P2 && P2(u2), a2 = h2.render(h2.props, h2.state, h2.context), H = 0; H < h2._sb.length; H++)
            h2.__h.push(h2._sb[H]);
          h2._sb = [];
        } else
          do {
            h2.__d = false, P2 && P2(u2), a2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;
          } while (h2.__d && ++A2 < 25);
        h2.state = h2.__s, null != h2.getChildContext && (i2 = d(d({}, i2), h2.getChildContext())), S2 && !p2 && null != h2.getSnapshotBeforeUpdate && (_2 = h2.getSnapshotBeforeUpdate(v2, y2)), L2 = a2, null != a2 && a2.type === k && null == a2.key && (L2 = V(a2.props.children)), f2 = I(n2, w(L2) ? L2 : [L2], u2, t2, i2, r2, o2, e2, f2, c2, s2), h2.base = u2.__e, u2.__u &= -161, h2.__h.length && e2.push(h2), m2 && (h2.__E = h2.__ = null);
      } catch (n3) {
        if (u2.__v = null, c2 || null != o2)
          if (n3.then) {
            for (u2.__u |= c2 ? 160 : 128; f2 && 8 == f2.nodeType && f2.nextSibling; )
              f2 = f2.nextSibling;
            o2[o2.indexOf(f2)] = null, u2.__e = f2;
          } else {
            for (T3 = o2.length; T3--; )
              g(o2[T3]);
            z(u2);
          }
        else
          u2.__e = t2.__e, u2.__k = t2.__k, n3.then || z(u2);
        l.__e(n3, u2, t2);
      }
    else
      null == o2 && u2.__v == t2.__v ? (u2.__k = t2.__k, u2.__e = t2.__e) : f2 = u2.__e = q(t2.__e, u2, t2, i2, r2, o2, e2, c2, s2);
  return (a2 = l.diffed) && a2(u2), 128 & u2.__u ? void 0 : f2;
}
function z(n2) {
  n2 && n2.__c && (n2.__c.__e = true), n2 && n2.__k && n2.__k.forEach(z);
}
function N2(n2, u2, t2) {
  for (var i2 = 0; i2 < t2.length; i2++)
    B2(t2[i2], t2[++i2], t2[++i2]);
  l.__c && l.__c(u2, n2), n2.some(function(u3) {
    try {
      n2 = u3.__h, u3.__h = [], n2.some(function(n3) {
        n3.call(u3);
      });
    } catch (n3) {
      l.__e(n3, u3.__v);
    }
  });
}
function V(n2) {
  return "object" != typeof n2 || null == n2 || n2.__b && n2.__b > 0 ? n2 : w(n2) ? n2.map(V) : d({}, n2);
}
function q(u2, t2, i2, r2, o2, e2, f2, c2, s2) {
  var a2, h2, v2, y2, d2, _2, m2, b = i2.props, k2 = t2.props, x2 = t2.type;
  if ("svg" == x2 ? o2 = "http://www.w3.org/2000/svg" : "math" == x2 ? o2 = "http://www.w3.org/1998/Math/MathML" : o2 || (o2 = "http://www.w3.org/1999/xhtml"), null != e2) {
    for (a2 = 0; a2 < e2.length; a2++)
      if ((d2 = e2[a2]) && "setAttribute" in d2 == !!x2 && (x2 ? d2.localName == x2 : 3 == d2.nodeType)) {
        u2 = d2, e2[a2] = null;
        break;
      }
  }
  if (null == u2) {
    if (null == x2)
      return document.createTextNode(k2);
    u2 = document.createElementNS(o2, x2, k2.is && k2), c2 && (l.__m && l.__m(t2, e2), c2 = false), e2 = null;
  }
  if (null == x2)
    b === k2 || c2 && u2.data == k2 || (u2.data = k2);
  else {
    if (e2 = e2 && n.call(u2.childNodes), b = i2.props || p, !c2 && null != e2)
      for (b = {}, a2 = 0; a2 < u2.attributes.length; a2++)
        b[(d2 = u2.attributes[a2]).name] = d2.value;
    for (a2 in b)
      if (d2 = b[a2], "children" == a2)
        ;
      else if ("dangerouslySetInnerHTML" == a2)
        v2 = d2;
      else if (!(a2 in k2)) {
        if ("value" == a2 && "defaultValue" in k2 || "checked" == a2 && "defaultChecked" in k2)
          continue;
        j(u2, a2, null, d2, o2);
      }
    for (a2 in k2)
      d2 = k2[a2], "children" == a2 ? y2 = d2 : "dangerouslySetInnerHTML" == a2 ? h2 = d2 : "value" == a2 ? _2 = d2 : "checked" == a2 ? m2 = d2 : c2 && "function" != typeof d2 || b[a2] === d2 || j(u2, a2, d2, b[a2], o2);
    if (h2)
      c2 || v2 && (h2.__html == v2.__html || h2.__html == u2.innerHTML) || (u2.innerHTML = h2.__html), t2.__k = [];
    else if (v2 && (u2.innerHTML = ""), I("template" == t2.type ? u2.content : u2, w(y2) ? y2 : [y2], t2, i2, r2, "foreignObject" == x2 ? "http://www.w3.org/1999/xhtml" : o2, e2, f2, e2 ? e2[0] : i2.__k && S(i2, 0), c2, s2), null != e2)
      for (a2 = e2.length; a2--; )
        g(e2[a2]);
    c2 || (a2 = "value", "progress" == x2 && null == _2 ? u2.removeAttribute("value") : null != _2 && (_2 !== u2[a2] || "progress" == x2 && !_2 || "option" == x2 && _2 != b[a2]) && j(u2, a2, _2, b[a2], o2), a2 = "checked", null != m2 && m2 != u2[a2] && j(u2, a2, m2, b[a2], o2));
  }
  return u2;
}
function B2(n2, u2, t2) {
  try {
    if ("function" == typeof n2) {
      var i2 = "function" == typeof n2.__u;
      i2 && n2.__u(), i2 && null == u2 || (n2.__u = n2(u2));
    } else
      n2.current = u2;
  } catch (n3) {
    l.__e(n3, t2);
  }
}
function D(n2, u2, t2) {
  var i2, r2;
  if (l.unmount && l.unmount(n2), (i2 = n2.ref) && (i2.current && i2.current != n2.__e || B2(i2, null, u2)), null != (i2 = n2.__c)) {
    if (i2.componentWillUnmount)
      try {
        i2.componentWillUnmount();
      } catch (n3) {
        l.__e(n3, u2);
      }
    i2.base = i2.__P = null;
  }
  if (i2 = n2.__k)
    for (r2 = 0; r2 < i2.length; r2++)
      i2[r2] && D(i2[r2], u2, t2 || "function" != typeof n2.type);
  t2 || g(n2.__e), n2.__c = n2.__ = n2.__e = void 0;
}
function E(n2, l2, u2) {
  return this.constructor(n2, u2);
}
function G(u2, t2, i2) {
  var r2, o2, e2, f2;
  t2 == document && (t2 = document.documentElement), l.__ && l.__(u2, t2), o2 = (r2 = "function" == typeof i2) ? null : i2 && i2.__k || t2.__k, e2 = [], f2 = [], O(t2, u2 = (!r2 && i2 || t2).__k = _(k, null, [u2]), o2 || p, p, t2.namespaceURI, !r2 && i2 ? [i2] : o2 ? null : t2.firstChild ? n.call(t2.childNodes) : null, e2, !r2 && i2 ? i2 : o2 ? o2.__e : t2.firstChild, r2, f2), N2(e2, u2, f2);
}
function K(l2, u2, t2) {
  var i2, r2, o2, e2, f2 = d({}, l2.props);
  for (o2 in l2.type && l2.type.defaultProps && (e2 = l2.type.defaultProps), u2)
    "key" == o2 ? i2 = u2[o2] : "ref" == o2 ? r2 = u2[o2] : f2[o2] = void 0 === u2[o2] && null != e2 ? e2[o2] : u2[o2];
  return arguments.length > 2 && (f2.children = arguments.length > 3 ? n.call(arguments, 2) : t2), m(l2.type, f2, i2 || l2.key, r2 || l2.ref, null);
}
n = v.slice, l = { __e: function(n2, l2, u2, t2) {
  for (var i2, r2, o2; l2 = l2.__; )
    if ((i2 = l2.__c) && !i2.__)
      try {
        if ((r2 = i2.constructor) && null != r2.getDerivedStateFromError && (i2.setState(r2.getDerivedStateFromError(n2)), o2 = i2.__d), null != i2.componentDidCatch && (i2.componentDidCatch(n2, t2 || {}), o2 = i2.__d), o2)
          return i2.__E = i2;
      } catch (l3) {
        n2 = l3;
      }
  throw n2;
} }, u = 0, t = function(n2) {
  return null != n2 && null == n2.constructor;
}, x.prototype.setState = function(n2, l2) {
  var u2;
  u2 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof n2 && (n2 = n2(d({}, u2), this.props)), n2 && d(u2, n2), null != n2 && this.__v && (l2 && this._sb.push(l2), M(this));
}, x.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), M(this));
}, x.prototype.render = k, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e = function(n2, l2) {
  return n2.__v.__b - l2.__v.__b;
}, $.__r = 0, f = /(PointerCapture)$|Capture$/i, c = 0, s = F(false), a = F(true), h = 0;

// node_modules/float-tooltip/dist/float-tooltip.mjs
function _arrayLikeToArray10(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles10(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _defineProperty4(e2, r2, t2) {
  return (r2 = _toPropertyKey6(r2)) in e2 ? Object.defineProperty(e2, r2, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r2] = t2, e2;
}
function _iterableToArrayLimit10(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest10() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys2(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e2);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread22(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys2(Object(t2), true).forEach(function(r3) {
      _defineProperty4(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys2(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
function _slicedToArray10(r2, e2) {
  return _arrayWithHoles10(r2) || _iterableToArrayLimit10(r2, e2) || _unsupportedIterableToArray10(r2, e2) || _nonIterableRest10();
}
function _toPrimitive6(t2, r2) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2);
    if ("object" != typeof i2)
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}
function _toPropertyKey6(t2) {
  var i2 = _toPrimitive6(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _typeof2(o2) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof2(o2);
}
function _unsupportedIterableToArray10(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray10(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray10(r2, a2) : void 0;
  }
}
var _reactElement2VNode = function reactElement2VNode(el) {
  if (!(_typeof2(el) === "object"))
    return el;
  var res = K(el);
  if (res.props) {
    var _res$props;
    res.props = _objectSpread22({}, res.props);
    if (res !== null && res !== void 0 && (_res$props = res.props) !== null && _res$props !== void 0 && _res$props.children) {
      res.props.children = Array.isArray(res.props.children) ? res.props.children.map(_reactElement2VNode) : _reactElement2VNode(res.props.children);
    }
  }
  return res;
};
var isReactRenderable = function isReactRenderable2(o2) {
  return t(K(o2));
};
var render = function render2(jsx, domEl) {
  delete domEl.__k;
  G(_reactElement2VNode(jsx), domEl);
};
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = ".float-tooltip-kap {\n  position: absolute;\n  width: max-content; /* prevent shrinking near right edge */\n  max-width: max(50%, 150px);\n  padding: 3px 5px;\n  border-radius: 3px;\n  font: 12px sans-serif;\n  color: #eee;\n  background: rgba(0,0,0,0.6);\n  pointer-events: none;\n}\n";
styleInject(css_248z);
var index5 = index2({
  props: {
    content: {
      "default": false
    },
    offsetX: {
      triggerUpdate: false
    },
    // null or number
    offsetY: {
      triggerUpdate: false
    }
    // null or number
  },
  init: function init17(domNode, state) {
    var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style;
    var isD3Selection = !!domNode && _typeof2(domNode) === "object" && !!domNode.node && typeof domNode.node === "function";
    var el = select_default(isD3Selection ? domNode.node() : domNode);
    el.style("position") === "static" && el.style("position", "relative");
    state.tooltipEl = el.append("div").attr("class", "float-tooltip-kap");
    Object.entries(style).forEach(function(_ref2) {
      var _ref3 = _slicedToArray10(_ref2, 2), k2 = _ref3[0], v2 = _ref3[1];
      return state.tooltipEl.style(k2, v2);
    });
    state.tooltipEl.style("left", "-10000px").style("display", "none");
    var evSuffix = "tooltip-".concat(Math.round(Math.random() * 1e12));
    state.mouseInside = false;
    el.on("mousemove.".concat(evSuffix), function(ev) {
      state.mouseInside = true;
      var mousePos = pointer_default(ev);
      var domNode2 = el.node();
      var canvasWidth = domNode2.offsetWidth;
      var canvasHeight = domNode2.offsetHeight;
      var translate = [state.offsetX === null || state.offsetX === void 0 ? "-".concat(mousePos[0] / canvasWidth * 100, "%") : typeof state.offsetX === "number" ? "calc(-50% + ".concat(state.offsetX, "px)") : state.offsetX, state.offsetY === null || state.offsetY === void 0 ? canvasHeight > 130 && canvasHeight - mousePos[1] < 100 ? "calc(-100% - 6px)" : "21px" : typeof state.offsetY === "number" ? state.offsetY < 0 ? "calc(-100% - ".concat(Math.abs(state.offsetY), "px)") : "".concat(state.offsetY, "px") : state.offsetY];
      state.tooltipEl.style("left", mousePos[0] + "px").style("top", mousePos[1] + "px").style("transform", "translate(".concat(translate.join(","), ")"));
      state.content && state.tooltipEl.style("display", "inline");
    });
    el.on("mouseover.".concat(evSuffix), function() {
      state.mouseInside = true;
      state.content && state.tooltipEl.style("display", "inline");
    });
    el.on("mouseout.".concat(evSuffix), function() {
      state.mouseInside = false;
      state.tooltipEl.style("display", "none");
    });
  },
  update: function update18(state) {
    state.tooltipEl.style("display", !!state.content && state.mouseInside ? "inline" : "none");
    if (!state.content) {
      state.tooltipEl.text("");
    } else if (state.content instanceof HTMLElement) {
      state.tooltipEl.text("");
      state.tooltipEl.append(function() {
        return state.content;
      });
    } else if (typeof state.content === "string") {
      state.tooltipEl.html(state.content);
    } else if (isReactRenderable(state.content)) {
      state.tooltipEl.text("");
      render(state.content, state.tooltipEl.node());
    } else {
      state.tooltipEl.style("display", "none");
      console.warn("Tooltip content is invalid, skipping.", state.content, state.content.toString());
    }
  }
});

// node_modules/three-render-objects/dist/three-render-objects.mjs
function styleInject2(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z2 = ".scene-nav-info {\n  position: absolute;\n  bottom: 5px;\n  width: 100%;\n  text-align: center;\n  color: slategrey;\n  opacity: 0.7;\n  font-size: 10px;\n  font-family: sans-serif;\n  pointer-events: none;\n  user-select: none;\n}\n\n.scene-container canvas:focus {\n  outline: none;\n}";
styleInject2(css_248z2);
function _arrayLikeToArray11(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithHoles11(r2) {
  if (Array.isArray(r2))
    return r2;
}
function _arrayWithoutHoles9(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray11(r2);
}
function _defineProperty5(e2, r2, t2) {
  return (r2 = _toPropertyKey7(r2)) in e2 ? Object.defineProperty(e2, r2, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r2] = t2, e2;
}
function _iterableToArray9(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _iterableToArrayLimit11(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2)
        ;
      else
        for (; !(f2 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f2 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest11() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread9() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray11(r2, e2) {
  return _arrayWithHoles11(r2) || _iterableToArrayLimit11(r2, e2) || _unsupportedIterableToArray11(r2, e2) || _nonIterableRest11();
}
function _toConsumableArray9(r2) {
  return _arrayWithoutHoles9(r2) || _iterableToArray9(r2) || _unsupportedIterableToArray11(r2) || _nonIterableSpread9();
}
function _toPrimitive7(t2, r2) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2);
    if ("object" != typeof i2)
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}
function _toPropertyKey7(t2) {
  var i2 = _toPrimitive7(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray11(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray11(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray11(r2, a2) : void 0;
  }
}
var three2 = window.THREE ? window.THREE : {
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  Raycaster,
  SRGBColorSpace,
  TextureLoader,
  Vector2,
  Vector3,
  Box3,
  Color,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  BackSide,
  Clock
};
var threeRenderObjects = index2({
  props: {
    width: {
      "default": window.innerWidth,
      onChange: function onChange10(width, state, prevWidth) {
        isNaN(width) && (state.width = prevWidth);
      }
    },
    height: {
      "default": window.innerHeight,
      onChange: function onChange11(height, state, prevHeight) {
        isNaN(height) && (state.height = prevHeight);
      }
    },
    viewOffset: {
      "default": [0, 0]
    },
    backgroundColor: {
      "default": "#000011"
    },
    backgroundImageUrl: {},
    onBackgroundImageLoaded: {},
    showNavInfo: {
      "default": true
    },
    skyRadius: {
      "default": 5e4
    },
    objects: {
      "default": []
    },
    lights: {
      "default": []
    },
    enablePointerInteraction: {
      "default": true,
      onChange: function onChange12(_2, state) {
        state.hoverObj = null;
        state.tooltip && state.tooltip.content(null);
      },
      triggerUpdate: false
    },
    pointerRaycasterThrottleMs: {
      "default": 50,
      triggerUpdate: false
    },
    lineHoverPrecision: {
      "default": 1,
      triggerUpdate: false
    },
    pointsHoverPrecision: {
      "default": 1,
      triggerUpdate: false
    },
    hoverOrderComparator: {
      triggerUpdate: false
    },
    // keep existing order by default
    hoverFilter: {
      "default": function _default24() {
        return true;
      },
      triggerUpdate: false
    },
    // exclude objects from interaction
    tooltipContent: {
      triggerUpdate: false
    },
    hoverDuringDrag: {
      "default": false,
      triggerUpdate: false
    },
    clickAfterDrag: {
      "default": false,
      triggerUpdate: false
    },
    onHover: {
      "default": function _default25() {
      },
      triggerUpdate: false
    },
    onClick: {
      "default": function _default26() {
      },
      triggerUpdate: false
    },
    onRightClick: {
      triggerUpdate: false
    }
  },
  methods: {
    tick: function tick(state) {
      if (state.initialised) {
        state.controls.enabled && state.controls.update && state.controls.update(Math.min(1, state.clock.getDelta()));
        state.postProcessingComposer ? state.postProcessingComposer.render() : state.renderer.render(state.scene, state.camera);
        state.extraRenderers.forEach(function(r2) {
          return r2.render(state.scene, state.camera);
        });
        var now3 = +/* @__PURE__ */ new Date();
        if (state.enablePointerInteraction && now3 - state.lastRaycasterCheck >= state.pointerRaycasterThrottleMs) {
          state.lastRaycasterCheck = now3;
          var topObject = null;
          if (state.hoverDuringDrag || !state.isPointerDragging) {
            var intersects2 = this.intersectingObjects(state.pointerPos.x, state.pointerPos.y);
            state.hoverOrderComparator && intersects2.sort(function(a2, b) {
              return state.hoverOrderComparator(a2.object, b.object);
            });
            var topIntersect = intersects2.find(function(d2) {
              return state.hoverFilter(d2.object);
            }) || null;
            topObject = topIntersect ? topIntersect.object : null;
            state.intersection = topIntersect || null;
          }
          if (topObject !== state.hoverObj) {
            state.onHover(topObject, state.hoverObj, state.intersection);
            state.tooltip.content(topObject ? index3(state.tooltipContent)(topObject, state.intersection) || null : null);
            state.hoverObj = topObject;
          }
        }
        state.tweenGroup.update();
      }
      return this;
    },
    getPointerPos: function getPointerPos(state) {
      var _state$pointerPos = state.pointerPos, x2 = _state$pointerPos.x, y2 = _state$pointerPos.y;
      return {
        x: x2,
        y: y2
      };
    },
    cameraPosition: function cameraPosition3(state, position, lookAt, transitionDuration) {
      var camera3 = state.camera;
      if (position && state.initialised) {
        var finalPos = position;
        var finalLookAt = lookAt || {
          x: 0,
          y: 0,
          z: 0
        };
        if (!transitionDuration) {
          setCameraPos(finalPos);
          setLookAt(finalLookAt);
        } else {
          var camPos = Object.assign({}, camera3.position);
          var camLookAt = getLookAt();
          state.tweenGroup.add(new Tween(camPos).to(finalPos, transitionDuration).easing(Easing.Quadratic.Out).onUpdate(setCameraPos).start());
          state.tweenGroup.add(new Tween(camLookAt).to(finalLookAt, transitionDuration / 3).easing(Easing.Quadratic.Out).onUpdate(setLookAt).start());
        }
        return this;
      }
      return Object.assign({}, camera3.position, {
        lookAt: getLookAt()
      });
      function setCameraPos(pos) {
        var x2 = pos.x, y2 = pos.y, z2 = pos.z;
        if (x2 !== void 0)
          camera3.position.x = x2;
        if (y2 !== void 0)
          camera3.position.y = y2;
        if (z2 !== void 0)
          camera3.position.z = z2;
      }
      function setLookAt(lookAt2) {
        var lookAtVect = new three2.Vector3(lookAt2.x, lookAt2.y, lookAt2.z);
        if (state.controls.enabled && state.controls.target) {
          state.controls.target = lookAtVect;
        } else {
          camera3.lookAt(lookAtVect);
        }
      }
      function getLookAt() {
        return Object.assign(new three2.Vector3(0, 0, -1e3).applyQuaternion(camera3.quaternion).add(camera3.position));
      }
    },
    zoomToFit: function zoomToFit(state) {
      var transitionDuration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var padding = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;
      for (var _len = arguments.length, bboxArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        bboxArgs[_key - 3] = arguments[_key];
      }
      return this.fitToBbox(this.getBbox.apply(this, bboxArgs), transitionDuration, padding);
    },
    fitToBbox: function fitToBbox(state, bbox) {
      var transitionDuration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var padding = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 10;
      var camera3 = state.camera;
      if (bbox) {
        var center = new three2.Vector3(0, 0, 0);
        var maxBoxSide = Math.max.apply(Math, _toConsumableArray9(Object.entries(bbox).map(function(_ref) {
          var _ref2 = _slicedToArray11(_ref, 2), coordType = _ref2[0], coords = _ref2[1];
          return Math.max.apply(Math, _toConsumableArray9(coords.map(function(c2) {
            return Math.abs(center[coordType] - c2);
          })));
        }))) * 2;
        var paddedFov = (1 - padding * 2 / state.height) * camera3.fov;
        var fitHeightDistance = maxBoxSide / Math.atan(paddedFov * Math.PI / 180);
        var fitWidthDistance = fitHeightDistance / camera3.aspect;
        var distance4 = Math.max(fitHeightDistance, fitWidthDistance);
        if (distance4 > 0) {
          var newCameraPosition = center.clone().sub(camera3.position).normalize().multiplyScalar(-distance4);
          this.cameraPosition(newCameraPosition, center, transitionDuration);
        }
      }
      return this;
    },
    getBbox: function getBbox(state) {
      var objFilter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
        return true;
      };
      var box = new three2.Box3(new three2.Vector3(0, 0, 0), new three2.Vector3(0, 0, 0));
      var objs = state.objects.filter(objFilter);
      if (!objs.length)
        return null;
      objs.forEach(function(obj) {
        return box.expandByObject(obj);
      });
      return Object.assign.apply(Object, _toConsumableArray9(["x", "y", "z"].map(function(c2) {
        return _defineProperty5({}, c2, [box.min[c2], box.max[c2]]);
      })));
    },
    getScreenCoords: function getScreenCoords(state, x2, y2, z2) {
      var vec = new three2.Vector3(x2, y2, z2);
      vec.project(this.camera());
      return {
        // align relative pos to canvas dimensions
        x: (vec.x + 1) * state.width / 2,
        y: -(vec.y - 1) * state.height / 2
      };
    },
    getSceneCoords: function getSceneCoords(state, screenX, screenY) {
      var distance4 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var relCoords = new three2.Vector2(screenX / state.width * 2 - 1, -(screenY / state.height) * 2 + 1);
      var raycaster = new three2.Raycaster();
      raycaster.setFromCamera(relCoords, state.camera);
      return Object.assign({}, raycaster.ray.at(distance4, new three2.Vector3()));
    },
    intersectingObjects: function intersectingObjects(state, x2, y2) {
      var relCoords = new three2.Vector2(x2 / state.width * 2 - 1, -(y2 / state.height) * 2 + 1);
      var raycaster = new three2.Raycaster();
      raycaster.params.Line.threshold = state.lineHoverPrecision;
      raycaster.params.Points.threshold = state.pointsHoverPrecision;
      raycaster.setFromCamera(relCoords, state.camera);
      return raycaster.intersectObjects(state.objects, true);
    },
    renderer: function renderer(state) {
      return state.renderer;
    },
    scene: function scene(state) {
      return state.scene;
    },
    camera: function camera(state) {
      return state.camera;
    },
    postProcessingComposer: function postProcessingComposer(state) {
      return state.postProcessingComposer;
    },
    controls: function controls(state) {
      return state.controls;
    },
    tbControls: function tbControls(state) {
      return state.controls;
    }
    // to be deprecated
  },
  stateInit: function stateInit5() {
    return {
      scene: new three2.Scene(),
      camera: new three2.PerspectiveCamera(),
      clock: new three2.Clock(),
      tweenGroup: new Group2(),
      lastRaycasterCheck: 0
    };
  },
  init: function init18(domNode, state) {
    var _ref4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref4$controlType = _ref4.controlType, controlType = _ref4$controlType === void 0 ? "trackball" : _ref4$controlType, _ref4$useWebGPU = _ref4.useWebGPU, useWebGPU = _ref4$useWebGPU === void 0 ? false : _ref4$useWebGPU, _ref4$rendererConfig = _ref4.rendererConfig, rendererConfig = _ref4$rendererConfig === void 0 ? {} : _ref4$rendererConfig, _ref4$extraRenderers = _ref4.extraRenderers, extraRenderers = _ref4$extraRenderers === void 0 ? [] : _ref4$extraRenderers, _ref4$waitForLoadComp = _ref4.waitForLoadComplete, waitForLoadComplete = _ref4$waitForLoadComp === void 0 ? true : _ref4$waitForLoadComp;
    domNode.innerHTML = "";
    domNode.appendChild(state.container = document.createElement("div"));
    state.container.className = "scene-container";
    state.container.style.position = "relative";
    state.container.appendChild(state.navInfo = document.createElement("div"));
    state.navInfo.className = "scene-nav-info";
    state.navInfo.textContent = {
      orbit: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan",
      trackball: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan",
      fly: "WASD: move, R|F: up | down, Q|E: roll, up|down: pitch, left|right: yaw"
    }[controlType] || "";
    state.navInfo.style.display = state.showNavInfo ? null : "none";
    state.tooltip = new index5(state.container);
    state.pointerPos = new three2.Vector2();
    state.pointerPos.x = -2;
    state.pointerPos.y = -2;
    ["pointermove", "pointerdown"].forEach(function(evType) {
      return state.container.addEventListener(evType, function(ev) {
        evType === "pointerdown" && (state.isPointerPressed = true);
        !state.isPointerDragging && ev.type === "pointermove" && (ev.pressure > 0 || state.isPointerPressed) && (ev.pointerType === "mouse" || ev.movementX === void 0 || [ev.movementX, ev.movementY].some(function(m2) {
          return Math.abs(m2) > 1;
        })) && (state.isPointerDragging = true);
        if (state.enablePointerInteraction) {
          var offset = getOffset(state.container);
          state.pointerPos.x = ev.pageX - offset.left;
          state.pointerPos.y = ev.pageY - offset.top;
        }
        function getOffset(el) {
          var rect = el.getBoundingClientRect(), scrollLeft = window.pageXOffset || document.documentElement.scrollLeft, scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          return {
            top: rect.top + scrollTop,
            left: rect.left + scrollLeft
          };
        }
      }, {
        passive: true
      });
    });
    state.container.addEventListener("pointerup", function(ev) {
      if (!state.isPointerPressed)
        return;
      state.isPointerPressed = false;
      if (state.isPointerDragging) {
        state.isPointerDragging = false;
        if (!state.clickAfterDrag)
          return;
      }
      requestAnimationFrame(function() {
        if (ev.button === 0) {
          state.onClick(state.hoverObj || null, ev, state.intersection);
        }
        if (ev.button === 2 && state.onRightClick) {
          state.onRightClick(state.hoverObj || null, ev, state.intersection);
        }
      });
    }, {
      passive: true,
      capture: true
    });
    state.container.addEventListener("contextmenu", function(ev) {
      if (state.onRightClick)
        ev.preventDefault();
    });
    state.renderer = new (useWebGPU ? WebGPURenderer : three2.WebGLRenderer)(Object.assign({
      antialias: true,
      alpha: true
    }, rendererConfig));
    state.renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));
    state.container.appendChild(state.renderer.domElement);
    state.extraRenderers = extraRenderers;
    state.extraRenderers.forEach(function(r2) {
      r2.domElement.style.position = "absolute";
      r2.domElement.style.top = "0px";
      r2.domElement.style.pointerEvents = "none";
      state.container.appendChild(r2.domElement);
    });
    state.postProcessingComposer = new EffectComposer(state.renderer);
    state.postProcessingComposer.addPass(new RenderPass(state.scene, state.camera));
    state.controls = new {
      trackball: TrackballControls,
      orbit: OrbitControls,
      fly: FlyControls
    }[controlType](state.camera, state.renderer.domElement);
    if (controlType === "fly") {
      state.controls.movementSpeed = 300;
      state.controls.rollSpeed = Math.PI / 6;
      state.controls.dragToLook = true;
    }
    if (controlType === "trackball" || controlType === "orbit") {
      state.controls.minDistance = 0.1;
      state.controls.maxDistance = state.skyRadius;
      state.controls.addEventListener("start", function() {
        state.controlsEngaged = true;
      });
      state.controls.addEventListener("change", function() {
        if (state.controlsEngaged) {
          state.controlsDragging = true;
        }
      });
      state.controls.addEventListener("end", function() {
        state.controlsEngaged = false;
        state.controlsDragging = false;
      });
    }
    [state.renderer, state.postProcessingComposer].concat(_toConsumableArray9(state.extraRenderers)).forEach(function(r2) {
      return r2.setSize(state.width, state.height);
    });
    state.camera.aspect = state.width / state.height;
    state.camera.updateProjectionMatrix();
    state.camera.position.z = 1e3;
    state.scene.add(state.skysphere = new three2.Mesh());
    state.skysphere.visible = false;
    state.loadComplete = state.scene.visible = !waitForLoadComplete;
    window.scene = state.scene;
  },
  update: function update19(state, changedProps) {
    if (state.width && state.height && (changedProps.hasOwnProperty("width") || changedProps.hasOwnProperty("height"))) {
      var _state$camera;
      var w4 = state.width;
      var h2 = state.height;
      state.container.style.width = "".concat(w4, "px");
      state.container.style.height = "".concat(h2, "px");
      [state.renderer, state.postProcessingComposer].concat(_toConsumableArray9(state.extraRenderers)).forEach(function(r2) {
        return r2.setSize(w4, h2);
      });
      state.camera.aspect = w4 / h2;
      var o2 = state.viewOffset.slice(0, 2);
      o2.some(function(n2) {
        return n2;
      }) && (_state$camera = state.camera).setViewOffset.apply(_state$camera, [w4, h2].concat(_toConsumableArray9(o2), [w4, h2]));
      state.camera.updateProjectionMatrix();
    }
    if (changedProps.hasOwnProperty("viewOffset")) {
      var _state$camera2;
      var _w = state.width;
      var _h = state.height;
      var _o = state.viewOffset.slice(0, 2);
      _o.some(function(n2) {
        return n2;
      }) ? (_state$camera2 = state.camera).setViewOffset.apply(_state$camera2, [_w, _h].concat(_toConsumableArray9(_o), [_w, _h])) : state.camera.clearViewOffset();
    }
    if (changedProps.hasOwnProperty("skyRadius") && state.skyRadius) {
      state.controls.hasOwnProperty("maxDistance") && changedProps.skyRadius && (state.controls.maxDistance = Math.min(state.controls.maxDistance, state.skyRadius));
      state.camera.far = state.skyRadius * 2.5;
      state.camera.updateProjectionMatrix();
      state.skysphere.geometry = new three2.SphereGeometry(state.skyRadius);
    }
    if (changedProps.hasOwnProperty("backgroundColor")) {
      var alpha = parseToRgb(state.backgroundColor).alpha;
      if (alpha === void 0)
        alpha = 1;
      state.renderer.setClearColor(new three2.Color(curriedOpacify$1(1, state.backgroundColor)), alpha);
    }
    if (changedProps.hasOwnProperty("backgroundImageUrl")) {
      if (!state.backgroundImageUrl) {
        state.skysphere.visible = false;
        state.skysphere.material.map = null;
        !state.loadComplete && finishLoad();
      } else {
        new three2.TextureLoader().load(state.backgroundImageUrl, function(texture3) {
          texture3.colorSpace = three2.SRGBColorSpace;
          state.skysphere.material = new three2.MeshBasicMaterial({
            map: texture3,
            side: three2.BackSide
          });
          state.skysphere.visible = true;
          state.onBackgroundImageLoaded && setTimeout(state.onBackgroundImageLoaded);
          !state.loadComplete && finishLoad();
        });
      }
    }
    changedProps.hasOwnProperty("showNavInfo") && (state.navInfo.style.display = state.showNavInfo ? null : "none");
    if (changedProps.hasOwnProperty("lights")) {
      (changedProps.lights || []).forEach(function(light) {
        return state.scene.remove(light);
      });
      state.lights.forEach(function(light) {
        return state.scene.add(light);
      });
    }
    if (changedProps.hasOwnProperty("objects")) {
      (changedProps.objects || []).forEach(function(obj) {
        return state.scene.remove(obj);
      });
      state.objects.forEach(function(obj) {
        return state.scene.add(obj);
      });
    }
    function finishLoad() {
      state.loadComplete = state.scene.visible = true;
    }
  }
});

// node_modules/globe.gl/dist/globe.gl.mjs
function styleInject3(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z3 = ".scene-container .clickable {\n  cursor: pointer;\n}";
styleInject3(css_248z3);
function _arrayLikeToArray12(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
    n2[e2] = r2[e2];
  return n2;
}
function _arrayWithoutHoles10(r2) {
  if (Array.isArray(r2))
    return _arrayLikeToArray12(r2);
}
function _defineProperty6(e2, r2, t2) {
  return (r2 = _toPropertyKey8(r2)) in e2 ? Object.defineProperty(e2, r2, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r2] = t2, e2;
}
function _iterableToArray10(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"])
    return Array.from(r2);
}
function _nonIterableSpread10() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys3(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e2);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread23(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys3(Object(t2), true).forEach(function(r3) {
      _defineProperty6(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys3(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
function _objectWithoutProperties3(e2, t2) {
  if (null == e2)
    return {};
  var o2, r2, i2 = _objectWithoutPropertiesLoose3(e2, t2);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e2);
    for (r2 = 0; r2 < n2.length; r2++)
      o2 = n2[r2], -1 === t2.indexOf(o2) && {}.propertyIsEnumerable.call(e2, o2) && (i2[o2] = e2[o2]);
  }
  return i2;
}
function _objectWithoutPropertiesLoose3(r2, e2) {
  if (null == r2)
    return {};
  var t2 = {};
  for (var n2 in r2)
    if ({}.hasOwnProperty.call(r2, n2)) {
      if (-1 !== e2.indexOf(n2))
        continue;
      t2[n2] = r2[n2];
    }
  return t2;
}
function _toConsumableArray10(r2) {
  return _arrayWithoutHoles10(r2) || _iterableToArray10(r2) || _unsupportedIterableToArray12(r2) || _nonIterableSpread10();
}
function _toPrimitive8(t2, r2) {
  if ("object" != typeof t2 || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2);
    if ("object" != typeof i2)
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}
function _toPropertyKey8(t2) {
  var i2 = _toPrimitive8(t2, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray12(r2, a2) {
  if (r2) {
    if ("string" == typeof r2)
      return _arrayLikeToArray12(r2, a2);
    var t2 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray12(r2, a2) : void 0;
  }
}
function linkKapsule2(kapsulePropName, kapsuleType) {
  var dummyK = new kapsuleType();
  dummyK._destructor && dummyK._destructor();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange15(v2, state) {
          state[kapsulePropName][prop](v2);
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        var kapsuleInstance = state[kapsulePropName];
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
        return returnVal === kapsuleInstance ? this : returnVal;
      };
    }
  };
}
var _excluded2 = ["rendererConfig", "waitForGlobeReady"];
var THREE4 = _objectSpread23(_objectSpread23({}, window.THREE ? window.THREE : {
  AmbientLight,
  DirectionalLight,
  Vector2,
  REVISION
}), {}, {
  CSS2DRenderer
});
var bindGlobe = linkKapsule2("globe", threeGlobe);
var linkedGlobeProps = Object.assign.apply(Object, _toConsumableArray10(["globeImageUrl", "bumpImageUrl", "globeTileEngineUrl", "globeTileEngineMaxLevel", "globeCurvatureResolution", "showGlobe", "showGraticules", "showAtmosphere", "atmosphereColor", "atmosphereAltitude", "onGlobeReady", "pointsData", "pointLat", "pointLng", "pointColor", "pointAltitude", "pointRadius", "pointResolution", "pointsMerge", "pointsTransitionDuration", "arcsData", "arcStartLat", "arcStartLng", "arcStartAltitude", "arcEndLat", "arcEndLng", "arcEndAltitude", "arcColor", "arcAltitude", "arcAltitudeAutoScale", "arcStroke", "arcCurveResolution", "arcCircularResolution", "arcDashLength", "arcDashGap", "arcDashInitialGap", "arcDashAnimateTime", "arcsTransitionDuration", "polygonsData", "polygonGeoJsonGeometry", "polygonCapColor", "polygonCapMaterial", "polygonSideColor", "polygonSideMaterial", "polygonStrokeColor", "polygonAltitude", "polygonCapCurvatureResolution", "polygonsTransitionDuration", "pathsData", "pathPoints", "pathPointLat", "pathPointLng", "pathPointAlt", "pathResolution", "pathColor", "pathStroke", "pathDashLength", "pathDashGap", "pathDashInitialGap", "pathDashAnimateTime", "pathTransitionDuration", "heatmapsData", "heatmapPoints", "heatmapPointLat", "heatmapPointLng", "heatmapPointWeight", "heatmapBandwidth", "heatmapColorFn", "heatmapColorSaturation", "heatmapBaseAltitude", "heatmapTopAltitude", "heatmapsTransitionDuration", "hexBinPointsData", "hexBinPointLat", "hexBinPointLng", "hexBinPointWeight", "hexBinResolution", "hexMargin", "hexTopCurvatureResolution", "hexTopColor", "hexSideColor", "hexAltitude", "hexBinMerge", "hexTransitionDuration", "hexPolygonsData", "hexPolygonGeoJsonGeometry", "hexPolygonColor", "hexPolygonAltitude", "hexPolygonResolution", "hexPolygonMargin", "hexPolygonUseDots", "hexPolygonCurvatureResolution", "hexPolygonDotResolution", "hexPolygonsTransitionDuration", "tilesData", "tileLat", "tileLng", "tileAltitude", "tileWidth", "tileHeight", "tileUseGlobeProjection", "tileMaterial", "tileCurvatureResolution", "tilesTransitionDuration", "particlesData", "particlesList", "particleLat", "particleLng", "particleAltitude", "particlesSize", "particlesSizeAttenuation", "particlesColor", "particlesTexture", "ringsData", "ringLat", "ringLng", "ringAltitude", "ringColor", "ringResolution", "ringMaxRadius", "ringPropagationSpeed", "ringRepeatPeriod", "labelsData", "labelLat", "labelLng", "labelAltitude", "labelRotation", "labelText", "labelSize", "labelTypeFace", "labelColor", "labelResolution", "labelIncludeDot", "labelDotRadius", "labelDotOrientation", "labelsTransitionDuration", "htmlElementsData", "htmlLat", "htmlLng", "htmlAltitude", "htmlElement", "htmlElementVisibilityModifier", "htmlTransitionDuration", "objectsData", "objectLat", "objectLng", "objectAltitude", "objectRotation", "objectFacesSurface", "objectThreeObject", "customLayerData", "customThreeObject", "customThreeObjectUpdate"].map(function(p2) {
  return _defineProperty6({}, p2, bindGlobe.linkProp(p2));
})));
var linkedGlobeMethods = Object.assign.apply(Object, _toConsumableArray10(["globeMaterial", "getGlobeRadius", "getCoords", "toGeoCoords"].map(function(p2) {
  return _defineProperty6({}, p2, bindGlobe.linkMethod(p2));
})));
var bindRenderObjs = linkKapsule2("renderObjs", threeRenderObjects);
var linkedRenderObjsProps = Object.assign.apply(Object, _toConsumableArray10(["width", "height", "backgroundColor", "backgroundImageUrl", "enablePointerInteraction"].map(function(p2) {
  return _defineProperty6({}, p2, bindRenderObjs.linkProp(p2));
})));
var linkedRenderObjsMethods = Object.assign.apply(Object, _toConsumableArray10(["lights", "postProcessingComposer"].map(function(p2) {
  return _defineProperty6({}, p2, bindRenderObjs.linkMethod(p2));
})));
var globe = index2({
  props: _objectSpread23(_objectSpread23({
    onZoom: {
      triggerUpdate: false
    },
    onGlobeClick: {
      triggerUpdate: false
    },
    onGlobeRightClick: {
      triggerUpdate: false
    },
    pointLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPointClick: {
      triggerUpdate: false
    },
    onPointRightClick: {
      triggerUpdate: false
    },
    onPointHover: {
      triggerUpdate: false
    },
    arcLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onArcClick: {
      triggerUpdate: false
    },
    onArcRightClick: {
      triggerUpdate: false
    },
    onArcHover: {
      triggerUpdate: false
    },
    polygonLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPolygonClick: {
      triggerUpdate: false
    },
    onPolygonRightClick: {
      triggerUpdate: false
    },
    onPolygonHover: {
      triggerUpdate: false
    },
    pathLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPathClick: {
      triggerUpdate: false
    },
    onPathRightClick: {
      triggerUpdate: false
    },
    onPathHover: {
      triggerUpdate: false
    },
    onHeatmapClick: {
      triggerUpdate: false
    },
    onHeatmapRightClick: {
      triggerUpdate: false
    },
    onHeatmapHover: {
      triggerUpdate: false
    },
    hexLabel: {
      triggerUpdate: false
    },
    onHexClick: {
      triggerUpdate: false
    },
    onHexRightClick: {
      triggerUpdate: false
    },
    onHexHover: {
      triggerUpdate: false
    },
    hexPolygonLabel: {
      triggerUpdate: false
    },
    onHexPolygonClick: {
      triggerUpdate: false
    },
    onHexPolygonRightClick: {
      triggerUpdate: false
    },
    onHexPolygonHover: {
      triggerUpdate: false
    },
    tileLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onTileClick: {
      triggerUpdate: false
    },
    onTileRightClick: {
      triggerUpdate: false
    },
    onTileHover: {
      triggerUpdate: false
    },
    particleLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onParticleClick: {
      triggerUpdate: false
    },
    onParticleRightClick: {
      triggerUpdate: false
    },
    onParticleHover: {
      triggerUpdate: false
    },
    labelLabel: {
      triggerUpdate: false
    },
    onLabelClick: {
      triggerUpdate: false
    },
    onLabelRightClick: {
      triggerUpdate: false
    },
    onLabelHover: {
      triggerUpdate: false
    },
    objectLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onObjectClick: {
      triggerUpdate: false
    },
    onObjectRightClick: {
      triggerUpdate: false
    },
    onObjectHover: {
      triggerUpdate: false
    },
    customLayerLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onCustomLayerClick: {
      triggerUpdate: false
    },
    onCustomLayerRightClick: {
      triggerUpdate: false
    },
    onCustomLayerHover: {
      triggerUpdate: false
    },
    pointerEventsFilter: {
      "default": function _default27() {
        return true;
      },
      triggerUpdate: false
    },
    lineHoverPrecision: {
      "default": 0.2,
      triggerUpdate: false,
      onChange: function onChange13(val, state) {
        state.renderObjs.lineHoverPrecision(val);
        state.renderObjs.pointsHoverPrecision(val);
      }
    },
    showPointerCursor: {
      "default": true,
      triggerUpdate: false
    },
    globeOffset: {
      "default": [0, 0],
      triggerUpdate: false,
      onChange: function onChange14(o2, state) {
        return Array.isArray(o2) && o2.length === 2 && state.renderObjs.viewOffset(o2.map(function(v2) {
          return -v2;
        }));
      }
    }
  }, linkedGlobeProps), linkedRenderObjsProps),
  methods: _objectSpread23(_objectSpread23({
    pauseAnimation: function pauseAnimation5(state) {
      var _state$globe;
      if (state.animationFrameRequestId !== null) {
        cancelAnimationFrame(state.animationFrameRequestId);
        state.animationFrameRequestId = null;
      }
      (_state$globe = state.globe) === null || _state$globe === void 0 || _state$globe.pauseAnimation();
      return this;
    },
    resumeAnimation: function resumeAnimation5(state) {
      var _state$globe2;
      if (state.animationFrameRequestId === null) {
        this._animationCycle();
      }
      (_state$globe2 = state.globe) === null || _state$globe2 === void 0 || _state$globe2.resumeAnimation();
      return this;
    },
    _animationCycle: function _animationCycle2(state) {
      state.renderObjs.tick();
      state.tweenGroup.update();
      state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);
    },
    pointOfView: function pointOfView(state) {
      var geoCoords = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var transitionDuration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var curGeoCoords = getGeoCoords();
      if (geoCoords.lat === void 0 && geoCoords.lng === void 0 && geoCoords.altitude === void 0) {
        return curGeoCoords;
      } else {
        var finalGeoCoords = Object.assign({}, curGeoCoords, geoCoords);
        ["lat", "lng", "altitude"].forEach(function(p2) {
          return finalGeoCoords[p2] = +finalGeoCoords[p2];
        });
        if (!transitionDuration) {
          setCameraPos(finalGeoCoords);
        } else {
          while (curGeoCoords.lng - finalGeoCoords.lng > 180)
            curGeoCoords.lng -= 360;
          while (curGeoCoords.lng - finalGeoCoords.lng < -180)
            curGeoCoords.lng += 360;
          state.tweenGroup.add(new Tween(curGeoCoords).to(finalGeoCoords, transitionDuration).easing(Easing.Cubic.InOut).onUpdate(setCameraPos).start());
        }
        return this;
      }
      function getGeoCoords() {
        return state.globe.toGeoCoords(state.renderObjs.cameraPosition());
      }
      function setCameraPos(_ref5) {
        var lat = _ref5.lat, lng = _ref5.lng, altitude = _ref5.altitude;
        state.renderObjs.cameraPosition(state.globe.getCoords(lat, lng, altitude));
        state.globe.setPointOfView(state.renderObjs.camera());
      }
    },
    getScreenCoords: function getScreenCoords2(state) {
      var _state$globe3;
      for (var _len = arguments.length, geoCoords = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        geoCoords[_key - 1] = arguments[_key];
      }
      var cartesianCoords = (_state$globe3 = state.globe).getCoords.apply(_state$globe3, geoCoords);
      return state.renderObjs.getScreenCoords(cartesianCoords.x, cartesianCoords.y, cartesianCoords.z);
    },
    toGlobeCoords: function toGlobeCoords(state, x2, y2) {
      var globeIntersects = state.renderObjs.intersectingObjects(x2, y2).find(function(d2) {
        return (d2.object.__globeObjType || d2.object.parent.__globeObjType) === "globe";
      });
      if (!globeIntersects)
        return null;
      var _state$globe$toGeoCoo = state.globe.toGeoCoords(globeIntersects.point), lat = _state$globe$toGeoCoo.lat, lng = _state$globe$toGeoCoo.lng;
      return {
        lat,
        lng
      };
    },
    scene: function scene2(state) {
      return state.renderObjs.scene();
    },
    // Expose scene
    camera: function camera2(state) {
      return state.renderObjs.camera();
    },
    // Expose camera
    renderer: function renderer2(state) {
      return state.renderObjs.renderer();
    },
    // Expose renderer
    controls: function controls2(state) {
      return state.renderObjs.controls();
    },
    // Expose controls
    _destructor: function _destructor6(state) {
      state.globe._destructor();
      this.pauseAnimation();
      this.pointsData([]);
      this.arcsData([]);
      this.polygonsData([]);
      this.pathsData([]);
      this.heatmapsData([]);
      this.hexBinPointsData([]);
      this.hexPolygonsData([]);
      this.tilesData([]);
      this.particlesData([]);
      this.labelsData([]);
      this.htmlElementsData([]);
      this.objectsData([]);
      this.customLayerData([]);
    }
  }, linkedGlobeMethods), linkedRenderObjsMethods),
  stateInit: function stateInit6(_ref6) {
    var rendererConfig = _ref6.rendererConfig, _ref6$waitForGlobeRea = _ref6.waitForGlobeReady, waitForGlobeReady = _ref6$waitForGlobeRea === void 0 ? true : _ref6$waitForGlobeRea, globeInitConfig = _objectWithoutProperties3(_ref6, _excluded2);
    var globe2 = new threeGlobe(_objectSpread23({
      waitForGlobeReady
    }, globeInitConfig));
    return {
      globe: globe2,
      renderObjs: threeRenderObjects({
        controlType: "orbit",
        rendererConfig,
        waitForLoadComplete: waitForGlobeReady,
        extraRenderers: [new THREE4.CSS2DRenderer()]
        // Used in HTML elements layer
      }).skyRadius(globe2.getGlobeRadius() * 500).showNavInfo(false).objects([globe2]).lights([new THREE4.AmbientLight(13421772, Math.PI), new THREE4.DirectionalLight(16777215, 0.6 * Math.PI)]),
      tweenGroup: new Group2()
    };
  },
  init: function init19(domNode, state) {
    var _this = this;
    domNode.innerHTML = "";
    domNode.appendChild(state.container = document.createElement("div"));
    state.container.style.position = "relative";
    var roDomNode = document.createElement("div");
    state.container.appendChild(roDomNode);
    state.renderObjs(roDomNode);
    state.globe.rendererSize(state.renderObjs.renderer().getSize(new THREE4.Vector2()));
    this.pointOfView({
      altitude: 2.5
    });
    var globeR = state.globe.getGlobeRadius();
    var controls3 = state.renderObjs.controls();
    state.renderObjs.camera().near = 0.05;
    controls3.minDistance = globeR + Math.max(1e-3, state.renderObjs.camera().near * 1.1);
    controls3.maxDistance = globeR * 100;
    controls3.enablePan = false;
    controls3.enableDamping = true;
    controls3.dampingFactor = 0.1;
    controls3.rotateSpeed = 0.3;
    controls3.zoomSpeed = 0.3;
    controls3.zoomToCursor = true;
    controls3.addEventListener("change", function() {
      controls3.target.setScalar(0);
      var pov = _this.pointOfView();
      controls3.rotateSpeed = pov.altitude * 0.3;
      controls3.zoomSpeed = Math.sqrt(pov.altitude) * 0.5;
      state.globe.setPointOfView(state.renderObjs.camera());
      state.onZoom && state.onZoom(pov);
    });
    var getGlobeObj = function getGlobeObj2(object) {
      var obj = object;
      while (obj && !obj.hasOwnProperty("__globeObjType")) {
        obj = obj.parent;
      }
      return obj;
    };
    var dataAccessors = {
      point: function point(d2) {
        return d2;
      },
      arc: function arc(d2) {
        return d2;
      },
      polygon: function polygon(d2) {
        return d2.data;
      },
      path: function path(d2) {
        return d2;
      },
      heatmap: function heatmap(d2) {
        return d2;
      },
      hexbin: function hexbin(d2) {
        return d2;
      },
      hexPolygon: function hexPolygon(d2) {
        return d2;
      },
      tile: function tile(d2) {
        return d2;
      },
      particles: function particles(d2, intersection) {
        return !intersection || !intersection.hasOwnProperty("index") || d2.length <= intersection.index ? d2 : d2[intersection.index];
      },
      label: function label3(d2) {
        return d2;
      },
      object: function object(d2) {
        return d2;
      },
      custom: function custom(d2) {
        return d2;
      }
    };
    THREE4.REVISION < 155 && (state.renderObjs.renderer().useLegacyLights = false);
    state.renderObjs.hoverFilter(function(obj) {
      var o2 = getGlobeObj(obj);
      if (!o2)
        return false;
      var type = o2.__globeObjType;
      if (type !== "globe" && !dataAccessors.hasOwnProperty(type))
        return false;
      var d2 = dataAccessors.hasOwnProperty(type) && o2.__data ? dataAccessors[type](o2.__data) : null;
      if (["points", "hexBinPoints"].some(function(t2) {
        return t2 === type;
      }) && Array.isArray(d2))
        return false;
      return state.pointerEventsFilter(o2, d2);
    }).tooltipContent(function(obj, intersection) {
      var objAccessors = {
        point: state.pointLabel,
        arc: state.arcLabel,
        polygon: state.polygonLabel,
        path: state.pathLabel,
        hexbin: state.hexLabel,
        hexPolygon: state.hexPolygonLabel,
        tile: state.tileLabel,
        particles: state.particleLabel,
        label: state.labelLabel,
        object: state.objectLabel,
        custom: state.customLayerLabel
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj && globeObj.__globeObjType;
      return globeObj && objType && objAccessors.hasOwnProperty(objType) && dataAccessors.hasOwnProperty(objType) ? index3(objAccessors[objType])(dataAccessors[objType](globeObj.__data, intersection)) || "" : "";
    }).onHover(function(obj, _2, intersection) {
      var hoverObjFns = {
        point: state.onPointHover,
        arc: state.onArcHover,
        polygon: state.onPolygonHover,
        path: state.onPathHover,
        heatmap: state.onHeatmapHover,
        hexbin: state.onHexHover,
        hexPolygon: state.onHexPolygonHover,
        tile: state.onTileHover,
        particles: state.onParticleHover,
        label: state.onLabelHover,
        object: state.onObjectHover,
        custom: state.onCustomLayerHover
      };
      var clickObjFns = {
        globe: state.onGlobeClick,
        point: state.onPointClick,
        arc: state.onArcClick,
        polygon: state.onPolygonClick,
        path: state.onPathClick,
        heatmap: state.onHeatmapClick,
        hexbin: state.onHexClick,
        hexPolygon: state.onHexPolygonClick,
        tile: state.onTileClick,
        particles: state.onParticleClick,
        label: state.onLabelClick,
        object: state.onObjectClick,
        custom: state.onCustomLayerClick
      };
      var hoverObj = getGlobeObj(obj);
      hoverObj && !hoverObjFns.hasOwnProperty(hoverObj.__globeObjType) && (hoverObj = null);
      if (hoverObj !== state.hoverObj) {
        var _hoverObj;
        var prevObjType = state.hoverObj ? state.hoverObj.__globeObjType : null;
        var prevObjData = state.hoverData;
        var objType = hoverObj ? hoverObj.__globeObjType : null;
        var objData = (_hoverObj = hoverObj) !== null && _hoverObj !== void 0 && _hoverObj.__data ? dataAccessors[objType](hoverObj.__data, intersection) : null;
        if (prevObjType && prevObjType !== objType) {
          hoverObjFns[prevObjType] && hoverObjFns[prevObjType](null, prevObjData || null);
        }
        if (objType) {
          hoverObjFns[objType] && hoverObjFns[objType](objData, prevObjType === objType ? prevObjData : null);
        }
        state.renderObjs.renderer().domElement.classList[objType && clickObjFns[objType] && index3(state.showPointerCursor)(objType, objData) ? "add" : "remove"]("clickable");
        state.hoverObj = hoverObj;
        state.hoverData = objData;
      }
    }).onClick(function(obj, ev, intersection) {
      if (!obj)
        return;
      var objFns = {
        globe: state.onGlobeClick,
        point: state.onPointClick,
        arc: state.onArcClick,
        polygon: state.onPolygonClick,
        path: state.onPathClick,
        heatmap: state.onHeatmapClick,
        hexbin: state.onHexClick,
        hexPolygon: state.onHexPolygonClick,
        tile: state.onTileClick,
        particles: state.onParticleClick,
        label: state.onLabelClick,
        object: state.onObjectClick,
        custom: state.onCustomLayerClick
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj.__globeObjType;
      if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {
        var args = [ev];
        var point = intersection !== null && intersection !== void 0 && intersection.isVector3 ? intersection : intersection === null || intersection === void 0 ? void 0 : intersection.point;
        if (objType === "globe") {
          var _this$toGeoCoords = _this.toGeoCoords(point), lat = _this$toGeoCoords.lat, lng = _this$toGeoCoords.lng;
          args.unshift({
            lat,
            lng
          });
        } else {
          args.push(_this.toGeoCoords(point));
        }
        dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data, intersection));
        objFns[objType].apply(objFns, args);
      }
    }).onRightClick(function(obj, ev, intersection) {
      if (!obj)
        return;
      var objFns = {
        globe: state.onGlobeRightClick,
        point: state.onPointRightClick,
        arc: state.onArcRightClick,
        polygon: state.onPolygonRightClick,
        path: state.onPathRightClick,
        heatmap: state.onHeatmapRightClick,
        hexbin: state.onHexRightClick,
        hexPolygon: state.onHexPolygonRightClick,
        tile: state.onTileRightClick,
        particles: state.onParticleRightClick,
        label: state.onLabelRightClick,
        object: state.onObjectRightClick,
        custom: state.onCustomLayerRightClick
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj.__globeObjType;
      if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {
        var args = [ev];
        var point = intersection !== null && intersection !== void 0 && intersection.isVector3 ? intersection : intersection === null || intersection === void 0 ? void 0 : intersection.point;
        if (objType === "globe") {
          var _this$toGeoCoords2 = _this.toGeoCoords(point), lat = _this$toGeoCoords2.lat, lng = _this$toGeoCoords2.lng;
          args.unshift({
            lat,
            lng
          });
        } else {
          args.push(_this.toGeoCoords(point));
        }
        dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data, intersection));
        objFns[objType].apply(objFns, args);
      }
    });
    this._animationCycle();
  }
});

// node_modules/react-globe.gl/dist/react-globe.gl.mjs
var import_prop_types = __toESM(require_prop_types(), 1);
var GlobePropTypes = {
  width: import_prop_types.default.number,
  height: import_prop_types.default.number,
  globeOffset: import_prop_types.default.arrayOf(import_prop_types.default.number),
  backgroundColor: import_prop_types.default.string,
  backgroundImageUrl: import_prop_types.default.string,
  globeImageUrl: import_prop_types.default.string,
  bumpImageUrl: import_prop_types.default.string,
  globeTileEngineUrl: import_prop_types.default.func,
  showGlobe: import_prop_types.default.bool,
  showGraticules: import_prop_types.default.bool,
  showAtmosphere: import_prop_types.default.bool,
  atmosphereColor: import_prop_types.default.string,
  atmosphereAltitude: import_prop_types.default.number,
  globeMaterial: import_prop_types.default.object,
  onGlobeReady: import_prop_types.default.func,
  onGlobeClick: import_prop_types.default.func,
  onGlobeRightClick: import_prop_types.default.func,
  pointsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  pointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  pointAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointRadius: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointResolution: import_prop_types.default.number,
  pointsMerge: import_prop_types.default.bool,
  pointsTransitionDuration: import_prop_types.default.number,
  pointLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onPointClick: import_prop_types.default.func,
  onPointRightClick: import_prop_types.default.func,
  onPointHover: import_prop_types.default.func,
  arcsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  arcStartLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcStartLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcEndLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcEndLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.func]),
  arcAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcAltitudeAutoScale: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcStroke: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcCurveResolution: import_prop_types.default.number,
  arcCircularResolution: import_prop_types.default.number,
  arcDashLength: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcDashGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcDashInitialGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcDashAnimateTime: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcsTransitionDuration: import_prop_types.default.number,
  arcLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onArcClick: import_prop_types.default.func,
  onArcRightClick: import_prop_types.default.func,
  onArcHover: import_prop_types.default.func,
  polygonsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  polygonGeoJsonGeometry: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonCapColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonCapMaterial: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  polygonSideColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonSideMaterial: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  polygonStrokeColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  polygonCapCurvatureResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  polygonsTransitionDuration: import_prop_types.default.number,
  polygonLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onPolygonClick: import_prop_types.default.func,
  onPolygonRightClick: import_prop_types.default.func,
  onPolygonHover: import_prop_types.default.func,
  pathsData: import_prop_types.default.array,
  pathPoints: import_prop_types.default.oneOfType([import_prop_types.default.array, import_prop_types.default.string, import_prop_types.default.func]),
  pathPointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathPointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathPointAlt: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathResolution: import_prop_types.default.number,
  pathColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.func]),
  pathStroke: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashLength: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashInitialGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashAnimateTime: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathTransitionDuration: import_prop_types.default.number,
  pathLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onPathClick: import_prop_types.default.func,
  onPathRightClick: import_prop_types.default.func,
  onPathHover: import_prop_types.default.func,
  heatmapsData: import_prop_types.default.array,
  heatmapPoints: import_prop_types.default.oneOfType([import_prop_types.default.array, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapPointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapPointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapPointWeight: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapBandwidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapColorFn: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  heatmapColorSaturation: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapBaseAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapTopAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapsTransitionDuration: import_prop_types.default.number,
  onHeatmapClick: import_prop_types.default.func,
  onHeatmapRightClick: import_prop_types.default.func,
  onHeatmapHover: import_prop_types.default.func,
  hexBinPointsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  hexBinPointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexBinPointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexBinPointWeight: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexBinResolution: import_prop_types.default.number,
  hexMargin: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.func]),
  hexTopColor: import_prop_types.default.func,
  hexSideColor: import_prop_types.default.func,
  hexAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.func]),
  hexTopCurvatureResolution: import_prop_types.default.number,
  hexBinMerge: import_prop_types.default.bool,
  hexTransitionDuration: import_prop_types.default.number,
  hexLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onHexClick: import_prop_types.default.func,
  onHexRightClick: import_prop_types.default.func,
  onHexHover: import_prop_types.default.func,
  hexPolygonsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  hexPolygonGeoJsonGeometry: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonMargin: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonUseDots: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonCurvatureResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonDotResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonsTransitionDuration: import_prop_types.default.number,
  hexPolygonLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onHexPolygonClick: import_prop_types.default.func,
  onHexPolygonRightClick: import_prop_types.default.func,
  onHexPolygonHover: import_prop_types.default.func,
  tilesData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  tileLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileWidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileHeight: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileUseGlobeProjection: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  tileMaterial: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  tileCurvatureResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tilesTransitionDuration: import_prop_types.default.number,
  tileLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onTileClick: import_prop_types.default.func,
  onTileRightClick: import_prop_types.default.func,
  onTileHover: import_prop_types.default.func,
  particlesData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  particlesList: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  particleLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particleLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particleAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particlesSize: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particlesSizeAttenuation: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  particlesColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  particlesTexture: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  particleLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onParticleClick: import_prop_types.default.func,
  onParticleRightClick: import_prop_types.default.func,
  onParticleHover: import_prop_types.default.func,
  ringsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  ringLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.func]),
  ringResolution: import_prop_types.default.number,
  ringMaxRadius: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringPropagationSpeed: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringRepeatPeriod: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  labelLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelRotation: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelText: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  labelSize: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelTypeFace: import_prop_types.default.object,
  labelColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  labelResolution: import_prop_types.default.number,
  labelIncludeDot: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  labelDotRadius: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelDotOrientation: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  labelsTransitionDuration: import_prop_types.default.number,
  labelLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onLabelClick: import_prop_types.default.func,
  onLabelRightClick: import_prop_types.default.func,
  onLabelHover: import_prop_types.default.func,
  htmlElementsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  htmlLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  htmlLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  htmlAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  htmlElement: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  htmlElementVisibilityModifier: import_prop_types.default.func,
  htmlTransitionDuration: import_prop_types.default.number,
  objectsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  objectLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  objectLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  objectAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  objectRotation: import_prop_types.default.oneOfType([import_prop_types.default.shape({
    x: import_prop_types.default.number,
    y: import_prop_types.default.number,
    z: import_prop_types.default.number
  }), import_prop_types.default.string, import_prop_types.default.func]),
  objectFacesSurface: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  objectThreeObject: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  objectLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onObjectClick: import_prop_types.default.func,
  onObjectRightClick: import_prop_types.default.func,
  onObjectHover: import_prop_types.default.func,
  customLayerData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  customThreeObject: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  customThreeObjectUpdate: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  customLayerLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onCustomLayerClick: import_prop_types.default.func,
  onCustomLayerRightClick: import_prop_types.default.func,
  onCustomLayerHover: import_prop_types.default.func,
  enablePointerInteraction: import_prop_types.default.bool,
  pointerEventsFilter: import_prop_types.default.func,
  lineHoverPrecision: import_prop_types.default.number,
  showPointerCursor: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.func]),
  onZoom: import_prop_types.default.func
};
var Globe2 = index(globe, {
  methodNames: [
    // bind methods
    "pauseAnimation",
    "resumeAnimation",
    "pointOfView",
    "lights",
    "scene",
    "camera",
    "renderer",
    "postProcessingComposer",
    "controls",
    "getGlobeRadius",
    "getCoords",
    "getScreenCoords",
    "toGeoCoords",
    "toGlobeCoords"
  ],
  initPropNames: ["animateIn", "waitForGlobeReady", "rendererConfig"]
});
Globe2.displayName = "Globe";
Globe2.propTypes = GlobePropTypes;
export {
  Globe2 as default
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

three/build/three.webgpu.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

three/build/three.tsl.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

three-globe/dist/three-globe.mjs:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE *)
*/
//# sourceMappingURL=react-globe__gl.js.map
